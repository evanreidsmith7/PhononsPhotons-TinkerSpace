
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b74c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049b0  0802b9ec  0802b9ec  0003b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  0803039c  0803039c  0004039c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080303c4  080303c4  000d8ae0  2**0
                  CONTENTS
  5 .ARM          00000000  080303c4  080303c4  000d8ae0  2**0
                  CONTENTS
  6 .preinit_array 00000000  080303c4  080303c4  000d8ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080303c4  080303c4  000403c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080303d8  080303d8  000403d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080303e0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bb78  2400012c  0803050c  0005012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bca4  0803050c  0005bca4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000d8ae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00070bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00070df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      000000c2  00000000  00000000  000d8b0e  2**0
                  CONTENTS, READONLY
 17 .ipc_data     0000004c  30000000  30000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .debug_info   000b1cca  00000000  00000000  000d8bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00014c80  00000000  00000000  0018a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004808  00000000  00000000  0019f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000034d5  00000000  00000000  001a3d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00013125  00000000  00000000  001a71fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000555bf  00000000  00000000  001ba322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001b89f8  00000000  00000000  0020f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00013390  00000000  00000000  003c82dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a1  00000000  00000000  003db66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802b9d4 	.word	0x0802b9d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802b9d4 	.word	0x0802b9d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	; (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000416:	f000 fc17 	bl	8000c48 <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b46      	ldr	r3, [pc, #280]	; (800053c <main+0x12c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x28>
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	60fa      	str	r2, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0x12>
  if ( timeout < 0 )
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x32>
  {
    Error_Handler();
 800043e:	f000 fc4d 	bl	8000cdc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f010 fcad 	bl	8010da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f88b 	bl	8000560 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800044a:	f000 f913 	bl	8000674 <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <main+0x12c>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	4a39      	ldr	r2, [pc, #228]	; (800053c <main+0x12c>)
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x12c>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800046c:	2000      	movs	r0, #0
 800046e:	f011 fbd7 	bl	8011c20 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f011 fbed 	bl	8011c54 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800047a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000480:	bf00      	nop
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <main+0x12c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d104      	bne.n	8000498 <main+0x88>
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	1e5a      	subs	r2, r3, #1
 8000492:	60fa      	str	r2, [r7, #12]
 8000494:	2b00      	cmp	r3, #0
 8000496:	dcf4      	bgt.n	8000482 <main+0x72>
  if ( timeout < 0 )
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da01      	bge.n	80004a2 <main+0x92>
  {
    Error_Handler();
 800049e:	f000 fc1d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <main+0x12c>)
 80004a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004a8:	4a24      	ldr	r2, [pc, #144]	; (800053c <main+0x12c>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x12c>)
 80004b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 fa9e 	bl	8000a00 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004c4:	f000 f9c6 	bl	8000854 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004c8:	f000 fa44 	bl	8000954 <MX_FMC_Init>
  MX_LTDC_Init();
 80004cc:	f000 f93e 	bl	800074c <MX_LTDC_Init>
  MX_CRC_Init();
 80004d0:	f000 f8fc 	bl	80006cc <MX_CRC_Init>
  MX_DMA2D_Init();
 80004d4:	f000 f91c 	bl	8000710 <MX_DMA2D_Init>
  MX_TIM4_Init();
 80004d8:	f000 f9ea 	bl	80008b0 <MX_TIM4_Init>
  MX_TouchGFX_Init();
 80004dc:	f001 f9fd 	bl	80018da <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  TIM4->SMCR &= ~TIM_SMCR_SMS;
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <main+0x130>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	4916      	ldr	r1, [pc, #88]	; (8000540 <main+0x130>)
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x134>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	608b      	str	r3, [r1, #8]
  // only need to set the low 3 bits of SMS
  TIM4->SMCR |= 0b011;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0x130>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <main+0x130>)
 80004f2:	f043 0303 	orr.w	r3, r3, #3
 80004f6:	6093      	str	r3, [r2, #8]

  // set timer channel inputs
  TIM4->CCMR1 |= (0x01 << 0) | (0x01 << 8);
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <main+0x130>)
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	4910      	ldr	r1, [pc, #64]	; (8000540 <main+0x130>)
 80004fe:	f240 1301 	movw	r3, #257	; 0x101
 8000502:	4313      	orrs	r3, r2
 8000504:	618b      	str	r3, [r1, #24]

  // start/enable timer
  TIM4->CR1 |= TIM_CR1_CEN;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x130>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <main+0x130>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000512:	f00a fc29 	bl	800ad68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x138>)
 8000518:	2100      	movs	r1, #0
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x13c>)
 800051c:	f00a fc6e 	bl	800adfc <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <main+0x140>)
 8000524:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <main+0x144>)
 8000528:	2100      	movs	r1, #0
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x148>)
 800052c:	f00a fc66 	bl	800adfc <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <main+0x14c>)
 8000534:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000536:	f00a fc3b 	bl	800adb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x12a>
 800053c:	58024400 	.word	0x58024400
 8000540:	40000800 	.word	0x40000800
 8000544:	fffefff8 	.word	0xfffefff8
 8000548:	0802c788 	.word	0x0802c788
 800054c:	08000c39 	.word	0x08000c39
 8000550:	24000348 	.word	0x24000348
 8000554:	0802c7ac 	.word	0x0802c7ac
 8000558:	080018e7 	.word	0x080018e7
 800055c:	2400034c 	.word	0x2400034c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09c      	sub	sp, #112	; 0x70
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	224c      	movs	r2, #76	; 0x4c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f02a fbb5 	bl	802acde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2220      	movs	r2, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f02a fbaf 	bl	802acde <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000580:	2004      	movs	r0, #4
 8000582:	f012 fed1 	bl	8013328 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <SystemClock_Config+0x108>)
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	4a36      	ldr	r2, [pc, #216]	; (8000668 <SystemClock_Config+0x108>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <SystemClock_Config+0x108>)
 8000598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <SystemClock_Config+0x10c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a31      	ldr	r2, [pc, #196]	; (800066c <SystemClock_Config+0x10c>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <SystemClock_Config+0x10c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0x10c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0x110>)
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0x110>)
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ea:	2305      	movs	r3, #5
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005fe:	2308      	movs	r3, #8
 8000600:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000602:	2300      	movs	r3, #0
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	4618      	mov	r0, r3
 8000610:	f013 fdc6 	bl	80141a0 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800061a:	f000 fb5f 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	233f      	movs	r3, #63	; 0x3f
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800062a:	2308      	movs	r3, #8
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800062e:	2340      	movs	r3, #64	; 0x40
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f014 f9d9 	bl	80149fc <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000650:	f000 fb44 	bl	8000cdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000654:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000658:	2100      	movs	r1, #0
 800065a:	2000      	movs	r0, #0
 800065c:	f014 fb84 	bl	8014d68 <HAL_RCC_MCOConfig>
}
 8000660:	bf00      	nop
 8000662:	3770      	adds	r7, #112	; 0x70
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58000400 	.word	0x58000400
 800066c:	58024800 	.word	0x58024800
 8000670:	58024400 	.word	0x58024400

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b0      	sub	sp, #192	; 0xc0
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	22bc      	movs	r2, #188	; 0xbc
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f02a fb2c 	bl	802acde <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000686:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800068c:	2305      	movs	r3, #5
 800068e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8000694:	230a      	movs	r3, #10
 8000696:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000698:	230a      	movs	r3, #10
 800069a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f014 fdd9 	bl	801526c <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80006c0:	f000 fb0c 	bl	8000cdc <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	37c0      	adds	r7, #192	; 0xc0
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f010 fd49 	bl	801118c <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 faec 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000148 	.word	0x24000148
 800070c:	58024c00 	.word	0x58024c00

08000710 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000716:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <MX_DMA2D_Init+0x38>)
 8000718:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_DMA2D_Init+0x34>)
 800071c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000720:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000724:	2202      	movs	r2, #2
 8000726:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_DMA2D_Init+0x34>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000730:	f010 fe16 	bl	8011360 <HAL_DMA2D_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800073a:	f000 facf 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2400016c 	.word	0x2400016c
 8000748:	52001000 	.word	0x52001000

0800074c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 8000752:	f000 fac9 	bl	8000ce8 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2234      	movs	r2, #52	; 0x34
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f02a fabe 	bl	802acde <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <MX_LTDC_Init+0x100>)
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_LTDC_Init+0x104>)
 8000766:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_LTDC_Init+0x100>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_LTDC_Init+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_LTDC_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_LTDC_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <MX_LTDC_Init+0x100>)
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_LTDC_Init+0x100>)
 8000788:	2209      	movs	r2, #9
 800078a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_LTDC_Init+0x100>)
 800078e:	2235      	movs	r2, #53	; 0x35
 8000790:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_LTDC_Init+0x100>)
 8000794:	220b      	movs	r2, #11
 8000796:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_LTDC_Init+0x100>)
 800079a:	f240 2215 	movw	r2, #533	; 0x215
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_LTDC_Init+0x100>)
 80007a2:	f240 121b 	movw	r2, #283	; 0x11b
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_LTDC_Init+0x100>)
 80007aa:	f240 2235 	movw	r2, #565	; 0x235
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_LTDC_Init+0x100>)
 80007b2:	f240 121d 	movw	r2, #285	; 0x11d
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_LTDC_Init+0x100>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_LTDC_Init+0x100>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_LTDC_Init+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007d0:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_LTDC_Init+0x100>)
 80007d2:	f012 f8ad 	bl	8012930 <HAL_LTDC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 fa7e 	bl	8000cdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000806:	2305      	movs	r3, #5
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800080a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000810:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000816:	f44f 7388 	mov.w	r3, #272	; 0x110
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_LTDC_Init+0x100>)
 8000836:	f012 fa03 	bl	8012c40 <HAL_LTDC_ConfigLayer>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000840:	f000 fa4c 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240001d4 	.word	0x240001d4
 8000850:	50001000 	.word	0x50001000

08000854 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_QUADSPI_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000866:	2201      	movs	r2, #1
 8000868:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800086c:	2210      	movs	r2, #16
 800086e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000872:	221a      	movs	r2, #26
 8000874:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800088c:	f012 fda6 	bl	80133dc <HAL_QSPI_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 fa21 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_QUADSPI_Init+0x58>)
 800089c:	f000 fa98 	bl	8000dd0 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2400027c 	.word	0x2400027c
 80008a8:	52005000 	.word	0x52005000
 80008ac:	08000cdd 	.word	0x08000cdd

080008b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM4_Init+0x9c>)
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_TIM4_Init+0xa0>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM4_Init+0x9c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM4_Init+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM4_Init+0x9c>)
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM4_Init+0x9c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM4_Init+0x9c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <MX_TIM4_Init+0x9c>)
 80008f8:	f015 fe17 	bl	801652a <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000902:	f000 f9eb 	bl	8000cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000906:	2307      	movs	r3, #7
 8000908:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM4_Init+0x9c>)
 800091a:	f015 fff4 	bl	8016906 <HAL_TIM_SlaveConfigSynchro>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000924:	f000 f9da 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM4_Init+0x9c>)
 8000936:	f016 fa55 	bl	8016de4 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000940:	f000 f9cc 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	240002c8 	.word	0x240002c8
 8000950:	40000800 	.word	0x40000800

08000954 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_FMC_Init+0xa0>)
 800096e:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_FMC_Init+0xa4>)
 8000970:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_FMC_Init+0xa0>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000980:	2204      	movs	r2, #4
 8000982:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000986:	2210      	movs	r2, #16
 8000988:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_FMC_Init+0xa0>)
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000996:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_FMC_Init+0xa0>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a4:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80009b8:	2306      	movs	r3, #6
 80009ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80009c0:	2306      	movs	r3, #6
 80009c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009d6:	f015 fcf3 	bl	80163c0 <HAL_SDRAM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e0:	f000 f97c 	bl	8000cdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_FMC_Init+0xa8>)
 80009e6:	f000 fa14 	bl	8000e12 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	24000314 	.word	0x24000314
 80009f8:	52004140 	.word	0x52004140
 80009fc:	08000cdd 	.word	0x08000cdd

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a16:	4b81      	ldr	r3, [pc, #516]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a7f      	ldr	r2, [pc, #508]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b7d      	ldr	r3, [pc, #500]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4b79      	ldr	r3, [pc, #484]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a78      	ldr	r2, [pc, #480]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b75      	ldr	r3, [pc, #468]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a70      	ldr	r2, [pc, #448]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b6e      	ldr	r3, [pc, #440]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a69      	ldr	r2, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b66      	ldr	r3, [pc, #408]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a61      	ldr	r2, [pc, #388]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a52      	ldr	r2, [pc, #328]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a43      	ldr	r2, [pc, #268]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	482e      	ldr	r0, [pc, #184]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000b66:	f011 f841 	bl	8011bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4829      	ldr	r0, [pc, #164]	; (8000c24 <MX_GPIO_Init+0x224>)
 8000b7e:	f010 fd63 	bl	8011648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000ba0:	f010 fd52 	bl	8011648 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0x228>)
 8000bb8:	f010 fd46 	bl	8011648 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MX_GPIO_Init+0x22c>)
 8000bd0:	f010 fd3a 	bl	8011648 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000bd4:	2340      	movs	r3, #64	; 0x40
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000bec:	f010 fd2c 	bl	8011648 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_GPIO_Init+0x230>)
 8000bfc:	f010 fd24 	bl	8011648 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_GPIO_Init+0x234>)
 8000c0e:	f010 fd1b 	bl	8011648 <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020000 	.word	0x58020000
 8000c24:	58022000 	.word	0x58022000
 8000c28:	58021800 	.word	0x58021800
 8000c2c:	58022800 	.word	0x58022800
 8000c30:	58021000 	.word	0x58021000
 8000c34:	58021c00 	.word	0x58021c00

08000c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f00a f96d 	bl	800af20 <osDelay>
 8000c46:	e7fb      	b.n	8000c40 <StartDefaultTask+0x8>

08000c48 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c5a:	f010 fa1b 	bl	8011094 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000c66:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c6a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c6c:	2313      	movs	r3, #19
 8000c6e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f010 fa38 	bl	8011104 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000c98:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000c9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000c9e:	231a      	movs	r3, #26
 8000ca0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f010 fa2d 	bl	8011104 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000caa:	2004      	movs	r0, #4
 8000cac:	f010 fa0a 	bl	80110c4 <HAL_MPU_Enable>

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f010 f8a5 	bl	8010e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000cf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <initLtdcClocks+0xe4>)
 8000db2:	f010 fc49 	bl	8011648 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <initLtdcClocks+0xe4>)
 8000dbc:	f010 ff16 	bl	8011bec <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020c00 	.word	0x58020c00

08000dd0 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f00e ff92 	bl	800fd14 <BSP_QSPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f00f f864 	bl	800fec8 <BSP_QSPI_EnableMemoryMappedMode>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4798      	blx	r3
   }
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f00f fbc2 	bl	80105a4 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f00f fb63 	bl	80104ec <BSP_SDRAM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <initBspSdRam+0x1e>
   {
      error_handler();
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4798      	blx	r3
   }
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_MspInit+0x38>)
 8000e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_MspInit+0x38>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x38>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f06f 0001 	mvn.w	r0, #1
 8000e64:	f010 f8e0 	bl	8011028 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400

08000e74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_CRC_MspInit+0x3c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10e      	bne.n	8000ea4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024c00 	.word	0x58024c00
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_DMA2D_MspInit+0x48>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d116      	bne.n	8000ef8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	205a      	movs	r0, #90	; 0x5a
 8000eee:	f010 f89b 	bl	8011028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ef2:	205a      	movs	r0, #90	; 0x5a
 8000ef4:	f010 f8b2 	bl	801105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	52001000 	.word	0x52001000
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0bc      	sub	sp, #240	; 0xf0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	22bc      	movs	r2, #188	; 0xbc
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f029 fed8 	bl	802acde <memset>
  if(hltdc->Instance==LTDC)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a68      	ldr	r2, [pc, #416]	; (80010d4 <HAL_LTDC_MspInit+0x1cc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f040 80c8 	bne.w	80010ca <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f3e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000f40:	2305      	movs	r3, #5
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000f50:	2353      	movs	r3, #83	; 0x53
 8000f52:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f58:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4618      	mov	r0, r3
 8000f68:	f014 f980 	bl	801526c <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000f72:	f7ff feb3 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000f86:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f94:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800100c:	23fc      	movs	r3, #252	; 0xfc
 800100e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001024:	230e      	movs	r3, #14
 8001026:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800102a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800102e:	4619      	mov	r1, r3
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <HAL_LTDC_MspInit+0x1d4>)
 8001032:	f010 fb09 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001036:	f24d 2303 	movw	r3, #53763	; 0xd203
 800103a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001056:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <HAL_LTDC_MspInit+0x1d8>)
 800105e:	f010 faf3 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001062:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107c:	230e      	movs	r3, #14
 800107e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001082:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <HAL_LTDC_MspInit+0x1dc>)
 800108a:	f010 fadd 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a8:	230e      	movs	r3, #14
 80010aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_LTDC_MspInit+0x1e0>)
 80010b6:	f010 fac7 	bl	8011648 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2058      	movs	r0, #88	; 0x58
 80010c0:	f00f ffb2 	bl	8011028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010c4:	2058      	movs	r0, #88	; 0x58
 80010c6:	f00f ffc9 	bl	801105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	37f0      	adds	r7, #240	; 0xf0
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	50001000 	.word	0x50001000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58022800 	.word	0x58022800
 80010e0:	58022000 	.word	0x58022000
 80010e4:	58022400 	.word	0x58022400
 80010e8:	58021c00 	.word	0x58021c00

080010ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0bc      	sub	sp, #240	; 0xf0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	22bc      	movs	r2, #188	; 0xbc
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f029 fde6 	bl	802acde <memset>
  if(hqspi->Instance==QUADSPI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a76      	ldr	r2, [pc, #472]	; (80012f0 <HAL_QSPI_MspInit+0x204>)
 8001118:	4293      	cmp	r3, r2
 800111a:	f040 80e4 	bne.w	80012e6 <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800111e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001122:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001124:	2300      	movs	r3, #0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f014 f89d 	bl	801526c <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001138:	f7ff fdd0 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800113e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001142:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800114c:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800114e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115a:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a55      	ldr	r2, [pc, #340]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800119e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80011d2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011ec:	2309      	movs	r3, #9
 80011ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f6:	4619      	mov	r1, r3
 80011f8:	483f      	ldr	r0, [pc, #252]	; (80012f8 <HAL_QSPI_MspInit+0x20c>)
 80011fa:	f010 fa25 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001216:	230a      	movs	r3, #10
 8001218:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001220:	4619      	mov	r1, r3
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <HAL_QSPI_MspInit+0x20c>)
 8001224:	f010 fa10 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001228:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800122c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001242:	2309      	movs	r3, #9
 8001244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800124c:	4619      	mov	r1, r3
 800124e:	482b      	ldr	r0, [pc, #172]	; (80012fc <HAL_QSPI_MspInit+0x210>)
 8001250:	f010 f9fa 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800126e:	230a      	movs	r3, #10
 8001270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001278:	4619      	mov	r1, r3
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <HAL_QSPI_MspInit+0x210>)
 800127c:	f010 f9e4 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001280:	230c      	movs	r3, #12
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001298:	2309      	movs	r3, #9
 800129a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_QSPI_MspInit+0x214>)
 80012a6:	f010 f9cf 	bl	8011648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012c4:	2309      	movs	r3, #9
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_QSPI_MspInit+0x218>)
 80012d2:	f010 f9b9 	bl	8011648 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	205c      	movs	r0, #92	; 0x5c
 80012dc:	f00f fea4 	bl	8011028 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80012e0:	205c      	movs	r0, #92	; 0x5c
 80012e2:	f00f febb 	bl	801105c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	37f0      	adds	r7, #240	; 0xf0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	52005000 	.word	0x52005000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58021800 	.word	0x58021800
 80012fc:	58021400 	.word	0x58021400
 8001300:	58021c00 	.word	0x58021c00
 8001304:	58020c00 	.word	0x58020c00

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <HAL_TIM_Base_MspInit+0x88>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23c0      	movs	r3, #192	; 0xc0
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001376:	2302      	movs	r3, #2
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001382:	f010 f961 	bl	8011648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40000800 	.word	0x40000800
 8001394:	58024400 	.word	0x58024400
 8001398:	58020400 	.word	0x58020400

0800139c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	b0b6      	sub	sp, #216	; 0xd8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <HAL_FMC_MspInit+0x154>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 8096 	bne.w	80014e8 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_FMC_MspInit+0x154>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	22bc      	movs	r2, #188	; 0xbc
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f029 fc87 	bl	802acde <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	f013 ff44 	bl	801526c <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80013ea:	f7ff fc77 	bl	8000cdc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 80013f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013f4:	4a3f      	ldr	r2, [pc, #252]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 80013f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 8001400:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800140c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001426:	230c      	movs	r3, #12
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001430:	4619      	mov	r1, r3
 8001432:	4831      	ldr	r0, [pc, #196]	; (80014f8 <HAL_FMC_MspInit+0x15c>)
 8001434:	f010 f908 	bl	8011648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001438:	f248 1333 	movw	r3, #33075	; 0x8133
 800143c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001452:	230c      	movs	r3, #12
 8001454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800145c:	4619      	mov	r1, r3
 800145e:	4827      	ldr	r0, [pc, #156]	; (80014fc <HAL_FMC_MspInit+0x160>)
 8001460:	f010 f8f2 	bl	8011648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001464:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001488:	4619      	mov	r1, r3
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <HAL_FMC_MspInit+0x164>)
 800148c:	f010 f8dc 	bl	8011648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001490:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014aa:	230c      	movs	r3, #12
 80014ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <HAL_FMC_MspInit+0x168>)
 80014b8:	f010 f8c6 	bl	8011648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014bc:	23e0      	movs	r3, #224	; 0xe0
 80014be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d4:	230c      	movs	r3, #12
 80014d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_FMC_MspInit+0x16c>)
 80014e2:	f010 f8b1 	bl	8011648 <HAL_GPIO_Init>
 80014e6:	e000      	b.n	80014ea <HAL_FMC_MspInit+0x14e>
    return;
 80014e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014ea:	37d8      	adds	r7, #216	; 0xd8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	24000350 	.word	0x24000350
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58021000 	.word	0x58021000
 80014fc:	58021800 	.word	0x58021800
 8001500:	58020c00 	.word	0x58020c00
 8001504:	58021400 	.word	0x58021400
 8001508:	58021c00 	.word	0x58021c00

0800150c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001514:	f7ff ff42 	bl	800139c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_FMC_MspDeInit+0x58>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d123      	bne.n	8001574 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_FMC_MspDeInit+0x58>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_FMC_MspDeInit+0x5c>)
 8001534:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_FMC_MspDeInit+0x5c>)
 800153a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800153e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001542:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_FMC_MspDeInit+0x60>)
 8001548:	f010 fa2e 	bl	80119a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800154c:	f248 1133 	movw	r1, #33075	; 0x8133
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <HAL_FMC_MspDeInit+0x64>)
 8001552:	f010 fa29 	bl	80119a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001556:	f24c 7103 	movw	r1, #50947	; 0xc703
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_FMC_MspDeInit+0x68>)
 800155c:	f010 fa24 	bl	80119a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001560:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_FMC_MspDeInit+0x6c>)
 8001566:	f010 fa1f 	bl	80119a8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800156a:	21e0      	movs	r1, #224	; 0xe0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <HAL_FMC_MspDeInit+0x70>)
 800156e:	f010 fa1b 	bl	80119a8 <HAL_GPIO_DeInit>
 8001572:	e000      	b.n	8001576 <HAL_FMC_MspDeInit+0x56>
    return;
 8001574:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000354 	.word	0x24000354
 800157c:	58024400 	.word	0x58024400
 8001580:	58021000 	.word	0x58021000
 8001584:	58021800 	.word	0x58021800
 8001588:	58020c00 	.word	0x58020c00
 800158c:	58021400 	.word	0x58021400
 8001590:	58021c00 	.word	0x58021c00

08001594 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 800159c:	f7ff ffc0 	bl	8001520 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b090      	sub	sp, #64	; 0x40
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	d827      	bhi.n	8001606 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015b6:	2200      	movs	r2, #0
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	2036      	movs	r0, #54	; 0x36
 80015bc:	f00f fd34 	bl	8011028 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c0:	2036      	movs	r0, #54	; 0x36
 80015c2:	f00f fd4b 	bl	801105c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015c6:	4a29      	ldr	r2, [pc, #164]	; (800166c <HAL_InitTick+0xc4>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_InitTick+0xc8>)
 80015ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_InitTick+0xc8>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_InitTick+0xc8>)
 80015de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ea:	f107 0210 	add.w	r2, r7, #16
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f013 fdf7 	bl	80151e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d106      	bne.n	8001612 <HAL_InitTick+0x6a>
 8001604:	e001      	b.n	800160a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e02b      	b.n	8001662 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800160a:	f013 fdc1 	bl	8015190 <HAL_RCC_GetPCLK1Freq>
 800160e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001610:	e004      	b.n	800161c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001612:	f013 fdbd 	bl	8015190 <HAL_RCC_GetPCLK1Freq>
 8001616:	4603      	mov	r3, r0
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_InitTick+0xcc>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3b01      	subs	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_InitTick+0xd0>)
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_InitTick+0xd4>)
 800162e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_InitTick+0xd0>)
 8001632:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001636:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_InitTick+0xd0>)
 800163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_InitTick+0xd0>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_InitTick+0xd0>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_InitTick+0xd0>)
 800164c:	f014 ff6d 	bl	801652a <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <HAL_InitTick+0xd0>)
 8001658:	f014 ffbe 	bl	80165d8 <HAL_TIM_Base_Start_IT>
 800165c:	4603      	mov	r3, r0
 800165e:	e000      	b.n	8001662 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	3740      	adds	r7, #64	; 0x40
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24000050 	.word	0x24000050
 8001670:	58024400 	.word	0x58024400
 8001674:	431bde83 	.word	0x431bde83
 8001678:	24000358 	.word	0x24000358
 800167c:	40001000 	.word	0x40001000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f015 f809 	bl	80166c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000358 	.word	0x24000358

080016c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <LTDC_IRQHandler+0x10>)
 80016c6:	f011 fa03 	bl	8012ad0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	240001d4 	.word	0x240001d4

080016d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA2D_IRQHandler+0x10>)
 80016da:	f00f fea5 	bl	8011428 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2400016c 	.word	0x2400016c

080016e8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <QUADSPI_IRQHandler+0x10>)
 80016ee:	f011 fee9 	bl	80134c4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2400027c 	.word	0x2400027c

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001716:	f029 fbdb 	bl	802aed0 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
	return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
	while (1) {}		/* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
	}
	return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
	return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f029 fb40 	bl	802aed0 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24080000 	.word	0x24080000
 800187c:	00001000 	.word	0x00001000
 8001880:	240003a4 	.word	0x240003a4
 8001884:	2400bca8 	.word	0x2400bca8

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f00c fe56 	bl	800e53c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f029 fb11 	bl	802aedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7fe fda9 	bl	8000410 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80018cc:	080303e0 	.word	0x080303e0
  ldr r2, =_sbss
 80018d0:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80018d4:	2400bca4 	.word	0x2400bca4

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>

080018da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80018de:	f001 fc6b 	bl	80031b8 <touchgfx_init>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80018ee:	f001 fc8d 	bl	800320c <touchgfx_taskEntry>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    {
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
    }
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	0802c7f0 	.word	0x0802c7f0

0800191c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    }
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe9 	bl	80018fc <_ZN8touchgfx15TouchControllerD1Ev>
 800192a:	2104      	movs	r1, #4
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f028 ffa2 	bl	802a876 <_ZdlPvj>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001944:	f000 faa8 	bl	8001e98 <_ZN25STM32H745ITouchController4initEv>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fabe 	bl	8001ee0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ffbb 	bl	80018fc <_ZN8touchgfx15TouchControllerD1Ev>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0802c7d8 	.word	0x0802c7d8

08001994 <_ZN20STM32TouchControllerD0Ev>:
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe7 	bl	8001970 <_ZN20STM32TouchControllerD1Ev>
 80019a2:	2104      	movs	r1, #4
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f028 ff66 	bl	802a876 <_ZdlPvj>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d80c      	bhi.n	80019de <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019dd 	.word	0x080019dd
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	080019dd 	.word	0x080019dd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 80019dc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d80c      	bhi.n	8001a16 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a15 	.word	0x08001a15
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	08001a15 	.word	0x08001a15
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001a14:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop

08001a24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d80c      	bhi.n	8001a4e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a4d 	.word	0x08001a4d
 8001a44:	08001a4d 	.word	0x08001a4d
 8001a48:	08001a4d 	.word	0x08001a4d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001a4c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    {
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	601a      	str	r2, [r3, #0]
    }
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	0802dfc8 	.word	0x0802dfc8

08001a7c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    }
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffe9 	bl	8001a5c <_ZN8touchgfx3HALD1Ev>
 8001a8a:	217c      	movs	r1, #124	; 0x7c
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f028 fef2 	bl	802a876 <_ZdlPvj>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	887a      	ldrh	r2, [r7, #2]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d304      	bcc.n	8001ae8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	883a      	ldrh	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d205      	bcs.n	8001af4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001aec:	219e      	movs	r1, #158	; 0x9e
 8001aee:	480a      	ldr	r0, [pc, #40]	; (8001b18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001af0:	f028 fef0 	bl	802a8d4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001af4:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001afc:	883b      	ldrh	r3, [r7, #0]
 8001afe:	8013      	strh	r3, [r2, #0]
    }
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2400b8b8 	.word	0x2400b8b8
 8001b0c:	2400b8ba 	.word	0x2400b8ba
 8001b10:	0802ba08 	.word	0x0802ba08
 8001b14:	0802ba6c 	.word	0x0802ba6c
 8001b18:	0802bab0 	.word	0x0802bab0
 8001b1c:	2400b8be 	.word	0x2400b8be
 8001b20:	2400b8c0 	.word	0x2400b8c0

08001b24 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4610      	mov	r0, r2
 8001b44:	4798      	blx	r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	e000      	b.n	8001b4c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001b4a:	2300      	movs	r3, #0
    }
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f017 fa09 	bl	8018f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	33a4      	adds	r3, #164	; 0xa4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
    }
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001b80:	2300      	movs	r3, #0
    }
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d106      	bne.n	8001bb2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001ba8:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001bac:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001bae:	f028 fe91 	bl	802a8d4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001bd2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001be2:	701a      	strb	r2, [r3, #0]
    }
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0802baf8 	.word	0x0802baf8
 8001bf0:	0802bb30 	.word	0x0802bb30
 8001bf4:	0802bab0 	.word	0x0802bab0
 8001bf8:	2400b8c2 	.word	0x2400b8c2
 8001bfc:	2400b8c3 	.word	0x2400b8c3

08001c00 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001c08:	2300      	movs	r3, #0
    }
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	4610      	mov	r0, r2
 8001c32:	4798      	blx	r3
        }
    }
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3318      	adds	r3, #24
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4798      	blx	r3
 8001c6e:	4603      	mov	r3, r0
    }
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d011      	beq.n	8001cb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11e      	bne.n	8001cd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001ca4:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001ca8:	89bb      	ldrh	r3, [r7, #12]
 8001caa:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001cb2:	e010      	b.n	8001cd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001cc8:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001ccc:	89fb      	ldrh	r3, [r7, #14]
 8001cce:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
    }
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2400b8bc 	.word	0x2400b8bc
 8001ce8:	2400b8ba 	.word	0x2400b8ba
 8001cec:	2400b8b8 	.word	0x2400b8b8

08001cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f016 faef 	bl	80182de <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe9f 	bl	8001a5c <_ZN8touchgfx3HALD1Ev>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	0802cb58 	.word	0x0802cb58

08001d2c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d3a:	217c      	movs	r1, #124	; 0x7c
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f028 fd9a 	bl	802a876 <_ZdlPvj>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ffca 	bl	8001cf0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fd3c 	bl	80037ec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fdc8 	bl	800391c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fdc7 	bl	8003938 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6839      	ldr	r1, [r7, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fdcf 	bl	8003964 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	f001 fe14 	bl	8003a10 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 fd19 	bl	8003834 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fd1d 	bl	8003854 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fd1f 	bl	8003870 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fd21 	bl	800388c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff4f 	bl	8001d08 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0802c808 	.word	0x0802c808

08001e78 <_ZN11TouchGFXHALD0Ev>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_ZN11TouchGFXHALD1Ev>
 8001e86:	217c      	movs	r1, #124	; 0x7c
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f028 fcf4 	bl	802a876 <_ZdlPvj>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001e9e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ea2:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001ea4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ea8:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f00e fcfa 	bl	80108b0 <BSP_TS_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e000      	b.n	8001ed6 <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001ed4:	bf00      	nop
}
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	240003a8 	.word	0x240003a8

08001ee0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e014      	b.n	8001f26 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001efc:	490d      	ldr	r1, [pc, #52]	; (8001f34 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001efe:	2000      	movs	r0, #0
 8001f00:	f00e fd92 	bl	8010a28 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e00a      	b.n	8001f26 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	601a      	str	r2, [r3, #0]
    return true;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	240003a8 	.word	0x240003a8
 8001f34:	240003ac 	.word	0x240003ac

08001f38 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2001      	movs	r0, #1
 8001f42:	f009 f808 	bl	800af56 <osSemaphoreNew>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001f4a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f58:	2128      	movs	r1, #40	; 0x28
 8001f5a:	480e      	ldr	r0, [pc, #56]	; (8001f94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f5c:	f028 fcba 	bl	802a8d4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2104      	movs	r1, #4
 8001f64:	2001      	movs	r0, #1
 8001f66:	f009 f915 	bl	800b194 <osMessageQueueNew>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f6e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f80:	f028 fca8 	bl	802a8d4 <__assert_func>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	240003b8 	.word	0x240003b8
 8001f8c:	0802bb80 	.word	0x0802bb80
 8001f90:	0802bbcc 	.word	0x0802bbcc
 8001f94:	0802bbfc 	.word	0x0802bbfc
 8001f98:	240003bc 	.word	0x240003bc
 8001f9c:	0802bc88 	.word	0x0802bc88

08001fa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	4618      	mov	r0, r3
 8001fae:	f009 f85b 	bl	800b068 <osSemaphoreAcquire>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	240003b8 	.word	0x240003b8

08001fbc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f009 f8a1 	bl	800b10c <osSemaphoreRelease>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240003b8 	.word	0x240003b8

08001fd4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 f842 	bl	800b068 <osSemaphoreAcquire>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	240003b8 	.word	0x240003b8

08001fec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f009 f889 	bl	800b10c <osSemaphoreRelease>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	240003b8 	.word	0x240003b8

08002004 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	2300      	movs	r3, #0
 800200e:	2200      	movs	r2, #0
 8002010:	4903      	ldr	r1, [pc, #12]	; (8002020 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8002012:	f009 f933 	bl	800b27c <osMessageQueuePut>
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	240003bc 	.word	0x240003bc
 8002020:	24000004 	.word	0x24000004

08002024 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	f009 f982 	bl	800b33c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	1d39      	adds	r1, r7, #4
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	2200      	movs	r2, #0
 8002044:	f009 f97a 	bl	800b33c <osMessageQueueGet>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	240003bc 	.word	0x240003bc

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db12      	blt.n	80020c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	490a      	ldr	r1, [pc, #40]	; (80020d4 <__NVIC_DisableIRQ+0x44>)
 80020aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	3320      	adds	r3, #32
 80020b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020bc:	f3bf 8f4f 	dsb	sy
}
 80020c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020c2:	f3bf 8f6f 	isb	sy
}
 80020c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100

080020d8 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
        : color(0)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    {
    }
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    {
        return color;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
    }
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    {
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
    }
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	0802c928 	.word	0x0802c928

0800212c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    }
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe9 	bl	800210c <_ZN8touchgfx9DMA_QueueD1Ev>
 800213a:	2104      	movs	r1, #4
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f028 fb9a 	bl	802a876 <_ZdlPvj>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3344      	adds	r3, #68	; 0x44
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	4798      	blx	r3
    }
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    {
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	601a      	str	r2, [r3, #0]
    }
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	0802e520 	.word	0x0802e520

08002188 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    }
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ffe9 	bl	8002168 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002196:	210c      	movs	r1, #12
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f028 fb6c 	bl	802a876 <_ZdlPvj>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	721a      	strb	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	725a      	strb	r2, [r3, #9]
    {
    }
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	0802e520 	.word	0x0802e520

080021dc <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80021e4:	2301      	movs	r3, #1
    }
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3328      	adds	r3, #40	; 0x28
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4610      	mov	r0, r2
 8002206:	4798      	blx	r3
    }
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
        return instance;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
    }
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	2400b8c4 	.word	0x2400b8c4

08002228 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3314      	adds	r3, #20
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4610      	mov	r0, r2
 8002240:	4798      	blx	r3
    }
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002252:	f7ff ffdd 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 8002256:	4603      	mov	r3, r0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ffe5 	bl	8002228 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	330c      	adds	r3, #12
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff30 	bl	80020d8 <_ZN8touchgfx9colortypeC1Ev>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	330c      	adds	r3, #12
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7ff ff87 	bl	80021a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <_ZN8STM32DMAC1Ev+0x50>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 000c 	add.w	r0, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3320      	adds	r3, #32
 80022aa:	2260      	movs	r2, #96	; 0x60
 80022ac:	4619      	mov	r1, r3
 80022ae:	f016 ffc7 	bl	8019240 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3320      	adds	r3, #32
 80022b6:	245f      	movs	r4, #95	; 0x5f
 80022b8:	461d      	mov	r5, r3
 80022ba:	e004      	b.n	80022c6 <_ZN8STM32DMAC1Ev+0x42>
 80022bc:	4628      	mov	r0, r5
 80022be:	f7ff ffd2 	bl	8002266 <_ZN8touchgfx6BlitOpC1Ev>
 80022c2:	3520      	adds	r5, #32
 80022c4:	3c01      	subs	r4, #1
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	daf8      	bge.n	80022bc <_ZN8STM32DMAC1Ev+0x38>
{
}
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bdb0      	pop	{r4, r5, r7, pc}
 80022d4:	0802c8d8 	.word	0x0802c8d8

080022d8 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <_ZN8STM32DMAD1Ev+0x30>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80022e6:	205a      	movs	r0, #90	; 0x5a
 80022e8:	f7ff fed2 	bl	8002090 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	330c      	adds	r3, #12
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 facb 	bl	800288c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff35 	bl	8002168 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	0802c8d8 	.word	0x0802c8d8

0800230c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
}
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffdf 	bl	80022d8 <_ZN8STM32DMAD1Ev>
 800231a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f028 faa9 	bl	802a876 <_ZdlPvj>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 800233a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 8002340:	f043 0310 	orr.w	r3, r3, #16
 8002344:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 800234a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 8002358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 800235c:	f043 0310 	orr.w	r3, r3, #16
 8002360:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 8002364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <_ZN8STM32DMA10initializeEv+0x54>)
 8002368:	f023 0310 	bic.w	r3, r3, #16
 800236c:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <_ZN8STM32DMA10initializeEv+0x58>)
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <_ZN8STM32DMA10initializeEv+0x5c>)
 8002372:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002374:	205a      	movs	r0, #90	; 0x5a
 8002376:	f7ff fe6d 	bl	8002054 <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	58024400 	.word	0x58024400
 8002388:	2400016c 	.word	0x2400016c
 800238c:	0800224b 	.word	0x0800224b

08002390 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]

    switch (format)
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	2b0b      	cmp	r3, #11
 80023a4:	d826      	bhi.n	80023f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023e9 	.word	0x080023e9
 80023b0:	080023e3 	.word	0x080023e3
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023f5 	.word	0x080023f5
 80023bc:	080023f5 	.word	0x080023f5
 80023c0:	080023f5 	.word	0x080023f5
 80023c4:	080023f5 	.word	0x080023f5
 80023c8:	080023ef 	.word	0x080023ef
 80023cc:	080023ef 	.word	0x080023ef
 80023d0:	080023ef 	.word	0x080023ef
 80023d4:	080023ef 	.word	0x080023ef
 80023d8:	080023ef 	.word	0x080023ef
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
        break;
 80023e0:	e00e      	b.n	8002400 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80023e2:	2301      	movs	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
        break;
 80023e6:	e00b      	b.n	8002400 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80023e8:	2302      	movs	r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
        break;
 80023ec:	e008      	b.n	8002400 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80023ee:	2305      	movs	r3, #5
 80023f0:	60fb      	str	r3, [r7, #12]
        break;
 80023f2:	e005      	b.n	8002400 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80023f6:	4a06      	ldr	r2, [pc, #24]	; (8002410 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80023f8:	2166      	movs	r1, #102	; 0x66
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80023fc:	f028 fa6a 	bl	802a8d4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002400:	68fb      	ldr	r3, [r7, #12]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	0802bccc 	.word	0x0802bccc
 8002410:	0802bce8 	.word	0x0802bce8
 8002414:	0802bd34 	.word	0x0802bd34

08002418 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b0a      	cmp	r3, #10
 800242c:	d821      	bhi.n	8002472 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	0800246d 	.word	0x0800246d
 8002438:	08002467 	.word	0x08002467
 800243c:	08002461 	.word	0x08002461
 8002440:	08002473 	.word	0x08002473
 8002444:	08002473 	.word	0x08002473
 8002448:	08002473 	.word	0x08002473
 800244c:	08002473 	.word	0x08002473
 8002450:	08002467 	.word	0x08002467
 8002454:	08002467 	.word	0x08002467
 8002458:	08002467 	.word	0x08002467
 800245c:	08002467 	.word	0x08002467
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
        break;
 8002464:	e00b      	b.n	800247e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8002466:	2301      	movs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
        break;
 800246a:	e008      	b.n	800247e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800246c:	2302      	movs	r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
        break;
 8002470:	e005      	b.n	800247e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002474:	4a05      	ldr	r2, [pc, #20]	; (800248c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8002476:	2187      	movs	r1, #135	; 0x87
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800247a:	f028 fa2b 	bl	802a8d4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	0802bccc 	.word	0x0802bccc
 800248c:	0802bdc0 	.word	0x0802bdc0
 8002490:	0802bd34 	.word	0x0802bd34

08002494 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800249c:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7f5b      	ldrb	r3, [r3, #29]
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff67 	bl	8002390 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024c2:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	7f9b      	ldrb	r3, [r3, #30]
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff60 	bl	8002390 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024d0:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	7f9b      	ldrb	r3, [r3, #30]
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff9d 	bl	8002418 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024de:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	8b5b      	ldrh	r3, [r3, #26]
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	8a9b      	ldrh	r3, [r3, #20]
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	4b92      	ldr	r3, [pc, #584]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	8b5b      	ldrh	r3, [r3, #26]
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	8a9b      	ldrh	r3, [r3, #20]
 80024fa:	1ad2      	subs	r2, r2, r3
 80024fc:	4b8e      	ldr	r3, [pc, #568]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024fe:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	8b1b      	ldrh	r3, [r3, #24]
 8002504:	461a      	mov	r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	8a9b      	ldrh	r3, [r3, #20]
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	4b8a      	ldr	r3, [pc, #552]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800250e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002510:	4a89      	ldr	r2, [pc, #548]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	8adb      	ldrh	r3, [r3, #22]
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	8a9b      	ldrh	r3, [r3, #20]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	4b82      	ldr	r3, [pc, #520]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4b80      	ldr	r3, [pc, #512]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002536:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d036      	beq.n	80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8002542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002546:	f200 80e2 	bhi.w	800270e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800254a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254e:	d014      	beq.n	800257a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	f200 80db 	bhi.w	800270e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002558:	2b80      	cmp	r3, #128	; 0x80
 800255a:	d059      	beq.n	8002610 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	f200 80d6 	bhi.w	800270e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	f000 80be 	beq.w	80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	f200 80d0 	bhi.w	800270e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800256e:	2b04      	cmp	r3, #4
 8002570:	d039      	beq.n	80025e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8002572:	2b20      	cmp	r3, #32
 8002574:	f000 80b6 	beq.w	80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002578:	e0c9      	b.n	800270e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	4619      	mov	r1, r3
 8002582:	4a6d      	ldr	r2, [pc, #436]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002586:	430b      	orrs	r3, r1
 8002588:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	4c6a      	ldr	r4, [pc, #424]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fdaf 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 8002596:	4603      	mov	r3, r0
 8002598:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	4b64      	ldr	r3, [pc, #400]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025a6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025aa:	4a65      	ldr	r2, [pc, #404]	; (8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025ac:	601a      	str	r2, [r3, #0]
        break;
 80025ae:	e0da      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	7f1b      	ldrb	r3, [r3, #28]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4619      	mov	r1, r3
 80025b8:	4a5f      	ldr	r2, [pc, #380]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ba:	4b62      	ldr	r3, [pc, #392]	; (8002744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80025bc:	430b      	orrs	r3, r1
 80025be:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	4c5c      	ldr	r4, [pc, #368]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fd94 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 80025cc:	4603      	mov	r3, r0
 80025ce:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025d0:	4a59      	ldr	r2, [pc, #356]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025dc:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025e0:	4a57      	ldr	r2, [pc, #348]	; (8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025e2:	601a      	str	r2, [r3, #0]
        break;
 80025e4:	e0bf      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	7f1b      	ldrb	r3, [r3, #28]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	461a      	mov	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	4a51      	ldr	r2, [pc, #324]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f8:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025fa:	4a4f      	ldr	r2, [pc, #316]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	4b4c      	ldr	r3, [pc, #304]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002606:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800260a:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800260c:	601a      	str	r2, [r3, #0]
        break;
 800260e:	e0aa      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002610:	2301      	movs	r3, #1
 8002612:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1d1a      	adds	r2, r3, #4
 800261e:	4b46      	ldr	r3, [pc, #280]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f1b      	ldrb	r3, [r3, #28]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	461a      	mov	r2, r3
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	4a42      	ldr	r2, [pc, #264]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002636:	4a40      	ldr	r2, [pc, #256]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002642:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00d      	beq.n	800266e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8002652:	e020      	b.n	8002696 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800265a:	4013      	ands	r3, r2
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	8852      	ldrh	r2, [r2, #2]
 8002660:	3a01      	subs	r2, #1
 8002662:	0212      	lsls	r2, r2, #8
 8002664:	4611      	mov	r1, r2
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002668:	430b      	orrs	r3, r1
 800266a:	61d3      	str	r3, [r2, #28]
                break;
 800266c:	e01a      	b.n	80026a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7f1b      	ldrb	r3, [r3, #28]
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d101      	bne.n	800267a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 8002676:	2300      	movs	r3, #0
 8002678:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002680:	4013      	ands	r3, r2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	8852      	ldrh	r2, [r2, #2]
 8002686:	3a01      	subs	r2, #1
 8002688:	0212      	lsls	r2, r2, #8
 800268a:	4313      	orrs	r3, r2
 800268c:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	61d3      	str	r3, [r2, #28]
                break;
 8002694:	e006      	b.n	80026a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002698:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800269a:	f240 1111 	movw	r1, #273	; 0x111
 800269e:	482d      	ldr	r0, [pc, #180]	; (8002754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80026a0:	f028 f918 	bl	802a8d4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026aa:	f043 0320 	orr.w	r3, r3, #32
 80026ae:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80026b0:	bf00      	nop
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf14      	ite	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	2300      	moveq	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f4      	bne.n	80026b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ca:	2210      	movs	r2, #16
 80026cc:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80026d8:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 80026da:	e044      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026de:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80026e0:	601a      	str	r2, [r3, #0]
      break;
 80026e2:	e040      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7f1b      	ldrb	r3, [r3, #28]
 80026e8:	061b      	lsls	r3, r3, #24
 80026ea:	461a      	mov	r2, r3
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026f8:	4a0f      	ldr	r2, [pc, #60]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002704:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800270a:	601a      	str	r2, [r3, #0]
        break;
 800270c:	e02b      	b.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	7f1b      	ldrb	r3, [r3, #28]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	461a      	mov	r2, r3
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7f5a      	ldrb	r2, [r3, #29]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7f9b      	ldrb	r3, [r3, #30]
 800272a:	429a      	cmp	r2, r3
 800272c:	d016      	beq.n	800275c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800272e:	4b02      	ldr	r3, [pc, #8]	; (8002738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002730:	4a09      	ldr	r2, [pc, #36]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002732:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8002734:	e016      	b.n	8002764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002736:	bf00      	nop
 8002738:	52001000 	.word	0x52001000
 800273c:	0002000a 	.word	0x0002000a
 8002740:	00020201 	.word	0x00020201
 8002744:	00020009 	.word	0x00020009
 8002748:	ffff00ef 	.word	0xffff00ef
 800274c:	0802be0c 	.word	0x0802be0c
 8002750:	0802be28 	.word	0x0802be28
 8002754:	0802bd34 	.word	0x0802bd34
 8002758:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800275e:	f240 2201 	movw	r2, #513	; 0x201
 8002762:	601a      	str	r2, [r3, #0]
        break;
 8002764:	bf00      	nop
    }
}
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	52001000 	.word	0x52001000

08002774 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f9b      	ldrb	r3, [r3, #30]
 8002782:	4619      	mov	r1, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff fe47 	bl	8002418 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800278a:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800278c:	4a3b      	ldr	r2, [pc, #236]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	8adb      	ldrh	r3, [r3, #22]
 8002796:	461a      	mov	r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	8a9b      	ldrh	r3, [r3, #20]
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	4b36      	ldr	r3, [pc, #216]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	8b5b      	ldrh	r3, [r3, #26]
 80027b0:	461a      	mov	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	8a9b      	ldrh	r3, [r3, #20]
 80027b6:	1ad2      	subs	r2, r2, r3
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d12e      	bne.n	8002822 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	8b5b      	ldrh	r3, [r3, #26]
 80027c8:	461a      	mov	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	8a9b      	ldrh	r3, [r3, #20]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027d2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	8b5b      	ldrh	r3, [r3, #26]
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	8a9b      	ldrh	r3, [r3, #20]
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	4b26      	ldr	r3, [pc, #152]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027e2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027e4:	4a25      	ldr	r2, [pc, #148]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
 80027ee:	061b      	lsls	r3, r3, #24
 80027f0:	4619      	mov	r1, r3
 80027f2:	4a22      	ldr	r2, [pc, #136]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80027f6:	430b      	orrs	r3, r1
 80027f8:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	4c1f      	ldr	r4, [pc, #124]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fc77 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 8002806:	4603      	mov	r3, r0
 8002808:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002810:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	4b19      	ldr	r3, [pc, #100]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002818:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800281c:	4a19      	ldr	r2, [pc, #100]	; (8002884 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800281e:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002820:	e027      	b.n	8002872 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fc5e 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 8002838:	4603      	mov	r3, r0
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fc55 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 800284a:	4603      	mov	r3, r0
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002852:	431c      	orrs	r4, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fc4b 	bl	80020f4 <_ZNK8touchgfx9colortypecvmEv>
 800285e:	4603      	mov	r3, r0
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	f003 031f 	and.w	r3, r3, #31
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002868:	4323      	orrs	r3, r4
 800286a:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800286e:	4a06      	ldr	r2, [pc, #24]	; (8002888 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8002870:	601a      	str	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	52001000 	.word	0x52001000
 8002880:	00010009 	.word	0x00010009
 8002884:	00020201 	.word	0x00020201
 8002888:	00030201 	.word	0x00030201

0800288c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	4a05      	ldr	r2, [pc, #20]	; (80028ac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fc35 	bl	800210c <_ZN8touchgfx9DMA_QueueD1Ev>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	0802e570 	.word	0x0802e570

080028b0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80028be:	2114      	movs	r1, #20
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f027 ffd8 	bl	802a876 <_ZdlPvj>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	805a      	strh	r2, [r3, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	809a      	strh	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	80da      	strh	r2, [r3, #6]
    {
    }
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
    }
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2400b920 	.word	0x2400b920

08002920 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    {
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
    }
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	0802cb44 	.word	0x0802cb44

08002940 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
    }
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ffe9 	bl	8002920 <_ZN8touchgfx12FontProviderD1Ev>
 800294e:	2104      	movs	r1, #4
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f027 ff90 	bl	802a876 <_ZdlPvj>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	611a      	str	r2, [r3, #16]
    {
    }
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	0802cb34 	.word	0x0802cb34

080029a0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    {
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
    }
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	0802cb34 	.word	0x0802cb34

080029c0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    }
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ffe9 	bl	80029a0 <_ZN8touchgfx7MVPHeapD1Ev>
 80029ce:	2114      	movs	r1, #20
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f027 ff50 	bl	802a876 <_ZdlPvj>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
    {
    }
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
    {
    }
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    {
    }
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
    {
    }
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
    {
    }
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    {
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
    }
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	0802cb0c 	.word	0x0802cb0c

08002a84 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
    }
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ffe9 	bl	8002a64 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002a92:	2104      	movs	r1, #4
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f027 feee 	bl	802a876 <_ZdlPvj>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    {
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
    }
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	0802eb68 	.word	0x0802eb68

08002ac4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    }
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffe9 	bl	8002aa4 <_ZN8touchgfx3LCDD1Ev>
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f027 fece 	bl	802a876 <_ZdlPvj>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002b0e:	6810      	ldr	r0, [r2, #0]
 8002b10:	6851      	ldr	r1, [r2, #4]
 8002b12:	c303      	stmia	r3!, {r0, r1}
    }
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    {
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
    }
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	0802caf4 	.word	0x0802caf4

08002b40 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
    }
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ffe9 	bl	8002b20 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002b4e:	2104      	movs	r1, #4
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f027 fe90 	bl	802a876 <_ZdlPvj>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	739a      	strb	r2, [r3, #14]
        {
        }
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ffd5 	bl	8002b60 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	829a      	strh	r2, [r3, #20]
    {
    }
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002bda:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
          gestures(),
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	331c      	adds	r3, #28
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ffcc 	bl	8002ba6 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3350      	adds	r3, #80	; 0x50
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe39 	bl	80028d0 <_ZN8touchgfx4RectC1Ev>
          listener(0),
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58
          lastX(0),
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	65da      	str	r2, [r3, #92]	; 0x5c
          lastY(0),
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60
          touchSampleRate(1),
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
          mcuLoadPct(0),
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
          vSyncCnt(0),
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
          vSyncForFrame(1),
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
          vSyncCompensationEnabled(false),
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          clientDirty(false),
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          swapRequested(false),
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          lastTouched(false),
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          updateMCULoad(0),
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	671a      	str	r2, [r3, #112]	; 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
          displayOrientationChangeRequested(false),
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
          useAuxiliaryLCD(false),
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
          useDMAAcceleration(true),
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
          lastRenderMethod(HARDWARE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002cee:	8b3b      	ldrh	r3, [r7, #24]
 8002cf0:	8013      	strh	r3, [r2, #0]
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002cf8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002cfc:	8bbb      	ldrh	r3, [r7, #28]
 8002cfe:	8013      	strh	r3, [r2, #0]
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002d06:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d0e:	8b3a      	ldrh	r2, [r7, #24]
 8002d10:	8bbb      	ldrh	r3, [r7, #28]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bf34      	ite	cc
 8002d16:	2301      	movcc	r3, #1
 8002d18:	2300      	movcs	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	0802dfc8 	.word	0x0802dfc8
 8002d34:	2400b8c4 	.word	0x2400b8c4
 8002d38:	2400b8b8 	.word	0x2400b8b8
 8002d3c:	2400b8be 	.word	0x2400b8be
 8002d40:	2400b8ba 	.word	0x2400b8ba
 8002d44:	2400b8c0 	.word	0x2400b8c0
 8002d48:	2400b8bc 	.word	0x2400b8bc

08002d4c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	4a05      	ldr	r2, [pc, #20]	; (8002d6c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fe81 	bl	8002a64 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	0802ec7c 	.word	0x0802ec7c

08002d70 <_ZN8touchgfx11ApplicationD0Ev>:
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ffe7 	bl	8002d4c <_ZN8touchgfx11ApplicationD1Ev>
 8002d7e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f027 fd77 	bl	802a876 <_ZdlPvj>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f804 	bl	8002da8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00f      	beq.n	8002dda <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4798      	blx	r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3308      	adds	r3, #8
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4610      	mov	r0, r2
 8002df4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff97 	bl	8002d4c <_ZN8touchgfx11ApplicationD1Ev>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0802cab0 	.word	0x0802cab0

08002e2c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffe7 	bl	8002e08 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f027 fd19 	bl	802a876 <_ZdlPvj>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fb09 	bl	800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ffcb 	bl	8002e08 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0802ca54 	.word	0x0802ca54

08002e80 <_ZN23FrontendApplicationBaseD0Ev>:
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ffe1 	bl	8002e50 <_ZN23FrontendApplicationBaseD1Ev>
 8002e8e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f027 fcef 	bl	802a876 <_ZdlPvj>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffcb 	bl	8002e50 <_ZN23FrontendApplicationBaseD1Ev>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	0802ca10 	.word	0x0802ca10

08002ec8 <_ZN19FrontendApplicationD0Ev>:
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ffe7 	bl	8002ea4 <_ZN19FrontendApplicationD1Ev>
 8002ed6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f027 fccb 	bl	802a876 <_ZdlPvj>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f007 fe01 	bl	800ab00 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f018 fa4d 	bl	801b3a0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fb20 	bl	8004560 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	f7ff fd0d 	bl	8002960 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
    {

    }
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0802c9fc 	.word	0x0802c9fc

08002f5c <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4801      	ldr	r0, [pc, #4]	; (8002f68 <__tcf_0+0xc>)
 8002f62:	f000 f95d 	bl	8003220 <_ZN12FrontendHeapD1Ev>
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	240003c0 	.word	0x240003c0

08002f6c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3bf 8f5b 	dmb	ish
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d013      	beq.n	8002fb2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002f8a:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002f8c:	f027 fc75 	bl	802a87a <__cxa_guard_acquire>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002fa2:	f000 f867 	bl	8003074 <_ZN12FrontendHeapC1Ev>
 8002fa6:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002fa8:	f027 fcb2 	bl	802a910 <atexit>
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002fae:	f027 fc70 	bl	802a892 <__cxa_guard_release>
        return instance;
 8002fb2:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	240010a8 	.word	0x240010a8
 8002fbc:	240003c0 	.word	0x240003c0
 8002fc0:	08002f5d 	.word	0x08002f5d

08002fc4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fce3 	bl	80029a0 <_ZN8touchgfx7MVPHeapD1Ev>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	0802c9fc 	.word	0x0802c9fc

08002fe8 <_ZN16FrontendHeapBaseD0Ev>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffe7 	bl	8002fc4 <_ZN16FrontendHeapBaseD1Ev>
 8002ff6:	2114      	movs	r1, #20
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f027 fc3c 	bl	802a876 <_ZdlPvj>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f014 f93c 	bl	8017290 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	0802c9c8 	.word	0x0802c9c8

0800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	f014 f92a 	bl	8017290 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0802c994 	.word	0x0802c994

08003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f014 f918 	bl	8017290 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	0802c960 	.word	0x0802c960

08003074 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b085      	sub	sp, #20
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 0114 	add.w	r1, r3, #20
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f603 344c 	addw	r4, r3, #2892	; 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
        app(model, *this)
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4623      	mov	r3, r4
 800309a:	f7ff ff45 	bl	8002f28 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <_ZN12FrontendHeapC1Ev+0x8c>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3314      	adds	r3, #20
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ffad 	bl	8003008 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	332c      	adds	r3, #44	; 0x2c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ffba 	bl	800302c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ffc6 	bl	8003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4619      	mov	r1, r3
 80030d4:	f007 f86a 	bl	800a1ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80030de:	4618      	mov	r0, r3
 80030e0:	f007 fd00 	bl	800aae4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7ff ff0d 	bl	8002f0e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}
 80030fe:	bf00      	nop
 8003100:	0802c94c 	.word	0x0802c94c

08003104 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	8bbb      	ldrh	r3, [r7, #28]
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	8b3b      	ldrh	r3, [r7, #24]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	f7ff fd53 	bl	8002bcc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]
    }
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	0802cb58 	.word	0x0802cb58

0800313c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	8bbb      	ldrh	r3, [r7, #28]
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	8b3b      	ldrh	r3, [r7, #24]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	f7ff ffd3 	bl	8003104 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]
    }
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	0802c808 	.word	0x0802c808

08003174 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	0802c7f0 	.word	0x0802c7f0

08003194 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ffe8 	bl	8003174 <_ZN8touchgfx15TouchControllerC1Ev>
 80031a4:	4a03      	ldr	r2, [pc, #12]	; (80031b4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0802c7d8 	.word	0x0802c7d8

080031b8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80031be:	f000 fd59 	bl	8003c74 <_ZN14BitmapDatabase11getInstanceEv>
 80031c2:	4604      	mov	r4, r0
 80031c4:	f000 fd60 	bl	8003c88 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4619      	mov	r1, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2300      	movs	r3, #0
 80031d2:	2200      	movs	r2, #0
 80031d4:	4620      	mov	r0, r4
 80031d6:	f01b faf7 	bl	801e7c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <touchgfx_init+0x48>)
 80031dc:	f7ff fb90 	bl	8002900 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f006 ff2d 	bl	800a040 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80031e6:	4807      	ldr	r0, [pc, #28]	; (8003204 <touchgfx_init+0x4c>)
 80031e8:	f01b fa30 	bl	801e64c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80031ec:	f7ff febe 	bl	8002f6c <_ZN12FrontendHeap11getInstanceEv>
 80031f0:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80031f2:	4805      	ldr	r0, [pc, #20]	; (8003208 <touchgfx_init+0x50>)
 80031f4:	f7fe fdb6 	bl	8001d64 <_ZN11TouchGFXHAL10initializeEv>
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd90      	pop	{r4, r7, pc}
 8003200:	24001d48 	.word	0x24001d48
 8003204:	24000008 	.word	0x24000008
 8003208:	24001d4c 	.word	0x24001d4c

0800320c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003210:	4802      	ldr	r0, [pc, #8]	; (800321c <touchgfx_taskEntry+0x10>)
 8003212:	f015 f8cc 	bl	80183ae <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	24001d4c 	.word	0x24001d4c

08003220 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4a10      	ldr	r2, [pc, #64]	; (800326c <_ZN12FrontendHeapD1Ev+0x4c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe35 	bl	8002ea4 <_ZN19FrontendApplicationD1Ev>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f827 	bl	8003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	332c      	adds	r3, #44	; 0x2c
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f844 	bl	80032d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3314      	adds	r3, #20
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f863 	bl	8003320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff feb1 	bl	8002fc4 <_ZN16FrontendHeapBaseD1Ev>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	0802c94c 	.word	0x0802c94c

08003270 <_ZN12FrontendHeapD0Ev>:
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ffd1 	bl	8003220 <_ZN12FrontendHeapD1Ev>
 800327e:	f640 41e8 	movw	r1, #3304	; 0xce8
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f027 faf7 	bl	802a876 <_ZdlPvj>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f013 fff1 	bl	801728c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	0802c960 	.word	0x0802c960

080032b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ffe7 	bl	8003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80032c6:	2140      	movs	r1, #64	; 0x40
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f027 fad4 	bl	802a876 <_ZdlPvj>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f013 ffcf 	bl	801728c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	0802c994 	.word	0x0802c994

080032fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ffe7 	bl	80032d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800330a:	f44f 6132 	mov.w	r1, #2848	; 0xb20
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f027 fab1 	bl	802a876 <_ZdlPvj>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	f013 ffab 	bl	801728c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	0802c9c8 	.word	0x0802c9c8

08003344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffe7 	bl	8003320 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003352:	2118      	movs	r1, #24
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f027 fa8e 	bl	802a876 <_ZdlPvj>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a05      	ldr	r2, [pc, #20]	; (8003384 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fad3 	bl	8002920 <_ZN8touchgfx12FontProviderD1Ev>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	0802cc28 	.word	0x0802cc28

08003388 <_ZN23ApplicationFontProviderD0Ev>:
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffe7 	bl	8003364 <_ZN23ApplicationFontProviderD1Ev>
 8003396:	2104      	movs	r1, #4
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f027 fa6c 	bl	802a876 <_ZdlPvj>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fb73 	bl	8002aa4 <_ZN8touchgfx3LCDD1Ev>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0802fe0c 	.word	0x0802fe0c

080033cc <_ZN8touchgfx8LCD16bppD0Ev>:
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ffe7 	bl	80033a8 <_ZN8touchgfx8LCD16bppD1Ev>
 80033da:	2178      	movs	r1, #120	; 0x78
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f027 fa4a 	bl	802a876 <_ZdlPvj>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_Z41__static_initialization_and_destruction_0ii>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003402:	4293      	cmp	r3, r2
 8003404:	d114      	bne.n	8003430 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003406:	4818      	ldr	r0, [pc, #96]	; (8003468 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003408:	f7ff fec4 	bl	8003194 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800340c:	4817      	ldr	r0, [pc, #92]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800340e:	f7fe ff39 	bl	8002284 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8003412:	4817      	ldr	r0, [pc, #92]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003414:	f01e faa0 	bl	8021958 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003418:	f44f 7388 	mov.w	r3, #272	; 0x110
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003428:	4910      	ldr	r1, [pc, #64]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800342a:	4812      	ldr	r0, [pc, #72]	; (8003474 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800342c:	f7ff fe86 	bl	800313c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d113      	bne.n	800345e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800343c:	4293      	cmp	r3, r2
 800343e:	d10e      	bne.n	800345e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003440:	480c      	ldr	r0, [pc, #48]	; (8003474 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003442:	f7fe fd07 	bl	8001e54 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003446:	480c      	ldr	r0, [pc, #48]	; (8003478 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003448:	f7ff ff8c 	bl	8003364 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800344c:	4808      	ldr	r0, [pc, #32]	; (8003470 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800344e:	f7ff ffab 	bl	80033a8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8003452:	4806      	ldr	r0, [pc, #24]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003454:	f7fe ff40 	bl	80022d8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800345a:	f7fe fa89 	bl	8001970 <_ZN20STM32TouchControllerD1Ev>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	240010ac 	.word	0x240010ac
 800346c:	240010b0 	.word	0x240010b0
 8003470:	24001cd0 	.word	0x24001cd0
 8003474:	24001d4c 	.word	0x24001d4c
 8003478:	24000008 	.word	0x24000008

0800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	4a05      	ldr	r2, [pc, #20]	; (800349c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fb47 	bl	8002b20 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	0802ca98 	.word	0x0802ca98

080034a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffe7 	bl	800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80034ae:	2110      	movs	r1, #16
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f027 f9e0 	bl	802a876 <_ZdlPvj>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80034c8:	2301      	movs	r3, #1
    }
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80034de:	2338      	movs	r3, #56	; 0x38
    }
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	3308      	adds	r3, #8
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
    }
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003520:	887a      	ldrh	r2, [r7, #2]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	3308      	adds	r3, #8
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
    }
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003544:	2301      	movs	r3, #1
    }
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800355a:	f640 3318 	movw	r3, #2840	; 0xb18
    }
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	f640 3218 	movw	r2, #2840	; 0xb18
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	3308      	adds	r3, #8
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
    }
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	f640 3218 	movw	r2, #2840	; 0xb18
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	3308      	adds	r3, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80035c2:	2301      	movs	r3, #1
    }
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80035d8:	2310      	movs	r3, #16
    }
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035f2:	887b      	ldrh	r3, [r7, #2]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	3308      	adds	r3, #8
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
    }
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3308      	adds	r3, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
    }
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	1052      	asrs	r2, r2, #1
 800363c:	1899      	adds	r1, r3, r2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	e00a      	b.n	8003666 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68d2      	ldr	r2, [r2, #12]
 8003658:	1052      	asrs	r2, r2, #1
 800365a:	4413      	add	r3, r2
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6892      	ldr	r2, [r2, #8]
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4608      	mov	r0, r1
 8003668:	4798      	blx	r3
    }
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800369a:	2300      	movs	r3, #0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d001      	beq.n	80036a4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80036a4:	2300      	movs	r3, #0
    }
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <_GLOBAL__sub_I_touchgfx_init>:
 80036b2:	b580      	push	{r7, lr}
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7ff fe96 	bl	80033ec <_Z41__static_initialization_and_destruction_0ii>
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_GLOBAL__sub_D_touchgfx_init>:
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7ff fe8e 	bl	80033ec <_Z41__static_initialization_and_destruction_0ii>
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3320      	adds	r3, #32
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
    }
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <__NVIC_EnableIRQ>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	; (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_DisableIRQ>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db12      	blt.n	8003788 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	490a      	ldr	r1, [pc, #40]	; (8003794 <__NVIC_DisableIRQ+0x44>)
 800376a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	3320      	adds	r3, #32
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800377c:	f3bf 8f4f 	dsb	sy
}
 8003780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003782:	f3bf 8f6f 	isb	sy
}
 8003786:	bf00      	nop
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80037ec:	b5b0      	push	{r4, r5, r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f014 fdc7 	bl	801838a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80037fc:	687d      	ldr	r5, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3360      	adds	r3, #96	; 0x60
 8003804:	681c      	ldr	r4, [r3, #0]
 8003806:	f017 fef7 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800380a:	4603      	mov	r3, r0
 800380c:	4619      	mov	r1, r3
 800380e:	4628      	mov	r0, r5
 8003810:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3384      	adds	r3, #132	; 0x84
 800381a:	681c      	ldr	r4, [r3, #0]
 800381c:	2300      	movs	r3, #0
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003820:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003824:	47a0      	blx	r4
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bdb0      	pop	{r4, r5, r7, pc}
 800382e:	bf00      	nop
 8003830:	d0200000 	.word	0xd0200000

08003834 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800383c:	2109      	movs	r1, #9
 800383e:	205a      	movs	r0, #90	; 0x5a
 8003840:	f7ff ffaa 	bl	8003798 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003844:	2109      	movs	r1, #9
 8003846:	2058      	movs	r0, #88	; 0x58
 8003848:	f7ff ffa6 	bl	8003798 <__NVIC_SetPriority>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800385c:	205a      	movs	r0, #90	; 0x5a
 800385e:	f7ff ff59 	bl	8003714 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8003862:	2058      	movs	r0, #88	; 0x58
 8003864:	f7ff ff56 	bl	8003714 <__NVIC_EnableIRQ>
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003878:	205a      	movs	r0, #90	; 0x5a
 800387a:	f7ff ff69 	bl	8003750 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800387e:	2058      	movs	r0, #88	; 0x58
 8003880:	f7ff ff66 	bl	8003750 <__NVIC_DisableIRQ>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80038a6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80038ba:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80038bc:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80038be:	881a      	ldrh	r2, [r3, #0]
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6353      	str	r3, [r2, #52]	; 0x34
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	50001000 	.word	0x50001000
 80038e0:	24001dc8 	.word	0x24001dc8
 80038e4:	24001dca 	.word	0x24001dca

080038e8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f014 fd30 	bl	8018358 <_ZN8touchgfx3HAL10beginFrameEv>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	f014 fd2f 	bl	8018370 <_ZN8touchgfx3HAL8endFrameEv>

}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	50001084 	.word	0x50001084

08003938 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800394a:	2201      	movs	r2, #1
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	50001084 	.word	0x50001084
 8003960:	50001000 	.word	0x50001000

08003964 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f014 fcb9 	bl	80182ea <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03a      	beq.n	8003a04 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003990:	2200      	movs	r2, #0
 8003992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003996:	f3bf 8f4f 	dsb	sy
}
 800399a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	0b5b      	lsrs	r3, r3, #13
 80039a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80039ac:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b6:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80039c0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039c6:	4911      	ldr	r1, [pc, #68]	; (8003a0c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	60fa      	str	r2, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ea      	bne.n	80039b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	613a      	str	r2, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1db      	bne.n	80039ae <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80039f6:	f3bf 8f4f 	dsb	sy
}
 80039fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039fc:	f3bf 8f6f 	isb	sy
}
 8003a00:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003a02:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a04:	bf00      	nop
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	f014 fdcc 	bl	80185c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003a2a:	4603      	mov	r3, r0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d03a      	beq.n	8003ac8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a5a:	f3bf 8f4f 	dsb	sy
}
 8003a5e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a66:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	0b5b      	lsrs	r3, r3, #13
 8003a6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a70:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a7a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a84:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a8a:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	60fa      	str	r2, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ea      	bne.n	8003a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1e5a      	subs	r2, r3, #1
 8003aaa:	613a      	str	r2, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1db      	bne.n	8003a72 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003aba:	f3bf 8f4f 	dsb	sy
}
 8003abe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ac0:	f3bf 8f6f 	isb	sy
}
 8003ac4:	bf00      	nop
}
 8003ac6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03a      	beq.n	8003b6c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003afe:	f3bf 8f4f 	dsb	sy
}
 8003b02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	0b5b      	lsrs	r3, r3, #13
 8003b10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b14:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003b28:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b2e:	4912      	ldr	r1, [pc, #72]	; (8003b78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1e5a      	subs	r2, r3, #1
 8003b3a:	60fa      	str	r2, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ea      	bne.n	8003b20 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1e5a      	subs	r2, r3, #1
 8003b4e:	613a      	str	r2, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1db      	bne.n	8003b16 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5e:	f3bf 8f4f 	dsb	sy
}
 8003b62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b64:	f3bf 8f6f 	isb	sy
}
 8003b68:	bf00      	nop
}
 8003b6a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_LTDC_LineEventCallback+0x74>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_LTDC_LineEventCallback+0x78>)
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d017      	beq.n	8003bca <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_LTDC_LineEventCallback+0x7c>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f00f f88b 	bl	8012cbc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003ba6:	f7fe fb33 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fd9e 	bl	80036ee <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003bb2:	f7fe fa27 	bl	8002004 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003bb6:	f7fe fb2b 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f015 f9d9 	bl	8018f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fd fef6 	bl	80019b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003bc8:	e00e      	b.n	8003be8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_LTDC_LineEventCallback+0x78>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f00f f873 	bl	8012cbc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f7fd ff08 	bl	80019ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003bdc:	f7fe fb18 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fd75 	bl	80036d2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	50001000 	.word	0x50001000
 8003bf4:	24001dc8 	.word	0x24001dc8
 8003bf8:	24001dca 	.word	0x24001dca

08003bfc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d82c      	bhi.n	8003c68 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c2d 	.word	0x08003c2d
 8003c18:	08003c37 	.word	0x08003c37
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c4b 	.word	0x08003c4b
 8003c24:	08003c55 	.word	0x08003c55
 8003c28:	08003c5f 	.word	0x08003c5f
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c2c:	f006 fa80 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c30:	4603      	mov	r3, r0
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	e019      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003c36:	f006 fa7b 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	e014      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003c40:	f006 fa76 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c44:	4603      	mov	r3, r0
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	e00f      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003c4a:	f006 fa71 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	e00a      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c54:	f006 fa6c 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e005      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003c5e:	f006 fa67 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	e000      	b.n	8003c6a <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003c68:	2300      	movs	r3, #0
    }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop

08003c74 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	0802cc34 	.word	0x0802cc34

08003c88 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003c8c:	230e      	movs	r3, #14
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
    {
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
    }
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	0802d0d8 	.word	0x0802d0d8

08003cb8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    }
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffe9 	bl	8003c98 <_ZN8touchgfx4FontD1Ev>
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f026 fdd4 	bl	802a876 <_ZdlPvj>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e010      	b.n	8003d10 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	681c      	ldr	r4, [r3, #0]
 8003cfe:	f107 030f 	add.w	r3, r7, #15
 8003d02:	f107 0210 	add.w	r2, r7, #16
 8003d06:	8879      	ldrh	r1, [r7, #2]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	47a0      	blx	r4
 8003d0c:	6178      	str	r0, [r7, #20]
        return glyph;
 8003d0e:	697b      	ldr	r3, [r7, #20]
    }
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}

08003d18 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	895b      	ldrh	r3, [r3, #10]
    }
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	899b      	ldrh	r3, [r3, #12]
    }
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	889b      	ldrh	r3, [r3, #4]
    }
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	889a      	ldrh	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	799b      	ldrb	r3, [r3, #6]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	b29b      	uxth	r3, r3
    }
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	79db      	ldrb	r3, [r3, #7]
 8003d8e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003d92:	b2db      	uxtb	r3, r3
    }
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	79db      	ldrb	r3, [r3, #7]
 8003dac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003db0:	b2db      	uxtb	r3, r3
    }
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff61 	bl	8003c98 <_ZN8touchgfx4FontD1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	0802ef40 	.word	0x0802ef40

08003de4 <_ZN8touchgfx9ConstFontD0Ev>:
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ffe7 	bl	8003dc0 <_ZN8touchgfx9ConstFontD1Ev>
 8003df2:	2118      	movs	r1, #24
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f026 fd3e 	bl	802a876 <_ZdlPvj>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ffd3 	bl	8003dc0 <_ZN8touchgfx9ConstFontD1Ev>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	0802cf20 	.word	0x0802cf20

08003e28 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ffe7 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003e36:	2128      	movs	r1, #40	; 0x28
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f026 fd1c 	bl	802a876 <_ZdlPvj>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    {
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
    }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	0802cd54 	.word	0x0802cd54

08003e68 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
    }
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffe9 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
 8003e76:	2108      	movs	r1, #8
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f026 fcfc 	bl	802a876 <_ZdlPvj>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	897a      	ldrh	r2, [r7, #10]
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	893a      	ldrh	r2, [r7, #8]
 8003ec4:	805a      	strh	r2, [r3, #2]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	809a      	strh	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8b3a      	ldrh	r2, [r7, #24]
 8003ed0:	80da      	strh	r2, [r3, #6]
    {
    }
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
        : rect(),
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fcec 	bl	80028d0 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	330c      	adds	r3, #12
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe fce7 	bl	80028d0 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	0802eedc 	.word	0x0802eedc

08003f40 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    {
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
    }
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	0802eedc 	.word	0x0802eedc

08003f60 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
    }
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ffe9 	bl	8003f40 <_ZN8touchgfx8DrawableD1Ev>
 8003f6e:	2128      	movs	r1, #40	; 0x28
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f026 fc80 	bl	802a876 <_ZdlPvj>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003f88:	2300      	movs	r3, #0
    }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
    }
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	4611      	mov	r1, r2
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	813b      	strh	r3, [r7, #8]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003fc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fcc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f844 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003fd8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f898 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	809a      	strh	r2, [r3, #4]
    }
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	80da      	strh	r2, [r3, #6]
    }
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	807b      	strh	r3, [r7, #2]
 800406c:	4613      	mov	r3, r2
 800406e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	332c      	adds	r3, #44	; 0x2c
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800407c:	4611      	mov	r1, r2
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
        setY(y);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3330      	adds	r3, #48	; 0x30
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800408e:	4611      	mov	r1, r2
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
    }
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	811a      	strh	r2, [r3, #8]
    }
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	815a      	strh	r2, [r3, #10]
    }
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    {
    }
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
    {
    }
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
    {
    }
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	807b      	strh	r3, [r7, #2]
 8004124:	4613      	mov	r3, r2
 8004126:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3334      	adds	r3, #52	; 0x34
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004134:	4611      	mov	r1, r2
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
        setHeight(height);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3338      	adds	r3, #56	; 0x38
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004146:	4611      	mov	r1, r2
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4798      	blx	r3
    }
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
    {
    }
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
    {
    }
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	807b      	strh	r3, [r7, #2]
 80041be:	4613      	mov	r3, r2
 80041c0:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3350      	adds	r3, #80	; 0x50
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	8879      	ldrh	r1, [r7, #2]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80041d2:	b292      	uxth	r2, r2
 80041d4:	1a8a      	subs	r2, r1, r2
 80041d6:	b292      	uxth	r2, r2
 80041d8:	b210      	sxth	r0, r2
 80041da:	8839      	ldrh	r1, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80041e2:	b292      	uxth	r2, r2
 80041e4:	1a8a      	subs	r2, r1, r2
 80041e6:	b292      	uxth	r2, r2
 80041e8:	b212      	sxth	r2, r2
 80041ea:	4601      	mov	r1, r0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
    }
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004206:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004216:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff ffe1 	bl	80041f8 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]
    }
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <_ZN8touchgfx3HAL3lcdEv+0x22>
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	e002      	b.n	8004274 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
    }
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	2400b8c4 	.word	0x2400b8c4

08004284 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	721a      	strb	r2, [r3, #8]
    {
    }
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	0802cefc 	.word	0x0802cefc

080042b0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
    {
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	601a      	str	r2, [r3, #0]
    }
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	0802cefc 	.word	0x0802cefc

080042d0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
    }
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ffe9 	bl	80042b0 <_ZN8touchgfx10TransitionD1Ev>
 80042de:	210c      	movs	r1, #12
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f026 fac8 	bl	802a876 <_ZdlPvj>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    {
    }
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    {
    }
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    {
    }
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004334:	f017 f960 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8004338:	4603      	mov	r3, r0
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	3230      	adds	r2, #48	; 0x30
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	4790      	blx	r2
    }
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	605a      	str	r2, [r3, #4]
    }
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f017 f9aa 	bl	801b6cc <_ZN8touchgfx11ApplicationC1Ev>
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
          pendingScreenTransitionCallback(0)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004392:	6013      	str	r3, [r2, #0]
    }
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	0802cab0 	.word	0x0802cab0
 80043a4:	2400b910 	.word	0x2400b910

080043a8 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	601a      	str	r2, [r3, #0]
    }
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	721a      	strb	r2, [r3, #8]
    }
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	607b      	str	r3, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	817b      	strh	r3, [r7, #10]
 80043ec:	4613      	mov	r3, r2
 80043ee:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fec3 	bl	800417e <_ZNK8touchgfx8Drawable9isVisibleEv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fec9 	bl	8004198 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004410:	2300      	movs	r3, #0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	601a      	str	r2, [r3, #0]
        }
    }
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]
    }
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd48 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 8004450:	4a03      	ldr	r2, [pc, #12]	; (8004460 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	0802ce74 	.word	0x0802ce74

08004464 <_ZN8touchgfx6WidgetD1Ev>:
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	4a05      	ldr	r2, [pc, #20]	; (8004484 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fd63 	bl	8003f40 <_ZN8touchgfx8DrawableD1Ev>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0802ce74 	.word	0x0802ce74

08004488 <_ZN8touchgfx6WidgetD0Ev>:
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ffe7 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8004496:	2128      	movs	r1, #40	; 0x28
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f026 f9ec 	bl	802a876 <_ZdlPvj>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff56 	bl	8004368 <_ZN8touchgfx14MVPApplicationC1Ev>
 80044bc:	4a13      	ldr	r2, [pc, #76]	; (800450c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f92b 	bl	8004724 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
      model(m)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80044de:	f7fd fe97 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	3208      	adds	r2, #8
 80044e8:	6812      	ldr	r2, [r2, #0]
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f005 fda5 	bl	800a040 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80044f6:	f7ff fea9 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f01f f876 	bl	80235ee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	0802ca54 	.word	0x0802ca54

08004510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ffe9 	bl	8004510 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	3208      	adds	r2, #8
 800454e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004552:	e883 0003 	stmia.w	r3, {r0, r1}
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	f107 0008 	add.w	r0, r7, #8
 800457a:	f107 0318 	add.w	r3, r7, #24
 800457e:	cb0c      	ldmia	r3, {r2, r3}
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	f000 f8eb 	bl	800475c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004586:	f107 0308 	add.w	r3, r7, #8
 800458a:	4619      	mov	r1, r3
 800458c:	4620      	mov	r0, r4
 800458e:	f7ff ffcb 	bl	8004528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe ff70 	bl	800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80045a8:	bf00      	nop
 80045aa:	3724      	adds	r7, #36	; 0x24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	080045b5 	.word	0x080045b5

080045b4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80045d6:	f000 f8f3 	bl	80047c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	2400b904 	.word	0x2400b904
 80045e8:	2400b900 	.word	0x2400b900

080045ec <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
 8004602:	f107 0008 	add.w	r0, r7, #8
 8004606:	f107 0318 	add.w	r3, r7, #24
 800460a:	cb0c      	ldmia	r3, {r2, r3}
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	f000 f8a5 	bl	800475c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	4619      	mov	r1, r3
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff ff85 	bl	8004528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe ff2a 	bl	800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004634:	bf00      	nop
 8004636:	3724      	adds	r7, #36	; 0x24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd90      	pop	{r4, r7, pc}
 800463c:	08004641 	.word	0x08004641

08004640 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 8004660:	4804      	ldr	r0, [pc, #16]	; (8004674 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 8004662:	f000 f9c7 	bl	80049f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2400b904 	.word	0x2400b904
 8004674:	2400b900 	.word	0x2400b900

08004678 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	f107 0008 	add.w	r0, r7, #8
 8004692:	f107 0318 	add.w	r3, r7, #24
 8004696:	cb0c      	ldmia	r3, {r2, r3}
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	f000 f85f 	bl	800475c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	4619      	mov	r1, r3
 80046a4:	4620      	mov	r0, r4
 80046a6:	f7ff ff3f 	bl	8004528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fee4 	bl	800347c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80046c0:	bf00      	nop
 80046c2:	3724      	adds	r7, #36	; 0x24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	080046cd 	.word	0x080046cd

080046cc <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4b04      	ldr	r3, [pc, #16]	; (80046fc <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 80046ec:	4804      	ldr	r0, [pc, #16]	; (8004700 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 80046ee:	f000 fa9d 	bl	8004c2c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	2400b904 	.word	0x2400b904
 8004700:	2400b900 	.word	0x2400b900

08004704 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	0802caf4 	.word	0x0802caf4

08004724 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ffe8 	bl	8004704 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
    }
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	0802ca98 	.word	0x0802ca98

0800475c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4639      	mov	r1, r7
 8004768:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffc8 	bl	8004704 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3308      	adds	r3, #8
 8004784:	463a      	mov	r2, r7
 8004786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800478a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	0802ca98 	.word	0x0802ca98

0800479c <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fd6c 	bl	8004284 <_ZN8touchgfx10TransitionC1Ev>
 80047ac:	4a03      	ldr	r2, [pc, #12]	; (80047bc <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	0802ced8 	.word	0x0802ced8

080047c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b08f      	sub	sp, #60	; 0x3c
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3320      	adds	r3, #32
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
 80047e0:	4603      	mov	r3, r0
 80047e2:	f640 3217 	movw	r2, #2839	; 0xb17
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d805      	bhi.n	80047f6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80047ec:	4a7d      	ldr	r2, [pc, #500]	; (80049e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80047ee:	21a3      	movs	r1, #163	; 0xa3
 80047f0:	487d      	ldr	r0, [pc, #500]	; (80049e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80047f2:	f026 f86f 	bl	802a8d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3320      	adds	r3, #32
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4610      	mov	r0, r2
 8004806:	4798      	blx	r3
 8004808:	4603      	mov	r3, r0
 800480a:	2b0f      	cmp	r3, #15
 800480c:	d805      	bhi.n	800481a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800480e:	4b77      	ldr	r3, [pc, #476]	; (80049ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004810:	4a74      	ldr	r2, [pc, #464]	; (80049e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004812:	21a4      	movs	r1, #164	; 0xa4
 8004814:	4874      	ldr	r0, [pc, #464]	; (80049e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004816:	f026 f85d 	bl	802a8d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3320      	adds	r3, #32
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
 800482c:	4603      	mov	r3, r0
 800482e:	2b0b      	cmp	r3, #11
 8004830:	d805      	bhi.n	800483e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004832:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004834:	4a6b      	ldr	r2, [pc, #428]	; (80049e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004836:	21a5      	movs	r1, #165	; 0xa5
 8004838:	486b      	ldr	r0, [pc, #428]	; (80049e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800483a:	f026 f84b 	bl	802a8d4 <__assert_func>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800484a:	f016 fed5 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	f016 ff1f 	bl	801b694 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
    if (*currentTrans)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
    if (*currentScreen)
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3314      	adds	r3, #20
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4610      	mov	r0, r2
 80048a0:	4798      	blx	r3
    if (*currentPresenter)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3304      	adds	r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4610      	mov	r0, r2
 80048ba:	4798      	blx	r3
    if (*currentScreen)
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4610      	mov	r0, r2
 80048d2:	4798      	blx	r3
    if (*currentPresenter)
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4610      	mov	r0, r2
 80048ec:	4798      	blx	r3
}
 80048ee:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fab2 	bl	8004e60 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4619      	mov	r1, r3
 8004900:	200c      	movs	r0, #12
 8004902:	f7ff fac1 	bl	8003e88 <_ZnwjPv>
 8004906:	4604      	mov	r4, r0
 8004908:	4620      	mov	r0, r4
 800490a:	f7ff ff47 	bl	800479c <_ZN8touchgfx12NoTransitionC1Ev>
 800490e:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fab5 	bl	8004e86 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800491c:	4603      	mov	r3, r0
 800491e:	4619      	mov	r1, r3
 8004920:	f640 3018 	movw	r0, #2840	; 0xb18
 8004924:	f7ff fab0 	bl	8003e88 <_ZnwjPv>
 8004928:	4604      	mov	r4, r0
 800492a:	4620      	mov	r0, r4
 800492c:	f005 fe44 	bl	800a5b8 <_ZN8MainViewC1Ev>
 8004930:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2100      	movs	r1, #0
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fab7 	bl	8004eac <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800493e:	4603      	mov	r3, r0
 8004940:	4619      	mov	r1, r3
 8004942:	2010      	movs	r0, #16
 8004944:	f7ff faa0 	bl	8003e88 <_ZnwjPv>
 8004948:	4604      	mov	r4, r0
 800494a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800494c:	4620      	mov	r0, r4
 800494e:	f005 fda5 	bl	800a49c <_ZN13MainPresenterC1ER8MainView>
 8004952:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004958:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	3304      	adds	r3, #4
 8004970:	e000      	b.n	8004974 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004972:	2300      	movs	r3, #0
 8004974:	4619      	mov	r1, r3
 8004976:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004978:	f7ff fd16 	bl	80043a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	3304      	adds	r3, #4
 8004980:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd4e 	bl	8004424 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800498c:	4618      	mov	r0, r3
 800498e:	f000 faa0 	bl	8004ed2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69f8      	ldr	r0, [r7, #28]
 80049a8:	4798      	blx	r3
    newPresenter->activate();
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69b8      	ldr	r0, [r7, #24]
 80049b2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80049b4:	6979      	ldr	r1, [r7, #20]
 80049b6:	69f8      	ldr	r0, [r7, #28]
 80049b8:	f018 fab2 	bl	801cf20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3310      	adds	r3, #16
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6978      	ldr	r0, [r7, #20]
 80049c6:	4798      	blx	r3
    newTransition->invalidate();
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3314      	adds	r3, #20
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6978      	ldr	r0, [r7, #20]
 80049d2:	4798      	blx	r3
}
 80049d4:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80049d8:	4618      	mov	r0, r3
 80049da:	373c      	adds	r7, #60	; 0x3c
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}
 80049e0:	0802be68 	.word	0x0802be68
 80049e4:	0802bef8 	.word	0x0802bef8
 80049e8:	0802bff8 	.word	0x0802bff8
 80049ec:	0802c040 	.word	0x0802c040
 80049f0:	0802c0e4 	.word	0x0802c0e4

080049f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80049f4:	b590      	push	{r4, r7, lr}
 80049f6:	b08f      	sub	sp, #60	; 0x3c
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3320      	adds	r3, #32
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4610      	mov	r0, r2
 8004a12:	4798      	blx	r3
 8004a14:	4603      	mov	r3, r0
 8004a16:	f640 3217 	movw	r2, #2839	; 0xb17
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d805      	bhi.n	8004a2a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004a1e:	4b7e      	ldr	r3, [pc, #504]	; (8004c18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004a20:	4a7e      	ldr	r2, [pc, #504]	; (8004c1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a22:	21a3      	movs	r1, #163	; 0xa3
 8004a24:	487e      	ldr	r0, [pc, #504]	; (8004c20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a26:	f025 ff55 	bl	802a8d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3320      	adds	r3, #32
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b0f      	cmp	r3, #15
 8004a40:	d805      	bhi.n	8004a4e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004a42:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004a44:	4a75      	ldr	r2, [pc, #468]	; (8004c1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a46:	21a4      	movs	r1, #164	; 0xa4
 8004a48:	4875      	ldr	r0, [pc, #468]	; (8004c20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a4a:	f025 ff43 	bl	802a8d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3320      	adds	r3, #32
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4798      	blx	r3
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b37      	cmp	r3, #55	; 0x37
 8004a64:	d805      	bhi.n	8004a72 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004a66:	4b70      	ldr	r3, [pc, #448]	; (8004c28 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004a68:	4a6c      	ldr	r2, [pc, #432]	; (8004c1c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a6a:	21a5      	movs	r1, #165	; 0xa5
 8004a6c:	486c      	ldr	r0, [pc, #432]	; (8004c20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a6e:	f025 ff31 	bl	802a8d4 <__assert_func>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004a7e:	f016 fdbb 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f016 fe05 	bl	801b694 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	4798      	blx	r3
    if (*currentTrans)
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
    if (*currentScreen)
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4798      	blx	r3
    if (*currentPresenter)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
    if (*currentScreen)
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
    if (*currentPresenter)
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4798      	blx	r3
}
 8004b22:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 f9df 	bl	8004eee <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004b30:	4603      	mov	r3, r0
 8004b32:	4619      	mov	r1, r3
 8004b34:	2038      	movs	r0, #56	; 0x38
 8004b36:	f7ff f9a7 	bl	8003e88 <_ZnwjPv>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	2114      	movs	r1, #20
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 fa1c 	bl	8004f7c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004b44:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 f99a 	bl	8004e86 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4619      	mov	r1, r3
 8004b56:	f640 3018 	movw	r0, #2840	; 0xb18
 8004b5a:	f7ff f995 	bl	8003e88 <_ZnwjPv>
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4620      	mov	r0, r4
 8004b62:	f005 fd29 	bl	800a5b8 <_ZN8MainViewC1Ev>
 8004b66:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f99c 	bl	8004eac <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004b74:	4603      	mov	r3, r0
 8004b76:	4619      	mov	r1, r3
 8004b78:	2010      	movs	r0, #16
 8004b7a:	f7ff f985 	bl	8003e88 <_ZnwjPv>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b82:	4620      	mov	r0, r4
 8004b84:	f005 fc8a 	bl	800a49c <_ZN13MainPresenterC1ER8MainView>
 8004b88:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b8e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b94:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b9a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	e000      	b.n	8004baa <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	4619      	mov	r1, r3
 8004bac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004bae:	f7ff fbfb 	bl	80043a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fc33 	bl	8004424 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 f985 	bl	8004ed2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69f8      	ldr	r0, [r7, #28]
 8004bde:	4798      	blx	r3
    newPresenter->activate();
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004bea:	6979      	ldr	r1, [r7, #20]
 8004bec:	69f8      	ldr	r0, [r7, #28]
 8004bee:	f018 f997 	bl	801cf20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	4798      	blx	r3
    newTransition->invalidate();
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	4798      	blx	r3
}
 8004c0a:	bf00      	nop
    return newPresenter;
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	373c      	adds	r7, #60	; 0x3c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	0802be68 	.word	0x0802be68
 8004c1c:	0802c188 	.word	0x0802c188
 8004c20:	0802bff8 	.word	0x0802bff8
 8004c24:	0802c040 	.word	0x0802c040
 8004c28:	0802c0e4 	.word	0x0802c0e4

08004c2c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b08f      	sub	sp, #60	; 0x3c
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3320      	adds	r3, #32
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8004c52:	d205      	bcs.n	8004c60 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004c54:	4b7d      	ldr	r3, [pc, #500]	; (8004e4c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004c56:	4a7e      	ldr	r2, [pc, #504]	; (8004e50 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004c58:	21a3      	movs	r1, #163	; 0xa3
 8004c5a:	487e      	ldr	r0, [pc, #504]	; (8004e54 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c5c:	f025 fe3a 	bl	802a8d4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3320      	adds	r3, #32
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4798      	blx	r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d805      	bhi.n	8004c84 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004c78:	4b77      	ldr	r3, [pc, #476]	; (8004e58 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c7a:	4a75      	ldr	r2, [pc, #468]	; (8004e50 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004c7c:	21a4      	movs	r1, #164	; 0xa4
 8004c7e:	4875      	ldr	r0, [pc, #468]	; (8004e54 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c80:	f025 fe28 	bl	802a8d4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3320      	adds	r3, #32
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b37      	cmp	r3, #55	; 0x37
 8004c9a:	d805      	bhi.n	8004ca8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004c9c:	4b6f      	ldr	r3, [pc, #444]	; (8004e5c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c9e:	4a6c      	ldr	r2, [pc, #432]	; (8004e50 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004ca0:	21a5      	movs	r1, #165	; 0xa5
 8004ca2:	486c      	ldr	r0, [pc, #432]	; (8004e54 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004ca4:	f025 fe16 	bl	802a8d4 <__assert_func>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004cb4:	f016 fca0 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f016 fcea 	bl	801b694 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d008      	beq.n	8004cda <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4798      	blx	r3
    if (*currentTrans)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4798      	blx	r3
    if (*currentScreen)
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4798      	blx	r3
    if (*currentPresenter)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4610      	mov	r0, r2
 8004d24:	4798      	blx	r3
    if (*currentScreen)
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4798      	blx	r3
    if (*currentPresenter)
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4610      	mov	r0, r2
 8004d56:	4798      	blx	r3
}
 8004d58:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f94d 	bl	8005000 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4619      	mov	r1, r3
 8004d6a:	2038      	movs	r0, #56	; 0x38
 8004d6c:	f7ff f88c 	bl	8003e88 <_ZnwjPv>
 8004d70:	4604      	mov	r4, r0
 8004d72:	2114      	movs	r1, #20
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 f98b 	bl	8005090 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004d7a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f9c6 	bl	8005114 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8004d90:	f7ff f87a 	bl	8003e88 <_ZnwjPv>
 8004d94:	4604      	mov	r4, r0
 8004d96:	4620      	mov	r0, r4
 8004d98:	f005 fb22 	bl	800a3e0 <_ZN20Localize_AnomalyViewC1Ev>
 8004d9c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 f9c8 	bl	800513a <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004daa:	4603      	mov	r3, r0
 8004dac:	4619      	mov	r1, r3
 8004dae:	2010      	movs	r0, #16
 8004db0:	f7ff f86a 	bl	8003e88 <_ZnwjPv>
 8004db4:	4604      	mov	r4, r0
 8004db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db8:	4620      	mov	r0, r4
 8004dba:	f005 fab9 	bl	800a330 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004dbe:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dca:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	3304      	adds	r3, #4
 8004ddc:	e000      	b.n	8004de0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004dde:	2300      	movs	r3, #0
 8004de0:	4619      	mov	r1, r3
 8004de2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004de4:	f7ff fae0 	bl	80043a8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	3304      	adds	r3, #4
 8004dec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fb18 	bl	8004424 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f9b1 	bl	8005160 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69f8      	ldr	r0, [r7, #28]
 8004e14:	4798      	blx	r3
    newPresenter->activate();
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69b8      	ldr	r0, [r7, #24]
 8004e1e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	69f8      	ldr	r0, [r7, #28]
 8004e24:	f018 f87c 	bl	801cf20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6978      	ldr	r0, [r7, #20]
 8004e32:	4798      	blx	r3
    newTransition->invalidate();
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	4798      	blx	r3
}
 8004e40:	bf00      	nop
    return newPresenter;
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	373c      	adds	r7, #60	; 0x3c
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}
 8004e4c:	0802be68 	.word	0x0802be68
 8004e50:	0802c29c 	.word	0x0802c29c
 8004e54:	0802bff8 	.word	0x0802bff8
 8004e58:	0802c040 	.word	0x0802c040
 8004e5c:	0802c0e4 	.word	0x0802c0e4

08004e60 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	887a      	ldrh	r2, [r7, #2]
 8004e76:	4611      	mov	r1, r2
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	4603      	mov	r3, r0
    }
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3324      	adds	r3, #36	; 0x24
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	887a      	ldrh	r2, [r7, #2]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4798      	blx	r3
 8004ea2:	4603      	mov	r3, r0
    }
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3324      	adds	r3, #36	; 0x24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	887a      	ldrh	r2, [r7, #2]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	4603      	mov	r3, r0
    }
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3324      	adds	r3, #36	; 0x24
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	4611      	mov	r1, r2
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	4603      	mov	r3, r0
    }
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fa8e 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 8004f24:	4a03      	ldr	r2, [pc, #12]	; (8004f34 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	0802cd88 	.word	0x0802cd88

08004f38 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fa8b 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	0802cd88 	.word	0x0802cd88

08004f5c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ffe7 	bl	8004f38 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004f6a:	2128      	movs	r1, #40	; 0x28
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f025 fc82 	bl	802a876 <_ZdlPvj>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f97a 	bl	8004284 <_ZN8touchgfx10TransitionC1Ev>
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	81da      	strh	r2, [r3, #14]
          solid()
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3310      	adds	r3, #16
 8004fac:	2228      	movs	r2, #40	; 0x28
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f025 fe94 	bl	802acde <memset>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3310      	adds	r3, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff ffaa 	bl	8004f14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b21a      	sxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	819a      	strh	r2, [r3, #12]
            break;
 8004fca:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f103 0010 	add.w	r0, r3, #16
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b21b      	sxth	r3, r3
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	f7fe ffe2 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	0802cd64 	.word	0x0802cd64
 8004ff8:	2400b8ba 	.word	0x2400b8ba
 8004ffc:	2400b8b8 	.word	0x2400b8b8

08005000 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3324      	adds	r3, #36	; 0x24
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	4611      	mov	r1, r2
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
 800501c:	4603      	mov	r3, r0
    }
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fa04 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 8005038:	4a03      	ldr	r2, [pc, #12]	; (8005048 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	0802ce10 	.word	0x0802ce10

0800504c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	4a05      	ldr	r2, [pc, #20]	; (800506c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fa01 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	0802ce10 	.word	0x0802ce10

08005070 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ffe7 	bl	800504c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 800507e:	2128      	movs	r1, #40	; 0x28
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f025 fbf8 	bl	802a876 <_ZdlPvj>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af02      	add	r7, sp, #8
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
          solid()
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f8f0 	bl	8004284 <_ZN8touchgfx10TransitionC1Ev>
 80050a4:	4a18      	ldr	r2, [pc, #96]	; (8005108 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	81da      	strh	r2, [r3, #14]
          solid()
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3310      	adds	r3, #16
 80050c0:	2228      	movs	r2, #40	; 0x28
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f025 fe0a 	bl	802acde <memset>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3310      	adds	r3, #16
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ffaa 	bl	8005028 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 80050d4:	4b0d      	ldr	r3, [pc, #52]	; (800510c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b21a      	sxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	819a      	strh	r2, [r3, #12]
            break;
 80050de:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f103 0010 	add.w	r0, r3, #16
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b21a      	sxth	r2, r3
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b21b      	sxth	r3, r3
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	f7fe ff58 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	0802cdec 	.word	0x0802cdec
 800510c:	2400b8ba 	.word	0x2400b8ba
 8005110:	2400b8b8 	.word	0x2400b8b8

08005114 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3324      	adds	r3, #36	; 0x24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	887a      	ldrh	r2, [r7, #2]
 800512a:	4611      	mov	r1, r2
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
 8005130:	4603      	mov	r3, r0
    }
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3324      	adds	r3, #36	; 0x24
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	887a      	ldrh	r2, [r7, #2]
 8005150:	4611      	mov	r1, r2
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
 8005156:	4603      	mov	r3, r0
    }
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3310      	adds	r3, #16
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fed2 	bl	8004f38 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f88a 	bl	80042b0 <_ZN8touchgfx10TransitionD1Ev>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	0802cd64 	.word	0x0802cd64

080051ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ffe1 	bl	800517c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 80051ba:	2138      	movs	r1, #56	; 0x38
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f025 fb5a 	bl	802a876 <_ZdlPvj>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3310      	adds	r3, #16
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff34 	bl	800504c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff f862 	bl	80042b0 <_ZN8touchgfx10TransitionD1Ev>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	0802cdec 	.word	0x0802cdec

080051fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff ffe1 	bl	80051cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 800520a:	2138      	movs	r1, #56	; 0x38
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f025 fb32 	bl	802a876 <_ZdlPvj>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <_ZN8touchgfx12NoTransitionD1Ev>:
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	4a05      	ldr	r2, [pc, #20]	; (800523c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff f83f 	bl	80042b0 <_ZN8touchgfx10TransitionD1Ev>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	0802ced8 	.word	0x0802ced8

08005240 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff ffe7 	bl	800521c <_ZN8touchgfx12NoTransitionD1Ev>
 800524e:	210c      	movs	r1, #12
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f025 fb10 	bl	802a876 <_ZdlPvj>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b093      	sub	sp, #76	; 0x4c
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff f840 	bl	80042f0 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	7a9b      	ldrb	r3, [r3, #10]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7a9a      	ldrb	r2, [r3, #10]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7a5b      	ldrb	r3, [r3, #9]
 8005284:	429a      	cmp	r2, r3
 8005286:	d82b      	bhi.n	80052e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7a9b      	ldrb	r3, [r3, #10]
 800528c:	b298      	uxth	r0, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7a5b      	ldrb	r3, [r3, #9]
 8005298:	b29b      	uxth	r3, r3
 800529a:	2100      	movs	r1, #0
 800529c:	f017 fe46 	bl	801cf2c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d019      	beq.n	80052ee <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	dd01      	ble.n	80052d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x70>
 80052cc:	2201      	movs	r2, #1
 80052ce:	e001      	b.n	80052d4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x74>
 80052d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052d4:	4413      	add	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	b21a      	sxth	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	81da      	strh	r2, [r3, #14]
 80052de:	e006      	b.n	80052ee <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	729a      	strb	r2, [r3, #10]
            return;
 80052ec:	e07e      	b.n	80053ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3310      	adds	r3, #16
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fe89 	bl	800400a <_ZNK8touchgfx8Drawable9getHeightEv>
 80052f8:	4603      	mov	r3, r0
 80052fa:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f103 0010 	add.w	r0, r3, #16
 8005302:	4b3c      	ldr	r3, [pc, #240]	; (80053f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	b29b      	uxth	r3, r3
 8005312:	b21b      	sxth	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	f7fe fed0 	bl	80040ba <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3310      	adds	r3, #16
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fe73 	bl	800400a <_ZNK8touchgfx8Drawable9getHeightEv>
 8005324:	4603      	mov	r3, r0
 8005326:	b29b      	uxth	r3, r3
 8005328:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3310      	adds	r3, #16
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fe69 	bl	800400a <_ZNK8touchgfx8Drawable9getHeightEv>
 8005338:	4603      	mov	r3, r0
 800533a:	4619      	mov	r1, r3
 800533c:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b21a      	sxth	r2, r3
 8005342:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8005346:	f107 0018 	add.w	r0, r7, #24
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	460a      	mov	r2, r1
 8005350:	2100      	movs	r1, #0
 8005352:	f7fe fda5 	bl	8003ea0 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	4618      	mov	r0, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3310      	adds	r3, #16
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f107 0218 	add.w	r2, r7, #24
 800536a:	4611      	mov	r1, r2
 800536c:	4798      	blx	r3
                break;
 800536e:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7a9b      	ldrb	r3, [r3, #10]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d139      	bne.n	80053ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
 8005378:	4b20      	ldr	r3, [pc, #128]	; (80053fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x19c>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d035      	beq.n	80053ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3310      	adds	r3, #16
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fe06 	bl	8003f96 <_ZNK8touchgfx8Drawable7getRectEv>
 800538a:	4602      	mov	r2, r0
 800538c:	f107 0310 	add.w	r3, r7, #16
 8005390:	6810      	ldr	r0, [r2, #0]
 8005392:	6851      	ldr	r1, [r2, #4]
 8005394:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8005396:	f7fc ff3b 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 800539a:	4603      	mov	r3, r0
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	3230      	adds	r2, #48	; 0x30
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	4790      	blx	r2
 80053a6:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fd fa8f 	bl	80028d0 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b21b      	sxth	r3, r3
 80053c0:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b21b      	sxth	r3, r3
 80053c8:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80053ca:	f7fc ff21 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 80053ce:	f7fe ff3d 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 80053d2:	6803      	ldr	r3, [r0, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	f107 0310 	add.w	r3, r7, #16
 80053dc:	f107 0208 	add.w	r2, r7, #8
 80053e0:	2100      	movs	r1, #0
 80053e2:	9101      	str	r1, [sp, #4]
 80053e4:	21ff      	movs	r1, #255	; 0xff
 80053e6:	9100      	str	r1, [sp, #0]
 80053e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ea:	47a0      	blx	r4
        }
    }
 80053ec:	3744      	adds	r7, #68	; 0x44
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	2400b8ba 	.word	0x2400b8ba
 80053f8:	2400b8b8 	.word	0x2400b8b8
 80053fc:	2400b8c2 	.word	0x2400b8c2

08005400 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6858      	ldr	r0, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3360      	adds	r3, #96	; 0x60
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	3210      	adds	r2, #16
 800541a:	4611      	mov	r1, r2
 800541c:	4798      	blx	r3
    }
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fe ff71 	bl	8004318 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6858      	ldr	r0, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	335c      	adds	r3, #92	; 0x5c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	3210      	adds	r2, #16
 8005448:	4611      	mov	r1, r2
 800544a:	4798      	blx	r3
    }
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    {
    }
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
        }
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af02      	add	r7, sp, #8
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	4613      	mov	r3, r2
 8005498:	2200      	movs	r2, #0
 800549a:	2100      	movs	r1, #0
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe fcff 	bl	8003ea0 <_ZN8touchgfx4RectC1Essss>
        }
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b093      	sub	sp, #76	; 0x4c
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe ff1a 	bl	80042f0 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7a9b      	ldrb	r3, [r3, #10]
 80054c0:	3301      	adds	r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7a9a      	ldrb	r2, [r3, #10]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7a5b      	ldrb	r3, [r3, #9]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d82b      	bhi.n	800552c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7a9b      	ldrb	r3, [r3, #10]
 80054d8:	b298      	uxth	r0, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7a5b      	ldrb	r3, [r3, #9]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2100      	movs	r1, #0
 80054e8:	f017 fd20 	bl	801cf2c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80054ec:	4603      	mov	r3, r0
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d019      	beq.n	800553a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800550c:	b29b      	uxth	r3, r3
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005514:	2a00      	cmp	r2, #0
 8005516:	dd01      	ble.n	800551c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x70>
 8005518:	2201      	movs	r2, #1
 800551a:	e001      	b.n	8005520 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x74>
 800551c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005520:	4413      	add	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	b21a      	sxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	81da      	strh	r2, [r3, #14]
 800552a:	e006      	b.n	800553a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
            done = true;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	729a      	strb	r2, [r3, #10]
            return;
 8005538:	e07f      	b.n	800563a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
                const uint16_t prevSolidPos = solid.getY();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3310      	adds	r3, #16
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fd56 	bl	8003ff0 <_ZNK8touchgfx8Drawable4getYEv>
 8005544:	4603      	mov	r3, r0
 8005546:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f103 0010 	add.w	r0, r3, #16
 800554e:	4b3c      	ldr	r3, [pc, #240]	; (8005640 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005558:	b29b      	uxth	r3, r3
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	b29b      	uxth	r3, r3
 800555e:	b21b      	sxth	r3, r3
 8005560:	4619      	mov	r1, r3
 8005562:	f7fe fdaa 	bl	80040ba <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f103 0210 	add.w	r2, r3, #16
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f7fe fd64 	bl	8004042 <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005580:	b29a      	uxth	r2, r3
 8005582:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 8005588:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800558c:	4b2d      	ldr	r3, [pc, #180]	; (8005644 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b219      	sxth	r1, r3
 8005592:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8005596:	f107 0020 	add.w	r0, r7, #32
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	460b      	mov	r3, r1
 800559e:	2100      	movs	r1, #0
 80055a0:	f7fe fc7e 	bl	8003ea0 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3310      	adds	r3, #16
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f107 0220 	add.w	r2, r7, #32
 80055b8:	4611      	mov	r1, r2
 80055ba:	4798      	blx	r3
                break;
 80055bc:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7a9b      	ldrb	r3, [r3, #10]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d139      	bne.n	800563a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d035      	beq.n	800563a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
            Rect rect = solid.getRect(); // Part to copy between buffers
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3310      	adds	r3, #16
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fcdf 	bl	8003f96 <_ZNK8touchgfx8Drawable7getRectEv>
 80055d8:	4602      	mov	r2, r0
 80055da:	f107 0310 	add.w	r3, r7, #16
 80055de:	6810      	ldr	r0, [r2, #0]
 80055e0:	6851      	ldr	r1, [r2, #4]
 80055e2:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80055e4:	f7fc fe14 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 80055e8:	4603      	mov	r3, r0
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	3230      	adds	r2, #48	; 0x30
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	4790      	blx	r2
 80055f4:	63f8      	str	r0, [r7, #60]	; 0x3c
            Rect source;
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fd f968 	bl	80028d0 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 8005608:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b21b      	sxth	r3, r3
 800560e:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b21b      	sxth	r3, r3
 8005616:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8005618:	f7fc fdfa 	bl	8002210 <_ZN8touchgfx3HAL11getInstanceEv>
 800561c:	f7fe fe16 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	681c      	ldr	r4, [r3, #0]
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	f107 0208 	add.w	r2, r7, #8
 800562e:	2100      	movs	r1, #0
 8005630:	9101      	str	r1, [sp, #4]
 8005632:	21ff      	movs	r1, #255	; 0xff
 8005634:	9100      	str	r1, [sp, #0]
 8005636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005638:	47a0      	blx	r4
    }
 800563a:	3744      	adds	r7, #68	; 0x44
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}
 8005640:	2400b8ba 	.word	0x2400b8ba
 8005644:	2400b8b8 	.word	0x2400b8b8
 8005648:	2400b8c2 	.word	0x2400b8c2

0800564c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6858      	ldr	r0, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3360      	adds	r3, #96	; 0x60
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	3210      	adds	r2, #16
 8005666:	4611      	mov	r1, r2
 8005668:	4798      	blx	r3
    }
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
        Transition::init();
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fe4b 	bl	8004318 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6858      	ldr	r0, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	335c      	adds	r3, #92	; 0x5c
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	3210      	adds	r2, #16
 8005694:	4611      	mov	r1, r2
 8005696:	4798      	blx	r3
    }
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    }
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
        }
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af02      	add	r7, sp, #8
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	2200      	movs	r2, #0
 80056e6:	2100      	movs	r1, #0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fe fbd9 	bl	8003ea0 <_ZN8touchgfx4RectC1Essss>
        }
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
    }
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af08      	add	r7, sp, #32
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	460b      	mov	r3, r1
 8005738:	80fb      	strh	r3, [r7, #6]
 800573a:	4613      	mov	r3, r2
 800573c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	88b9      	ldrh	r1, [r7, #4]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005746:	9306      	str	r3, [sp, #24]
 8005748:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800574a:	9305      	str	r3, [sp, #20]
 800574c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800575c:	9302      	str	r3, [sp, #8]
 800575e:	7f3b      	ldrb	r3, [r7, #28]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	7e3b      	ldrb	r3, [r7, #24]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	460b      	mov	r3, r1
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	f016 ffb9 	bl	801c6e0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800576e:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005778:	619a      	str	r2, [r3, #24]
      kerningData(kerningList),
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577e:	61da      	str	r2, [r3, #28]
      gsubTable(gsubData),
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005784:	621a      	str	r2, [r3, #32]
      arabicTable(formsTable)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	0802cf20 	.word	0x0802cf20

0800579c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	889b      	ldrh	r3, [r3, #4]
 80057b0:	0adb      	lsrs	r3, r3, #11
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4413      	add	r3, r2
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80057ce:	b480      	push	{r7}
 80057d0:	b089      	sub	sp, #36	; 0x24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	460b      	mov	r3, r1
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7b1b      	ldrb	r3, [r3, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e031      	b.n	8005852 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	7b5b      	ldrb	r3, [r3, #13]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005802:	b219      	sxth	r1, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	7adb      	ldrb	r3, [r3, #11]
 8005808:	b21b      	sxth	r3, r3
 800580a:	430b      	orrs	r3, r1
 800580c:	b21b      	sxth	r3, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	7b1b      	ldrb	r3, [r3, #12]
 800581a:	837b      	strh	r3, [r7, #26]
 800581c:	e013      	b.n	8005846 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	897a      	ldrh	r2, [r7, #10]
 8005824:	429a      	cmp	r2, r3
 8005826:	d103      	bne.n	8005830 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800582e:	e010      	b.n	8005852 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	897a      	ldrh	r2, [r7, #10]
 8005836:	429a      	cmp	r2, r3
 8005838:	d309      	bcc.n	800584e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800583a:	8b7b      	ldrh	r3, [r7, #26]
 800583c:	3b01      	subs	r3, #1
 800583e:	837b      	strh	r3, [r7, #26]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3304      	adds	r3, #4
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	8b7b      	ldrh	r3, [r7, #26]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e8      	bne.n	800581e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800584c:	e000      	b.n	8005850 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800584e:	bf00      	nop
        }
    }
    return 0;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3724      	adds	r7, #36	; 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
        : color(col)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	601a      	str	r2, [r3, #0]
    }
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	801a      	strh	r2, [r3, #0]
    {
    }
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fb0a 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 80058cc:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	0802d814 	.word	0x0802d814

080058e8 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
    {
 80058f0:	4a06      	ldr	r2, [pc, #24]	; (800590c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 f820 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	0802efd4 	.word	0x0802efd4

08005910 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    }
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ffe5 	bl	80058e8 <_ZN8touchgfx6ScreenD1Ev>
 800591e:	213c      	movs	r1, #60	; 0x3c
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f024 ffa8 	bl	802a876 <_ZdlPvj>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
    {
    }
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
    {
    }
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
    {
    }
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    {
    }
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f011 ff71 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80059ae:	bf00      	nop
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	2326      	movs	r3, #38	; 0x26
 80059c6:	461a      	mov	r2, r3
 80059c8:	2100      	movs	r1, #0
 80059ca:	f025 f988 	bl	802acde <memset>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fd35 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <_ZN8touchgfx3BoxC1Ev+0x44>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3328      	adds	r3, #40	; 0x28
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff ff37 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	0802e888 	.word	0x0802e888

08005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	2326      	movs	r3, #38	; 0x26
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2100      	movs	r1, #0
 8005a30:	f025 f955 	bl	802acde <memset>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fd02 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	8812      	ldrh	r2, [r2, #0]
 8005a48:	84da      	strh	r2, [r3, #38]	; 0x26
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f014 f8c0 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	0802eb00 	.word	0x0802eb00

08005a68 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	4a05      	ldr	r2, [pc, #20]	; (8005a88 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe fcf3 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	0802e888 	.word	0x0802e888

08005a8c <_ZN8touchgfx3BoxD0Ev>:
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ffe7 	bl	8005a68 <_ZN8touchgfx3BoxD1Ev>
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f024 feea 	bl	802a876 <_ZdlPvj>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff7e 	bl	80059b8 <_ZN8touchgfx3BoxC1Ev>
 8005abc:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	332c      	adds	r3, #44	; 0x2c
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff fec8 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	0802ea9c 	.word	0x0802ea9c

08005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	887a      	ldrh	r2, [r7, #2]
 8005b10:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005b2c:	4a06      	ldr	r2, [pc, #24]	; (8005b48 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	809a      	strh	r2, [r3, #4]
    }
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	0802cd54 	.word	0x0802cd54

08005b4c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	2326      	movs	r3, #38	; 0x26
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	f025 f8be 	bl	802acde <memset>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fc6b 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 8005b6a:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3328      	adds	r3, #40	; 0x28
 8005b74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ffd1 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3330      	adds	r3, #48	; 0x30
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fe6a 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	22ff      	movs	r2, #255	; 0xff
 8005b94:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	0802e7e0 	.word	0x0802e7e0

08005bc0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	2326      	movs	r3, #38	; 0x26
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	f025 f884 	bl	802acde <memset>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fc31 	bl	8004440 <_ZN8touchgfx6WidgetC1Ev>
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fe50 	bl	800589c <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	0802e644 	.word	0x0802e644

08005c0c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7fe fc13 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	0802e644 	.word	0x0802e644

08005c4c <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ffe7 	bl	8005c28 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005c5a:	2130      	movs	r1, #48	; 0x30
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f024 fe0a 	bl	802a876 <_ZdlPvj>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff ffa2 	bl	8005bc0 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	332e      	adds	r3, #46	; 0x2e
 8005c86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fdf6 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3330      	adds	r3, #48	; 0x30
 8005c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fdef 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	22ff      	movs	r2, #255	; 0xff
 8005ca2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	0802e950 	.word	0x0802e950

08005cb4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fe0f 	bl	80058e8 <_ZN8touchgfx6ScreenD1Ev>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	0802cfc8 	.word	0x0802cfc8

08005cd8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ffe7 	bl	8005cb4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f024 fdc4 	bl	802a876 <_ZdlPvj>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fdf5 	bl	80068fc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fe77 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fe4f 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fe05 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fe21 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fe3d 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fdf3 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fe31 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fde7 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fe6f 	bl	8006a5c <_ZN8touchgfx6ButtonD1Ev>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fe41 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe19 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fdcf 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe0d 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	33f8      	adds	r3, #248	; 0xf8
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fdc4 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	33c4      	adds	r3, #196	; 0xc4
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fe03 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3398      	adds	r3, #152	; 0x98
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fdba 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	336c      	adds	r3, #108	; 0x6c
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fdd7 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3340      	adds	r3, #64	; 0x40
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fe44 	bl	8005a68 <_ZN8touchgfx3BoxD1Ev>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ff66 	bl	8005cb4 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	0802cf78 	.word	0x0802cf78

08005df8 <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff79 	bl	8005cf8 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005e06:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f024 fd33 	bl	802a876 <_ZdlPvj>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005e36:	f015 fbdf 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8005e3a:	4603      	mov	r3, r0
    }
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b0b5      	sub	sp, #212	; 0xd4
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fcee 	bl	8006830 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005e54:	4ae0      	ldr	r2, [pc, #896]	; (80061d8 <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3340      	adds	r3, #64	; 0x40
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fdaa 	bl	80059b8 <_ZN8touchgfx3BoxC1Ev>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005e6a:	f107 0314 	add.w	r3, r7, #20
 8005e6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fd02 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8005e78:	f107 0314 	add.w	r3, r7, #20
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f7ff fdcc 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3398      	adds	r3, #152	; 0x98
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fd17 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	33c4      	adds	r3, #196	; 0xc4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fe0a 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	33f8      	adds	r3, #248	; 0xf8
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fd0d 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fdff 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fd01 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fdf3 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fe3d 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fec7 	bl	8005c6c <_ZN8touchgfx6ButtonC1Ev>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fce9 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fddb 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fcdd 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff fdcf 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8005f14:	f107 0318 	add.w	r3, r7, #24
 8005f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fcad 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8005f22:	f107 0318 	add.w	r3, r7, #24
 8005f26:	4619      	mov	r1, r3
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7ff fd77 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fcc1 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fdb3 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fdfd 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8005f58:	4ba0      	ldr	r3, [pc, #640]	; (80061dc <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	623b      	str	r3, [r7, #32]
 8005f60:	f107 031c 	add.w	r3, r7, #28
 8005f64:	cb0c      	ldmia	r3, {r2, r3}
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	f000 fc88 	bl	800687c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005f72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f7fe f815 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8005f90:	2300      	movs	r3, #0
 8005f92:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8005f96:	2300      	movs	r3, #0
 8005f98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005f9c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005fb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fc4e 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8005fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff fd1a 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	336c      	adds	r3, #108	; 0x6c
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe f843 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fc48 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8005fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f013 fdf1 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005ffe:	234d      	movs	r3, #77	; 0x4d
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006006:	22bb      	movs	r2, #187	; 0xbb
 8006008:	210a      	movs	r1, #10
 800600a:	f7fd ffd0 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8006014:	234d      	movs	r3, #77	; 0x4d
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800601c:	2200      	movs	r2, #0
 800601e:	2100      	movs	r1, #0
 8006020:	f7fd ffc5 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800602a:	234e      	movs	r3, #78	; 0x4e
 800602c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8006030:	2389      	movs	r3, #137	; 0x89
 8006032:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8006036:	23ae      	movs	r3, #174	; 0xae
 8006038:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800603c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	461a      	mov	r2, r3
 8006044:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	431a      	orrs	r2, r3
 800604c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006050:	4313      	orrs	r3, r2
 8006052:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006056:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fbfe 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006064:	4619      	mov	r1, r3
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff fcca 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8006072:	23ed      	movs	r3, #237	; 0xed
 8006074:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8006078:	2366      	movs	r3, #102	; 0x66
 800607a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800607e:	2363      	movs	r3, #99	; 0x63
 8006080:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8006084:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	461a      	mov	r2, r3
 800608c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	431a      	orrs	r2, r3
 8006094:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006098:	4313      	orrs	r3, r2
 800609a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800609e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fbda 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80060aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ac:	4619      	mov	r1, r3
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7ff fd18 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	33c4      	adds	r3, #196	; 0xc4
 80060b8:	2105      	movs	r1, #5
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fd20 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	33c4      	adds	r3, #196	; 0xc4
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f011 fbdf 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 80060d8:	2349      	movs	r3, #73	; 0x49
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80060e0:	2204      	movs	r2, #4
 80060e2:	2105      	movs	r1, #5
 80060e4:	f7fd ff63 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 7092 	add.w	r0, r3, #292	; 0x124
 80060ee:	2343      	movs	r3, #67	; 0x43
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80060f6:	2201      	movs	r2, #1
 80060f8:	2100      	movs	r1, #0
 80060fa:	f7fd ff58 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8006104:	2343      	movs	r3, #67	; 0x43
 8006106:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 800610a:	2365      	movs	r3, #101	; 0x65
 800610c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8006110:	238b      	movs	r3, #139	; 0x8b
 8006112:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 8006116:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	461a      	mov	r2, r3
 800611e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	431a      	orrs	r2, r3
 8006126:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006130:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fb91 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800613c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800613e:	4619      	mov	r1, r3
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff fc5d 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800614c:	2300      	movs	r3, #0
 800614e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8006152:	2300      	movs	r3, #0
 8006154:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8006158:	2300      	movs	r3, #0
 800615a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800615e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	461a      	mov	r2, r3
 8006166:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	431a      	orrs	r2, r3
 800616e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8006172:	4313      	orrs	r3, r2
 8006174:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fb6d 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	4619      	mov	r1, r3
 8006188:	4620      	mov	r0, r4
 800618a:	f7ff fcab 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006194:	2102      	movs	r1, #2
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fcb2 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f011 fb70 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	33f8      	adds	r3, #248	; 0xf8
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f011 fb67 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 80061c8:	2314      	movs	r3, #20
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	23b1      	movs	r3, #177	; 0xb1
 80061ce:	222f      	movs	r2, #47	; 0x2f
 80061d0:	218e      	movs	r1, #142	; 0x8e
 80061d2:	f7fd feec 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
 80061d6:	e003      	b.n	80061e0 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 80061d8:	0802cf78 	.word	0x0802cf78
 80061dc:	08006805 	.word	0x08006805

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 80061e6:	2311      	movs	r3, #17
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	23b1      	movs	r3, #177	; 0xb1
 80061ec:	2203      	movs	r2, #3
 80061ee:	2100      	movs	r1, #0
 80061f0:	f7fd fedd 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80061fa:	2300      	movs	r3, #0
 80061fc:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8006206:	2300      	movs	r3, #0
 8006208:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800620c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	461a      	mov	r2, r3
 8006214:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	431a      	orrs	r2, r3
 800621c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006220:	4313      	orrs	r3, r2
 8006222:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006226:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fb16 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006234:	4619      	mov	r1, r3
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fbe2 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 8006242:	23ed      	movs	r3, #237	; 0xed
 8006244:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8006248:	2366      	movs	r3, #102	; 0x66
 800624a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800624e:	2363      	movs	r3, #99	; 0x63
 8006250:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8006254:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	461a      	mov	r2, r3
 800625c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	431a      	orrs	r2, r3
 8006264:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8006268:	4313      	orrs	r3, r2
 800626a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800626e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff faf2 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800627a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627c:	4619      	mov	r1, r3
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff fc30 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800628a:	2103      	movs	r1, #3
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fc37 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f011 faf5 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80062ac:	2205      	movs	r2, #5
 80062ae:	2107      	movs	r1, #7
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fd fed5 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80062bc:	23ff      	movs	r3, #255	; 0xff
 80062be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80062c2:	23ff      	movs	r3, #255	; 0xff
 80062c4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80062c8:	23ff      	movs	r3, #255	; 0xff
 80062ca:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80062ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	461a      	mov	r2, r3
 80062d6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	431a      	orrs	r2, r3
 80062de:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80062e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fab5 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80062f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80062fa:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80062fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006304:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800630c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006310:	2300      	movs	r3, #0
 8006312:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800631a:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800631e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006320:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8006328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800632c:	2107      	movs	r1, #7
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fbf6 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8006334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006338:	4619      	mov	r1, r3
 800633a:	4620      	mov	r0, r4
 800633c:	f013 f9d3 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd fd7f 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f011 fa99 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f011 fa8f 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006378:	220f      	movs	r2, #15
 800637a:	21bc      	movs	r1, #188	; 0xbc
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd fe6f 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8006388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800638c:	2103      	movs	r1, #3
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fa74 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8006394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006398:	2102      	movs	r1, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff fa6e 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 80063a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80063a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a8:	4619      	mov	r1, r3
 80063aa:	4620      	mov	r0, r4
 80063ac:	f013 f9d2 	bl	8019754 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f7ff fc24 	bl	8005c0c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f011 fa5c 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f503 700a 	add.w	r0, r3, #552	; 0x228
 80063de:	23c2      	movs	r3, #194	; 0xc2
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80063e6:	2208      	movs	r2, #8
 80063e8:	210a      	movs	r1, #10
 80063ea:	f7fd fde0 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f503 7015 	add.w	r0, r3, #596	; 0x254
 80063f4:	23b7      	movs	r3, #183	; 0xb7
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80063fc:	2200      	movs	r2, #0
 80063fe:	2100      	movs	r1, #0
 8006400:	f7fd fdd5 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800640a:	234e      	movs	r3, #78	; 0x4e
 800640c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8006410:	2389      	movs	r3, #137	; 0x89
 8006412:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8006416:	23ae      	movs	r3, #174	; 0xae
 8006418:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800641c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	461a      	mov	r2, r3
 8006424:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	431a      	orrs	r2, r3
 800642c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006430:	4313      	orrs	r3, r2
 8006432:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006436:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fa0e 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006444:	4619      	mov	r1, r3
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff fada 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8006452:	23ed      	movs	r3, #237	; 0xed
 8006454:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8006458:	2366      	movs	r3, #102	; 0x66
 800645a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800645e:	2363      	movs	r3, #99	; 0x63
 8006460:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8006464:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	461a      	mov	r2, r3
 800646c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	431a      	orrs	r2, r3
 8006474:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8006478:	4313      	orrs	r3, r2
 800647a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800647e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff f9ea 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800648a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800648c:	4619      	mov	r1, r3
 800648e:	4620      	mov	r0, r4
 8006490:	f7ff fb28 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800649a:	2105      	movs	r1, #5
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fb2f 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f503 720a 	add.w	r2, r3, #552	; 0x228
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f011 f9ed 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f503 7022 	add.w	r0, r3, #648	; 0x288
 80064bc:	23af      	movs	r3, #175	; 0xaf
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80064c4:	2204      	movs	r2, #4
 80064c6:	2105      	movs	r1, #5
 80064c8:	f7fd fd71 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 80064d2:	23af      	movs	r3, #175	; 0xaf
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80064da:	2200      	movs	r2, #0
 80064dc:	2100      	movs	r1, #0
 80064de:	f7fd fd66 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 80064e8:	2343      	movs	r3, #67	; 0x43
 80064ea:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80064ee:	2365      	movs	r3, #101	; 0x65
 80064f0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80064f4:	238b      	movs	r3, #139	; 0x8b
 80064f6:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80064fa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80064fe:	041b      	lsls	r3, r3, #16
 8006500:	461a      	mov	r2, r3
 8006502:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	431a      	orrs	r2, r3
 800650a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800650e:	4313      	orrs	r3, r2
 8006510:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff f99f 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006522:	4619      	mov	r1, r3
 8006524:	4620      	mov	r0, r4
 8006526:	f7ff fa6b 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8006530:	2300      	movs	r3, #0
 8006532:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8006536:	2300      	movs	r3, #0
 8006538:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 800653c:	2300      	movs	r3, #0
 800653e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8006542:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	461a      	mov	r2, r3
 800654a:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	431a      	orrs	r2, r3
 8006552:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006556:	4313      	orrs	r3, r2
 8006558:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800655c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f97b 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656a:	4619      	mov	r1, r3
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff fab9 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fac0 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f011 f97e 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800659a:	2209      	movs	r2, #9
 800659c:	215f      	movs	r1, #95	; 0x5f
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fd fd5e 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80065aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065ae:	210c      	movs	r1, #12
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff f963 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 80065b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065ba:	4619      	mov	r1, r3
 80065bc:	4620      	mov	r0, r4
 80065be:	f013 fb0c 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f503 7222 	add.w	r2, r3, #648	; 0x288
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f011 f95d 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 7045 	add.w	r0, r3, #788	; 0x314
 80065dc:	2314      	movs	r3, #20
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2375      	movs	r3, #117	; 0x75
 80065e2:	2200      	movs	r2, #0
 80065e4:	21a7      	movs	r1, #167	; 0xa7
 80065e6:	f7fd fce2 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 7050 	add.w	r0, r3, #832	; 0x340
 80065f0:	2311      	movs	r3, #17
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2375      	movs	r3, #117	; 0x75
 80065f6:	2203      	movs	r2, #3
 80065f8:	2100      	movs	r1, #0
 80065fa:	f7fd fcd8 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8006604:	2300      	movs	r3, #0
 8006606:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800660a:	2300      	movs	r3, #0
 800660c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8006610:	2300      	movs	r3, #0
 8006612:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006616:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	461a      	mov	r2, r3
 800661e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	431a      	orrs	r2, r3
 8006626:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800662a:	4313      	orrs	r3, r2
 800662c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff f911 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800663c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663e:	4619      	mov	r1, r3
 8006640:	4620      	mov	r0, r4
 8006642:	f7ff f9dd 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 7450 	add.w	r4, r3, #832	; 0x340
 800664c:	23ed      	movs	r3, #237	; 0xed
 800664e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8006652:	2366      	movs	r3, #102	; 0x66
 8006654:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006658:	2363      	movs	r3, #99	; 0x63
 800665a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800665e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	461a      	mov	r2, r3
 8006666:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	431a      	orrs	r2, r3
 800666e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8006672:	4313      	orrs	r3, r2
 8006674:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff f8ed 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	4619      	mov	r1, r3
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff fa2b 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006694:	2103      	movs	r1, #3
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fa32 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f503 7245 	add.w	r2, r3, #788	; 0x314
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f011 f8f0 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80066b6:	2205      	movs	r2, #5
 80066b8:	2104      	movs	r1, #4
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fd fcd0 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 745d 	add.w	r4, r3, #884	; 0x374
 80066c6:	23ff      	movs	r3, #255	; 0xff
 80066c8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 80066cc:	23ff      	movs	r3, #255	; 0xff
 80066ce:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 80066d2:	23ff      	movs	r3, #255	; 0xff
 80066d4:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 80066d8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	461a      	mov	r2, r3
 80066e0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	431a      	orrs	r2, r3
 80066e8:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80066f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066f6:	4611      	mov	r1, r2
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff f8b0 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80066fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006700:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8006704:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8006706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800670e:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800671a:	2300      	movs	r3, #0
 800671c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        linespace = space;
 8006720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006724:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8006728:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800672a:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f503 745d 	add.w	r4, r3, #884	; 0x374
 8006732:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006736:	2108      	movs	r1, #8
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff f9f1 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 800673e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006742:	4619      	mov	r1, r3
 8006744:	4620      	mov	r0, r4
 8006746:	f012 ffce 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800674a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800674e:	4618      	mov	r0, r3
 8006750:	f7fd fb7a 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f503 7245 	add.w	r2, r3, #788	; 0x314
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006760:	4619      	mov	r1, r3
 8006762:	4610      	mov	r0, r2
 8006764:	f011 f894 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8006774:	4619      	mov	r1, r3
 8006776:	4610      	mov	r0, r2
 8006778:	f011 f88a 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 720a 	add.w	r2, r3, #552	; 0x228
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f011 f880 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3340      	adds	r3, #64	; 0x40
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f7ff f8fd 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	336c      	adds	r3, #108	; 0x6c
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7ff f8f6 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3398      	adds	r3, #152	; 0x98
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7ff f8ef 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f7ff f8e7 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	37cc      	adds	r7, #204	; 0xcc
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}

080067d4 <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	332c      	adds	r3, #44	; 0x2c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d106      	bne.n	8006828 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fb07 	bl	8005e2e <_ZN24Localize_AnomalyViewBase11applicationEv>
 8006820:	4603      	mov	r3, r0
 8006822:	4618      	mov	r0, r3
 8006824:	f7fd fee2 	bl	80045ec <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4618      	mov	r0, r3
 800683c:	f016 f9c4 	bl	801cbc8 <_ZN8touchgfx6ScreenC1Ev>
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	0802cfc8 	.word	0x0802cfc8

0800685c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	0802cffc 	.word	0x0802cffc

0800687c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	4639      	mov	r1, r7
 8006888:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff ffe4 	bl	800685c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3308      	adds	r3, #8
 80068a4:	463a      	mov	r2, r7
 80068a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	0802cfb0 	.word	0x0802cfb0

080068bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
    }
 80068c4:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	0802cffc 	.word	0x0802cffc

080068dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
    }
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ffe9 	bl	80068bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80068ea:	2104      	movs	r1, #4
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f023 ffc2 	bl	802a876 <_ZdlPvj>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	4a05      	ldr	r2, [pc, #20]	; (800691c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ffd5 	bl	80068bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	0802cfb0 	.word	0x0802cfb0

08006920 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffe7 	bl	80068fc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800692e:	2110      	movs	r1, #16
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f023 ffa0 	bl	802a876 <_ZdlPvj>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	4a05      	ldr	r2, [pc, #20]	; (8006960 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f7fd faf5 	bl	8003f40 <_ZN8touchgfx8DrawableD1Ev>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	0802d814 	.word	0x0802d814

08006964 <_ZN8touchgfx9ContainerD0Ev>:
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ffe7 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006972:	212c      	movs	r1, #44	; 0x2c
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f023 ff7e 	bl	802a876 <_ZdlPvj>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd fd65 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	0802eb00 	.word	0x0802eb00

080069a8 <_ZN8touchgfx5ImageD0Ev>:
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ffe7 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 80069b6:	212c      	movs	r1, #44	; 0x2c
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f023 ff5c 	bl	802a876 <_ZdlPvj>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff f845 	bl	8005a68 <_ZN8touchgfx3BoxD1Ev>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	0802ea9c 	.word	0x0802ea9c

080069ec <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffe7 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80069fa:	2134      	movs	r1, #52	; 0x34
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f023 ff3a 	bl	802a876 <_ZdlPvj>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3328      	adds	r3, #40	; 0x28
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fd fa12 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd fd1c 	bl	8004464 <_ZN8touchgfx6WidgetD1Ev>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	0802e7e0 	.word	0x0802e7e0

08006a3c <_ZN8touchgfx8TextAreaD0Ev>:
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ffe1 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006a4a:	213c      	movs	r1, #60	; 0x3c
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f023 ff12 	bl	802a876 <_ZdlPvj>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	4a05      	ldr	r2, [pc, #20]	; (8006a7c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff f8db 	bl	8005c28 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	0802e950 	.word	0x0802e950

08006a80 <_ZN8touchgfx6ButtonD0Ev>:
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ffe7 	bl	8006a5c <_ZN8touchgfx6ButtonD1Ev>
 8006a8e:	2134      	movs	r1, #52	; 0x34
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f023 fef0 	bl	802a876 <_ZdlPvj>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68d2      	ldr	r2, [r2, #12]
 8006ab2:	1052      	asrs	r2, r2, #1
 8006ab4:	1898      	adds	r0, r3, r2
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	e00a      	b.n	8006ade <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	68d2      	ldr	r2, [r2, #12]
 8006ad0:	1052      	asrs	r2, r2, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6892      	ldr	r2, [r2, #8]
 8006ada:	4413      	add	r3, r2
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	4798      	blx	r3
    }
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d107      	bne.n	8006b12 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006b1c:	2300      	movs	r3, #0
    }
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f012 fde6 	bl	8019754 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	4a05      	ldr	r2, [pc, #20]	; (8006bb0 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe fea1 	bl	80058e8 <_ZN8touchgfx6ScreenD1Ev>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	0802d08c 	.word	0x0802d08c

08006bb4 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff ffe7 	bl	8006b90 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006bc2:	2140      	movs	r1, #64	; 0x40
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f023 fe56 	bl	802a876 <_ZdlPvj>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	4a93      	ldr	r2, [pc, #588]	; (8006e2c <_ZN12MainViewBaseD1Ev+0x258>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8006be8:	4618      	mov	r0, r3
 8006bea:	f002 fd9f 	bl	800972c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f002 fdbb 	bl	8009770 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff ff03 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fedb 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fe91 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff ff19 	bl	8006a5c <_ZN8touchgfx6ButtonD1Ev>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff13 	bl	8006a5c <_ZN8touchgfx6ButtonD1Ev>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fea1 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fe9b 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fed9 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff feb1 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fe67 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fec7 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fec1 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fe99 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fe93 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fe49 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fea9 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fea3 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fe7b 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fe75 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fe2b 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fe8b 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fe63 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fe19 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fe57 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fe0d 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fe4b 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fe01 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fe3f 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fdf5 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 fdd7 	bl	8009910 <_ZN8touchgfx12ToggleButtonD1Ev>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 fd9b 	bl	80098a4 <_ZN8touchgfx6SliderD1Ev>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fe49 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fe21 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fdd7 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 fd59 	bl	8009850 <_ZN8touchgfx12TextProgressD1Ev>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fe0f 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fdc5 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fe25 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fdfd 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fdb3 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fdf1 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	33f8      	adds	r3, #248	; 0xf8
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff fda8 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	33c4      	adds	r3, #196	; 0xc4
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fde7 	bl	80069c8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3398      	adds	r3, #152	; 0x98
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fd9e 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	336c      	adds	r3, #108	; 0x6c
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fdbb 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3340      	adds	r3, #64	; 0x40
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fe28 	bl	8005a68 <_ZN8touchgfx3BoxD1Ev>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff feb8 	bl	8006b90 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	0802d014 	.word	0x0802d014

08006e30 <_ZN12MainViewBaseD0Ev>:
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fecb 	bl	8006bd4 <_ZN12MainViewBaseD1Ev>
 8006e3e:	f640 3118 	movw	r1, #2840	; 0xb18
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f023 fd17 	bl	802a876 <_ZdlPvj>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006ec0:	f014 fb9a 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8006ec4:	4603      	mov	r3, r0
    }
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fec6 	bl	8005c6c <_ZN8touchgfx6ButtonC1Ev>
 8006ee0:	4a07      	ldr	r2, [pc, #28]	; (8006f00 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3334      	adds	r3, #52	; 0x34
 8006eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fcc4 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	0802e6b0 	.word	0x0802e6b0

08006f04 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f10:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f14:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006f16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f1a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 fb7d 	bl	8009620 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006f26:	4ae7      	ldr	r2, [pc, #924]	; (80072c4 <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006f28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f2c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3340      	adds	r3, #64	; 0x40
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd39 	bl	80059b8 <_ZN8touchgfx3BoxC1Ev>
 8006f46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fc8d 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8006f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f66:	4619      	mov	r1, r3
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7fe fd57 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006f6e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f72:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3398      	adds	r3, #152	; 0x98
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fc9e 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8006f80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f84:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	33c4      	adds	r3, #196	; 0xc4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fd8d 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f96:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	33f8      	adds	r3, #248	; 0xf8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fc8c 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8006fa4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fa8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fd7a 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fbc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fc78 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8006fcc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fd0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fd66 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fe0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fe4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fdac 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8006ff4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ff8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc5a 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8007008:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800700c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fd48 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 800701c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007020:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800702a:	4618      	mov	r0, r3
 800702c:	f010 f9ce 	bl	80173cc <_ZN8touchgfx12TextProgressC1Ev>
 8007030:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007034:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fc3c 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8007044:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007048:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fd2a 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007058:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800705c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fd70 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 800706c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007070:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800707a:	4618      	mov	r0, r3
 800707c:	f011 f888 	bl	8018190 <_ZN8touchgfx6SliderC1Ev>
 8007080:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007084:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ff1e 	bl	8006ed0 <_ZN8touchgfx12ToggleButtonC1Ev>
 8007094:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007098:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fc0a 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 80070a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fcf8 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fbf6 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 80070d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fce4 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fbe2 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 80070f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fcd0 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 800710c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007110:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fbce 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8007120:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007124:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fcbc 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007134:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007138:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd02 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8007148:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800714c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fbb0 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 800715c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007160:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fc9e 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007170:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007174:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc94 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007184:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007188:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fcda 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8007198:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800719c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fcd0 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 80071ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fb7e 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 80071c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fc6c 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f603 0354 	addw	r3, r3, #2132	; 0x854
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fc62 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fca8 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 80071fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007200:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fc9e 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 8007210:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007214:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fb4c 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 8007224:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007228:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fc3a 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007238:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800723c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fc80 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
 800724c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007250:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 800725a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800725e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fb0a 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800726c:	4619      	mov	r1, r3
 800726e:	4620      	mov	r0, r4
 8007270:	f7fe fbd4 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007274:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007278:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 8007282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007286:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe faf6 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007290:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007294:	4619      	mov	r1, r3
 8007296:	4620      	mov	r0, r4
 8007298:	f7fe fbc0 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800729c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fcde 	bl	8005c6c <_ZN8touchgfx6ButtonC1Ev>
 80072b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80072be:	4618      	mov	r0, r3
 80072c0:	e002      	b.n	80072c8 <_ZN12MainViewBaseC1Ev+0x3c4>
 80072c2:	bf00      	nop
 80072c4:	0802d014 	.word	0x0802d014
 80072c8:	f7fe fcd0 	bl	8005c6c <_ZN8touchgfx6ButtonC1Ev>
 80072cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe faee 	bl	80058bc <_ZN8touchgfx9ContainerC1Ev>
 80072e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fbdc 	bl	8005aac <_ZN8touchgfx13BoxWithBorderC1Ev>
 80072f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fc22 	bl	8005b4c <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
 8007308:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800730c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8007316:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800731a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800731e:	4ae9      	ldr	r2, [pc, #932]	; (80076c4 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007326:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007332:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007336:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800733a:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 800733e:	cb0c      	ldmia	r3, {r2, r3}
 8007340:	6809      	ldr	r1, [r1, #0]
 8007342:	f002 f983 	bl	800964c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8007346:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800734a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 8007354:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007358:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800735c:	4ada      	ldr	r2, [pc, #872]	; (80076c8 <_ZN12MainViewBaseC1Ev+0x7c4>)
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007364:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
 800736c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007370:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007374:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007378:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 800737c:	cb0c      	ldmia	r3, {r2, r3}
 800737e:	6809      	ldr	r1, [r1, #0]
 8007380:	f002 f994 	bl	80096ac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 8007384:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007388:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007392:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	f7fc fe05 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80073a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 80073b8:	2300      	movs	r3, #0
 80073ba:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 80073c4:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	461a      	mov	r2, r3
 80073cc:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	431a      	orrs	r2, r3
 80073d4:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 80073d8:	4313      	orrs	r3, r2
 80073da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fa3a 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80073ea:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80073ee:	4619      	mov	r1, r3
 80073f0:	4620      	mov	r0, r4
 80073f2:	f7fe fb05 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 80073f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80073fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	336c      	adds	r3, #108	; 0x6c
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f7fc fe2a 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 800740c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007410:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800741a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fa2b 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800742a:	4619      	mov	r1, r3
 800742c:	4620      	mov	r0, r4
 800742e:	f012 fbd4 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 8007432:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007436:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8007440:	23aa      	movs	r3, #170	; 0xaa
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007448:	225e      	movs	r2, #94	; 0x5e
 800744a:	210a      	movs	r1, #10
 800744c:	f7fc fdaf 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007450:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007454:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800745e:	2399      	movs	r3, #153	; 0x99
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007466:	2212      	movs	r2, #18
 8007468:	2100      	movs	r1, #0
 800746a:	f7fc fda0 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800746e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007472:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800747c:	234e      	movs	r3, #78	; 0x4e
 800747e:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8007482:	2389      	movs	r3, #137	; 0x89
 8007484:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8007488:	23ae      	movs	r3, #174	; 0xae
 800748a:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800748e:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	461a      	mov	r2, r3
 8007496:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	431a      	orrs	r2, r3
 800749e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074a8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe f9d5 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80074b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80074b8:	4619      	mov	r1, r3
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7fe faa0 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80074c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80074c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80074ce:	23ed      	movs	r3, #237	; 0xed
 80074d0:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80074d4:	2366      	movs	r3, #102	; 0x66
 80074d6:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 80074da:	2363      	movs	r3, #99	; 0x63
 80074dc:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 80074e0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	461a      	mov	r2, r3
 80074e8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	431a      	orrs	r2, r3
 80074f0:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80074fe:	4611      	mov	r1, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f9ac 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007506:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800750a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4619      	mov	r1, r3
 8007512:	4620      	mov	r0, r4
 8007514:	f7fe fae6 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8007518:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800751c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	33c4      	adds	r3, #196	; 0xc4
 8007524:	2105      	movs	r1, #5
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe faea 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 800752c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007530:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800753a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800753e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	33c4      	adds	r3, #196	; 0xc4
 8007546:	4619      	mov	r1, r3
 8007548:	4610      	mov	r0, r2
 800754a:	f010 f9a1 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 800754e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007552:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 800755c:	2352      	movs	r3, #82	; 0x52
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007564:	2254      	movs	r2, #84	; 0x54
 8007566:	2105      	movs	r1, #5
 8007568:	f7fc fd21 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 800756c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007570:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f503 7092 	add.w	r0, r3, #292	; 0x124
 800757a:	2352      	movs	r3, #82	; 0x52
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	f7fc fd12 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800758a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800758e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8007598:	2343      	movs	r3, #67	; 0x43
 800759a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800759e:	2365      	movs	r3, #101	; 0x65
 80075a0:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80075a4:	238b      	movs	r3, #139	; 0x8b
 80075a6:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80075aa:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	461a      	mov	r2, r3
 80075b2:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	431a      	orrs	r2, r3
 80075ba:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80075be:	4313      	orrs	r3, r2
 80075c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80075c4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe f947 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80075d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	4620      	mov	r0, r4
 80075de:	f7fe fa0f 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80075e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8007602:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	461a      	mov	r2, r3
 800760a:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	431a      	orrs	r2, r3
 8007612:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8007616:	4313      	orrs	r3, r2
 8007618:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800761c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f91b 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007628:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	4620      	mov	r0, r4
 8007636:	f7fe fa55 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 800763a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800763e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fa58 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 8007650:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007654:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800765e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007662:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f010 f90e 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 8007674:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007678:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8007682:	2314      	movs	r3, #20
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2389      	movs	r3, #137	; 0x89
 8007688:	2200      	movs	r2, #0
 800768a:	219d      	movs	r1, #157	; 0x9d
 800768c:	f7fc fc8f 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 8007690:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007694:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 800769e:	2311      	movs	r3, #17
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	238a      	movs	r3, #138	; 0x8a
 80076a4:	2203      	movs	r2, #3
 80076a6:	f04f 31ff 	mov.w	r1, #4294967295
 80076aa:	f7fc fc80 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80076ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80076bc:	2300      	movs	r3, #0
 80076be:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80076c2:	e003      	b.n	80076cc <_ZN12MainViewBaseC1Ev+0x7c8>
 80076c4:	08009591 	.word	0x08009591
 80076c8:	080095f1 	.word	0x080095f1
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80076d2:	2300      	movs	r3, #0
 80076d4:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80076d8:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	461a      	mov	r2, r3
 80076e0:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	431a      	orrs	r2, r3
 80076e8:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80076f2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe f8b0 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80076fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007702:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	4620      	mov	r0, r4
 800770c:	f7fe f978 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007710:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007714:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 800771e:	23ed      	movs	r3, #237	; 0xed
 8007720:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8007724:	2366      	movs	r3, #102	; 0x66
 8007726:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800772a:	2363      	movs	r3, #99	; 0x63
 800772c:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8007730:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 8007734:	041b      	lsls	r3, r3, #16
 8007736:	461a      	mov	r2, r3
 8007738:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	431a      	orrs	r2, r3
 8007740:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8007744:	4313      	orrs	r3, r2
 8007746:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800774a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f884 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007756:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800775a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4619      	mov	r1, r3
 8007762:	4620      	mov	r0, r4
 8007764:	f7fe f9be 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007768:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800776c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007776:	2103      	movs	r1, #3
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe f9c1 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 800777e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007782:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800778c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007790:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f010 f877 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 80077a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80077b0:	2205      	movs	r2, #5
 80077b2:	2107      	movs	r1, #7
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fc fc53 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80077ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077be:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80077c8:	23ff      	movs	r3, #255	; 0xff
 80077ca:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80077d4:	23ff      	movs	r3, #255	; 0xff
 80077d6:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80077da:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	461a      	mov	r2, r3
 80077e2:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	431a      	orrs	r2, r3
 80077ea:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077f4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe f82f 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007800:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007804:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	f8c7 418c 	str.w	r4, [r7, #396]	; 0x18c
 8007810:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007814:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8007818:	601a      	str	r2, [r3, #0]
        this->color = color;
 800781a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800781e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007822:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800782a:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 800782c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007830:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800783a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800783e:	2300      	movs	r3, #0
 8007840:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
        linespace = space;
 8007844:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007848:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 800784c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800784e:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 8007850:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007854:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800785e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007862:	2101      	movs	r1, #1
 8007864:	4618      	mov	r0, r3
 8007866:	f7fe f95b 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 800786a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800786e:	4619      	mov	r1, r3
 8007870:	4620      	mov	r0, r4
 8007872:	f011 ff38 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800787a:	4618      	mov	r0, r3
 800787c:	f7fc fae4 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 8007880:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007884:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800788e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007892:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800789c:	4619      	mov	r1, r3
 800789e:	4610      	mov	r0, r2
 80078a0:	f00f fff6 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 80078a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 80078b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f00f ffe4 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 80078c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 80078d6:	2310      	movs	r3, #16
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	2346      	movs	r3, #70	; 0x46
 80078dc:	223a      	movs	r2, #58	; 0x3a
 80078de:	218f      	movs	r1, #143	; 0x8f
 80078e0:	f7fc fb65 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 80078e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f503 7008 	add.w	r0, r3, #544	; 0x220
 80078f2:	2310      	movs	r3, #16
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2346      	movs	r3, #70	; 0x46
 80078f8:	2200      	movs	r2, #0
 80078fa:	2100      	movs	r1, #0
 80078fc:	f7fc fb57 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007900:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007904:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f503 7408 	add.w	r4, r3, #544	; 0x220
 800790e:	2300      	movs	r3, #0
 8007910:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007914:	2300      	movs	r3, #0
 8007916:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800791a:	2300      	movs	r3, #0
 800791c:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007920:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	461a      	mov	r2, r3
 8007928:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	431a      	orrs	r2, r3
 8007930:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007934:	4313      	orrs	r3, r2
 8007936:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800793a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7fd ff8c 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007946:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800794a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4619      	mov	r1, r3
 8007952:	4620      	mov	r0, r4
 8007954:	f7fe f854 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007958:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800795c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f503 7408 	add.w	r4, r3, #544	; 0x220
 8007966:	23ed      	movs	r3, #237	; 0xed
 8007968:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800796c:	2366      	movs	r3, #102	; 0x66
 800796e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8007972:	2363      	movs	r3, #99	; 0x63
 8007974:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007978:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	461a      	mov	r2, r3
 8007980:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	431a      	orrs	r2, r3
 8007988:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 800798c:	4313      	orrs	r3, r2
 800798e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007992:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd ff60 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800799e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4619      	mov	r1, r3
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7fe f89a 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 80079b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80079be:	2103      	movs	r1, #3
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe f89d 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 80079c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80079d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80079e2:	4619      	mov	r1, r3
 80079e4:	4610      	mov	r0, r2
 80079e6:	f00f ff53 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 80079ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80079f8:	2203      	movs	r2, #3
 80079fa:	2103      	movs	r1, #3
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fc fb2f 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 8007a02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8007a10:	2314      	movs	r3, #20
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2340      	movs	r3, #64	; 0x40
 8007a16:	2200      	movs	r2, #0
 8007a18:	2100      	movs	r1, #0
 8007a1a:	f00f fcb9 	bl	8017390 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007a1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a22:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	2264      	movs	r2, #100	; 0x64
 8007a34:	2100      	movs	r1, #0
 8007a36:	f00f fdb3 	bl	80175a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a3e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007a48:	23ff      	movs	r3, #255	; 0xff
 8007a4a:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
 8007a4e:	23ff      	movs	r3, #255	; 0xff
 8007a50:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
 8007a54:	23ff      	movs	r3, #255	; 0xff
 8007a56:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
 8007a5a:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007a5e:	041b      	lsls	r3, r3, #16
 8007a60:	461a      	mov	r2, r3
 8007a62:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd feef 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007a80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f00f fc11 	bl	80172b4 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8007a92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a96:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f00f fc0c 	bl	80172c0 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 8007aa8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007aac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007ab6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aba:	2109      	movs	r1, #9
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe f82f 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8007ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f00f fc0f 	bl	80172ec <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8007ace:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fc f9b8 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 8007ad8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007adc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007ae6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007aea:	210d      	movs	r1, #13
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fec5 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007af2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007af6:	4619      	mov	r1, r3
 8007af8:	4620      	mov	r0, r4
 8007afa:	f00f fdfe 	bl	80176fa <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 8007afe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b02:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007b0c:	2132      	movs	r1, #50	; 0x32
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f00f fbf8 	bl	8017304 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007b14:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007b22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007b30:	4619      	mov	r1, r3
 8007b32:	4610      	mov	r0, r2
 8007b34:	f00f feac 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 8007b38:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b3c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007b46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f00f fe9a 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007b5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8007b6a:	2311      	movs	r3, #17
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	2327      	movs	r3, #39	; 0x27
 8007b70:	223a      	movs	r2, #58	; 0x3a
 8007b72:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8007b76:	f7fc fa1a 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007b7a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b7e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f503 7062 	add.w	r0, r3, #904	; 0x388
 8007b88:	2310      	movs	r3, #16
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2326      	movs	r3, #38	; 0x26
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	f7fc fa0c 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007b96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b9a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
 8007bb6:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 8007bba:	041b      	lsls	r3, r3, #16
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007bd0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fd fe41 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007bdc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007be0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4619      	mov	r1, r3
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7fd ff09 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007bee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bf2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8007bfc:	23ed      	movs	r3, #237	; 0xed
 8007bfe:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 8007c02:	2366      	movs	r3, #102	; 0x66
 8007c04:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 8007c08:	2363      	movs	r3, #99	; 0x63
 8007c0a:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
 8007c0e:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8007c12:	041b      	lsls	r3, r3, #16
 8007c14:	461a      	mov	r2, r3
 8007c16:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fd fe15 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007c34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4620      	mov	r0, r4
 8007c42:	f7fd ff4f 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007c46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007c54:	2103      	movs	r1, #3
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd ff52 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007c5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007c6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c6e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f00f fe08 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007c80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c84:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007c8e:	2203      	movs	r2, #3
 8007c90:	2104      	movs	r1, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fc f9e4 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007c98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8007ca6:	23ff      	movs	r3, #255	; 0xff
 8007ca8:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8007cac:	23ff      	movs	r3, #255	; 0xff
 8007cae:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8007cb2:	23ff      	movs	r3, #255	; 0xff
 8007cb4:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8007cb8:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8007cc4:	021b      	lsls	r3, r3, #8
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007cd2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fd fdc0 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007cde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
 8007cee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cf2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007cf6:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007cf8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007cfc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007d00:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d08:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007d0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d0e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007d18:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
        linespace = space;
 8007d22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007d26:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 8007d2a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007d2c:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007d2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d32:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8007d3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d40:	2100      	movs	r1, #0
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fd feec 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8007d48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f011 fcc9 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc f875 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007d5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007d6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d70:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f00f fd87 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007d82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d86:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007d90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d94:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f00f fd75 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007da6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007daa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007db4:	2219      	movs	r2, #25
 8007db6:	2108      	movs	r1, #8
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fc f951 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007dbe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dc2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 8007dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007dd0:	2104      	movs	r1, #4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fd fd52 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007dd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007ddc:	2105      	movs	r1, #5
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd fd4c 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007de4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007de8:	210b      	movs	r1, #11
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fd fd46 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007df0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007df4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007df8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f010 fa23 	bl	8018248 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007e02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f503 707e 	add.w	r0, r3, #1016	; 0x3f8
 8007e10:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2209      	movs	r2, #9
 8007e1e:	2102      	movs	r1, #2
 8007e20:	f010 f886 	bl	8017f30 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007e24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e28:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007e32:	2264      	movs	r2, #100	; 0x64
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f00f ffef 	bl	8017e1a <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007e3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e40:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007e4a:	2132      	movs	r1, #50	; 0x32
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f00f ff70 	bl	8017d32 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007e52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 727e 	add.w	r2, r3, #1016	; 0x3f8
 8007e60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e64:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7fe fe6a 	bl	8006b4a <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007e76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e7a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007e84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e88:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007e92:	4619      	mov	r1, r3
 8007e94:	4610      	mov	r0, r2
 8007e96:	f00f fcfb 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007e9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e9e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007ea8:	2217      	movs	r2, #23
 8007eaa:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fc f8d6 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007eb4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eb8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 8007ec2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ec6:	210a      	movs	r1, #10
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fd fcd7 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007ece:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ed2:	2108      	movs	r1, #8
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd fcd1 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8007eda:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007ede:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7fe fe3f 	bl	8006b68 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007eea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 8007ef8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007efc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f7fd fe7f 	bl	8005c0c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007f0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f12:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007f1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f20:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f00f fcaf 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007f32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f36:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007f40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f44:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	33f8      	adds	r3, #248	; 0xf8
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f00f fc9e 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007f54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f58:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f203 502c 	addw	r0, r3, #1324	; 0x52c
 8007f62:	2343      	movs	r3, #67	; 0x43
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007f6a:	2217      	movs	r2, #23
 8007f6c:	2105      	movs	r1, #5
 8007f6e:	f7fc f81e 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007f72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f76:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f503 60ab 	add.w	r0, r3, #1368	; 0x558
 8007f80:	233f      	movs	r3, #63	; 0x3f
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	f7fc f80f 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007f90:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f94:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8007f9e:	2343      	movs	r3, #67	; 0x43
 8007fa0:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 8007fa4:	2365      	movs	r3, #101	; 0x65
 8007fa6:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
 8007faa:	238b      	movs	r3, #139	; 0x8b
 8007fac:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
 8007fb0:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007fca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fd fc44 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8007fd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f7fd fd0c 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007fe8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8008002:	2300      	movs	r3, #0
 8008004:	f887 31bc 	strb.w	r3, [r7, #444]	; 0x1bc
 8008008:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	461a      	mov	r2, r3
 8008010:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8008014:	021b      	lsls	r3, r3, #8
 8008016:	431a      	orrs	r2, r3
 8008018:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
 800801c:	4313      	orrs	r3, r2
 800801e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008022:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7fd fc18 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800802e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008032:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	4620      	mov	r0, r4
 800803c:	f7fd fd52 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8008040:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008044:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd fd55 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8008056:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800805a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f203 522c 	addw	r2, r3, #1324	; 0x52c
 8008064:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008068:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f00f fc0b 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 800807a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800807e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008088:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800808c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f00f fbf9 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 800809e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f203 508c 	addw	r0, r3, #1420	; 0x58c
 80080ac:	236d      	movs	r3, #109	; 0x6d
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80080b4:	2208      	movs	r2, #8
 80080b6:	210a      	movs	r1, #10
 80080b8:	f7fb ff79 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 80080bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f503 60b7 	add.w	r0, r3, #1464	; 0x5b8
 80080ca:	236d      	movs	r3, #109	; 0x6d
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80080d2:	2200      	movs	r2, #0
 80080d4:	2100      	movs	r1, #0
 80080d6:	f7fb ff6a 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80080da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 80080e8:	234e      	movs	r3, #78	; 0x4e
 80080ea:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
 80080ee:	2389      	movs	r3, #137	; 0x89
 80080f0:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 80080f4:	23ae      	movs	r3, #174	; 0xae
 80080f6:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 80080fa:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	461a      	mov	r2, r3
 8008102:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 8008106:	021b      	lsls	r3, r3, #8
 8008108:	431a      	orrs	r2, r3
 800810a:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 800810e:	4313      	orrs	r3, r2
 8008110:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fb9f 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008120:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008124:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4619      	mov	r1, r3
 800812c:	4620      	mov	r0, r4
 800812e:	f7fd fc67 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008132:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008136:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8008140:	23ed      	movs	r3, #237	; 0xed
 8008142:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
 8008146:	2366      	movs	r3, #102	; 0x66
 8008148:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 800814c:	2363      	movs	r3, #99	; 0x63
 800814e:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
 8008152:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	461a      	mov	r2, r3
 800815a:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	431a      	orrs	r2, r3
 8008162:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8008166:	4313      	orrs	r3, r2
 8008168:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800816c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008170:	4611      	mov	r1, r2
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd fb73 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008178:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800817c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	4620      	mov	r0, r4
 8008186:	f7fd fcad 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 800818a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800818e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8008198:	2105      	movs	r1, #5
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd fcb0 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80081a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 80081ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f00f fb66 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 80081c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f203 50ec 	addw	r0, r3, #1516	; 0x5ec
 80081d2:	2364      	movs	r3, #100	; 0x64
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80081da:	2204      	movs	r2, #4
 80081dc:	2105      	movs	r1, #5
 80081de:	f7fb fee6 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 80081e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 80081f0:	2364      	movs	r3, #100	; 0x64
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	f7fb fed7 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008200:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008204:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 800820e:	2343      	movs	r3, #67	; 0x43
 8008210:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8008214:	2365      	movs	r3, #101	; 0x65
 8008216:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 800821a:	238b      	movs	r3, #139	; 0x8b
 800821c:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 8008220:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8008224:	041b      	lsls	r3, r3, #16
 8008226:	461a      	mov	r2, r3
 8008228:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	431a      	orrs	r2, r3
 8008230:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8008234:	4313      	orrs	r3, r2
 8008236:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800823a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7fd fb0c 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008246:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800824a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4619      	mov	r1, r3
 8008252:	4620      	mov	r0, r4
 8008254:	f7fd fbd4 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008258:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800825c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 8008266:	2300      	movs	r3, #0
 8008268:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 800826c:	2300      	movs	r3, #0
 800826e:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 8008272:	2300      	movs	r3, #0
 8008274:	f887 31c8 	strb.w	r3, [r7, #456]	; 0x1c8
 8008278:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	461a      	mov	r2, r3
 8008280:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 8008284:	021b      	lsls	r3, r3, #8
 8008286:	431a      	orrs	r2, r3
 8008288:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 800828c:	4313      	orrs	r3, r2
 800828e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008292:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd fae0 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800829e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4619      	mov	r1, r3
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7fd fc1a 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 80082b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80082be:	2102      	movs	r1, #2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fd fc1d 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80082c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 80082d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f00f fad3 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 80082ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f203 604c 	addw	r0, r3, #1612	; 0x64c
 80082f8:	2314      	movs	r3, #20
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2363      	movs	r3, #99	; 0x63
 80082fe:	2200      	movs	r2, #0
 8008300:	21b0      	movs	r1, #176	; 0xb0
 8008302:	f7fb fe54 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 8008306:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800830a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f503 60cf 	add.w	r0, r3, #1656	; 0x678
 8008314:	2311      	movs	r3, #17
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	2363      	movs	r3, #99	; 0x63
 800831a:	2203      	movs	r2, #3
 800831c:	2100      	movs	r1, #0
 800831e:	f7fb fe46 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008322:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008326:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 8008330:	2300      	movs	r3, #0
 8008332:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 8008336:	2300      	movs	r3, #0
 8008338:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
 800833c:	2300      	movs	r3, #0
 800833e:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8008342:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8008346:	041b      	lsls	r3, r3, #16
 8008348:	461a      	mov	r2, r3
 800834a:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	431a      	orrs	r2, r3
 8008352:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8008356:	4313      	orrs	r3, r2
 8008358:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800835c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd fa7b 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008368:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800836c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4619      	mov	r1, r3
 8008374:	4620      	mov	r0, r4
 8008376:	f7fd fb43 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800837a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800837e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 8008388:	23ed      	movs	r3, #237	; 0xed
 800838a:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
 800838e:	2366      	movs	r3, #102	; 0x66
 8008390:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 8008394:	2363      	movs	r3, #99	; 0x63
 8008396:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 800839a:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 800839e:	041b      	lsls	r3, r3, #16
 80083a0:	461a      	mov	r2, r3
 80083a2:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	431a      	orrs	r2, r3
 80083aa:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80083ae:	4313      	orrs	r3, r2
 80083b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80083b4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80083b8:	4611      	mov	r1, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fd fa4f 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80083c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	4620      	mov	r0, r4
 80083ce:	f7fd fb89 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80083d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 80083e0:	2103      	movs	r1, #3
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fb8c 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80083e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 80083f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f00f fa42 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 800840c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008410:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800841a:	2205      	movs	r2, #5
 800841c:	2107      	movs	r1, #7
 800841e:	4618      	mov	r0, r3
 8008420:	f7fb fe1e 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008424:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008428:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 8008432:	23ff      	movs	r3, #255	; 0xff
 8008434:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 8008438:	23ff      	movs	r3, #255	; 0xff
 800843a:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
 8008444:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8008448:	041b      	lsls	r3, r3, #16
 800844a:	461a      	mov	r2, r3
 800844c:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	431a      	orrs	r2, r3
 8008454:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8008458:	4313      	orrs	r3, r2
 800845a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800845e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7fd f9fa 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800846a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800846e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
 800847a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800847e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008482:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008484:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008488:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800848c:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008494:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8008496:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800849a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 80084a4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        linespace = space;
 80084ae:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80084b2:	f8b7 21da 	ldrh.w	r2, [r7, #474]	; 0x1da
 80084b6:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80084b8:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 80084ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80084be:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 80084c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084cc:	2102      	movs	r1, #2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd fb26 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 80084d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084d8:	4619      	mov	r1, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	f011 f903 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80084e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fb fcaf 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 80084ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80084ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 80084f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80084fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f00f f9c1 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 800850e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008512:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 800851c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008520:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f00f f9af 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 8008532:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008536:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 60dd 	add.w	r0, r3, #1768	; 0x6e8
 8008540:	2362      	movs	r3, #98	; 0x62
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	2372      	movs	r3, #114	; 0x72
 8008546:	2200      	movs	r2, #0
 8008548:	f44f 7193 	mov.w	r1, #294	; 0x126
 800854c:	f7fb fd2f 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 8008550:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008554:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f203 7014 	addw	r0, r3, #1812	; 0x714
 800855e:	2360      	movs	r3, #96	; 0x60
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	2370      	movs	r3, #112	; 0x70
 8008564:	2202      	movs	r2, #2
 8008566:	2102      	movs	r1, #2
 8008568:	f7fb fd21 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800856c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008570:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f203 7414 	addw	r4, r3, #1812	; 0x714
 800857a:	23ed      	movs	r3, #237	; 0xed
 800857c:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 8008580:	2366      	movs	r3, #102	; 0x66
 8008582:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
 8008586:	2363      	movs	r3, #99	; 0x63
 8008588:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1
 800858c:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	461a      	mov	r2, r3
 8008594:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	431a      	orrs	r2, r3
 800859c:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085a6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fd f956 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80085b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80085b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4619      	mov	r1, r3
 80085be:	4620      	mov	r0, r4
 80085c0:	f7fd fa1e 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80085c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80085c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f203 7414 	addw	r4, r3, #1812	; 0x714
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
 80085de:	2300      	movs	r3, #0
 80085e0:	f887 31e4 	strb.w	r3, [r7, #484]	; 0x1e4
 80085e4:	f897 31e6 	ldrb.w	r3, [r7, #486]	; 0x1e6
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	461a      	mov	r2, r3
 80085ec:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	431a      	orrs	r2, r3
 80085f4:	f897 31e4 	ldrb.w	r3, [r7, #484]	; 0x1e4
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008602:	4611      	mov	r1, r2
 8008604:	4618      	mov	r0, r3
 8008606:	f7fd f92a 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800860a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800860e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	4620      	mov	r0, r4
 8008618:	f7fd fa64 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 800861c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008620:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800862a:	2103      	movs	r1, #3
 800862c:	4618      	mov	r0, r3
 800862e:	f7fd fa67 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 8008632:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008636:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008640:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008644:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800864e:	4619      	mov	r1, r3
 8008650:	4610      	mov	r0, r2
 8008652:	f00f f91d 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 8008656:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800865a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f503 60e9 	add.w	r0, r3, #1864	; 0x748
 8008664:	2350      	movs	r3, #80	; 0x50
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2354      	movs	r3, #84	; 0x54
 800866a:	220a      	movs	r2, #10
 800866c:	2110      	movs	r1, #16
 800866e:	f7fb fc9e 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008672:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008676:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 8008680:	2300      	movs	r3, #0
 8008682:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
 8008686:	2300      	movs	r3, #0
 8008688:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
 800868c:	2300      	movs	r3, #0
 800868e:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
 8008692:	f897 31e9 	ldrb.w	r3, [r7, #489]	; 0x1e9
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	461a      	mov	r2, r3
 800869a:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	431a      	orrs	r2, r3
 80086a2:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fd f8d3 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80086b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80086bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	4620      	mov	r0, r4
 80086c6:	f7fd f99b 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80086ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80086ce:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 80086d8:	2343      	movs	r3, #67	; 0x43
 80086da:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
 80086de:	2365      	movs	r3, #101	; 0x65
 80086e0:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 80086e4:	238b      	movs	r3, #139	; 0x8b
 80086e6:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
 80086ea:	f897 31ec 	ldrb.w	r3, [r7, #492]	; 0x1ec
 80086ee:	041b      	lsls	r3, r3, #16
 80086f0:	461a      	mov	r2, r3
 80086f2:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	431a      	orrs	r2, r3
 80086fa:	f897 31ea 	ldrb.w	r3, [r7, #490]	; 0x1ea
 80086fe:	4313      	orrs	r3, r2
 8008700:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7fd f8a7 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008710:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008714:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4619      	mov	r1, r3
 800871c:	4620      	mov	r0, r4
 800871e:	f7fd f9e1 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 8008722:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008726:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8008730:	2103      	movs	r1, #3
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd f9e4 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 8008738:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800873c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008746:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800874a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f00f f89a 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 800875c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008760:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800876a:	220d      	movs	r2, #13
 800876c:	2124      	movs	r1, #36	; 0x24
 800876e:	4618      	mov	r0, r3
 8008770:	f7fb fc76 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008774:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008778:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 8008782:	23ff      	movs	r3, #255	; 0xff
 8008784:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 8008788:	23ff      	movs	r3, #255	; 0xff
 800878a:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 800878e:	23ff      	movs	r3, #255	; 0xff
 8008790:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 8008794:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	461a      	mov	r2, r3
 800879c:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	431a      	orrs	r2, r3
 80087a4:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80087ae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fd f852 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80087ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80087be:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80087ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80087ce:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80087d2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80087d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80087d8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80087dc:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80087e4:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 80087e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80087ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80087f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
        linespace = space;
 80087fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008802:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	; 0x1f6
 8008806:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008808:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 800880a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800880e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 8008818:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800881c:	2105      	movs	r1, #5
 800881e:	4618      	mov	r0, r3
 8008820:	f7fd f97e 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8008824:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008828:	4619      	mov	r1, r3
 800882a:	4620      	mov	r0, r4
 800882c:	f010 ff5b 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008834:	4618      	mov	r0, r3
 8008836:	f7fb fb07 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 800883a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800883e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008848:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800884c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f00f f819 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 800885e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008862:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800886c:	220d      	movs	r2, #13
 800886e:	2124      	movs	r1, #36	; 0x24
 8008870:	4618      	mov	r0, r3
 8008872:	f7fb fbf5 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 8008876:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800887a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe f94f 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800888c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008890:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 800889a:	23ff      	movs	r3, #255	; 0xff
 800889c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80088a0:	23ff      	movs	r3, #255	; 0xff
 80088a2:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
 80088a6:	23ff      	movs	r3, #255	; 0xff
 80088a8:	f887 31fd 	strb.w	r3, [r7, #509]	; 0x1fd
 80088ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80088b0:	041b      	lsls	r3, r3, #16
 80088b2:	461a      	mov	r2, r3
 80088b4:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80088b8:	021b      	lsls	r3, r3, #8
 80088ba:	431a      	orrs	r2, r3
 80088bc:	f897 31fd 	ldrb.w	r3, [r7, #509]	; 0x1fd
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fc ffc6 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 80088d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80088d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80088e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80088e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ea:	601a      	str	r2, [r3, #0]
        this->color = color;
 80088ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80088f0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80088f4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80088fc:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 80088fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008902:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800890c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8008910:	2300      	movs	r3, #0
 8008912:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
        linespace = space;
 8008916:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800891a:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 800891e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008920:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 8008922:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008926:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 8008930:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008934:	210a      	movs	r1, #10
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd f8f2 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 800893c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008940:	4619      	mov	r1, r3
 8008942:	4620      	mov	r0, r4
 8008944:	f010 fecf 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008948:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800894c:	4618      	mov	r0, r3
 800894e:	f7fb fa7b 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 8008952:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008956:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008960:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008964:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800896e:	4619      	mov	r1, r3
 8008970:	4610      	mov	r0, r2
 8008972:	f00e ff8d 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 8008976:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800897a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008984:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008988:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f00e ff7b 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 800899a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800899e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f203 70f4 	addw	r0, r3, #2036	; 0x7f4
 80089a8:	2362      	movs	r3, #98	; 0x62
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	2375      	movs	r3, #117	; 0x75
 80089ae:	2200      	movs	r2, #0
 80089b0:	212a      	movs	r1, #42	; 0x2a
 80089b2:	f7fb fafc 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 80089b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089ba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f503 6002 	add.w	r0, r3, #2080	; 0x820
 80089c4:	2360      	movs	r3, #96	; 0x60
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	2373      	movs	r3, #115	; 0x73
 80089ca:	2202      	movs	r2, #2
 80089cc:	2102      	movs	r1, #2
 80089ce:	f7fb faee 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80089d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 80089e0:	23ed      	movs	r3, #237	; 0xed
 80089e2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80089e6:	2366      	movs	r3, #102	; 0x66
 80089e8:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80089ec:	2363      	movs	r3, #99	; 0x63
 80089ee:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80089f2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	461a      	mov	r2, r3
 80089fa:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	431a      	orrs	r2, r3
 8008a02:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fc ff23 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008a18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a1c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7fc ffeb 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008a2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a2e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8008a4a:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	461a      	mov	r2, r3
 8008a52:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a64:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fc fef7 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008a70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a74:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7fd f831 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 8008a82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a86:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008a90:	2103      	movs	r1, #3
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd f834 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008a98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008aa6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008aaa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f00e feea 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008abc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ac0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f603 0054 	addw	r0, r3, #2132	; 0x854
 8008aca:	2350      	movs	r3, #80	; 0x50
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2359      	movs	r3, #89	; 0x59
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	2110      	movs	r1, #16
 8008ad4:	f7fb fa6b 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008ad8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008adc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
 8008af8:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8008afc:	041b      	lsls	r3, r3, #16
 8008afe:	461a      	mov	r2, r3
 8008b00:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	431a      	orrs	r2, r3
 8008b08:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b12:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fc fea0 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008b1e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b22:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7fc ff68 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008b30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b34:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8008b3e:	2343      	movs	r3, #67	; 0x43
 8008b40:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 8008b44:	2365      	movs	r3, #101	; 0x65
 8008b46:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008b4a:	238b      	movs	r3, #139	; 0x8b
 8008b4c:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8008b50:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	461a      	mov	r2, r3
 8008b58:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8008b64:	4313      	orrs	r3, r2
 8008b66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fc fe74 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008b76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b7a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4619      	mov	r1, r3
 8008b82:	4620      	mov	r0, r4
 8008b84:	f7fc ffae 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008b88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b8c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008b96:	2103      	movs	r1, #3
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fc ffb1 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008b9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ba2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008bac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bb0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	f00e fe67 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008bc2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bc6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008bd0:	220d      	movs	r2, #13
 8008bd2:	211d      	movs	r1, #29
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fb fa43 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008bda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bde:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8008be8:	23ff      	movs	r3, #255	; 0xff
 8008bea:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
 8008bee:	23ff      	movs	r3, #255	; 0xff
 8008bf0:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8008bf4:	23ff      	movs	r3, #255	; 0xff
 8008bf6:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8008bfa:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 8008bfe:	041b      	lsls	r3, r3, #16
 8008c00:	461a      	mov	r2, r3
 8008c02:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fc fe1f 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008c20:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f8c7 421c 	str.w	r4, [r7, #540]	; 0x21c
 8008c30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c34:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8008c38:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008c3a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8008c3e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008c42:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8008c46:	6812      	ldr	r2, [r2, #0]
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008c4a:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008c4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c50:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008c5a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
        linespace = space;
 8008c64:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8008c68:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 8008c6c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008c6e:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008c70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c74:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8008c7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c82:	2106      	movs	r1, #6
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fc ff4b 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8008c8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4620      	mov	r0, r4
 8008c92:	f010 fd28 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fb f8d4 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008ca0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ca4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008cae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cb2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f00e fde6 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008cc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cc8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008cd2:	220d      	movs	r2, #13
 8008cd4:	211e      	movs	r1, #30
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fb f9c2 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008cdc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ce0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fd ff1c 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008cf2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cf6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 8008d00:	23ff      	movs	r3, #255	; 0xff
 8008d02:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 8008d06:	23ff      	movs	r3, #255	; 0xff
 8008d08:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 8008d0c:	23ff      	movs	r3, #255	; 0xff
 8008d0e:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
 8008d12:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8008d16:	041b      	lsls	r3, r3, #16
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	431a      	orrs	r2, r3
 8008d22:	f897 3229 	ldrb.w	r3, [r7, #553]	; 0x229
 8008d26:	4313      	orrs	r3, r2
 8008d28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d2c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008d30:	4611      	mov	r1, r2
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fc fd93 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008d38:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d3c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f8c7 422c 	str.w	r4, [r7, #556]	; 0x22c
 8008d48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d4c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8008d50:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008d52:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008d56:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008d5a:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8008d5e:	6812      	ldr	r2, [r2, #0]
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008d62:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008d64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008d72:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8008d76:	2300      	movs	r3, #0
 8008d78:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        linespace = space;
 8008d7c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008d80:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 8008d84:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008d86:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008d88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d8c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 8008d96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d9a:	210b      	movs	r1, #11
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fc febf 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8008da2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008da6:	4619      	mov	r1, r3
 8008da8:	4620      	mov	r0, r4
 8008daa:	f010 fc9c 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008dae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fb f848 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008db8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dbc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008dc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	f00e fd5a 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008ddc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008de0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008dea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f00e fd48 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008e00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e04:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 8008e0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e12:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f00e fd36 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008e24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e28:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 8008e32:	2314      	movs	r3, #20
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	2381      	movs	r3, #129	; 0x81
 8008e38:	2275      	movs	r2, #117	; 0x75
 8008e3a:	2140      	movs	r1, #64	; 0x40
 8008e3c:	f7fb f8b7 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8008e40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e44:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f603 102c 	addw	r0, r3, #2348	; 0x92c
 8008e4e:	2311      	movs	r3, #17
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	2381      	movs	r3, #129	; 0x81
 8008e54:	2203      	movs	r2, #3
 8008e56:	2100      	movs	r1, #0
 8008e58:	f7fb f8a9 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008e5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
 8008e7c:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8008e80:	041b      	lsls	r3, r3, #16
 8008e82:	461a      	mov	r2, r3
 8008e84:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 8008e88:	021b      	lsls	r3, r3, #8
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008e96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fc fcde 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008ea2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ea6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4619      	mov	r1, r3
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f7fc fda6 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008eb4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008eb8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 8008ec2:	23ed      	movs	r3, #237	; 0xed
 8008ec4:	f887 3240 	strb.w	r3, [r7, #576]	; 0x240
 8008ec8:	2366      	movs	r3, #102	; 0x66
 8008eca:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008ece:	2363      	movs	r3, #99	; 0x63
 8008ed0:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
 8008ed4:	f897 3240 	ldrb.w	r3, [r7, #576]	; 0x240
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	461a      	mov	r2, r3
 8008edc:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008ee0:	021b      	lsls	r3, r3, #8
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008eee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fc fcb2 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008efa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008efe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4619      	mov	r1, r3
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7fc fdec 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008f0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f10:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008f1a:	2103      	movs	r1, #3
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fc fdef 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008f22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8008f30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f34:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f00e fca5 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008f46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008f54:	2205      	movs	r2, #5
 8008f56:	2109      	movs	r1, #9
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fb f881 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008f5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 8008f6c:	23ff      	movs	r3, #255	; 0xff
 8008f6e:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8008f72:	23ff      	movs	r3, #255	; 0xff
 8008f74:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
 8008f7e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8008f82:	041b      	lsls	r3, r3, #16
 8008f84:	461a      	mov	r2, r3
 8008f86:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fc fc5d 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8008fa4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fa8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8c7 4244 	str.w	r4, [r7, #580]	; 0x244
 8008fb4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8008fbc:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008fbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fc2:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008fc6:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008fce:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 8008fd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fd4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008fde:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f8a7 324a 	strh.w	r3, [r7, #586]	; 0x24a
        linespace = space;
 8008fe8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fec:	f8b7 224a 	ldrh.w	r2, [r7, #586]	; 0x24a
 8008ff0:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008ff2:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 8008ff4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ff8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 8009002:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009006:	2103      	movs	r1, #3
 8009008:	4618      	mov	r0, r3
 800900a:	f7fc fd89 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 800900e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009012:	4619      	mov	r1, r3
 8009014:	4620      	mov	r0, r4
 8009016:	f010 fb66 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800901a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800901e:	4618      	mov	r0, r3
 8009020:	f7fa ff12 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 8009024:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009028:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8009032:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009036:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f00e fc24 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 8009048:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800904c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8009056:	228c      	movs	r2, #140	; 0x8c
 8009058:	215c      	movs	r1, #92	; 0x5c
 800905a:	4618      	mov	r0, r3
 800905c:	f7fb f800 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009060:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009064:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 800906e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009072:	2102      	movs	r1, #2
 8009074:	4618      	mov	r0, r3
 8009076:	f7fc fc01 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 800907a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800907e:	4619      	mov	r1, r3
 8009080:	4620      	mov	r0, r4
 8009082:	f010 fdaa 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 8009086:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800908a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8009094:	228d      	movs	r2, #141	; 0x8d
 8009096:	f240 1135 	movw	r1, #309	; 0x135
 800909a:	4618      	mov	r0, r3
 800909c:	f7fa ffe0 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80090a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 80090ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090b2:	2102      	movs	r1, #2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fc fbe1 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 80090ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090be:	4619      	mov	r1, r3
 80090c0:	4620      	mov	r0, r4
 80090c2:	f010 fd8a 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 80090c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80090d4:	228c      	movs	r2, #140	; 0x8c
 80090d6:	215c      	movs	r1, #92	; 0x5c
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fa ffc1 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80090de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 80090ec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80090f0:	2103      	movs	r1, #3
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fc fbc2 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 80090f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80090fc:	2102      	movs	r1, #2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc fbbc 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8009104:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009108:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800910c:	4619      	mov	r1, r3
 800910e:	4620      	mov	r0, r4
 8009110:	f010 fb20 	bl	8019754 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 8009114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009118:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f603 12f4 	addw	r2, r3, #2548	; 0x9f4
 8009122:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009126:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fc fd6a 	bl	8005c0c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 8009138:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800913c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8009146:	228c      	movs	r2, #140	; 0x8c
 8009148:	f240 1135 	movw	r1, #309	; 0x135
 800914c:	4618      	mov	r0, r3
 800914e:	f7fa ff87 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009152:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009156:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f603 2428 	addw	r4, r3, #2600	; 0xa28
 8009160:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009164:	2103      	movs	r1, #3
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc fb88 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 800916c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009170:	2102      	movs	r1, #2
 8009172:	4618      	mov	r0, r3
 8009174:	f7fc fb82 	bl	800587c <_ZN8touchgfx6BitmapC1Et>
 8009178:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800917c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009180:	4619      	mov	r1, r3
 8009182:	4620      	mov	r0, r4
 8009184:	f010 fae6 	bl	8019754 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8009188:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800918c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f603 2228 	addw	r2, r3, #2600	; 0xa28
 8009196:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800919a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f7fc fd30 	bl	8005c0c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 80091ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 80091ba:	2314      	movs	r3, #20
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2381      	movs	r3, #129	; 0x81
 80091c0:	2275      	movs	r2, #117	; 0x75
 80091c2:	f240 111b 	movw	r1, #283	; 0x11b
 80091c6:	f7fa fef2 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 80091ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091ce:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 80091d8:	2311      	movs	r3, #17
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2381      	movs	r3, #129	; 0x81
 80091de:	2203      	movs	r2, #3
 80091e0:	2100      	movs	r1, #0
 80091e2:	f7fa fee4 	bl	8003fae <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80091e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 80091f4:	2300      	movs	r3, #0
 80091f6:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
 80091fa:	2300      	movs	r3, #0
 80091fc:	f887 3254 	strb.w	r3, [r7, #596]	; 0x254
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
 8009206:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	461a      	mov	r2, r3
 800920e:	f897 3254 	ldrb.w	r3, [r7, #596]	; 0x254
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	431a      	orrs	r2, r3
 8009216:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800921a:	4313      	orrs	r3, r2
 800921c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009220:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f7fc fb19 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800922c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009230:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4619      	mov	r1, r3
 8009238:	4620      	mov	r0, r4
 800923a:	f7fc fbe1 	bl	8005a00 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800923e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009242:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 800924c:	23ed      	movs	r3, #237	; 0xed
 800924e:	f887 3258 	strb.w	r3, [r7, #600]	; 0x258
 8009252:	2366      	movs	r3, #102	; 0x66
 8009254:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8009258:	2363      	movs	r3, #99	; 0x63
 800925a:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 800925e:	f897 3258 	ldrb.w	r3, [r7, #600]	; 0x258
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	461a      	mov	r2, r3
 8009266:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	431a      	orrs	r2, r3
 800926e:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8009272:	4313      	orrs	r3, r2
 8009274:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fc faed 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 8009284:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009288:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	4620      	mov	r0, r4
 8009292:	f7fc fc27 	bl	8005ae4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8009296:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800929a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80092a4:	2103      	movs	r1, #3
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fc fc2a 	bl	8005b00 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 80092ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 80092ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092be:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f00e fae0 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 80092d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80092de:	2205      	movs	r2, #5
 80092e0:	210f      	movs	r1, #15
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fa febc 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80092e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 80092f6:	23ff      	movs	r3, #255	; 0xff
 80092f8:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
 80092fc:	23ff      	movs	r3, #255	; 0xff
 80092fe:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
 8009302:	23ff      	movs	r3, #255	; 0xff
 8009304:	f887 3259 	strb.w	r3, [r7, #601]	; 0x259
 8009308:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	461a      	mov	r2, r3
 8009310:	f897 325a 	ldrb.w	r3, [r7, #602]	; 0x25a
 8009314:	021b      	lsls	r3, r3, #8
 8009316:	431a      	orrs	r2, r3
 8009318:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 800931c:	4313      	orrs	r3, r2
 800931e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009322:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7fc fa98 	bl	800585e <_ZN8touchgfx9colortypeC1Em>
 800932e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009332:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	461a      	mov	r2, r3
 800933a:	f8c7 425c 	str.w	r4, [r7, #604]	; 0x25c
 800933e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009342:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009346:	601a      	str	r2, [r3, #0]
        this->color = color;
 8009348:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800934c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8009350:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8009354:	6812      	ldr	r2, [r2, #0]
 8009356:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009358:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 800935a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800935e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8009368:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800936c:	2300      	movs	r3, #0
 800936e:	f8a7 3262 	strh.w	r3, [r7, #610]	; 0x262
        linespace = space;
 8009372:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8009376:	f8b7 2262 	ldrh.w	r2, [r7, #610]	; 0x262
 800937a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800937c:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 800937e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009382:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 800938c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009390:	2104      	movs	r1, #4
 8009392:	4618      	mov	r0, r3
 8009394:	f7fc fbc4 	bl	8005b20 <_ZN8touchgfx9TypedTextC1Et>
 8009398:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800939c:	4619      	mov	r1, r3
 800939e:	4620      	mov	r0, r4
 80093a0:	f010 f9a1 	bl	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80093a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa fd4d 	bl	8003e48 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 80093ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 80093bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f00e fa5f 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 80093d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3340      	adds	r3, #64	; 0x40
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fc fad4 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 80093f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093f4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093fe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	336c      	adds	r3, #108	; 0x6c
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f7fc fac5 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 800940e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009412:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800941c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3398      	adds	r3, #152	; 0x98
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fc fab6 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 800942c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009430:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800943a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fc faa6 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 800944c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009450:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800945a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	4619      	mov	r1, r3
 8009466:	4610      	mov	r0, r2
 8009468:	f7fc fa96 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 800946c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009470:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800947a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8009484:	4619      	mov	r1, r3
 8009486:	4610      	mov	r0, r2
 8009488:	f7fc fa86 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 800948c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009490:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800949a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fc fa76 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 80094ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094ba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f7fc fa66 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 80094cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094da:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80094e4:	4619      	mov	r1, r3
 80094e6:	4610      	mov	r0, r2
 80094e8:	f7fc fa56 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 80094ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f7fc fa46 	bl	8005998 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800950c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009510:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 800951c:	46bd      	mov	sp, r7
 800951e:	bd90      	pop	{r4, r7, pc}

08009520 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]

}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	2b57      	cmp	r3, #87	; 0x57
 8009544:	d105      	bne.n	8009552 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3330      	adds	r3, #48	; 0x30
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	4798      	blx	r3
    }
    if(88 == key)
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	2b58      	cmp	r3, #88	; 0x58
 8009556:	d105      	bne.n	8009564 <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	333c      	adds	r3, #60	; 0x3c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	4798      	blx	r3
    }
    if(89 == key)
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2b59      	cmp	r3, #89	; 0x59
 8009568:	d105      	bne.n	8009576 <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3334      	adds	r3, #52	; 0x34
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
    }
    if(90 == key)
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	2b5a      	cmp	r3, #90	; 0x5a
 800957a:	d105      	bne.n	8009588 <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3338      	adds	r3, #56	; 0x38
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
    }
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d106      	bne.n	80095b4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3334      	adds	r3, #52	; 0x34
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 80095b2:	e019      	b.n	80095e8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d106      	bne.n	80095ce <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3338      	adds	r3, #56	; 0x38
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
}
 80095cc:	e00c      	b.n	80095e8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d106      	bne.n	80095e8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fd fc6c 	bl	8006eb8 <_ZN12MainViewBase11applicationEv>
 80095e0:	4603      	mov	r3, r0
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fb f848 	bl	8004678 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	429a      	cmp	r2, r3
 8009606:	d106      	bne.n	8009616 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	332c      	adds	r3, #44	; 0x2c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	4798      	blx	r3
    }
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4618      	mov	r0, r3
 800962c:	f013 facc 	bl	801cbc8 <_ZN8touchgfx6ScreenC1Ev>
 8009630:	4a05      	ldr	r2, [pc, #20]	; (8009648 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	0802d08c 	.word	0x0802d08c

0800964c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4639      	mov	r1, r7
 8009658:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fd f8fc 	bl	800685c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	605a      	str	r2, [r3, #4]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3308      	adds	r3, #8
 8009674:	463a      	mov	r2, r7
 8009676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800967a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	0802d074 	.word	0x0802d074

0800968c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	4a04      	ldr	r2, [pc, #16]	; (80096a8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4618      	mov	r0, r3
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	0802d0c0 	.word	0x0802d0c0

080096ac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	4639      	mov	r1, r7
 80096b8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff ffe4 	bl	800968c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 80096c4:	4a08      	ldr	r2, [pc, #32]	; (80096e8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	605a      	str	r2, [r3, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3308      	adds	r3, #8
 80096d4:	463a      	mov	r2, r7
 80096d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	0802d05c 	.word	0x0802d05c

080096ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
    }
 80096f4:	4a04      	ldr	r2, [pc, #16]	; (8009708 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	0802d0c0 	.word	0x0802d0c0

0800970c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
    }
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff ffe9 	bl	80096ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800971a:	2104      	movs	r1, #4
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f021 f8aa 	bl	802a876 <_ZdlPvj>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	4a05      	ldr	r2, [pc, #20]	; (800974c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff ffd5 	bl	80096ec <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	0802d05c 	.word	0x0802d05c

08009750 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff ffe7 	bl	800972c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 800975e:	2110      	movs	r1, #16
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f021 f888 	bl	802a876 <_ZdlPvj>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	4a05      	ldr	r2, [pc, #20]	; (8009790 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd f89b 	bl	80068bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	0802d074 	.word	0x0802d074

08009794 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff ffe7 	bl	8009770 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80097a2:	2110      	movs	r1, #16
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f021 f866 	bl	802a876 <_ZdlPvj>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	4a0a      	ldr	r2, [pc, #40]	; (80097e8 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3358      	adds	r3, #88	; 0x58
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd f8ba 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	332c      	adds	r3, #44	; 0x2c
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fd f8d7 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fd f8b1 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	0802d620 	.word	0x0802d620

080097ec <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff ffdd 	bl	80097b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80097fa:	21b4      	movs	r1, #180	; 0xb4
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f021 f83a 	bl	802a876 <_ZdlPvj>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	4a05      	ldr	r2, [pc, #20]	; (800982c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	f7fd f8f5 	bl	8006a0c <_ZN8touchgfx8TextAreaD1Ev>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	0802e9f4 	.word	0x0802e9f4

08009830 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ffe7 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800983e:	2140      	movs	r1, #64	; 0x40
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f021 f818 	bl	802a876 <_ZdlPvj>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	4a08      	ldr	r2, [pc, #32]	; (800987c <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	33b4      	adds	r3, #180	; 0xb4
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ffd2 	bl	800980c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff ffa2 	bl	80097b4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4618      	mov	r0, r3
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	0802d4bc 	.word	0x0802d4bc

08009880 <_ZN8touchgfx12TextProgressD0Ev>:
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff ffe1 	bl	8009850 <_ZN8touchgfx12TextProgressD1Ev>
 800988e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f020 ffef 	bl	802a876 <_ZdlPvj>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	4a0f      	ldr	r2, [pc, #60]	; (80098ec <_ZN8touchgfx6SliderD1Ev+0x48>)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	33c0      	adds	r3, #192	; 0xc0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fd f842 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3394      	adds	r3, #148	; 0x94
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd f85f 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3368      	adds	r3, #104	; 0x68
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd f85a 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	333c      	adds	r3, #60	; 0x3c
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7fd f855 	bl	8006984 <_ZN8touchgfx5ImageD1Ev>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd f82f 	bl	8006940 <_ZN8touchgfx9ContainerD1Ev>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	0802db28 	.word	0x0802db28

080098f0 <_ZN8touchgfx6SliderD0Ev>:
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ffd3 	bl	80098a4 <_ZN8touchgfx6SliderD1Ev>
 80098fe:	21fc      	movs	r1, #252	; 0xfc
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f020 ffb8 	bl	802a876 <_ZdlPvj>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	4a05      	ldr	r2, [pc, #20]	; (8009930 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	f7fd f89b 	bl	8006a5c <_ZN8touchgfx6ButtonD1Ev>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	0802e6b0 	.word	0x0802e6b0

08009934 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff ffe7 	bl	8009910 <_ZN8touchgfx12ToggleButtonD1Ev>
 8009942:	2138      	movs	r1, #56	; 0x38
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f020 ff96 	bl	802a876 <_ZdlPvj>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	68d2      	ldr	r2, [r2, #12]
 8009968:	1052      	asrs	r2, r2, #1
 800996a:	1898      	adds	r0, r3, r2
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	e00a      	b.n	8009994 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	68d2      	ldr	r2, [r2, #12]
 8009986:	1052      	asrs	r2, r2, #1
 8009988:	4413      	add	r3, r2
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	6892      	ldr	r2, [r2, #8]
 8009990:	4413      	add	r3, r2
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	4798      	blx	r3
    }
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d010      	beq.n	80099d4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d107      	bne.n	80099ca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d001      	beq.n	80099d4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e000      	b.n	80099d6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80099d4:	2300      	movs	r3, #0
    }
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68d2      	ldr	r2, [r2, #12]
 80099f4:	1052      	asrs	r2, r2, #1
 80099f6:	1898      	adds	r0, r3, r2
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	e00a      	b.n	8009a20 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	68d2      	ldr	r2, [r2, #12]
 8009a12:	1052      	asrs	r2, r2, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6892      	ldr	r2, [r2, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	4798      	blx	r3
    }
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d010      	beq.n	8009a5e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d107      	bne.n	8009a54 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e000      	b.n	8009a56 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009a54:	2300      	movs	r3, #0
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d001      	beq.n	8009a5e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e000      	b.n	8009a60 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009a5e:	2300      	movs	r3, #0
    }
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	4801      	ldr	r0, [pc, #4]	; (8009a78 <__tcf_0+0xc>)
 8009a72:	f7fa f9c7 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	24001dcc 	.word	0x24001dcc

08009a7c <_Z23getFont_verdana_20_4bppv>:
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08c      	sub	sp, #48	; 0x30
 8009a80:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a82:	4b1f      	ldr	r3, [pc, #124]	; (8009b00 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f3bf 8f5b 	dmb	ish
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bf0c      	ite	eq
 8009a92:	2301      	moveq	r3, #1
 8009a94:	2300      	movne	r3, #0
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d02c      	beq.n	8009af6 <_Z23getFont_verdana_20_4bppv+0x7a>
 8009a9c:	4818      	ldr	r0, [pc, #96]	; (8009b00 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009a9e:	f020 feec 	bl	802a87a <__cxa_guard_acquire>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d021      	beq.n	8009af6 <_Z23getFont_verdana_20_4bppv+0x7a>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aba:	2300      	movs	r3, #0
 8009abc:	9308      	str	r3, [sp, #32]
 8009abe:	233f      	movs	r3, #63	; 0x3f
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	4b10      	ldr	r3, [pc, #64]	; (8009b04 <_Z23getFont_verdana_20_4bppv+0x88>)
 8009ac4:	9306      	str	r3, [sp, #24]
 8009ac6:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009ac8:	9305      	str	r3, [sp, #20]
 8009aca:	2300      	movs	r3, #0
 8009acc:	9304      	str	r3, [sp, #16]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9303      	str	r3, [sp, #12]
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	2304      	movs	r3, #4
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2314      	movs	r3, #20
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	490a      	ldr	r1, [pc, #40]	; (8009b0c <_Z23getFont_verdana_20_4bppv+0x90>)
 8009ae4:	480a      	ldr	r0, [pc, #40]	; (8009b10 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009ae6:	f7fb fe1f 	bl	8005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009aea:	480a      	ldr	r0, [pc, #40]	; (8009b14 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009aec:	f020 ff10 	bl	802a910 <atexit>
 8009af0:	4803      	ldr	r0, [pc, #12]	; (8009b00 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009af2:	f020 fece 	bl	802a892 <__cxa_guard_release>
    return verdana_20_4bpp;
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	24001df4 	.word	0x24001df4
 8009b04:	0803039c 	.word	0x0803039c
 8009b08:	080303b0 	.word	0x080303b0
 8009b0c:	900007ec 	.word	0x900007ec
 8009b10:	24001dcc 	.word	0x24001dcc
 8009b14:	08009a6d 	.word	0x08009a6d

08009b18 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	4801      	ldr	r0, [pc, #4]	; (8009b24 <__tcf_0+0xc>)
 8009b1e:	f7fa f971 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	24001df8 	.word	0x24001df8

08009b28 <_Z23getFont_verdana_40_4bppv>:
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08c      	sub	sp, #48	; 0x30
 8009b2c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f3bf 8f5b 	dmb	ish
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf0c      	ite	eq
 8009b3e:	2301      	moveq	r3, #1
 8009b40:	2300      	movne	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d02c      	beq.n	8009ba2 <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b48:	4818      	ldr	r0, [pc, #96]	; (8009bac <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b4a:	f020 fe96 	bl	802a87a <__cxa_guard_acquire>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bf14      	ite	ne
 8009b54:	2301      	movne	r3, #1
 8009b56:	2300      	moveq	r3, #0
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d021      	beq.n	8009ba2 <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	930a      	str	r3, [sp, #40]	; 0x28
 8009b62:	2300      	movs	r3, #0
 8009b64:	9309      	str	r3, [sp, #36]	; 0x24
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	233f      	movs	r3, #63	; 0x3f
 8009b6c:	9307      	str	r3, [sp, #28]
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <_Z23getFont_verdana_40_4bppv+0x88>)
 8009b70:	9306      	str	r3, [sp, #24]
 8009b72:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9304      	str	r3, [sp, #16]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9302      	str	r3, [sp, #8]
 8009b82:	2304      	movs	r3, #4
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	2300      	movs	r3, #0
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	2328      	movs	r3, #40	; 0x28
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	490a      	ldr	r1, [pc, #40]	; (8009bb8 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009b90:	480a      	ldr	r0, [pc, #40]	; (8009bbc <_Z23getFont_verdana_40_4bppv+0x94>)
 8009b92:	f7fb fdc9 	bl	8005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b96:	480a      	ldr	r0, [pc, #40]	; (8009bc0 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009b98:	f020 feba 	bl	802a910 <atexit>
 8009b9c:	4803      	ldr	r0, [pc, #12]	; (8009bac <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b9e:	f020 fe78 	bl	802a892 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009ba2:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	24001e20 	.word	0x24001e20
 8009bb0:	080303a0 	.word	0x080303a0
 8009bb4:	080303b4 	.word	0x080303b4
 8009bb8:	900007fc 	.word	0x900007fc
 8009bbc:	24001df8 	.word	0x24001df8
 8009bc0:	08009b19 	.word	0x08009b19

08009bc4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__tcf_0+0xc>)
 8009bca:	f7fa f91b 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	24001e24 	.word	0x24001e24

08009bd4 <_Z24getFont_verdanab_10_4bppv>:
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08c      	sub	sp, #48	; 0x30
 8009bd8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bda:	4b1f      	ldr	r3, [pc, #124]	; (8009c58 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f3bf 8f5b 	dmb	ish
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bf0c      	ite	eq
 8009bea:	2301      	moveq	r3, #1
 8009bec:	2300      	movne	r3, #0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02c      	beq.n	8009c4e <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009bf4:	4818      	ldr	r0, [pc, #96]	; (8009c58 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009bf6:	f020 fe40 	bl	802a87a <__cxa_guard_acquire>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d021      	beq.n	8009c4e <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9309      	str	r3, [sp, #36]	; 0x24
 8009c12:	2300      	movs	r3, #0
 8009c14:	9308      	str	r3, [sp, #32]
 8009c16:	233f      	movs	r3, #63	; 0x3f
 8009c18:	9307      	str	r3, [sp, #28]
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <_Z24getFont_verdanab_10_4bppv+0x88>)
 8009c1c:	9306      	str	r3, [sp, #24]
 8009c1e:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	2301      	movs	r3, #1
 8009c24:	9304      	str	r3, [sp, #16]
 8009c26:	2300      	movs	r3, #0
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	9302      	str	r3, [sp, #8]
 8009c2e:	2304      	movs	r3, #4
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	2302      	movs	r3, #2
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	230a      	movs	r3, #10
 8009c38:	221a      	movs	r2, #26
 8009c3a:	490a      	ldr	r1, [pc, #40]	; (8009c64 <_Z24getFont_verdanab_10_4bppv+0x90>)
 8009c3c:	480a      	ldr	r0, [pc, #40]	; (8009c68 <_Z24getFont_verdanab_10_4bppv+0x94>)
 8009c3e:	f7fb fd73 	bl	8005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c42:	480a      	ldr	r0, [pc, #40]	; (8009c6c <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009c44:	f020 fe64 	bl	802a910 <atexit>
 8009c48:	4803      	ldr	r0, [pc, #12]	; (8009c58 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009c4a:	f020 fe22 	bl	802a892 <__cxa_guard_release>
    return verdanab_10_4bpp;
 8009c4e:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	24001e4c 	.word	0x24001e4c
 8009c5c:	080303a4 	.word	0x080303a4
 8009c60:	080303b8 	.word	0x080303b8
 8009c64:	9000080c 	.word	0x9000080c
 8009c68:	24001e24 	.word	0x24001e24
 8009c6c:	08009bc5 	.word	0x08009bc5

08009c70 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__tcf_0+0xc>)
 8009c76:	f7fa f8c5 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	24001e50 	.word	0x24001e50

08009c80 <_Z24getFont_verdanab_12_4bppv>:
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08c      	sub	sp, #48	; 0x30
 8009c84:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c86:	4b1f      	ldr	r3, [pc, #124]	; (8009d04 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f3bf 8f5b 	dmb	ish
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf0c      	ite	eq
 8009c96:	2301      	moveq	r3, #1
 8009c98:	2300      	movne	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d02c      	beq.n	8009cfa <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009ca0:	4818      	ldr	r0, [pc, #96]	; (8009d04 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009ca2:	f020 fdea 	bl	802a87a <__cxa_guard_acquire>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bf14      	ite	ne
 8009cac:	2301      	movne	r3, #1
 8009cae:	2300      	moveq	r3, #0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d021      	beq.n	8009cfa <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9308      	str	r3, [sp, #32]
 8009cc2:	233f      	movs	r3, #63	; 0x3f
 8009cc4:	9307      	str	r3, [sp, #28]
 8009cc6:	4b10      	ldr	r3, [pc, #64]	; (8009d08 <_Z24getFont_verdanab_12_4bppv+0x88>)
 8009cc8:	9306      	str	r3, [sp, #24]
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <_Z24getFont_verdanab_12_4bppv+0x8c>)
 8009ccc:	9305      	str	r3, [sp, #20]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9302      	str	r3, [sp, #8]
 8009cda:	2304      	movs	r3, #4
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	2302      	movs	r3, #2
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	2215      	movs	r2, #21
 8009ce6:	490a      	ldr	r1, [pc, #40]	; (8009d10 <_Z24getFont_verdanab_12_4bppv+0x90>)
 8009ce8:	480a      	ldr	r0, [pc, #40]	; (8009d14 <_Z24getFont_verdanab_12_4bppv+0x94>)
 8009cea:	f7fb fd1d 	bl	8005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009cee:	480a      	ldr	r0, [pc, #40]	; (8009d18 <_Z24getFont_verdanab_12_4bppv+0x98>)
 8009cf0:	f020 fe0e 	bl	802a910 <atexit>
 8009cf4:	4803      	ldr	r0, [pc, #12]	; (8009d04 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009cf6:	f020 fdcc 	bl	802a892 <__cxa_guard_release>
    return verdanab_12_4bpp;
 8009cfa:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	24001e78 	.word	0x24001e78
 8009d08:	080303a8 	.word	0x080303a8
 8009d0c:	080303bc 	.word	0x080303bc
 8009d10:	90000978 	.word	0x90000978
 8009d14:	24001e50 	.word	0x24001e50
 8009d18:	08009c71 	.word	0x08009c71

08009d1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__tcf_0+0xc>)
 8009d22:	f7fa f86f 	bl	8003e04 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	24001e7c 	.word	0x24001e7c

08009d2c <_Z23getFont_verdanab_8_4bppv>:
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	; 0x30
 8009d30:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d32:	4b1f      	ldr	r3, [pc, #124]	; (8009db0 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f3bf 8f5b 	dmb	ish
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bf0c      	ite	eq
 8009d42:	2301      	moveq	r3, #1
 8009d44:	2300      	movne	r3, #0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d02c      	beq.n	8009da6 <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d4c:	4818      	ldr	r0, [pc, #96]	; (8009db0 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d4e:	f020 fd94 	bl	802a87a <__cxa_guard_acquire>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf14      	ite	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	2300      	moveq	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d021      	beq.n	8009da6 <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d62:	2300      	movs	r3, #0
 8009d64:	930a      	str	r3, [sp, #40]	; 0x28
 8009d66:	2300      	movs	r3, #0
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9308      	str	r3, [sp, #32]
 8009d6e:	233f      	movs	r3, #63	; 0x3f
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	2301      	movs	r3, #1
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	2304      	movs	r3, #4
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	2308      	movs	r3, #8
 8009d90:	2216      	movs	r2, #22
 8009d92:	490a      	ldr	r1, [pc, #40]	; (8009dbc <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009d94:	480a      	ldr	r0, [pc, #40]	; (8009dc0 <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009d96:	f7fb fcc7 	bl	8005728 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009d9a:	480a      	ldr	r0, [pc, #40]	; (8009dc4 <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009d9c:	f020 fdb8 	bl	802a910 <atexit>
 8009da0:	4803      	ldr	r0, [pc, #12]	; (8009db0 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009da2:	f020 fd76 	bl	802a892 <__cxa_guard_release>
    return verdanab_8_4bpp;
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	24001ea4 	.word	0x24001ea4
 8009db4:	080303ac 	.word	0x080303ac
 8009db8:	080303c0 	.word	0x080303c0
 8009dbc:	90000aa0 	.word	0x90000aa0
 8009dc0:	24001e7c 	.word	0x24001e7c
 8009dc4:	08009d1d 	.word	0x08009d1d

08009dc8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8009dd6:	2300      	movs	r3, #0
    }
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009dec:	2300      	movs	r3, #0
    }
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009e02:	2300      	movs	r3, #0
    }
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009e1e:	4a07      	ldr	r2, [pc, #28]	; (8009e3c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009e24:	4a06      	ldr	r2, [pc, #24]	; (8009e40 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009e2a:	4a06      	ldr	r2, [pc, #24]	; (8009e44 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009e2c:	88fb      	ldrh	r3, [r7, #6]
 8009e2e:	8013      	strh	r3, [r2, #0]
    }
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	2400b914 	.word	0x2400b914
 8009e40:	2400b91c 	.word	0x2400b91c
 8009e44:	2400b918 	.word	0x2400b918

08009e48 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e48:	b40e      	push	{r1, r2, r3}
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009e52:	f107 0320 	add.w	r3, r7, #32
 8009e56:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f012 fa72 	bl	801c348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009e64:	4603      	mov	r3, r0
 8009e66:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009e68:	89fb      	ldrh	r3, [r7, #14]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e74:	b003      	add	sp, #12
 8009e76:	4770      	bx	lr

08009e78 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e78:	b40c      	push	{r2, r3}
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009e86:	f107 031c 	add.w	r3, r7, #28
 8009e8a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009e8c:	78f9      	ldrb	r1, [r7, #3]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	69ba      	ldr	r2, [r7, #24]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f012 fa58 	bl	801c348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ea8:	b002      	add	sp, #8
 8009eaa:	4770      	bx	lr

08009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d016      	beq.n	8009eee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3322      	adds	r3, #34	; 0x22
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	8adb      	ldrh	r3, [r3, #22]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d105      	bne.n	8009eda <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009ece:	4b43      	ldr	r3, [pc, #268]	; (8009fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009ed0:	4a43      	ldr	r2, [pc, #268]	; (8009fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009ed2:	21c0      	movs	r1, #192	; 0xc0
 8009ed4:	4843      	ldr	r0, [pc, #268]	; (8009fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009ed6:	f020 fcfd 	bl	802a8d4 <__assert_func>
            return buffer[pos];
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	8a9b      	ldrh	r3, [r3, #20]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d06a      	beq.n	8009fca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f013 fde3 	bl	801dac0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3322      	adds	r3, #34	; 0x22
 8009efe:	623b      	str	r3, [r7, #32]
 8009f00:	2301      	movs	r3, #1
 8009f02:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	8adb      	ldrh	r3, [r3, #22]
 8009f08:	8bfa      	ldrh	r2, [r7, #30]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d305      	bcc.n	8009f1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009f0e:	4b36      	ldr	r3, [pc, #216]	; (8009fe8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009f10:	4a36      	ldr	r2, [pc, #216]	; (8009fec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009f12:	21c5      	movs	r1, #197	; 0xc5
 8009f14:	4833      	ldr	r0, [pc, #204]	; (8009fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f16:	f020 fcdd 	bl	802a8d4 <__assert_func>
            const uint16_t index = pos + offset;
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	8a9a      	ldrh	r2, [r3, #20]
 8009f1e:	8bfb      	ldrh	r3, [r7, #30]
 8009f20:	4413      	add	r3, r2
 8009f22:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009f24:	8bbb      	ldrh	r3, [r7, #28]
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d801      	bhi.n	8009f2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009f2a:	8bbb      	ldrh	r3, [r7, #28]
 8009f2c:	e001      	b.n	8009f32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009f2e:	8bbb      	ldrh	r3, [r7, #28]
 8009f30:	3b0a      	subs	r3, #10
 8009f32:	6a3a      	ldr	r2, [r7, #32]
 8009f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f38:	f640 123f 	movw	r2, #2367	; 0x93f
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	bf0c      	ite	eq
 8009f40:	2301      	moveq	r3, #1
 8009f42:	2300      	movne	r3, #0
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d03f      	beq.n	8009fca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3322      	adds	r3, #34	; 0x22
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	3222      	adds	r2, #34	; 0x22
 8009f52:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	8ad2      	ldrh	r2, [r2, #22]
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	d105      	bne.n	8009f68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009f5c:	4b1f      	ldr	r3, [pc, #124]	; (8009fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009f5e:	4a20      	ldr	r2, [pc, #128]	; (8009fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009f60:	21c0      	movs	r1, #192	; 0xc0
 8009f62:	4820      	ldr	r0, [pc, #128]	; (8009fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f64:	f020 fcb6 	bl	802a8d4 <__assert_func>
            return buffer[pos];
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	8a92      	ldrh	r2, [r2, #20]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	4613      	mov	r3, r2
 8009f78:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	8adb      	ldrh	r3, [r3, #22]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d806      	bhi.n	8009f90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009f82:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009f84:	4a1b      	ldr	r2, [pc, #108]	; (8009ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009f86:	f240 110d 	movw	r1, #269	; 0x10d
 8009f8a:	4816      	ldr	r0, [pc, #88]	; (8009fe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f8c:	f020 fca2 	bl	802a8d4 <__assert_func>
            const uint16_t index = pos + 1;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	8a9b      	ldrh	r3, [r3, #20]
 8009f94:	3301      	adds	r3, #1
 8009f96:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009f98:	89bb      	ldrh	r3, [r7, #12]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d801      	bhi.n	8009fa2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009f9e:	89bb      	ldrh	r3, [r7, #12]
 8009fa0:	e000      	b.n	8009fa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	89f9      	ldrh	r1, [r7, #14]
 8009fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009fac:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3322      	adds	r3, #34	; 0x22
 8009fb2:	61bb      	str	r3, [r7, #24]
 8009fb4:	f640 133f 	movw	r3, #2367	; 0x93f
 8009fb8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	8a9b      	ldrh	r3, [r3, #20]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	8afa      	ldrh	r2, [r7, #22]
 8009fc4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009fc8:	bf00      	nop
        }
    }
    return getNextChar();
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f013 fc5c 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009fd0:	4603      	mov	r3, r0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3728      	adds	r7, #40	; 0x28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	0802c3c8 	.word	0x0802c3c8
 8009fe0:	0802c3d4 	.word	0x0802c3d4
 8009fe4:	0802c480 	.word	0x0802c480
 8009fe8:	0802c4cc 	.word	0x0802c4cc
 8009fec:	0802c4dc 	.word	0x0802c4dc
 8009ff0:	0802c5b0 	.word	0x0802c5b0
 8009ff4:	0802c5bc 	.word	0x0802c5bc

08009ff8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f013 fbf9 	bl	801d7f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b088      	sub	sp, #32
 800a012:	af02      	add	r7, sp, #8
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	1d38      	adds	r0, r7, #4
 800a018:	e880 0006 	stmia.w	r0, {r1, r2}
 800a01c:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a01e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a022:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a024:	1d39      	adds	r1, r7, #4
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f010 fe60 	bl	801acf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a038:	bf00      	nop
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a04e:	88fb      	ldrh	r3, [r7, #6]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d127      	bne.n	800a0a4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	4a1e      	ldr	r2, [pc, #120]	; (800a0d0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d016      	beq.n	800a08e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	4a1b      	ldr	r2, [pc, #108]	; (800a0d0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a068:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	4a18      	ldr	r2, [pc, #96]	; (800a0d4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a074:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4413      	add	r3, r2
 800a07e:	4a16      	ldr	r2, [pc, #88]	; (800a0d8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a080:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4413      	add	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	e00a      	b.n	800a0a4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a08e:	4b11      	ldr	r3, [pc, #68]	; (800a0d4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a090:	4a12      	ldr	r2, [pc, #72]	; (800a0dc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a092:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a094:	4a12      	ldr	r2, [pc, #72]	; (800a0e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a098:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00d      	beq.n	800a0c6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800a0aa:	4a0f      	ldr	r2, [pc, #60]	; (800a0e8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a0b0:	f000 f83e 	bl	800a130 <_ZN17TypedTextDatabase8getFontsEv>
 800a0b4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a0b6:	f000 f833 	bl	800a120 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4621      	mov	r1, r4
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f7ff fea5 	bl	8009e10 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a0c6:	bf00      	nop
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd90      	pop	{r4, r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	24001ea8 	.word	0x24001ea8
 800a0d4:	24001eb0 	.word	0x24001eb0
 800a0d8:	24001eb4 	.word	0x24001eb4
 800a0dc:	90000c04 	.word	0x90000c04
 800a0e0:	90000bd4 	.word	0x90000bd4
 800a0e4:	90000dec 	.word	0x90000dec
 800a0e8:	24001eac 	.word	0x24001eac

0800a0ec <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a0f8:	4b07      	ldr	r3, [pc, #28]	; (800a118 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	887b      	ldrh	r3, [r7, #2]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	440b      	add	r3, r1
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4413      	add	r3, r2
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	24001eb0 	.word	0x24001eb0
 800a11c:	24001eb4 	.word	0x24001eb4

0800a120 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a124:	230c      	movs	r3, #12
}
 800a126:	4618      	mov	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a136:	4618      	mov	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	24001eb8 	.word	0x24001eb8

0800a144 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d11d      	bne.n	800a190 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d118      	bne.n	800a190 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800a15e:	f7ff fc8d 	bl	8009a7c <_Z23getFont_verdana_20_4bppv>
 800a162:	4603      	mov	r3, r0
};
 800a164:	4a0c      	ldr	r2, [pc, #48]	; (800a198 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a166:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800a168:	f7ff fcde 	bl	8009b28 <_Z23getFont_verdana_40_4bppv>
 800a16c:	4603      	mov	r3, r0
};
 800a16e:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a170:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 800a172:	f7ff fddb 	bl	8009d2c <_Z23getFont_verdanab_8_4bppv>
 800a176:	4603      	mov	r3, r0
};
 800a178:	4a07      	ldr	r2, [pc, #28]	; (800a198 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a17a:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 800a17c:	f7ff fd2a 	bl	8009bd4 <_Z24getFont_verdanab_10_4bppv>
 800a180:	4603      	mov	r3, r0
};
 800a182:	4a05      	ldr	r2, [pc, #20]	; (800a198 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a184:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 800a186:	f7ff fd7b 	bl	8009c80 <_Z24getFont_verdanab_12_4bppv>
 800a18a:	4603      	mov	r3, r0
};
 800a18c:	4a02      	ldr	r2, [pc, #8]	; (800a198 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a18e:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	24001eb8 	.word	0x24001eb8

0800a19c <_GLOBAL__sub_I_touchgfx_fonts>:
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	f7ff ffcd 	bl	800a144 <_Z41__static_initialization_and_destruction_0ii>
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	68b9      	ldr	r1, [r7, #8]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fa f972 	bl	80044a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a1c4:	4a03      	ldr	r2, [pc, #12]	; (800a1d4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	601a      	str	r2, [r3, #0]
{
}
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	0802ca10 	.word	0x0802ca10

0800a1d8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    {
    }
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
    {
    }
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
    {
 800a208:	4a04      	ldr	r2, [pc, #16]	; (800a21c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	601a      	str	r2, [r3, #0]
    }
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	0802d164 	.word	0x0802d164

0800a220 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
    }
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff ffe9 	bl	800a200 <_ZN8touchgfx9PresenterD1Ev>
 800a22e:	2104      	movs	r1, #4
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f020 fb20 	bl	802a876 <_ZdlPvj>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
    {
 800a248:	4a04      	ldr	r2, [pc, #16]	; (800a25c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	601a      	str	r2, [r3, #0]
    }
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	0802d164 	.word	0x0802d164

0800a260 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	4a06      	ldr	r2, [pc, #24]	; (800a284 <_ZN13ModelListenerC1Ev+0x24>)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	0802d154 	.word	0x0802d154

0800a288 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <_ZN13ModelListenerD1Ev+0x1c>)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	0802d154 	.word	0x0802d154

0800a2a8 <_ZN13ModelListenerD0Ev>:
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff ffe9 	bl	800a288 <_ZN13ModelListenerD1Ev>
 800a2b6:	2108      	movs	r1, #8
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f020 fadc 	bl	802a876 <_ZdlPvj>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	4a09      	ldr	r2, [pc, #36]	; (800a2fc <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	605a      	str	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff ffd1 	bl	800a288 <_ZN13ModelListenerD1Ev>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff ff89 	bl	800a200 <_ZN8touchgfx9PresenterD1Ev>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	0802d12c 	.word	0x0802d12c
 800a2fc:	0802d144 	.word	0x0802d144

0800a300 <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a300:	f1a0 0004 	sub.w	r0, r0, #4
 800a304:	e7e0      	b.n	800a2c8 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a306:	bf00      	nop

0800a308 <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff ffd9 	bl	800a2c8 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a316:	2110      	movs	r1, #16
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f020 faac 	bl	802a876 <_ZdlPvj>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a328:	f1a0 0004 	sub.w	r0, r0, #4
 800a32c:	e7ec      	b.n	800a308 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a330 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
    : view(v)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff ff7f 	bl	800a240 <_ZN8touchgfx9PresenterC1Ev>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3304      	adds	r3, #4
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff ff8a 	bl	800a260 <_ZN13ModelListenerC1Ev>
 800a34c:	4a06      	ldr	r2, [pc, #24]	; (800a368 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	4a06      	ldr	r2, [pc, #24]	; (800a36c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	605a      	str	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	60da      	str	r2, [r3, #12]
{

}
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	0802d12c 	.word	0x0802d12c
 800a36c:	0802d144 	.word	0x0802d144

0800a370 <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	4a05      	ldr	r2, [pc, #20]	; (800a3b8 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fb fca5 	bl	8005cf8 <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0802d17c 	.word	0x0802d17c

0800a3bc <_ZN20Localize_AnomalyViewD0Ev>:
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff ffe7 	bl	800a398 <_ZN20Localize_AnomalyViewD1Ev>
 800a3ca:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f020 fa51 	bl	802a876 <_ZdlPvj>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fb fd2a 	bl	8005e44 <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a3f0:	4a03      	ldr	r2, [pc, #12]	; (800a400 <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
{

}
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	0802d17c 	.word	0x0802d17c

0800a404 <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fc f9e0 	bl	80067d4 <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fb fa96 	bl	8005958 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	4a09      	ldr	r2, [pc, #36]	; (800a464 <_ZN13MainPresenterD1Ev+0x30>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <_ZN13MainPresenterD1Ev+0x34>)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	605a      	str	r2, [r3, #4]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff ff1b 	bl	800a288 <_ZN13ModelListenerD1Ev>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fed3 	bl	800a200 <_ZN8touchgfx9PresenterD1Ev>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	0802d1b4 	.word	0x0802d1b4
 800a468:	0802d1cc 	.word	0x0802d1cc

0800a46c <_ZThn4_N13MainPresenterD1Ev>:
 800a46c:	f1a0 0004 	sub.w	r0, r0, #4
 800a470:	e7e0      	b.n	800a434 <_ZN13MainPresenterD1Ev>
 800a472:	bf00      	nop

0800a474 <_ZN13MainPresenterD0Ev>:
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ffd9 	bl	800a434 <_ZN13MainPresenterD1Ev>
 800a482:	2110      	movs	r1, #16
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f020 f9f6 	bl	802a876 <_ZdlPvj>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZThn4_N13MainPresenterD0Ev>:
 800a494:	f1a0 0004 	sub.w	r0, r0, #4
 800a498:	e7ec      	b.n	800a474 <_ZN13MainPresenterD0Ev>
	...

0800a49c <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
    : view(v)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff fec9 	bl	800a240 <_ZN8touchgfx9PresenterC1Ev>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fed4 	bl	800a260 <_ZN13ModelListenerC1Ev>
 800a4b8:	4a06      	ldr	r2, [pc, #24]	; (800a4d4 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	4a06      	ldr	r2, [pc, #24]	; (800a4d8 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	605a      	str	r2, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	60da      	str	r2, [r3, #12]
{
}
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	0802d1b4 	.word	0x0802d1b4
 800a4d8:	0802d1cc 	.word	0x0802d1cc

0800a4dc <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a50c:	4b07      	ldr	r3, [pc, #28]	; (800a52c <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d105      	bne.n	800a520 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a516:	4a07      	ldr	r2, [pc, #28]	; (800a534 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a518:	2187      	movs	r1, #135	; 0x87
 800a51a:	4807      	ldr	r0, [pc, #28]	; (800a538 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a51c:	f020 f9da 	bl	802a8d4 <__assert_func>
        return bitmapId;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	881b      	ldrh	r3, [r3, #0]
    }
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	2400b94c 	.word	0x2400b94c
 800a530:	0802c670 	.word	0x0802c670
 800a534:	0802c6ac 	.word	0x0802c6ac
 800a538:	0802c6e0 	.word	0x0802c6e0

0800a53c <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	332e      	adds	r3, #46	; 0x2e
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff ffdb 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a54e:	4603      	mov	r3, r0
 800a550:	461c      	mov	r4, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3334      	adds	r3, #52	; 0x34
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff ffd4 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a55c:	4603      	mov	r3, r0
 800a55e:	429c      	cmp	r4, r3
 800a560:	bf0c      	ite	eq
 800a562:	2301      	moveq	r3, #1
 800a564:	2300      	movne	r3, #0
 800a566:	b2db      	uxtb	r3, r3
    }
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd90      	pop	{r4, r7, pc}

0800a570 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	4a05      	ldr	r2, [pc, #20]	; (800a590 <_ZN8MainViewD1Ev+0x20>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4618      	mov	r0, r3
 800a582:	f7fc fb27 	bl	8006bd4 <_ZN12MainViewBaseD1Ev>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	0802d1dc 	.word	0x0802d1dc

0800a594 <_ZN8MainViewD0Ev>:
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff ffe7 	bl	800a570 <_ZN8MainViewD1Ev>
 800a5a2:	f640 3118 	movw	r1, #2840	; 0xb18
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f020 f965 	bl	802a876 <_ZdlPvj>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fc fc9e 	bl	8006f04 <_ZN12MainViewBaseC1Ev>
 800a5c8:	4a03      	ldr	r2, [pc, #12]	; (800a5d8 <_ZN8MainViewC1Ev+0x20>)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
{
}
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	0802d1dc 	.word	0x0802d1dc

0800a5dc <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800a5e4:	4b60      	ldr	r3, [pc, #384]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a5e6:	791b      	ldrb	r3, [r3, #4]
 800a5e8:	f083 0301 	eor.w	r3, r3, #1
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d026      	beq.n	800a640 <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fc fa95 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a606:	2101      	movs	r1, #1
 800a608:	4618      	mov	r0, r3
 800a60a:	f7fc fa8e 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a614:	4618      	mov	r0, r3
 800a616:	f011 ffb9 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a620:	4618      	mov	r0, r3
 800a622:	f011 ffb3 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a62c:	2101      	movs	r1, #1
 800a62e:	4618      	mov	r0, r3
 800a630:	f00e fe54 	bl	80192dc <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a63a:	4618      	mov	r0, r3
 800a63c:	f011 ffa6 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a646:	4a48      	ldr	r2, [pc, #288]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a648:	6812      	ldr	r2, [r2, #0]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f00c fe59 	bl	8017304 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a658:	4a43      	ldr	r2, [pc, #268]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f00d fb67 	bl	8017d32 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a66a:	4618      	mov	r0, r3
 800a66c:	f011 ff8e 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a676:	4a3c      	ldr	r2, [pc, #240]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a678:	7952      	ldrb	r2, [r2, #5]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fc fa53 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a68a:	4618      	mov	r0, r3
 800a68c:	f011 ff7e 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a696:	4a34      	ldr	r2, [pc, #208]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a698:	7992      	ldrb	r2, [r2, #6]
 800a69a:	4611      	mov	r1, r2
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fc fa44 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f011 ff6f 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6b6:	799b      	ldrb	r3, [r3, #6]
 800a6b8:	f083 0301 	eor.w	r3, r3, #1
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f7fc fa32 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f011 ff5d 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a6d8:	4a23      	ldr	r2, [pc, #140]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6da:	7952      	ldrb	r2, [r2, #5]
 800a6dc:	b2d2      	uxtb	r2, r2
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fc fa22 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f011 ff4d 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a6f8:	4a1b      	ldr	r2, [pc, #108]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6fa:	7952      	ldrb	r2, [r2, #5]
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	4611      	mov	r1, r2
 800a700:	4618      	mov	r0, r3
 800a702:	f7fc fa12 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a70c:	4618      	mov	r0, r3
 800a70e:	f011 ff3d 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 800a718:	4b13      	ldr	r3, [pc, #76]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a71a:	795b      	ldrb	r3, [r3, #5]
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f083 0301 	eor.w	r3, r3, #1
 800a722:	b2db      	uxtb	r3, r3
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fc f9ff 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800a732:	4618      	mov	r0, r3
 800a734:	f011 ff2a 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 800a73e:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <_ZN8MainView11setupScreenEv+0x18c>)
 800a740:	795b      	ldrb	r3, [r3, #5]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f083 0301 	eor.w	r3, r3, #1
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fc f9ec 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800a758:	4618      	mov	r0, r3
 800a75a:	f011 ff17 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	2400000c 	.word	0x2400000c

0800a76c <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800a78a:	4a0e      	ldr	r2, [pc, #56]	; (800a7c4 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f00c fdb3 	bl	8017304 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a79e:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7aa:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a7c8 <_ZN8MainView17set_volume_sliderEi+0x48>
 800a7ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7b2:	eeb0 0a47 	vmov.f32	s0, s14
 800a7b6:	f7f5 fde3 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	2400000c 	.word	0x2400000c
 800a7c8:	42c80000 	.word	0x42c80000

0800a7cc <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800a7d4:	4b1e      	ldr	r3, [pc, #120]	; (800a850 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b1e      	ldr	r3, [pc, #120]	; (800a854 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b64      	cmp	r3, #100	; 0x64
 800a7e4:	dd02      	ble.n	800a7ec <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800a7e6:	2364      	movs	r3, #100	; 0x64
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	e004      	b.n	800a7f6 <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	da01      	bge.n	800a7f6 <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800a7f6:	4a16      	ldr	r2, [pc, #88]	; (800a850 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a7fc:	4b14      	ldr	r3, [pc, #80]	; (800a850 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a808:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a858 <_ZN8MainView18set_volume_encoderEv+0x8c>
 800a80c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a810:	eeb0 0a47 	vmov.f32	s0, s14
 800a814:	f7f5 fdb4 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a81e:	4a0c      	ldr	r2, [pc, #48]	; (800a850 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a820:	6812      	ldr	r2, [r2, #0]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f00c fd6d 	bl	8017304 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a830:	4a07      	ldr	r2, [pc, #28]	; (800a850 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a832:	6812      	ldr	r2, [r2, #0]
 800a834:	4611      	mov	r1, r2
 800a836:	4618      	mov	r0, r3
 800a838:	f00d fa7b 	bl	8017d32 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a842:	4618      	mov	r0, r3
 800a844:	f011 fea2 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800a848:	bf00      	nop
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	2400000c 	.word	0x2400000c
 800a854:	24001ecc 	.word	0x24001ecc
 800a858:	42c80000 	.word	0x42c80000

0800a85c <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a864:	4b37      	ldr	r3, [pc, #220]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a866:	791b      	ldrb	r3, [r3, #4]
 800a868:	f083 0301 	eor.w	r3, r3, #1
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	4b35      	ldr	r3, [pc, #212]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a870:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800a872:	4b34      	ldr	r3, [pc, #208]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a874:	791b      	ldrb	r3, [r3, #4]
 800a876:	f083 0301 	eor.w	r3, r3, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fd8f 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a882:	4b30      	ldr	r3, [pc, #192]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d01a      	beq.n	800a8c0 <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a890:	2101      	movs	r1, #1
 800a892:	4618      	mov	r0, r3
 800a894:	f7fc f949 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7fc f942 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f011 fe6d 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f011 fe67 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
 800a8be:	e019      	b.n	800a8f4 <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fc f92e 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fc f927 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f011 fe52 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f011 fe4c 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fe1e 	bl	800a53c <_ZNK8touchgfx12ToggleButton8getStateEv>
 800a900:	4603      	mov	r3, r0
 800a902:	461a      	mov	r2, r3
 800a904:	4b0f      	ldr	r3, [pc, #60]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a906:	791b      	ldrb	r3, [r3, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	bf0c      	ite	eq
 800a90c:	2301      	moveq	r3, #1
 800a90e:	2300      	movne	r3, #0
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d011      	beq.n	800a93a <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a91e:	791b      	ldrb	r3, [r3, #4]
 800a920:	f083 0301 	eor.w	r3, r3, #1
 800a924:	b2db      	uxtb	r3, r3
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f00e fcd7 	bl	80192dc <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a934:	4618      	mov	r0, r3
 800a936:	f011 fe29 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2400000c 	.word	0x2400000c

0800a948 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800a950:	f7f5 fd36 	bl	80003c0 <IPCGetAnomalyDetectState>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	bf14      	ite	ne
 800a95a:	2301      	movne	r3, #1
 800a95c:	2300      	moveq	r3, #0
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	4b40      	ldr	r3, [pc, #256]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a962:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800a964:	4b3f      	ldr	r3, [pc, #252]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a966:	795b      	ldrb	r3, [r3, #5]
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4b3e      	ldr	r3, [pc, #248]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a96c:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a974:	4a3b      	ldr	r2, [pc, #236]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a976:	7952      	ldrb	r2, [r2, #5]
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fc f8d4 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a988:	4618      	mov	r0, r3
 800a98a:	f011 fdff 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a994:	4a33      	ldr	r2, [pc, #204]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a996:	7992      	ldrb	r2, [r2, #6]
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fc f8c5 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f011 fdf0 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a9b2:	4b2c      	ldr	r3, [pc, #176]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9b4:	799b      	ldrb	r3, [r3, #6]
 800a9b6:	f083 0301 	eor.w	r3, r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fc f8b3 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f011 fdde 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a9d6:	4a23      	ldr	r2, [pc, #140]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9d8:	7952      	ldrb	r2, [r2, #5]
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fc f8a3 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f011 fdce 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a9f6:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9f8:	7952      	ldrb	r2, [r2, #5]
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fc f893 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f011 fdbe 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa18:	795b      	ldrb	r3, [r3, #5]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	f083 0301 	eor.w	r3, r3, #1
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7fc f880 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800aa30:	4618      	mov	r0, r3
 800aa32:	f011 fdab 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 800aa3c:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa3e:	795b      	ldrb	r3, [r3, #5]
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	f083 0301 	eor.w	r3, r3, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fc f86d 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800aa56:	4618      	mov	r0, r3
 800aa58:	f011 fd98 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	2400000c 	.word	0x2400000c

0800aa68 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800aa70:	f7f5 fcb2 	bl	80003d8 <IPCGetAlarmMuteState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7f5 fcb5 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa88:	799b      	ldrb	r3, [r3, #6]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d023      	beq.n	800aad6 <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800aa8e:	4b14      	ldr	r3, [pc, #80]	; (800aae0 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800aa9a:	4a11      	ldr	r2, [pc, #68]	; (800aae0 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa9c:	7992      	ldrb	r2, [r2, #6]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fc f842 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800aaac:	4618      	mov	r0, r3
 800aaae:	f011 fd6d 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aaba:	799b      	ldrb	r3, [r3, #6]
 800aabc:	f083 0301 	eor.w	r3, r3, #1
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	4610      	mov	r0, r2
 800aac6:	f7fc f830 	bl	8006b2a <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f011 fd5b 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	2400000c 	.word	0x2400000c

0800aae4 <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
{

}
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <_ZN5Model4tickEv>:
bool anomaly_detect_state_previous;
bool anomaly_detect_state_current = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800ab08:	4b67      	ldr	r3, [pc, #412]	; (800aca8 <_ZN5Model4tickEv+0x1a8>)
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	4b67      	ldr	r3, [pc, #412]	; (800acac <_ZN5Model4tickEv+0x1ac>)
 800ab0e:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800ab10:	f7f5 fc56 	bl	80003c0 <IPCGetAnomalyDetectState>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bf14      	ite	ne
 800ab1a:	2301      	movne	r3, #1
 800ab1c:	2300      	moveq	r3, #0
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	4b61      	ldr	r3, [pc, #388]	; (800aca8 <_ZN5Model4tickEv+0x1a8>)
 800ab22:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800ab24:	4b60      	ldr	r3, [pc, #384]	; (800aca8 <_ZN5Model4tickEv+0x1a8>)
 800ab26:	781a      	ldrb	r2, [r3, #0]
 800ab28:	4b60      	ldr	r3, [pc, #384]	; (800acac <_ZN5Model4tickEv+0x1ac>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d009      	beq.n	800ab44 <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800ab30:	f010 fd62 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	6813      	ldr	r3, [r2, #0]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2157      	movs	r1, #87	; 0x57
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800ab44:	4b58      	ldr	r3, [pc, #352]	; (800aca8 <_ZN5Model4tickEv+0x1a8>)
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d028      	beq.n	800ab9e <_ZN5Model4tickEv+0x9e>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800ab4c:	4b58      	ldr	r3, [pc, #352]	; (800acb0 <_ZN5Model4tickEv+0x1b0>)
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	4a57      	ldr	r2, [pc, #348]	; (800acb0 <_ZN5Model4tickEv+0x1b0>)
 800ab52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab56:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800ab58:	f006 f972 	bl	8010e40 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	4b55      	ldr	r3, [pc, #340]	; (800acb4 <_ZN5Model4tickEv+0x1b4>)
 800ab60:	fba3 1302 	umull	r1, r3, r3, r2
 800ab64:	099b      	lsrs	r3, r3, #6
 800ab66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab6a:	fb01 f303 	mul.w	r3, r1, r3
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ab74:	4293      	cmp	r3, r2
 800ab76:	bf94      	ite	ls
 800ab78:	2301      	movls	r3, #1
 800ab7a:	2300      	movhi	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d006      	beq.n	800ab90 <_ZN5Model4tickEv+0x90>
    {
      GPIOE->BSRR |= 1 << 3;
 800ab82:	4b4d      	ldr	r3, [pc, #308]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	4a4c      	ldr	r2, [pc, #304]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800ab88:	f043 0308 	orr.w	r3, r3, #8
 800ab8c:	6193      	str	r3, [r2, #24]
 800ab8e:	e012      	b.n	800abb6 <_ZN5Model4tickEv+0xb6>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800ab90:	4b49      	ldr	r3, [pc, #292]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	4a48      	ldr	r2, [pc, #288]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800ab96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab9a:	6193      	str	r3, [r2, #24]
 800ab9c:	e00b      	b.n	800abb6 <_ZN5Model4tickEv+0xb6>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800ab9e:	4b44      	ldr	r3, [pc, #272]	; (800acb0 <_ZN5Model4tickEv+0x1b0>)
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	4a43      	ldr	r2, [pc, #268]	; (800acb0 <_ZN5Model4tickEv+0x1b0>)
 800aba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aba8:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800abaa:	4b43      	ldr	r3, [pc, #268]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	4a42      	ldr	r2, [pc, #264]	; (800acb8 <_ZN5Model4tickEv+0x1b8>)
 800abb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb4:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800abb6:	2108      	movs	r1, #8
 800abb8:	4840      	ldr	r0, [pc, #256]	; (800acbc <_ZN5Model4tickEv+0x1bc>)
 800abba:	f006 ffff 	bl	8011bbc <HAL_GPIO_ReadPin>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bf14      	ite	ne
 800abc4:	2301      	movne	r3, #1
 800abc6:	2300      	moveq	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800abca:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <_ZN5Model4tickEv+0x1c0>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	7bfa      	ldrb	r2, [r7, #15]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d017      	beq.n	800ac04 <_ZN5Model4tickEv+0x104>
	   swStatus = currentSWStatus;
 800abd4:	4a3a      	ldr	r2, [pc, #232]	; (800acc0 <_ZN5Model4tickEv+0x1c0>)
 800abd6:	7bfb      	ldrb	r3, [r7, #15]
 800abd8:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800abda:	4b3a      	ldr	r3, [pc, #232]	; (800acc4 <_ZN5Model4tickEv+0x1c4>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d009      	beq.n	800abf6 <_ZN5Model4tickEv+0xf6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800abe2:	f010 fd09 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461a      	mov	r2, r3
 800abea:	6813      	ldr	r3, [r2, #0]
 800abec:	330c      	adds	r3, #12
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2159      	movs	r1, #89	; 0x59
 800abf2:	4610      	mov	r0, r2
 800abf4:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800abf6:	4b33      	ldr	r3, [pc, #204]	; (800acc4 <_ZN5Model4tickEv+0x1c4>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f083 0301 	eor.w	r3, r3, #1
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	4b30      	ldr	r3, [pc, #192]	; (800acc4 <_ZN5Model4tickEv+0x1c4>)
 800ac02:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800ac04:	2102      	movs	r1, #2
 800ac06:	4830      	ldr	r0, [pc, #192]	; (800acc8 <_ZN5Model4tickEv+0x1c8>)
 800ac08:	f006 ffd8 	bl	8011bbc <HAL_GPIO_ReadPin>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bf14      	ite	ne
 800ac12:	2301      	movne	r3, #1
 800ac14:	2300      	moveq	r3, #0
 800ac16:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800ac18:	4b2c      	ldr	r3, [pc, #176]	; (800accc <_ZN5Model4tickEv+0x1cc>)
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	7bba      	ldrb	r2, [r7, #14]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d017      	beq.n	800ac52 <_ZN5Model4tickEv+0x152>
	   muteStatus = currentMuteStatus;
 800ac22:	4a2a      	ldr	r2, [pc, #168]	; (800accc <_ZN5Model4tickEv+0x1cc>)
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800ac28:	4b29      	ldr	r3, [pc, #164]	; (800acd0 <_ZN5Model4tickEv+0x1d0>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d009      	beq.n	800ac44 <_ZN5Model4tickEv+0x144>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800ac30:	f010 fce2 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800ac34:	4603      	mov	r3, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	6813      	ldr	r3, [r2, #0]
 800ac3a:	330c      	adds	r3, #12
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	215a      	movs	r1, #90	; 0x5a
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800ac44:	4b22      	ldr	r3, [pc, #136]	; (800acd0 <_ZN5Model4tickEv+0x1d0>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f083 0301 	eor.w	r3, r3, #1
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	4b20      	ldr	r3, [pc, #128]	; (800acd0 <_ZN5Model4tickEv+0x1d0>)
 800ac50:	701a      	strb	r2, [r3, #0]
	}

  // TIM4 serves as the encoder counter
  if (TIM4->CNT != encoderCount)
 800ac52:	4b20      	ldr	r3, [pc, #128]	; (800acd4 <_ZN5Model4tickEv+0x1d4>)
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	4a20      	ldr	r2, [pc, #128]	; (800acd8 <_ZN5Model4tickEv+0x1d8>)
 800ac58:	8812      	ldrh	r2, [r2, #0]
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	bf14      	ite	ne
 800ac5e:	2301      	movne	r3, #1
 800ac60:	2300      	moveq	r3, #0
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01b      	beq.n	800aca0 <_ZN5Model4tickEv+0x1a0>
  {
    int16_t encoderDelta = TIM4->CNT - encoderCount;
 800ac68:	4b1a      	ldr	r3, [pc, #104]	; (800acd4 <_ZN5Model4tickEv+0x1d4>)
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <_ZN5Model4tickEv+0x1d8>)
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	81bb      	strh	r3, [r7, #12]
    encoderCount = TIM4->CNT;
 800ac78:	4b16      	ldr	r3, [pc, #88]	; (800acd4 <_ZN5Model4tickEv+0x1d4>)
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <_ZN5Model4tickEv+0x1d8>)
 800ac80:	801a      	strh	r2, [r3, #0]
    currentDelta = encoderDelta * 2;
 800ac82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	4a14      	ldr	r2, [pc, #80]	; (800acdc <_ZN5Model4tickEv+0x1dc>)
 800ac8a:	6013      	str	r3, [r2, #0]

    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
 800ac8c:	f010 fcb4 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 800ac90:	4603      	mov	r3, r0
 800ac92:	461a      	mov	r2, r3
 800ac94:	6813      	ldr	r3, [r2, #0]
 800ac96:	330c      	adds	r3, #12
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2158      	movs	r1, #88	; 0x58
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
  }
}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	24001ed5 	.word	0x24001ed5
 800acac:	24001ed4 	.word	0x24001ed4
 800acb0:	58021c00 	.word	0x58021c00
 800acb4:	10624dd3 	.word	0x10624dd3
 800acb8:	58021000 	.word	0x58021000
 800acbc:	58021800 	.word	0x58021800
 800acc0:	24001ed0 	.word	0x24001ed0
 800acc4:	24001ed1 	.word	0x24001ed1
 800acc8:	58022800 	.word	0x58022800
 800accc:	24001ed2 	.word	0x24001ed2
 800acd0:	24001ed3 	.word	0x24001ed3
 800acd4:	40000800 	.word	0x40000800
 800acd8:	24001ed6 	.word	0x24001ed6
 800acdc:	24001ecc 	.word	0x24001ecc

0800ace0 <__NVIC_SetPriority>:
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	4603      	mov	r3, r0
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800acec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	db0a      	blt.n	800ad0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	490c      	ldr	r1, [pc, #48]	; (800ad2c <__NVIC_SetPriority+0x4c>)
 800acfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acfe:	0112      	lsls	r2, r2, #4
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	440b      	add	r3, r1
 800ad04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad08:	e00a      	b.n	800ad20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	4908      	ldr	r1, [pc, #32]	; (800ad30 <__NVIC_SetPriority+0x50>)
 800ad10:	88fb      	ldrh	r3, [r7, #6]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	3b04      	subs	r3, #4
 800ad18:	0112      	lsls	r2, r2, #4
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	440b      	add	r3, r1
 800ad1e:	761a      	strb	r2, [r3, #24]
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	e000e100 	.word	0xe000e100
 800ad30:	e000ed00 	.word	0xe000ed00

0800ad34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad38:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <SysTick_Handler+0x1c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad3c:	f002 fed2 	bl	800dae4 <xTaskGetSchedulerState>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d001      	beq.n	800ad4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad46:	f000 ffe7 	bl	800bd18 <xPortSysTickHandler>
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	e000e010 	.word	0xe000e010

0800ad54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad58:	2100      	movs	r1, #0
 800ad5a:	f06f 0004 	mvn.w	r0, #4
 800ad5e:	f7ff ffbf 	bl	800ace0 <__NVIC_SetPriority>
#endif
}
 800ad62:	bf00      	nop
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad6e:	f3ef 8305 	mrs	r3, IPSR
 800ad72:	603b      	str	r3, [r7, #0]
  return(result);
 800ad74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad7a:	f06f 0305 	mvn.w	r3, #5
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	e00c      	b.n	800ad9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad82:	4b0a      	ldr	r3, [pc, #40]	; (800adac <osKernelInitialize+0x44>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d105      	bne.n	800ad96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad8a:	4b08      	ldr	r3, [pc, #32]	; (800adac <osKernelInitialize+0x44>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	607b      	str	r3, [r7, #4]
 800ad94:	e002      	b.n	800ad9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad96:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad9c:	687b      	ldr	r3, [r7, #4]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	24001ed8 	.word	0x24001ed8

0800adb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adb6:	f3ef 8305 	mrs	r3, IPSR
 800adba:	603b      	str	r3, [r7, #0]
  return(result);
 800adbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <osKernelStart+0x1a>
    stat = osErrorISR;
 800adc2:	f06f 0305 	mvn.w	r3, #5
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	e010      	b.n	800adec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adca:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <osKernelStart+0x48>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d109      	bne.n	800ade6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800add2:	f7ff ffbf 	bl	800ad54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800add6:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <osKernelStart+0x48>)
 800add8:	2202      	movs	r2, #2
 800adda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800addc:	f002 fa26 	bl	800d22c <vTaskStartScheduler>
      stat = osOK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	e002      	b.n	800adec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ade6:	f04f 33ff 	mov.w	r3, #4294967295
 800adea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adec:	687b      	ldr	r3, [r7, #4]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	24001ed8 	.word	0x24001ed8

0800adfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08e      	sub	sp, #56	; 0x38
 800ae00:	af04      	add	r7, sp, #16
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae0c:	f3ef 8305 	mrs	r3, IPSR
 800ae10:	617b      	str	r3, [r7, #20]
  return(result);
 800ae12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d17e      	bne.n	800af16 <osThreadNew+0x11a>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d07b      	beq.n	800af16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae1e:	2380      	movs	r3, #128	; 0x80
 800ae20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae22:	2318      	movs	r3, #24
 800ae24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d045      	beq.n	800aec2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <osThreadNew+0x48>
        name = attr->name;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d002      	beq.n	800ae52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <osThreadNew+0x6e>
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	2b38      	cmp	r3, #56	; 0x38
 800ae5c:	d805      	bhi.n	800ae6a <osThreadNew+0x6e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <osThreadNew+0x72>
        return (NULL);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e054      	b.n	800af18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	089b      	lsrs	r3, r3, #2
 800ae7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <osThreadNew+0xa8>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	2ba7      	cmp	r3, #167	; 0xa7
 800ae8c:	d90a      	bls.n	800aea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d006      	beq.n	800aea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d002      	beq.n	800aea4 <osThreadNew+0xa8>
        mem = 1;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	61bb      	str	r3, [r7, #24]
 800aea2:	e010      	b.n	800aec6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <osThreadNew+0xca>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d108      	bne.n	800aec6 <osThreadNew+0xca>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d104      	bne.n	800aec6 <osThreadNew+0xca>
          mem = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	e001      	b.n	800aec6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d110      	bne.n	800aeee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aed4:	9202      	str	r2, [sp, #8]
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6a3a      	ldr	r2, [r7, #32]
 800aee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f001 ffb6 	bl	800ce54 <xTaskCreateStatic>
 800aee8:	4603      	mov	r3, r0
 800aeea:	613b      	str	r3, [r7, #16]
 800aeec:	e013      	b.n	800af16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d110      	bne.n	800af16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	f107 0310 	add.w	r3, r7, #16
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f002 f801 	bl	800cf0e <xTaskCreate>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d001      	beq.n	800af16 <osThreadNew+0x11a>
            hTask = NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af16:	693b      	ldr	r3, [r7, #16]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3728      	adds	r7, #40	; 0x28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af28:	f3ef 8305 	mrs	r3, IPSR
 800af2c:	60bb      	str	r3, [r7, #8]
  return(result);
 800af2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <osDelay+0x1c>
    stat = osErrorISR;
 800af34:	f06f 0305 	mvn.w	r3, #5
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	e007      	b.n	800af4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <osDelay+0x2c>
      vTaskDelay(ticks);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f002 f93c 	bl	800d1c4 <vTaskDelay>
    }
  }

  return (stat);
 800af4c:	68fb      	ldr	r3, [r7, #12]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af56:	b580      	push	{r7, lr}
 800af58:	b08a      	sub	sp, #40	; 0x28
 800af5a:	af02      	add	r7, sp, #8
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af62:	2300      	movs	r3, #0
 800af64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af66:	f3ef 8305 	mrs	r3, IPSR
 800af6a:	613b      	str	r3, [r7, #16]
  return(result);
 800af6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d175      	bne.n	800b05e <osSemaphoreNew+0x108>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d072      	beq.n	800b05e <osSemaphoreNew+0x108>
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d86e      	bhi.n	800b05e <osSemaphoreNew+0x108>
    mem = -1;
 800af80:	f04f 33ff 	mov.w	r3, #4294967295
 800af84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d015      	beq.n	800afb8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <osSemaphoreNew+0x4c>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	2b4f      	cmp	r3, #79	; 0x4f
 800af9a:	d902      	bls.n	800afa2 <osSemaphoreNew+0x4c>
        mem = 1;
 800af9c:	2301      	movs	r3, #1
 800af9e:	61bb      	str	r3, [r7, #24]
 800afa0:	e00c      	b.n	800afbc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d108      	bne.n	800afbc <osSemaphoreNew+0x66>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d104      	bne.n	800afbc <osSemaphoreNew+0x66>
          mem = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61bb      	str	r3, [r7, #24]
 800afb6:	e001      	b.n	800afbc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d04c      	beq.n	800b05e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d128      	bne.n	800b01c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10a      	bne.n	800afe6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	2203      	movs	r2, #3
 800afd6:	9200      	str	r2, [sp, #0]
 800afd8:	2200      	movs	r2, #0
 800afda:	2100      	movs	r1, #0
 800afdc:	2001      	movs	r0, #1
 800afde:	f000 ff93 	bl	800bf08 <xQueueGenericCreateStatic>
 800afe2:	61f8      	str	r0, [r7, #28]
 800afe4:	e005      	b.n	800aff2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800afe6:	2203      	movs	r2, #3
 800afe8:	2100      	movs	r1, #0
 800afea:	2001      	movs	r0, #1
 800afec:	f001 f804 	bl	800bff8 <xQueueGenericCreate>
 800aff0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d022      	beq.n	800b03e <osSemaphoreNew+0xe8>
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d01f      	beq.n	800b03e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800affe:	2300      	movs	r3, #0
 800b000:	2200      	movs	r2, #0
 800b002:	2100      	movs	r1, #0
 800b004:	69f8      	ldr	r0, [r7, #28]
 800b006:	f001 f8bf 	bl	800c188 <xQueueGenericSend>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d016      	beq.n	800b03e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b010:	69f8      	ldr	r0, [r7, #28]
 800b012:	f001 fd4b 	bl	800caac <vQueueDelete>
            hSemaphore = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	61fb      	str	r3, [r7, #28]
 800b01a:	e010      	b.n	800b03e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d108      	bne.n	800b034 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	461a      	mov	r2, r3
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f001 f841 	bl	800c0b2 <xQueueCreateCountingSemaphoreStatic>
 800b030:	61f8      	str	r0, [r7, #28]
 800b032:	e004      	b.n	800b03e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f001 f872 	bl	800c120 <xQueueCreateCountingSemaphore>
 800b03c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e001      	b.n	800b056 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b052:	2300      	movs	r3, #0
 800b054:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b056:	6979      	ldr	r1, [r7, #20]
 800b058:	69f8      	ldr	r0, [r7, #28]
 800b05a:	f001 fe73 	bl	800cd44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b05e:	69fb      	ldr	r3, [r7, #28]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3720      	adds	r7, #32
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b076:	2300      	movs	r3, #0
 800b078:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d103      	bne.n	800b088 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b080:	f06f 0303 	mvn.w	r3, #3
 800b084:	617b      	str	r3, [r7, #20]
 800b086:	e039      	b.n	800b0fc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b088:	f3ef 8305 	mrs	r3, IPSR
 800b08c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b08e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b090:	2b00      	cmp	r3, #0
 800b092:	d022      	beq.n	800b0da <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b09a:	f06f 0303 	mvn.w	r3, #3
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e02c      	b.n	800b0fc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b0a6:	f107 0308 	add.w	r3, r7, #8
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6938      	ldr	r0, [r7, #16]
 800b0b0:	f001 fc7c 	bl	800c9ac <xQueueReceiveFromISR>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d003      	beq.n	800b0c2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b0ba:	f06f 0302 	mvn.w	r3, #2
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	e01c      	b.n	800b0fc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d019      	beq.n	800b0fc <osSemaphoreAcquire+0x94>
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <osSemaphoreAcquire+0xa0>)
 800b0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	e010      	b.n	800b0fc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6938      	ldr	r0, [r7, #16]
 800b0de:	f001 fb59 	bl	800c794 <xQueueSemaphoreTake>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d009      	beq.n	800b0fc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b0ee:	f06f 0301 	mvn.w	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	e002      	b.n	800b0fc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b0f6:	f06f 0302 	mvn.w	r3, #2
 800b0fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b0fc:	697b      	ldr	r3, [r7, #20]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	e000ed04 	.word	0xe000ed04

0800b10c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b086      	sub	sp, #24
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d103      	bne.n	800b12a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b122:	f06f 0303 	mvn.w	r3, #3
 800b126:	617b      	str	r3, [r7, #20]
 800b128:	e02c      	b.n	800b184 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b12a:	f3ef 8305 	mrs	r3, IPSR
 800b12e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b130:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01a      	beq.n	800b16c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4619      	mov	r1, r3
 800b140:	6938      	ldr	r0, [r7, #16]
 800b142:	f001 f9ba 	bl	800c4ba <xQueueGiveFromISR>
 800b146:	4603      	mov	r3, r0
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d003      	beq.n	800b154 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b14c:	f06f 0302 	mvn.w	r3, #2
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e017      	b.n	800b184 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d014      	beq.n	800b184 <osSemaphoreRelease+0x78>
 800b15a:	4b0d      	ldr	r3, [pc, #52]	; (800b190 <osSemaphoreRelease+0x84>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	e00b      	b.n	800b184 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b16c:	2300      	movs	r3, #0
 800b16e:	2200      	movs	r2, #0
 800b170:	2100      	movs	r1, #0
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	f001 f808 	bl	800c188 <xQueueGenericSend>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d002      	beq.n	800b184 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b17e:	f06f 0302 	mvn.w	r3, #2
 800b182:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b184:	697b      	ldr	r3, [r7, #20]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	e000ed04 	.word	0xe000ed04

0800b194 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af02      	add	r7, sp, #8
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a4:	f3ef 8305 	mrs	r3, IPSR
 800b1a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b1aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d15f      	bne.n	800b270 <osMessageQueueNew+0xdc>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d05c      	beq.n	800b270 <osMessageQueueNew+0xdc>
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d059      	beq.n	800b270 <osMessageQueueNew+0xdc>
    mem = -1;
 800b1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d029      	beq.n	800b21c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d012      	beq.n	800b1f6 <osMessageQueueNew+0x62>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b4f      	cmp	r3, #79	; 0x4f
 800b1d6:	d90e      	bls.n	800b1f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00a      	beq.n	800b1f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	695a      	ldr	r2, [r3, #20]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68b9      	ldr	r1, [r7, #8]
 800b1e8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d302      	bcc.n	800b1f6 <osMessageQueueNew+0x62>
        mem = 1;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	e014      	b.n	800b220 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d110      	bne.n	800b220 <osMessageQueueNew+0x8c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10c      	bne.n	800b220 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d108      	bne.n	800b220 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d104      	bne.n	800b220 <osMessageQueueNew+0x8c>
          mem = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	61bb      	str	r3, [r7, #24]
 800b21a:	e001      	b.n	800b220 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d10b      	bne.n	800b23e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	691a      	ldr	r2, [r3, #16]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	2100      	movs	r1, #0
 800b230:	9100      	str	r1, [sp, #0]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fe67 	bl	800bf08 <xQueueGenericCreateStatic>
 800b23a:	61f8      	str	r0, [r7, #28]
 800b23c:	e008      	b.n	800b250 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d105      	bne.n	800b250 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b244:	2200      	movs	r2, #0
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	68f8      	ldr	r0, [r7, #12]
 800b24a:	f000 fed5 	bl	800bff8 <xQueueGenericCreate>
 800b24e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00c      	beq.n	800b270 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	617b      	str	r3, [r7, #20]
 800b262:	e001      	b.n	800b268 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b268:	6979      	ldr	r1, [r7, #20]
 800b26a:	69f8      	ldr	r0, [r7, #28]
 800b26c:	f001 fd6a 	bl	800cd44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b270:	69fb      	ldr	r3, [r7, #28]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3720      	adds	r7, #32
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b290:	2300      	movs	r3, #0
 800b292:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b294:	f3ef 8305 	mrs	r3, IPSR
 800b298:	617b      	str	r3, [r7, #20]
  return(result);
 800b29a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d028      	beq.n	800b2f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <osMessageQueuePut+0x36>
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <osMessageQueuePut+0x36>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b2b2:	f06f 0303 	mvn.w	r3, #3
 800b2b6:	61fb      	str	r3, [r7, #28]
 800b2b8:	e038      	b.n	800b32c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b2be:	f107 0210 	add.w	r2, r7, #16
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	69b8      	ldr	r0, [r7, #24]
 800b2c8:	f001 f85c 	bl	800c384 <xQueueGenericSendFromISR>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d003      	beq.n	800b2da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b2d2:	f06f 0302 	mvn.w	r3, #2
 800b2d6:	61fb      	str	r3, [r7, #28]
 800b2d8:	e028      	b.n	800b32c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d025      	beq.n	800b32c <osMessageQueuePut+0xb0>
 800b2e0:	4b15      	ldr	r3, [pc, #84]	; (800b338 <osMessageQueuePut+0xbc>)
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	e01c      	b.n	800b32c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <osMessageQueuePut+0x82>
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d103      	bne.n	800b306 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b2fe:	f06f 0303 	mvn.w	r3, #3
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	e012      	b.n	800b32c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b306:	2300      	movs	r3, #0
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	69b8      	ldr	r0, [r7, #24]
 800b30e:	f000 ff3b 	bl	800c188 <xQueueGenericSend>
 800b312:	4603      	mov	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d009      	beq.n	800b32c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b31e:	f06f 0301 	mvn.w	r3, #1
 800b322:	61fb      	str	r3, [r7, #28]
 800b324:	e002      	b.n	800b32c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b326:	f06f 0302 	mvn.w	r3, #2
 800b32a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b32c:	69fb      	ldr	r3, [r7, #28]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b34e:	2300      	movs	r3, #0
 800b350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b352:	f3ef 8305 	mrs	r3, IPSR
 800b356:	617b      	str	r3, [r7, #20]
  return(result);
 800b358:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d028      	beq.n	800b3b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <osMessageQueueGet+0x34>
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <osMessageQueueGet+0x34>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b370:	f06f 0303 	mvn.w	r3, #3
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e037      	b.n	800b3e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	461a      	mov	r2, r3
 800b382:	68b9      	ldr	r1, [r7, #8]
 800b384:	69b8      	ldr	r0, [r7, #24]
 800b386:	f001 fb11 	bl	800c9ac <xQueueReceiveFromISR>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d003      	beq.n	800b398 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b390:	f06f 0302 	mvn.w	r3, #2
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	e027      	b.n	800b3e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d024      	beq.n	800b3e8 <osMessageQueueGet+0xac>
 800b39e:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <osMessageQueueGet+0xb8>)
 800b3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	e01b      	b.n	800b3e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <osMessageQueueGet+0x80>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d103      	bne.n	800b3c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b3bc:	f06f 0303 	mvn.w	r3, #3
 800b3c0:	61fb      	str	r3, [r7, #28]
 800b3c2:	e011      	b.n	800b3e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	69b8      	ldr	r0, [r7, #24]
 800b3ca:	f001 f903 	bl	800c5d4 <xQueueReceive>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d009      	beq.n	800b3e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b3da:	f06f 0301 	mvn.w	r3, #1
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e002      	b.n	800b3e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b3e2:	f06f 0302 	mvn.w	r3, #2
 800b3e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b3e8:	69fb      	ldr	r3, [r7, #28]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3720      	adds	r7, #32
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	e000ed04 	.word	0xe000ed04

0800b3f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4a07      	ldr	r2, [pc, #28]	; (800b424 <vApplicationGetIdleTaskMemory+0x2c>)
 800b408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	4a06      	ldr	r2, [pc, #24]	; (800b428 <vApplicationGetIdleTaskMemory+0x30>)
 800b40e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2280      	movs	r2, #128	; 0x80
 800b414:	601a      	str	r2, [r3, #0]
}
 800b416:	bf00      	nop
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	24001edc 	.word	0x24001edc
 800b428:	24001f84 	.word	0x24001f84

0800b42c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4a07      	ldr	r2, [pc, #28]	; (800b458 <vApplicationGetTimerTaskMemory+0x2c>)
 800b43c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	4a06      	ldr	r2, [pc, #24]	; (800b45c <vApplicationGetTimerTaskMemory+0x30>)
 800b442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b44a:	601a      	str	r2, [r3, #0]
}
 800b44c:	bf00      	nop
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr
 800b458:	24002184 	.word	0x24002184
 800b45c:	2400222c 	.word	0x2400222c

0800b460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08a      	sub	sp, #40	; 0x28
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b46c:	f001 ff4e 	bl	800d30c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b470:	4b5b      	ldr	r3, [pc, #364]	; (800b5e0 <pvPortMalloc+0x180>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b478:	f000 f920 	bl	800b6bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b47c:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <pvPortMalloc+0x184>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	f040 8093 	bne.w	800b5b0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01d      	beq.n	800b4cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b490:	2208      	movs	r2, #8
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4413      	add	r3, r2
 800b496:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d014      	beq.n	800b4cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f023 0307 	bic.w	r3, r3, #7
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f003 0307 	and.w	r3, r3, #7
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00a      	beq.n	800b4cc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4c8:	bf00      	nop
 800b4ca:	e7fe      	b.n	800b4ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d06e      	beq.n	800b5b0 <pvPortMalloc+0x150>
 800b4d2:	4b45      	ldr	r3, [pc, #276]	; (800b5e8 <pvPortMalloc+0x188>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d869      	bhi.n	800b5b0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4dc:	4b43      	ldr	r3, [pc, #268]	; (800b5ec <pvPortMalloc+0x18c>)
 800b4de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4e0:	4b42      	ldr	r3, [pc, #264]	; (800b5ec <pvPortMalloc+0x18c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4e6:	e004      	b.n	800b4f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d903      	bls.n	800b504 <pvPortMalloc+0xa4>
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f1      	bne.n	800b4e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b504:	4b36      	ldr	r3, [pc, #216]	; (800b5e0 <pvPortMalloc+0x180>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d050      	beq.n	800b5b0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2208      	movs	r2, #8
 800b514:	4413      	add	r3, r2
 800b516:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	1ad2      	subs	r2, r2, r3
 800b528:	2308      	movs	r3, #8
 800b52a:	005b      	lsls	r3, r3, #1
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d91f      	bls.n	800b570 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	f003 0307 	and.w	r3, r3, #7
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <pvPortMalloc+0xf8>
	__asm volatile
 800b542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	613b      	str	r3, [r7, #16]
}
 800b554:	bf00      	nop
 800b556:	e7fe      	b.n	800b556 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b56a:	69b8      	ldr	r0, [r7, #24]
 800b56c:	f000 f908 	bl	800b780 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b570:	4b1d      	ldr	r3, [pc, #116]	; (800b5e8 <pvPortMalloc+0x188>)
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	4a1b      	ldr	r2, [pc, #108]	; (800b5e8 <pvPortMalloc+0x188>)
 800b57c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b57e:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <pvPortMalloc+0x188>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <pvPortMalloc+0x190>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d203      	bcs.n	800b592 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b58a:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <pvPortMalloc+0x188>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a18      	ldr	r2, [pc, #96]	; (800b5f0 <pvPortMalloc+0x190>)
 800b590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <pvPortMalloc+0x184>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	431a      	orrs	r2, r3
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5a6:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <pvPortMalloc+0x194>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	4a11      	ldr	r2, [pc, #68]	; (800b5f4 <pvPortMalloc+0x194>)
 800b5ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5b0:	f001 feba 	bl	800d328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <pvPortMalloc+0x174>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <pvPortMalloc+0x172>
	return pvReturn;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3728      	adds	r7, #40	; 0x28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	2400a634 	.word	0x2400a634
 800b5e4:	2400a648 	.word	0x2400a648
 800b5e8:	2400a638 	.word	0x2400a638
 800b5ec:	2400a62c 	.word	0x2400a62c
 800b5f0:	2400a63c 	.word	0x2400a63c
 800b5f4:	2400a640 	.word	0x2400a640

0800b5f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d04d      	beq.n	800b6a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b60a:	2308      	movs	r3, #8
 800b60c:	425b      	negs	r3, r3
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4413      	add	r3, r2
 800b612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <vPortFree+0xb8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4013      	ands	r3, r2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10a      	bne.n	800b63c <vPortFree+0x44>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60fb      	str	r3, [r7, #12]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00a      	beq.n	800b65a <vPortFree+0x62>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	60bb      	str	r3, [r7, #8]
}
 800b656:	bf00      	nop
 800b658:	e7fe      	b.n	800b658 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	4b14      	ldr	r3, [pc, #80]	; (800b6b0 <vPortFree+0xb8>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4013      	ands	r3, r2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01e      	beq.n	800b6a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d11a      	bne.n	800b6a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <vPortFree+0xb8>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	43db      	mvns	r3, r3
 800b67a:	401a      	ands	r2, r3
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b680:	f001 fe44 	bl	800d30c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <vPortFree+0xbc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4413      	add	r3, r2
 800b68e:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <vPortFree+0xbc>)
 800b690:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b692:	6938      	ldr	r0, [r7, #16]
 800b694:	f000 f874 	bl	800b780 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b698:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <vPortFree+0xc0>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	4a06      	ldr	r2, [pc, #24]	; (800b6b8 <vPortFree+0xc0>)
 800b6a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6a2:	f001 fe41 	bl	800d328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	2400a648 	.word	0x2400a648
 800b6b4:	2400a638 	.word	0x2400a638
 800b6b8:	2400a644 	.word	0x2400a644

0800b6bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6c8:	4b27      	ldr	r3, [pc, #156]	; (800b768 <prvHeapInit+0xac>)
 800b6ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f003 0307 	and.w	r3, r3, #7
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3307      	adds	r3, #7
 800b6da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f023 0307 	bic.w	r3, r3, #7
 800b6e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	4a1f      	ldr	r2, [pc, #124]	; (800b768 <prvHeapInit+0xac>)
 800b6ec:	4413      	add	r3, r2
 800b6ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6f4:	4a1d      	ldr	r2, [pc, #116]	; (800b76c <prvHeapInit+0xb0>)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6fa:	4b1c      	ldr	r3, [pc, #112]	; (800b76c <prvHeapInit+0xb0>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	4413      	add	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b708:	2208      	movs	r2, #8
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 0307 	bic.w	r3, r3, #7
 800b716:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	4a15      	ldr	r2, [pc, #84]	; (800b770 <prvHeapInit+0xb4>)
 800b71c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b71e:	4b14      	ldr	r3, [pc, #80]	; (800b770 <prvHeapInit+0xb4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2200      	movs	r2, #0
 800b724:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b726:	4b12      	ldr	r3, [pc, #72]	; (800b770 <prvHeapInit+0xb4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b73c:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <prvHeapInit+0xb4>)
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	4a0a      	ldr	r2, [pc, #40]	; (800b774 <prvHeapInit+0xb8>)
 800b74a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4a09      	ldr	r2, [pc, #36]	; (800b778 <prvHeapInit+0xbc>)
 800b752:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b754:	4b09      	ldr	r3, [pc, #36]	; (800b77c <prvHeapInit+0xc0>)
 800b756:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b75a:	601a      	str	r2, [r3, #0]
}
 800b75c:	bf00      	nop
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr
 800b768:	2400262c 	.word	0x2400262c
 800b76c:	2400a62c 	.word	0x2400a62c
 800b770:	2400a634 	.word	0x2400a634
 800b774:	2400a63c 	.word	0x2400a63c
 800b778:	2400a638 	.word	0x2400a638
 800b77c:	2400a648 	.word	0x2400a648

0800b780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b788:	4b28      	ldr	r3, [pc, #160]	; (800b82c <prvInsertBlockIntoFreeList+0xac>)
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e002      	b.n	800b794 <prvInsertBlockIntoFreeList+0x14>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d8f7      	bhi.n	800b78e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d108      	bne.n	800b7c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	441a      	add	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	68ba      	ldr	r2, [r7, #8]
 800b7cc:	441a      	add	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d118      	bne.n	800b808 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	4b15      	ldr	r3, [pc, #84]	; (800b830 <prvInsertBlockIntoFreeList+0xb0>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d00d      	beq.n	800b7fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	441a      	add	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	601a      	str	r2, [r3, #0]
 800b7fc:	e008      	b.n	800b810 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <prvInsertBlockIntoFreeList+0xb0>)
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	e003      	b.n	800b810 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d002      	beq.n	800b81e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	2400a62c 	.word	0x2400a62c
 800b830:	2400a634 	.word	0x2400a634

0800b834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f103 0208 	add.w	r2, r3, #8
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f04f 32ff 	mov.w	r2, #4294967295
 800b84c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f103 0208 	add.w	r2, r3, #8
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f103 0208 	add.w	r2, r3, #8
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b88e:	b480      	push	{r7}
 800b890:	b085      	sub	sp, #20
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	689a      	ldr	r2, [r3, #8]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ec:	d103      	bne.n	800b8f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e00c      	b.n	800b910 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3308      	adds	r3, #8
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	e002      	b.n	800b904 <vListInsert+0x2e>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d2f6      	bcs.n	800b8fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	685a      	ldr	r2, [r3, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	601a      	str	r2, [r3, #0]
}
 800b93c:	bf00      	nop
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	6892      	ldr	r2, [r2, #8]
 800b95e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6852      	ldr	r2, [r2, #4]
 800b968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	429a      	cmp	r2, r3
 800b972:	d103      	bne.n	800b97c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	1e5a      	subs	r2, r3, #1
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	3b04      	subs	r3, #4
 800b9ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3b04      	subs	r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f023 0201 	bic.w	r2, r3, #1
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3b04      	subs	r3, #4
 800b9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9cc:	4a0c      	ldr	r2, [pc, #48]	; (800ba00 <pxPortInitialiseStack+0x64>)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3b14      	subs	r3, #20
 800b9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f06f 0202 	mvn.w	r2, #2
 800b9ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3b20      	subs	r3, #32
 800b9f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	0800ba05 	.word	0x0800ba05

0800ba04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba0e:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <prvTaskExitError+0x54>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d00a      	beq.n	800ba2e <prvTaskExitError+0x2a>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60fb      	str	r3, [r7, #12]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <prvTaskExitError+0x28>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	60bb      	str	r3, [r7, #8]
}
 800ba40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba42:	bf00      	nop
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0fc      	beq.n	800ba44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba4a:	bf00      	nop
 800ba4c:	bf00      	nop
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	24000014 	.word	0x24000014
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <pxCurrentTCBConst2>)
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f380 8809 	msr	PSP, r0
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst2>:
 800ba80:	2400a694 	.word	0x2400a694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	; (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	bf00      	nop
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bab6:	4b46      	ldr	r3, [pc, #280]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a46      	ldr	r2, [pc, #280]	; (800bbd4 <xPortStartScheduler+0x124>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10a      	bne.n	800bad6 <xPortStartScheduler+0x26>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	e7fe      	b.n	800bad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad6:	4b3e      	ldr	r3, [pc, #248]	; (800bbd0 <xPortStartScheduler+0x120>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a3f      	ldr	r2, [pc, #252]	; (800bbd8 <xPortStartScheduler+0x128>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d10a      	bne.n	800baf6 <xPortStartScheduler+0x46>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800baf6:	4b39      	ldr	r3, [pc, #228]	; (800bbdc <xPortStartScheduler+0x12c>)
 800baf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	22ff      	movs	r2, #255	; 0xff
 800bb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb10:	78fb      	ldrb	r3, [r7, #3]
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <xPortStartScheduler+0x130>)
 800bb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb1e:	4b31      	ldr	r3, [pc, #196]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb20:	2207      	movs	r2, #7
 800bb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb24:	e009      	b.n	800bb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb26:	4b2f      	ldr	r3, [pc, #188]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4a2d      	ldr	r2, [pc, #180]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d0ef      	beq.n	800bb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f1c3 0307 	rsb	r3, r3, #7
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d00a      	beq.n	800bb68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60bb      	str	r3, [r7, #8]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb68:	4b1e      	ldr	r3, [pc, #120]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	021b      	lsls	r3, r3, #8
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb72:	4b1c      	ldr	r3, [pc, #112]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb7a:	4a1a      	ldr	r2, [pc, #104]	; (800bbe4 <xPortStartScheduler+0x134>)
 800bb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb86:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb92:	4b15      	ldr	r3, [pc, #84]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a14      	ldr	r2, [pc, #80]	; (800bbe8 <xPortStartScheduler+0x138>)
 800bb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb9e:	f000 f8dd 	bl	800bd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bba2:	4b12      	ldr	r3, [pc, #72]	; (800bbec <xPortStartScheduler+0x13c>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bba8:	f000 f8fc 	bl	800bda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbac:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a0f      	ldr	r2, [pc, #60]	; (800bbf0 <xPortStartScheduler+0x140>)
 800bbb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbb8:	f7ff ff66 	bl	800ba88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbbc:	f001 fd1c 	bl	800d5f8 <vTaskSwitchContext>
	prvTaskExitError();
 800bbc0:	f7ff ff20 	bl	800ba04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	e000ed00 	.word	0xe000ed00
 800bbd4:	410fc271 	.word	0x410fc271
 800bbd8:	410fc270 	.word	0x410fc270
 800bbdc:	e000e400 	.word	0xe000e400
 800bbe0:	2400a64c 	.word	0x2400a64c
 800bbe4:	2400a650 	.word	0x2400a650
 800bbe8:	e000ed20 	.word	0xe000ed20
 800bbec:	24000014 	.word	0x24000014
 800bbf0:	e000ef34 	.word	0xe000ef34

0800bbf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	607b      	str	r3, [r7, #4]
}
 800bc0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a0d      	ldr	r2, [pc, #52]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc18:	4b0c      	ldr	r3, [pc, #48]	; (800bc4c <vPortEnterCritical+0x58>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10f      	bne.n	800bc40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <vPortEnterCritical+0x5c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	603b      	str	r3, [r7, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vPortEnterCritical+0x4a>
	}
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	24000014 	.word	0x24000014
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <vPortExitCritical+0x50>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <vPortExitCritical+0x24>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	607b      	str	r3, [r7, #4]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc78:	4b0a      	ldr	r3, [pc, #40]	; (800bca4 <vPortExitCritical+0x50>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <vPortExitCritical+0x50>)
 800bc80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc82:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <vPortExitCritical+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <vPortExitCritical+0x42>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc96:	bf00      	nop
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	24000014 	.word	0x24000014
	...

0800bcb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcb0:	f3ef 8009 	mrs	r0, PSP
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <pxCurrentTCBConst>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f01e 0f10 	tst.w	lr, #16
 800bcc0:	bf08      	it	eq
 800bcc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f001 fc8a 	bl	800d5f8 <vTaskSwitchContext>
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f380 8811 	msr	BASEPRI, r0
 800bcec:	bc09      	pop	{r0, r3}
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f01e 0f10 	tst.w	lr, #16
 800bcfa:	bf08      	it	eq
 800bcfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd00:	f380 8809 	msr	PSP, r0
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst>:
 800bd10:	2400a694 	.word	0x2400a694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd32:	f001 fba7 	bl	800d484 <xTaskIncrementTick>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <xPortSysTickHandler+0x40>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
}
 800bd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <vPortSetupTimerInterrupt+0x38>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <vPortSetupTimerInterrupt+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a0a      	ldr	r2, [pc, #40]	; (800bd9c <vPortSetupTimerInterrupt+0x40>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <vPortSetupTimerInterrupt+0x44>)
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd7e:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e010 	.word	0xe000e010
 800bd94:	e000e018 	.word	0xe000e018
 800bd98:	24000018 	.word	0x24000018
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	e000e014 	.word	0xe000e014

0800bda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdb4 <vPortEnableVFP+0x10>
 800bda8:	6801      	ldr	r1, [r0, #0]
 800bdaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdae:	6001      	str	r1, [r0, #0]
 800bdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed88 	.word	0xe000ed88

0800bdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdbe:	f3ef 8305 	mrs	r3, IPSR
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d914      	bls.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdca:	4a17      	ldr	r2, [pc, #92]	; (800be28 <vPortValidateInterruptPriority+0x70>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4b15      	ldr	r3, [pc, #84]	; (800be2c <vPortValidateInterruptPriority+0x74>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20a      	bcs.n	800bdf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf4:	4b0e      	ldr	r3, [pc, #56]	; (800be30 <vPortValidateInterruptPriority+0x78>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <vPortValidateInterruptPriority+0x7c>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d90a      	bls.n	800be1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	603b      	str	r3, [r7, #0]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <vPortValidateInterruptPriority+0x60>
	}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	e000e3f0 	.word	0xe000e3f0
 800be2c:	2400a64c 	.word	0x2400a64c
 800be30:	e000ed0c 	.word	0xe000ed0c
 800be34:	2400a650 	.word	0x2400a650

0800be38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <xQueueGenericReset+0x2a>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60bb      	str	r3, [r7, #8]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be62:	f7ff fec7 	bl	800bbf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be72:	fb01 f303 	mul.w	r3, r1, r3
 800be76:	441a      	add	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2200      	movs	r2, #0
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be92:	3b01      	subs	r3, #1
 800be94:	68f9      	ldr	r1, [r7, #12]
 800be96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be98:	fb01 f303 	mul.w	r3, r1, r3
 800be9c:	441a      	add	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	22ff      	movs	r2, #255	; 0xff
 800bea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	22ff      	movs	r2, #255	; 0xff
 800beae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d114      	bne.n	800bee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d01a      	beq.n	800bef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3310      	adds	r3, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fc4b 	bl	800d760 <xTaskRemoveFromEventList>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d012      	beq.n	800bef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bed0:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <xQueueGenericReset+0xcc>)
 800bed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	f3bf 8f4f 	dsb	sy
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	e009      	b.n	800bef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3310      	adds	r3, #16
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fca4 	bl	800b834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3324      	adds	r3, #36	; 0x24
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fc9f 	bl	800b834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bef6:	f7ff fead 	bl	800bc54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800befa:	2301      	movs	r3, #1
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	e000ed04 	.word	0xe000ed04

0800bf08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	; 0x38
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10a      	bne.n	800bf32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <xQueueGenericCreateStatic+0x52>
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <xQueueGenericCreateStatic+0x56>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e000      	b.n	800bf60 <xQueueGenericCreateStatic+0x58>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10a      	bne.n	800bf7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf68:	f383 8811 	msr	BASEPRI, r3
 800bf6c:	f3bf 8f6f 	isb	sy
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	623b      	str	r3, [r7, #32]
}
 800bf76:	bf00      	nop
 800bf78:	e7fe      	b.n	800bf78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <xQueueGenericCreateStatic+0x7e>
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <xQueueGenericCreateStatic+0x82>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <xQueueGenericCreateStatic+0x84>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	61fb      	str	r3, [r7, #28]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfa6:	2350      	movs	r3, #80	; 0x50
 800bfa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b50      	cmp	r3, #80	; 0x50
 800bfae:	d00a      	beq.n	800bfc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	61bb      	str	r3, [r7, #24]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00d      	beq.n	800bfee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f000 f83f 	bl	800c06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3730      	adds	r7, #48	; 0x30
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08a      	sub	sp, #40	; 0x28
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	613b      	str	r3, [r7, #16]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	3350      	adds	r3, #80	; 0x50
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fa15 	bl	800b460 <pvPortMalloc>
 800c036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d011      	beq.n	800c062 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	3350      	adds	r3, #80	; 0x50
 800c046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c050:	79fa      	ldrb	r2, [r7, #7]
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	4613      	mov	r3, r2
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f000 f805 	bl	800c06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c062:	69bb      	ldr	r3, [r7, #24]
	}
 800c064:	4618      	mov	r0, r3
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d103      	bne.n	800c088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	e002      	b.n	800c08e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c09a:	2101      	movs	r1, #1
 800c09c:	69b8      	ldr	r0, [r7, #24]
 800c09e:	f7ff fecb 	bl	800be38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	78fa      	ldrb	r2, [r7, #3]
 800c0a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0aa:	bf00      	nop
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b08a      	sub	sp, #40	; 0x28
 800c0b6:	af02      	add	r7, sp, #8
 800c0b8:	60f8      	str	r0, [r7, #12]
 800c0ba:	60b9      	str	r1, [r7, #8]
 800c0bc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10a      	bne.n	800c0da <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	61bb      	str	r3, [r7, #24]
}
 800c0d6:	bf00      	nop
 800c0d8:	e7fe      	b.n	800c0d8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d90a      	bls.n	800c0f8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	617b      	str	r3, [r7, #20]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f7ff ff00 	bl	800bf08 <xQueueGenericCreateStatic>
 800c108:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d002      	beq.n	800c116 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c116:	69fb      	ldr	r3, [r7, #28]
	}
 800c118:	4618      	mov	r0, r3
 800c11a:	3720      	adds	r7, #32
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10a      	bne.n	800c146 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	613b      	str	r3, [r7, #16]
}
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d90a      	bls.n	800c164 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60fb      	str	r3, [r7, #12]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c164:	2202      	movs	r2, #2
 800c166:	2100      	movs	r1, #0
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff45 	bl	800bff8 <xQueueGenericCreate>
 800c16e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	683a      	ldr	r2, [r7, #0]
 800c17a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c17c:	697b      	ldr	r3, [r7, #20]
	}
 800c17e:	4618      	mov	r0, r3
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08e      	sub	sp, #56	; 0x38
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c196:	2300      	movs	r3, #0
 800c198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xQueueGenericSend+0x32>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <xQueueGenericSend+0x40>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <xQueueGenericSend+0x44>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e000      	b.n	800c1ce <xQueueGenericSend+0x46>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <xQueueGenericSend+0x60>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c1e4:	bf00      	nop
 800c1e6:	e7fe      	b.n	800c1e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b02      	cmp	r3, #2
 800c1ec:	d103      	bne.n	800c1f6 <xQueueGenericSend+0x6e>
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d101      	bne.n	800c1fa <xQueueGenericSend+0x72>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e000      	b.n	800c1fc <xQueueGenericSend+0x74>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10a      	bne.n	800c216 <xQueueGenericSend+0x8e>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	623b      	str	r3, [r7, #32]
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c216:	f001 fc65 	bl	800dae4 <xTaskGetSchedulerState>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <xQueueGenericSend+0x9e>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <xQueueGenericSend+0xa2>
 800c226:	2301      	movs	r3, #1
 800c228:	e000      	b.n	800c22c <xQueueGenericSend+0xa4>
 800c22a:	2300      	movs	r3, #0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <xQueueGenericSend+0xbe>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	61fb      	str	r3, [r7, #28]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c246:	f7ff fcd5 	bl	800bbf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c252:	429a      	cmp	r2, r3
 800c254:	d302      	bcc.n	800c25c <xQueueGenericSend+0xd4>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d129      	bne.n	800c2b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c25c:	683a      	ldr	r2, [r7, #0]
 800c25e:	68b9      	ldr	r1, [r7, #8]
 800c260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c262:	f000 fc5e 	bl	800cb22 <prvCopyDataToQueue>
 800c266:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d010      	beq.n	800c292 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	3324      	adds	r3, #36	; 0x24
 800c274:	4618      	mov	r0, r3
 800c276:	f001 fa73 	bl	800d760 <xTaskRemoveFromEventList>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d013      	beq.n	800c2a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c280:	4b3f      	ldr	r3, [pc, #252]	; (800c380 <xQueueGenericSend+0x1f8>)
 800c282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	e00a      	b.n	800c2a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d007      	beq.n	800c2a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c298:	4b39      	ldr	r3, [pc, #228]	; (800c380 <xQueueGenericSend+0x1f8>)
 800c29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2a8:	f7ff fcd4 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e063      	b.n	800c378 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d103      	bne.n	800c2be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2b6:	f7ff fccd 	bl	800bc54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e05c      	b.n	800c378 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2c4:	f107 0314 	add.w	r3, r7, #20
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 faad 	bl	800d828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2d2:	f7ff fcbf 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2d6:	f001 f819 	bl	800d30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2da:	f7ff fc8b 	bl	800bbf4 <vPortEnterCritical>
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2e4:	b25b      	sxtb	r3, r3
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d103      	bne.n	800c2f4 <xQueueGenericSend+0x16c>
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2fa:	b25b      	sxtb	r3, r3
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c300:	d103      	bne.n	800c30a <xQueueGenericSend+0x182>
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c30a:	f7ff fca3 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c30e:	1d3a      	adds	r2, r7, #4
 800c310:	f107 0314 	add.w	r3, r7, #20
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f001 fa9c 	bl	800d854 <xTaskCheckForTimeOut>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d124      	bne.n	800c36c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c324:	f000 fcf5 	bl	800cd12 <prvIsQueueFull>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d018      	beq.n	800c360 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	3310      	adds	r3, #16
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f001 f9c2 	bl	800d6c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c33c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c33e:	f000 fc80 	bl	800cc42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c342:	f000 fff1 	bl	800d328 <xTaskResumeAll>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f47f af7c 	bne.w	800c246 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c34e:	4b0c      	ldr	r3, [pc, #48]	; (800c380 <xQueueGenericSend+0x1f8>)
 800c350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c354:	601a      	str	r2, [r3, #0]
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	e772      	b.n	800c246 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c362:	f000 fc6e 	bl	800cc42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c366:	f000 ffdf 	bl	800d328 <xTaskResumeAll>
 800c36a:	e76c      	b.n	800c246 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c36e:	f000 fc68 	bl	800cc42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c372:	f000 ffd9 	bl	800d328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3738      	adds	r7, #56	; 0x38
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b090      	sub	sp, #64	; 0x40
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <xQueueGenericSendFromISR+0x3c>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <xQueueGenericSendFromISR+0x40>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e000      	b.n	800c3c6 <xQueueGenericSendFromISR+0x42>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10a      	bne.n	800c3e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d103      	bne.n	800c3ee <xQueueGenericSendFromISR+0x6a>
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d101      	bne.n	800c3f2 <xQueueGenericSendFromISR+0x6e>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <xQueueGenericSendFromISR+0x70>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fc:	f383 8811 	msr	BASEPRI, r3
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	623b      	str	r3, [r7, #32]
}
 800c40a:	bf00      	nop
 800c40c:	e7fe      	b.n	800c40c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c40e:	f7ff fcd3 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800c412:	f3ef 8211 	mrs	r2, BASEPRI
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	61fa      	str	r2, [r7, #28]
 800c428:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c42a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c42c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <xQueueGenericSendFromISR+0xbc>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d12f      	bne.n	800c4a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c44e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	68b9      	ldr	r1, [r7, #8]
 800c454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c456:	f000 fb64 	bl	800cb22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c45a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c462:	d112      	bne.n	800c48a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d016      	beq.n	800c49a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	3324      	adds	r3, #36	; 0x24
 800c470:	4618      	mov	r0, r3
 800c472:	f001 f975 	bl	800d760 <xTaskRemoveFromEventList>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00e      	beq.n	800c49a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00b      	beq.n	800c49a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2201      	movs	r2, #1
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	e007      	b.n	800c49a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c48a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c48e:	3301      	adds	r3, #1
 800c490:	b2db      	uxtb	r3, r3
 800c492:	b25a      	sxtb	r2, r3
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c49a:	2301      	movs	r3, #1
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c49e:	e001      	b.n	800c4a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	f383 8811 	msr	BASEPRI, r3
}
 800c4ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3740      	adds	r7, #64	; 0x40
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b08e      	sub	sp, #56	; 0x38
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	623b      	str	r3, [r7, #32]
}
 800c4e0:	bf00      	nop
 800c4e2:	e7fe      	b.n	800c4e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	61fb      	str	r3, [r7, #28]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d103      	bne.n	800c512 <xQueueGiveFromISR+0x58>
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <xQueueGiveFromISR+0x5c>
 800c512:	2301      	movs	r3, #1
 800c514:	e000      	b.n	800c518 <xQueueGiveFromISR+0x5e>
 800c516:	2300      	movs	r3, #0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	61bb      	str	r3, [r7, #24]
}
 800c52e:	bf00      	nop
 800c530:	e7fe      	b.n	800c530 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c532:	f7ff fc41 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800c536:	f3ef 8211 	mrs	r2, BASEPRI
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	617a      	str	r2, [r7, #20]
 800c54c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c54e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55e:	429a      	cmp	r2, r3
 800c560:	d22b      	bcs.n	800c5ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d112      	bne.n	800c5a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 f8e8 	bl	800d760 <xTaskRemoveFromEventList>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00e      	beq.n	800c5b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e007      	b.n	800c5b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	b25a      	sxtb	r2, r3
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b8:	e001      	b.n	800c5be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f383 8811 	msr	BASEPRI, r3
}
 800c5c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3738      	adds	r7, #56	; 0x38
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b08c      	sub	sp, #48	; 0x30
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d10a      	bne.n	800c604 <xQueueReceive+0x30>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	623b      	str	r3, [r7, #32]
}
 800c600:	bf00      	nop
 800c602:	e7fe      	b.n	800c602 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d103      	bne.n	800c612 <xQueueReceive+0x3e>
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <xQueueReceive+0x42>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <xQueueReceive+0x44>
 800c616:	2300      	movs	r3, #0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10a      	bne.n	800c632 <xQueueReceive+0x5e>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	61fb      	str	r3, [r7, #28]
}
 800c62e:	bf00      	nop
 800c630:	e7fe      	b.n	800c630 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c632:	f001 fa57 	bl	800dae4 <xTaskGetSchedulerState>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <xQueueReceive+0x6e>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <xQueueReceive+0x72>
 800c642:	2301      	movs	r3, #1
 800c644:	e000      	b.n	800c648 <xQueueReceive+0x74>
 800c646:	2300      	movs	r3, #0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10a      	bne.n	800c662 <xQueueReceive+0x8e>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	61bb      	str	r3, [r7, #24]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c662:	f7ff fac7 	bl	800bbf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01f      	beq.n	800c6b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c672:	68b9      	ldr	r1, [r7, #8]
 800c674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c676:	f000 fabe 	bl	800cbf6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	1e5a      	subs	r2, r3, #1
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	691b      	ldr	r3, [r3, #16]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00f      	beq.n	800c6aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68c:	3310      	adds	r3, #16
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 f866 	bl	800d760 <xTaskRemoveFromEventList>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c69a:	4b3d      	ldr	r3, [pc, #244]	; (800c790 <xQueueReceive+0x1bc>)
 800c69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6aa:	f7ff fad3 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e069      	b.n	800c786 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6b8:	f7ff facc 	bl	800bc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e062      	b.n	800c786 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6c6:	f107 0310 	add.w	r3, r7, #16
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f001 f8ac 	bl	800d828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6d4:	f7ff fabe 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6d8:	f000 fe18 	bl	800d30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6dc:	f7ff fa8a 	bl	800bbf4 <vPortEnterCritical>
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6e6:	b25b      	sxtb	r3, r3
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ec:	d103      	bne.n	800c6f6 <xQueueReceive+0x122>
 800c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6fc:	b25b      	sxtb	r3, r3
 800c6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c702:	d103      	bne.n	800c70c <xQueueReceive+0x138>
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c70c:	f7ff faa2 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c710:	1d3a      	adds	r2, r7, #4
 800c712:	f107 0310 	add.w	r3, r7, #16
 800c716:	4611      	mov	r1, r2
 800c718:	4618      	mov	r0, r3
 800c71a:	f001 f89b 	bl	800d854 <xTaskCheckForTimeOut>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d123      	bne.n	800c76c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c726:	f000 fade 	bl	800cce6 <prvIsQueueEmpty>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d017      	beq.n	800c760 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	3324      	adds	r3, #36	; 0x24
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 ffc1 	bl	800d6c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c740:	f000 fa7f 	bl	800cc42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c744:	f000 fdf0 	bl	800d328 <xTaskResumeAll>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d189      	bne.n	800c662 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <xQueueReceive+0x1bc>)
 800c750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	f3bf 8f4f 	dsb	sy
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	e780      	b.n	800c662 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c762:	f000 fa6e 	bl	800cc42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c766:	f000 fddf 	bl	800d328 <xTaskResumeAll>
 800c76a:	e77a      	b.n	800c662 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c76e:	f000 fa68 	bl	800cc42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c772:	f000 fdd9 	bl	800d328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c778:	f000 fab5 	bl	800cce6 <prvIsQueueEmpty>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f43f af6f 	beq.w	800c662 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c786:	4618      	mov	r0, r3
 800c788:	3730      	adds	r7, #48	; 0x30
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	e000ed04 	.word	0xe000ed04

0800c794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b08e      	sub	sp, #56	; 0x38
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10a      	bne.n	800c7c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	623b      	str	r3, [r7, #32]
}
 800c7c2:	bf00      	nop
 800c7c4:	e7fe      	b.n	800c7c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00a      	beq.n	800c7e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	61fb      	str	r3, [r7, #28]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7e4:	f001 f97e 	bl	800dae4 <xTaskGetSchedulerState>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d102      	bne.n	800c7f4 <xQueueSemaphoreTake+0x60>
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d101      	bne.n	800c7f8 <xQueueSemaphoreTake+0x64>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e000      	b.n	800c7fa <xQueueSemaphoreTake+0x66>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10a      	bne.n	800c814 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c802:	f383 8811 	msr	BASEPRI, r3
 800c806:	f3bf 8f6f 	isb	sy
 800c80a:	f3bf 8f4f 	dsb	sy
 800c80e:	61bb      	str	r3, [r7, #24]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c814:	f7ff f9ee 	bl	800bbf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	2b00      	cmp	r3, #0
 800c822:	d024      	beq.n	800c86e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	1e5a      	subs	r2, r3, #1
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d104      	bne.n	800c83e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c834:	f001 facc 	bl	800ddd0 <pvTaskIncrementMutexHeldCount>
 800c838:	4602      	mov	r2, r0
 800c83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	691b      	ldr	r3, [r3, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00f      	beq.n	800c866 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c848:	3310      	adds	r3, #16
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 ff88 	bl	800d760 <xTaskRemoveFromEventList>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d007      	beq.n	800c866 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c856:	4b54      	ldr	r3, [pc, #336]	; (800c9a8 <xQueueSemaphoreTake+0x214>)
 800c858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c866:	f7ff f9f5 	bl	800bc54 <vPortExitCritical>
				return pdPASS;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e097      	b.n	800c99e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d111      	bne.n	800c898 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	617b      	str	r3, [r7, #20]
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c890:	f7ff f9e0 	bl	800bc54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c894:	2300      	movs	r3, #0
 800c896:	e082      	b.n	800c99e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c89e:	f107 030c 	add.w	r3, r7, #12
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 ffc0 	bl	800d828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8ac:	f7ff f9d2 	bl	800bc54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8b0:	f000 fd2c 	bl	800d30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8b4:	f7ff f99e 	bl	800bbf4 <vPortEnterCritical>
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c4:	d103      	bne.n	800c8ce <xQueueSemaphoreTake+0x13a>
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8d4:	b25b      	sxtb	r3, r3
 800c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8da:	d103      	bne.n	800c8e4 <xQueueSemaphoreTake+0x150>
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8e4:	f7ff f9b6 	bl	800bc54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8e8:	463a      	mov	r2, r7
 800c8ea:	f107 030c 	add.w	r3, r7, #12
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 ffaf 	bl	800d854 <xTaskCheckForTimeOut>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d132      	bne.n	800c962 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8fe:	f000 f9f2 	bl	800cce6 <prvIsQueueEmpty>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d026      	beq.n	800c956 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d109      	bne.n	800c924 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c910:	f7ff f970 	bl	800bbf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	4618      	mov	r0, r3
 800c91a:	f001 f901 	bl	800db20 <xTaskPriorityInherit>
 800c91e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c920:	f7ff f998 	bl	800bc54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	3324      	adds	r3, #36	; 0x24
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	4611      	mov	r1, r2
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fec7 	bl	800d6c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c934:	f000 f985 	bl	800cc42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c938:	f000 fcf6 	bl	800d328 <xTaskResumeAll>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f47f af68 	bne.w	800c814 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c944:	4b18      	ldr	r3, [pc, #96]	; (800c9a8 <xQueueSemaphoreTake+0x214>)
 800c946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	e75e      	b.n	800c814 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c958:	f000 f973 	bl	800cc42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c95c:	f000 fce4 	bl	800d328 <xTaskResumeAll>
 800c960:	e758      	b.n	800c814 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c964:	f000 f96d 	bl	800cc42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c968:	f000 fcde 	bl	800d328 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c96e:	f000 f9ba 	bl	800cce6 <prvIsQueueEmpty>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	f43f af4d 	beq.w	800c814 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00d      	beq.n	800c99c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c980:	f7ff f938 	bl	800bbf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c986:	f000 f8b4 	bl	800caf2 <prvGetDisinheritPriorityAfterTimeout>
 800c98a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c992:	4618      	mov	r0, r3
 800c994:	f001 f99a 	bl	800dccc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c998:	f7ff f95c 	bl	800bc54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c99c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3738      	adds	r7, #56	; 0x38
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08e      	sub	sp, #56	; 0x38
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	623b      	str	r3, [r7, #32]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d103      	bne.n	800c9e6 <xQueueReceiveFromISR+0x3a>
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <xQueueReceiveFromISR+0x3e>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <xQueueReceiveFromISR+0x40>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	61fb      	str	r3, [r7, #28]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca06:	f7ff f9d7 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	61ba      	str	r2, [r7, #24]
 800ca20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d02f      	beq.n	800ca92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca40:	f000 f8d9 	bl	800cbf6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	1e5a      	subs	r2, r3, #1
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d112      	bne.n	800ca7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d016      	beq.n	800ca8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	3310      	adds	r3, #16
 800ca62:	4618      	mov	r0, r3
 800ca64:	f000 fe7c 	bl	800d760 <xTaskRemoveFromEventList>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00e      	beq.n	800ca8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00b      	beq.n	800ca8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	e007      	b.n	800ca8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca80:	3301      	adds	r3, #1
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	b25a      	sxtb	r2, r3
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ca90:	e001      	b.n	800ca96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	637b      	str	r3, [r7, #52]	; 0x34
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f383 8811 	msr	BASEPRI, r3
}
 800caa0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3738      	adds	r7, #56	; 0x38
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10a      	bne.n	800cad4 <vQueueDelete+0x28>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	60bb      	str	r3, [r7, #8]
}
 800cad0:	bf00      	nop
 800cad2:	e7fe      	b.n	800cad2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 f95f 	bl	800cd98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d102      	bne.n	800caea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7fe fd87 	bl	800b5f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800caea:	bf00      	nop
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800caf2:	b480      	push	{r7}
 800caf4:	b085      	sub	sp, #20
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d006      	beq.n	800cb10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e001      	b.n	800cb14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb14:	68fb      	ldr	r3, [r7, #12]
	}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b086      	sub	sp, #24
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	60f8      	str	r0, [r7, #12]
 800cb2a:	60b9      	str	r1, [r7, #8]
 800cb2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10d      	bne.n	800cb5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d14d      	bne.n	800cbe4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f001 f84f 	bl	800dbf0 <xTaskPriorityDisinherit>
 800cb52:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	609a      	str	r2, [r3, #8]
 800cb5a:	e043      	b.n	800cbe4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d119      	bne.n	800cb96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6858      	ldr	r0, [r3, #4]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	f01e f9dc 	bl	802af2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7a:	441a      	add	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d32b      	bcc.n	800cbe4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	605a      	str	r2, [r3, #4]
 800cb94:	e026      	b.n	800cbe4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	68d8      	ldr	r0, [r3, #12]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9e:	461a      	mov	r2, r3
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	f01e f9c2 	bl	802af2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	68da      	ldr	r2, [r3, #12]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	425b      	negs	r3, r3
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	68da      	ldr	r2, [r3, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d207      	bcs.n	800cbd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbca:	425b      	negs	r3, r3
 800cbcc:	441a      	add	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d105      	bne.n	800cbe4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cbec:	697b      	ldr	r3, [r7, #20]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b082      	sub	sp, #8
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d018      	beq.n	800cc3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	441a      	add	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	68da      	ldr	r2, [r3, #12]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d303      	bcc.n	800cc2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	68d9      	ldr	r1, [r3, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	461a      	mov	r2, r3
 800cc34:	6838      	ldr	r0, [r7, #0]
 800cc36:	f01e f978 	bl	802af2a <memcpy>
	}
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc4a:	f7fe ffd3 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc56:	e011      	b.n	800cc7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d012      	beq.n	800cc86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3324      	adds	r3, #36	; 0x24
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 fd7b 	bl	800d760 <xTaskRemoveFromEventList>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc70:	f000 fe52 	bl	800d918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dce9      	bgt.n	800cc58 <prvUnlockQueue+0x16>
 800cc84:	e000      	b.n	800cc88 <prvUnlockQueue+0x46>
					break;
 800cc86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	22ff      	movs	r2, #255	; 0xff
 800cc8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cc90:	f7fe ffe0 	bl	800bc54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc94:	f7fe ffae 	bl	800bbf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cca0:	e011      	b.n	800ccc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d012      	beq.n	800ccd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	3310      	adds	r3, #16
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fd56 	bl	800d760 <xTaskRemoveFromEventList>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d001      	beq.n	800ccbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccba:	f000 fe2d 	bl	800d918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dce9      	bgt.n	800cca2 <prvUnlockQueue+0x60>
 800ccce:	e000      	b.n	800ccd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	22ff      	movs	r2, #255	; 0xff
 800ccd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ccda:	f7fe ffbb 	bl	800bc54 <vPortExitCritical>
}
 800ccde:	bf00      	nop
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccee:	f7fe ff81 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d102      	bne.n	800cd00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	e001      	b.n	800cd04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd04:	f7fe ffa6 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800cd08:	68fb      	ldr	r3, [r7, #12]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd1a:	f7fe ff6b 	bl	800bbf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d102      	bne.n	800cd30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	e001      	b.n	800cd34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd34:	f7fe ff8e 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800cd38:	68fb      	ldr	r3, [r7, #12]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
	...

0800cd44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	e014      	b.n	800cd7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd54:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <vQueueAddToRegistry+0x50>)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10b      	bne.n	800cd78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd60:	490c      	ldr	r1, [pc, #48]	; (800cd94 <vQueueAddToRegistry+0x50>)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd6a:	4a0a      	ldr	r2, [pc, #40]	; (800cd94 <vQueueAddToRegistry+0x50>)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	4413      	add	r3, r2
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd76:	e006      	b.n	800cd86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b07      	cmp	r3, #7
 800cd82:	d9e7      	bls.n	800cd54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	2400a654 	.word	0x2400a654

0800cd98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e016      	b.n	800cdd4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cda6:	4a10      	ldr	r2, [pc, #64]	; (800cde8 <vQueueUnregisterQueue+0x50>)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	4413      	add	r3, r2
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d10b      	bne.n	800cdce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdb6:	4a0c      	ldr	r2, [pc, #48]	; (800cde8 <vQueueUnregisterQueue+0x50>)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2100      	movs	r1, #0
 800cdbc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cdc0:	4a09      	ldr	r2, [pc, #36]	; (800cde8 <vQueueUnregisterQueue+0x50>)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	4413      	add	r3, r2
 800cdc8:	2200      	movs	r2, #0
 800cdca:	605a      	str	r2, [r3, #4]
				break;
 800cdcc:	e006      	b.n	800cddc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	60fb      	str	r3, [r7, #12]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b07      	cmp	r3, #7
 800cdd8:	d9e5      	bls.n	800cda6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	2400a654 	.word	0x2400a654

0800cdec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cdfc:	f7fe fefa 	bl	800bbf4 <vPortEnterCritical>
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce06:	b25b      	sxtb	r3, r3
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d103      	bne.n	800ce16 <vQueueWaitForMessageRestricted+0x2a>
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce1c:	b25b      	sxtb	r3, r3
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce22:	d103      	bne.n	800ce2c <vQueueWaitForMessageRestricted+0x40>
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce2c:	f7fe ff12 	bl	800bc54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 fc61 	bl	800d708 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce46:	6978      	ldr	r0, [r7, #20]
 800ce48:	f7ff fefb 	bl	800cc42 <prvUnlockQueue>
	}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08e      	sub	sp, #56	; 0x38
 800ce58:	af04      	add	r7, sp, #16
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	607a      	str	r2, [r7, #4]
 800ce60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10a      	bne.n	800ce7e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	623b      	str	r3, [r7, #32]
}
 800ce7a:	bf00      	nop
 800ce7c:	e7fe      	b.n	800ce7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xTaskCreateStatic+0x46>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	61fb      	str	r3, [r7, #28]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce9a:	23a8      	movs	r3, #168	; 0xa8
 800ce9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2ba8      	cmp	r3, #168	; 0xa8
 800cea2:	d00a      	beq.n	800ceba <xTaskCreateStatic+0x66>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	61bb      	str	r3, [r7, #24]
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ceba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d01e      	beq.n	800cf00 <xTaskCreateStatic+0xac>
 800cec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01b      	beq.n	800cf00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	2202      	movs	r2, #2
 800ced6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ceda:	2300      	movs	r3, #0
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	9302      	str	r3, [sp, #8]
 800cee2:	f107 0314 	add.w	r3, r7, #20
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	68b9      	ldr	r1, [r7, #8]
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f000 f850 	bl	800cf98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cefa:	f000 f8f3 	bl	800d0e4 <prvAddNewTaskToReadyList>
 800cefe:	e001      	b.n	800cf04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf04:	697b      	ldr	r3, [r7, #20]
	}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3728      	adds	r7, #40	; 0x28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b08c      	sub	sp, #48	; 0x30
 800cf12:	af04      	add	r7, sp, #16
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	603b      	str	r3, [r7, #0]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf1e:	88fb      	ldrh	r3, [r7, #6]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fa9c 	bl	800b460 <pvPortMalloc>
 800cf28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf30:	20a8      	movs	r0, #168	; 0xa8
 800cf32:	f7fe fa95 	bl	800b460 <pvPortMalloc>
 800cf36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	631a      	str	r2, [r3, #48]	; 0x30
 800cf44:	e005      	b.n	800cf52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf46:	6978      	ldr	r0, [r7, #20]
 800cf48:	f7fe fb56 	bl	800b5f8 <vPortFree>
 800cf4c:	e001      	b.n	800cf52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d017      	beq.n	800cf88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf60:	88fa      	ldrh	r2, [r7, #6]
 800cf62:	2300      	movs	r3, #0
 800cf64:	9303      	str	r3, [sp, #12]
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	9302      	str	r3, [sp, #8]
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	68b9      	ldr	r1, [r7, #8]
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f000 f80e 	bl	800cf98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf7c:	69f8      	ldr	r0, [r7, #28]
 800cf7e:	f000 f8b1 	bl	800d0e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf82:	2301      	movs	r3, #1
 800cf84:	61bb      	str	r3, [r7, #24]
 800cf86:	e002      	b.n	800cf8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf88:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf8e:	69bb      	ldr	r3, [r7, #24]
	}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b088      	sub	sp, #32
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	461a      	mov	r2, r3
 800cfb0:	21a5      	movs	r1, #165	; 0xa5
 800cfb2:	f01d fe94 	bl	802acde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfba:	6879      	ldr	r1, [r7, #4]
 800cfbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cfc0:	440b      	add	r3, r1
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	f023 0307 	bic.w	r3, r3, #7
 800cfce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	f003 0307 	and.w	r3, r3, #7
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	617b      	str	r3, [r7, #20]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d01f      	beq.n	800d036 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cff6:	2300      	movs	r3, #0
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	e012      	b.n	800d022 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	4413      	add	r3, r2
 800d002:	7819      	ldrb	r1, [r3, #0]
 800d004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	4413      	add	r3, r2
 800d00a:	3334      	adds	r3, #52	; 0x34
 800d00c:	460a      	mov	r2, r1
 800d00e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	4413      	add	r3, r2
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d006      	beq.n	800d02a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	3301      	adds	r3, #1
 800d020:	61fb      	str	r3, [r7, #28]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d9e9      	bls.n	800cffc <prvInitialiseNewTask+0x64>
 800d028:	e000      	b.n	800d02c <prvInitialiseNewTask+0x94>
			{
				break;
 800d02a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d034:	e003      	b.n	800d03e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	2200      	movs	r2, #0
 800d03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	2b37      	cmp	r3, #55	; 0x37
 800d042:	d901      	bls.n	800d048 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d044:	2337      	movs	r3, #55	; 0x37
 800d046:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d052:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	2200      	movs	r2, #0
 800d058:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05c:	3304      	adds	r3, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fc08 	bl	800b874 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	3318      	adds	r3, #24
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe fc03 	bl	800b874 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d082:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08e:	2200      	movs	r2, #0
 800d090:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	3354      	adds	r3, #84	; 0x54
 800d098:	224c      	movs	r2, #76	; 0x4c
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f01d fe1e 	bl	802acde <memset>
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	4a0c      	ldr	r2, [pc, #48]	; (800d0d8 <prvInitialiseNewTask+0x140>)
 800d0a6:	659a      	str	r2, [r3, #88]	; 0x58
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0aa:	4a0c      	ldr	r2, [pc, #48]	; (800d0dc <prvInitialiseNewTask+0x144>)
 800d0ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b0:	4a0b      	ldr	r2, [pc, #44]	; (800d0e0 <prvInitialiseNewTask+0x148>)
 800d0b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0b4:	683a      	ldr	r2, [r7, #0]
 800d0b6:	68f9      	ldr	r1, [r7, #12]
 800d0b8:	69b8      	ldr	r0, [r7, #24]
 800d0ba:	f7fe fc6f 	bl	800b99c <pxPortInitialiseStack>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0d0:	bf00      	nop
 800d0d2:	3720      	adds	r7, #32
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	2400b9c8 	.word	0x2400b9c8
 800d0dc:	2400ba30 	.word	0x2400ba30
 800d0e0:	2400ba98 	.word	0x2400ba98

0800d0e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0ec:	f7fe fd82 	bl	800bbf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0f0:	4b2d      	ldr	r3, [pc, #180]	; (800d1a8 <prvAddNewTaskToReadyList+0xc4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	4a2c      	ldr	r2, [pc, #176]	; (800d1a8 <prvAddNewTaskToReadyList+0xc4>)
 800d0f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0fa:	4b2c      	ldr	r3, [pc, #176]	; (800d1ac <prvAddNewTaskToReadyList+0xc8>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d102:	4a2a      	ldr	r2, [pc, #168]	; (800d1ac <prvAddNewTaskToReadyList+0xc8>)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d108:	4b27      	ldr	r3, [pc, #156]	; (800d1a8 <prvAddNewTaskToReadyList+0xc4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d110      	bne.n	800d132 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d110:	f000 fc26 	bl	800d960 <prvInitialiseTaskLists>
 800d114:	e00d      	b.n	800d132 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d116:	4b26      	ldr	r3, [pc, #152]	; (800d1b0 <prvAddNewTaskToReadyList+0xcc>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d109      	bne.n	800d132 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d11e:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <prvAddNewTaskToReadyList+0xc8>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d128:	429a      	cmp	r2, r3
 800d12a:	d802      	bhi.n	800d132 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d12c:	4a1f      	ldr	r2, [pc, #124]	; (800d1ac <prvAddNewTaskToReadyList+0xc8>)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d132:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <prvAddNewTaskToReadyList+0xd0>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3301      	adds	r3, #1
 800d138:	4a1e      	ldr	r2, [pc, #120]	; (800d1b4 <prvAddNewTaskToReadyList+0xd0>)
 800d13a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d13c:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <prvAddNewTaskToReadyList+0xd0>)
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d148:	4b1b      	ldr	r3, [pc, #108]	; (800d1b8 <prvAddNewTaskToReadyList+0xd4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d903      	bls.n	800d158 <prvAddNewTaskToReadyList+0x74>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d154:	4a18      	ldr	r2, [pc, #96]	; (800d1b8 <prvAddNewTaskToReadyList+0xd4>)
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d15c:	4613      	mov	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4a15      	ldr	r2, [pc, #84]	; (800d1bc <prvAddNewTaskToReadyList+0xd8>)
 800d166:	441a      	add	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	3304      	adds	r3, #4
 800d16c:	4619      	mov	r1, r3
 800d16e:	4610      	mov	r0, r2
 800d170:	f7fe fb8d 	bl	800b88e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d174:	f7fe fd6e 	bl	800bc54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d178:	4b0d      	ldr	r3, [pc, #52]	; (800d1b0 <prvAddNewTaskToReadyList+0xcc>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00e      	beq.n	800d19e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <prvAddNewTaskToReadyList+0xc8>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d207      	bcs.n	800d19e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <prvAddNewTaskToReadyList+0xdc>)
 800d190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	2400ab68 	.word	0x2400ab68
 800d1ac:	2400a694 	.word	0x2400a694
 800d1b0:	2400ab74 	.word	0x2400ab74
 800d1b4:	2400ab84 	.word	0x2400ab84
 800d1b8:	2400ab70 	.word	0x2400ab70
 800d1bc:	2400a698 	.word	0x2400a698
 800d1c0:	e000ed04 	.word	0xe000ed04

0800d1c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d017      	beq.n	800d206 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1d6:	4b13      	ldr	r3, [pc, #76]	; (800d224 <vTaskDelay+0x60>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00a      	beq.n	800d1f4 <vTaskDelay+0x30>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60bb      	str	r3, [r7, #8]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1f4:	f000 f88a 	bl	800d30c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fdfc 	bl	800ddf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d200:	f000 f892 	bl	800d328 <xTaskResumeAll>
 800d204:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d107      	bne.n	800d21c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d20c:	4b06      	ldr	r3, [pc, #24]	; (800d228 <vTaskDelay+0x64>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d21c:	bf00      	nop
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	2400ab90 	.word	0x2400ab90
 800d228:	e000ed04 	.word	0xe000ed04

0800d22c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08a      	sub	sp, #40	; 0x28
 800d230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d232:	2300      	movs	r3, #0
 800d234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d23a:	463a      	mov	r2, r7
 800d23c:	1d39      	adds	r1, r7, #4
 800d23e:	f107 0308 	add.w	r3, r7, #8
 800d242:	4618      	mov	r0, r3
 800d244:	f7fe f8d8 	bl	800b3f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	9202      	str	r2, [sp, #8]
 800d250:	9301      	str	r3, [sp, #4]
 800d252:	2300      	movs	r3, #0
 800d254:	9300      	str	r3, [sp, #0]
 800d256:	2300      	movs	r3, #0
 800d258:	460a      	mov	r2, r1
 800d25a:	4924      	ldr	r1, [pc, #144]	; (800d2ec <vTaskStartScheduler+0xc0>)
 800d25c:	4824      	ldr	r0, [pc, #144]	; (800d2f0 <vTaskStartScheduler+0xc4>)
 800d25e:	f7ff fdf9 	bl	800ce54 <xTaskCreateStatic>
 800d262:	4603      	mov	r3, r0
 800d264:	4a23      	ldr	r2, [pc, #140]	; (800d2f4 <vTaskStartScheduler+0xc8>)
 800d266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d268:	4b22      	ldr	r3, [pc, #136]	; (800d2f4 <vTaskStartScheduler+0xc8>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d270:	2301      	movs	r3, #1
 800d272:	617b      	str	r3, [r7, #20]
 800d274:	e001      	b.n	800d27a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d276:	2300      	movs	r3, #0
 800d278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d102      	bne.n	800d286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d280:	f000 fe0e 	bl	800dea0 <xTimerCreateTimerTask>
 800d284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d11b      	bne.n	800d2c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	f383 8811 	msr	BASEPRI, r3
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	f3bf 8f4f 	dsb	sy
 800d29c:	613b      	str	r3, [r7, #16]
}
 800d29e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2a0:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <vTaskStartScheduler+0xcc>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3354      	adds	r3, #84	; 0x54
 800d2a6:	4a15      	ldr	r2, [pc, #84]	; (800d2fc <vTaskStartScheduler+0xd0>)
 800d2a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2aa:	4b15      	ldr	r3, [pc, #84]	; (800d300 <vTaskStartScheduler+0xd4>)
 800d2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2b2:	4b14      	ldr	r3, [pc, #80]	; (800d304 <vTaskStartScheduler+0xd8>)
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2b8:	4b13      	ldr	r3, [pc, #76]	; (800d308 <vTaskStartScheduler+0xdc>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2be:	f7fe fbf7 	bl	800bab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2c2:	e00e      	b.n	800d2e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ca:	d10a      	bne.n	800d2e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	60fb      	str	r3, [r7, #12]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <vTaskStartScheduler+0xb4>
}
 800d2e2:	bf00      	nop
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	0802c724 	.word	0x0802c724
 800d2f0:	0800d931 	.word	0x0800d931
 800d2f4:	2400ab8c 	.word	0x2400ab8c
 800d2f8:	2400a694 	.word	0x2400a694
 800d2fc:	24000124 	.word	0x24000124
 800d300:	2400ab88 	.word	0x2400ab88
 800d304:	2400ab74 	.word	0x2400ab74
 800d308:	2400ab6c 	.word	0x2400ab6c

0800d30c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d310:	4b04      	ldr	r3, [pc, #16]	; (800d324 <vTaskSuspendAll+0x18>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3301      	adds	r3, #1
 800d316:	4a03      	ldr	r2, [pc, #12]	; (800d324 <vTaskSuspendAll+0x18>)
 800d318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d31a:	bf00      	nop
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	2400ab90 	.word	0x2400ab90

0800d328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d336:	4b42      	ldr	r3, [pc, #264]	; (800d440 <xTaskResumeAll+0x118>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10a      	bne.n	800d354 <xTaskResumeAll+0x2c>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	603b      	str	r3, [r7, #0]
}
 800d350:	bf00      	nop
 800d352:	e7fe      	b.n	800d352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d354:	f7fe fc4e 	bl	800bbf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d358:	4b39      	ldr	r3, [pc, #228]	; (800d440 <xTaskResumeAll+0x118>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	4a38      	ldr	r2, [pc, #224]	; (800d440 <xTaskResumeAll+0x118>)
 800d360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d362:	4b37      	ldr	r3, [pc, #220]	; (800d440 <xTaskResumeAll+0x118>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d162      	bne.n	800d430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d36a:	4b36      	ldr	r3, [pc, #216]	; (800d444 <xTaskResumeAll+0x11c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d05e      	beq.n	800d430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d372:	e02f      	b.n	800d3d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d374:	4b34      	ldr	r3, [pc, #208]	; (800d448 <xTaskResumeAll+0x120>)
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	3318      	adds	r3, #24
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fae1 	bl	800b948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3304      	adds	r3, #4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fadc 	bl	800b948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d394:	4b2d      	ldr	r3, [pc, #180]	; (800d44c <xTaskResumeAll+0x124>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d903      	bls.n	800d3a4 <xTaskResumeAll+0x7c>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	4a2a      	ldr	r2, [pc, #168]	; (800d44c <xTaskResumeAll+0x124>)
 800d3a2:	6013      	str	r3, [r2, #0]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4a27      	ldr	r2, [pc, #156]	; (800d450 <xTaskResumeAll+0x128>)
 800d3b2:	441a      	add	r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f7fe fa67 	bl	800b88e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c4:	4b23      	ldr	r3, [pc, #140]	; (800d454 <xTaskResumeAll+0x12c>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d302      	bcc.n	800d3d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3ce:	4b22      	ldr	r3, [pc, #136]	; (800d458 <xTaskResumeAll+0x130>)
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3d4:	4b1c      	ldr	r3, [pc, #112]	; (800d448 <xTaskResumeAll+0x120>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1cb      	bne.n	800d374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d001      	beq.n	800d3e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3e2:	f000 fb5f 	bl	800daa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3e6:	4b1d      	ldr	r3, [pc, #116]	; (800d45c <xTaskResumeAll+0x134>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d010      	beq.n	800d414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3f2:	f000 f847 	bl	800d484 <xTaskIncrementTick>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d3fc:	4b16      	ldr	r3, [pc, #88]	; (800d458 <xTaskResumeAll+0x130>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3b01      	subs	r3, #1
 800d406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1f1      	bne.n	800d3f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d40e:	4b13      	ldr	r3, [pc, #76]	; (800d45c <xTaskResumeAll+0x134>)
 800d410:	2200      	movs	r2, #0
 800d412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d414:	4b10      	ldr	r3, [pc, #64]	; (800d458 <xTaskResumeAll+0x130>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d009      	beq.n	800d430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d41c:	2301      	movs	r3, #1
 800d41e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d420:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <xTaskResumeAll+0x138>)
 800d422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d430:	f7fe fc10 	bl	800bc54 <vPortExitCritical>

	return xAlreadyYielded;
 800d434:	68bb      	ldr	r3, [r7, #8]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	2400ab90 	.word	0x2400ab90
 800d444:	2400ab68 	.word	0x2400ab68
 800d448:	2400ab28 	.word	0x2400ab28
 800d44c:	2400ab70 	.word	0x2400ab70
 800d450:	2400a698 	.word	0x2400a698
 800d454:	2400a694 	.word	0x2400a694
 800d458:	2400ab7c 	.word	0x2400ab7c
 800d45c:	2400ab78 	.word	0x2400ab78
 800d460:	e000ed04 	.word	0xe000ed04

0800d464 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <xTaskGetTickCount+0x1c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d470:	687b      	ldr	r3, [r7, #4]
}
 800d472:	4618      	mov	r0, r3
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	2400ab6c 	.word	0x2400ab6c

0800d484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d48a:	2300      	movs	r3, #0
 800d48c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d48e:	4b4f      	ldr	r3, [pc, #316]	; (800d5cc <xTaskIncrementTick+0x148>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f040 808f 	bne.w	800d5b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d498:	4b4d      	ldr	r3, [pc, #308]	; (800d5d0 <xTaskIncrementTick+0x14c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3301      	adds	r3, #1
 800d49e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4a0:	4a4b      	ldr	r2, [pc, #300]	; (800d5d0 <xTaskIncrementTick+0x14c>)
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d120      	bne.n	800d4ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4ac:	4b49      	ldr	r3, [pc, #292]	; (800d5d4 <xTaskIncrementTick+0x150>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <xTaskIncrementTick+0x48>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	603b      	str	r3, [r7, #0]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <xTaskIncrementTick+0x46>
 800d4cc:	4b41      	ldr	r3, [pc, #260]	; (800d5d4 <xTaskIncrementTick+0x150>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	4b41      	ldr	r3, [pc, #260]	; (800d5d8 <xTaskIncrementTick+0x154>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	4a3f      	ldr	r2, [pc, #252]	; (800d5d4 <xTaskIncrementTick+0x150>)
 800d4d8:	6013      	str	r3, [r2, #0]
 800d4da:	4a3f      	ldr	r2, [pc, #252]	; (800d5d8 <xTaskIncrementTick+0x154>)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6013      	str	r3, [r2, #0]
 800d4e0:	4b3e      	ldr	r3, [pc, #248]	; (800d5dc <xTaskIncrementTick+0x158>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	4a3d      	ldr	r2, [pc, #244]	; (800d5dc <xTaskIncrementTick+0x158>)
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	f000 fadb 	bl	800daa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4ee:	4b3c      	ldr	r3, [pc, #240]	; (800d5e0 <xTaskIncrementTick+0x15c>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d349      	bcc.n	800d58c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4f8:	4b36      	ldr	r3, [pc, #216]	; (800d5d4 <xTaskIncrementTick+0x150>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d104      	bne.n	800d50c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d502:	4b37      	ldr	r3, [pc, #220]	; (800d5e0 <xTaskIncrementTick+0x15c>)
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	601a      	str	r2, [r3, #0]
					break;
 800d50a:	e03f      	b.n	800d58c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	4b31      	ldr	r3, [pc, #196]	; (800d5d4 <xTaskIncrementTick+0x150>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	429a      	cmp	r2, r3
 800d522:	d203      	bcs.n	800d52c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d524:	4a2e      	ldr	r2, [pc, #184]	; (800d5e0 <xTaskIncrementTick+0x15c>)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d52a:	e02f      	b.n	800d58c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	3304      	adds	r3, #4
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe fa09 	bl	800b948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	3318      	adds	r3, #24
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe fa00 	bl	800b948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54c:	4b25      	ldr	r3, [pc, #148]	; (800d5e4 <xTaskIncrementTick+0x160>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	429a      	cmp	r2, r3
 800d552:	d903      	bls.n	800d55c <xTaskIncrementTick+0xd8>
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d558:	4a22      	ldr	r2, [pc, #136]	; (800d5e4 <xTaskIncrementTick+0x160>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4a1f      	ldr	r2, [pc, #124]	; (800d5e8 <xTaskIncrementTick+0x164>)
 800d56a:	441a      	add	r2, r3
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7fe f98b 	bl	800b88e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57c:	4b1b      	ldr	r3, [pc, #108]	; (800d5ec <xTaskIncrementTick+0x168>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	429a      	cmp	r2, r3
 800d584:	d3b8      	bcc.n	800d4f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d586:	2301      	movs	r3, #1
 800d588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d58a:	e7b5      	b.n	800d4f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d58c:	4b17      	ldr	r3, [pc, #92]	; (800d5ec <xTaskIncrementTick+0x168>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d592:	4915      	ldr	r1, [pc, #84]	; (800d5e8 <xTaskIncrementTick+0x164>)
 800d594:	4613      	mov	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4413      	add	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	440b      	add	r3, r1
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d901      	bls.n	800d5a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5a8:	4b11      	ldr	r3, [pc, #68]	; (800d5f0 <xTaskIncrementTick+0x16c>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d007      	beq.n	800d5c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	617b      	str	r3, [r7, #20]
 800d5b4:	e004      	b.n	800d5c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5b6:	4b0f      	ldr	r3, [pc, #60]	; (800d5f4 <xTaskIncrementTick+0x170>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	4a0d      	ldr	r2, [pc, #52]	; (800d5f4 <xTaskIncrementTick+0x170>)
 800d5be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5c0:	697b      	ldr	r3, [r7, #20]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2400ab90 	.word	0x2400ab90
 800d5d0:	2400ab6c 	.word	0x2400ab6c
 800d5d4:	2400ab20 	.word	0x2400ab20
 800d5d8:	2400ab24 	.word	0x2400ab24
 800d5dc:	2400ab80 	.word	0x2400ab80
 800d5e0:	2400ab88 	.word	0x2400ab88
 800d5e4:	2400ab70 	.word	0x2400ab70
 800d5e8:	2400a698 	.word	0x2400a698
 800d5ec:	2400a694 	.word	0x2400a694
 800d5f0:	2400ab7c 	.word	0x2400ab7c
 800d5f4:	2400ab78 	.word	0x2400ab78

0800d5f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5fe:	4b2a      	ldr	r3, [pc, #168]	; (800d6a8 <vTaskSwitchContext+0xb0>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d606:	4b29      	ldr	r3, [pc, #164]	; (800d6ac <vTaskSwitchContext+0xb4>)
 800d608:	2201      	movs	r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d60c:	e046      	b.n	800d69c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d60e:	4b27      	ldr	r3, [pc, #156]	; (800d6ac <vTaskSwitchContext+0xb4>)
 800d610:	2200      	movs	r2, #0
 800d612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d614:	4b26      	ldr	r3, [pc, #152]	; (800d6b0 <vTaskSwitchContext+0xb8>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e010      	b.n	800d63e <vTaskSwitchContext+0x46>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <vTaskSwitchContext+0x40>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	f383 8811 	msr	BASEPRI, r3
 800d62a:	f3bf 8f6f 	isb	sy
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	607b      	str	r3, [r7, #4]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <vTaskSwitchContext+0x3e>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	491d      	ldr	r1, [pc, #116]	; (800d6b4 <vTaskSwitchContext+0xbc>)
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	440b      	add	r3, r1
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0e4      	beq.n	800d61c <vTaskSwitchContext+0x24>
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	4613      	mov	r3, r2
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	4413      	add	r3, r2
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	4a15      	ldr	r2, [pc, #84]	; (800d6b4 <vTaskSwitchContext+0xbc>)
 800d65e:	4413      	add	r3, r2
 800d660:	60bb      	str	r3, [r7, #8]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	685a      	ldr	r2, [r3, #4]
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	3308      	adds	r3, #8
 800d674:	429a      	cmp	r2, r3
 800d676:	d104      	bne.n	800d682 <vTaskSwitchContext+0x8a>
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	605a      	str	r2, [r3, #4]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	4a0b      	ldr	r2, [pc, #44]	; (800d6b8 <vTaskSwitchContext+0xc0>)
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	4a08      	ldr	r2, [pc, #32]	; (800d6b0 <vTaskSwitchContext+0xb8>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d692:	4b09      	ldr	r3, [pc, #36]	; (800d6b8 <vTaskSwitchContext+0xc0>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3354      	adds	r3, #84	; 0x54
 800d698:	4a08      	ldr	r2, [pc, #32]	; (800d6bc <vTaskSwitchContext+0xc4>)
 800d69a:	6013      	str	r3, [r2, #0]
}
 800d69c:	bf00      	nop
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	2400ab90 	.word	0x2400ab90
 800d6ac:	2400ab7c 	.word	0x2400ab7c
 800d6b0:	2400ab70 	.word	0x2400ab70
 800d6b4:	2400a698 	.word	0x2400a698
 800d6b8:	2400a694 	.word	0x2400a694
 800d6bc:	24000124 	.word	0x24000124

0800d6c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10a      	bne.n	800d6e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	60fb      	str	r3, [r7, #12]
}
 800d6e2:	bf00      	nop
 800d6e4:	e7fe      	b.n	800d6e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6e6:	4b07      	ldr	r3, [pc, #28]	; (800d704 <vTaskPlaceOnEventList+0x44>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3318      	adds	r3, #24
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7fe f8f1 	bl	800b8d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	6838      	ldr	r0, [r7, #0]
 800d6f8:	f000 fb7e 	bl	800ddf8 <prvAddCurrentTaskToDelayedList>
}
 800d6fc:	bf00      	nop
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}
 800d704:	2400a694 	.word	0x2400a694

0800d708 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10a      	bne.n	800d730 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	617b      	str	r3, [r7, #20]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <vTaskPlaceOnEventListRestricted+0x54>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3318      	adds	r3, #24
 800d736:	4619      	mov	r1, r3
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f7fe f8a8 	bl	800b88e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d002      	beq.n	800d74a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d744:	f04f 33ff 	mov.w	r3, #4294967295
 800d748:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	68b8      	ldr	r0, [r7, #8]
 800d74e:	f000 fb53 	bl	800ddf8 <prvAddCurrentTaskToDelayedList>
	}
 800d752:	bf00      	nop
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	2400a694 	.word	0x2400a694

0800d760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10a      	bne.n	800d78c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	60fb      	str	r3, [r7, #12]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	3318      	adds	r3, #24
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe f8d9 	bl	800b948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d796:	4b1e      	ldr	r3, [pc, #120]	; (800d810 <xTaskRemoveFromEventList+0xb0>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d11d      	bne.n	800d7da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe f8d0 	bl	800b948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ac:	4b19      	ldr	r3, [pc, #100]	; (800d814 <xTaskRemoveFromEventList+0xb4>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d903      	bls.n	800d7bc <xTaskRemoveFromEventList+0x5c>
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b8:	4a16      	ldr	r2, [pc, #88]	; (800d814 <xTaskRemoveFromEventList+0xb4>)
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	009b      	lsls	r3, r3, #2
 800d7c8:	4a13      	ldr	r2, [pc, #76]	; (800d818 <xTaskRemoveFromEventList+0xb8>)
 800d7ca:	441a      	add	r2, r3
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	f7fe f85b 	bl	800b88e <vListInsertEnd>
 800d7d8:	e005      	b.n	800d7e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	3318      	adds	r3, #24
 800d7de:	4619      	mov	r1, r3
 800d7e0:	480e      	ldr	r0, [pc, #56]	; (800d81c <xTaskRemoveFromEventList+0xbc>)
 800d7e2:	f7fe f854 	bl	800b88e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	4b0d      	ldr	r3, [pc, #52]	; (800d820 <xTaskRemoveFromEventList+0xc0>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d905      	bls.n	800d800 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7f8:	4b0a      	ldr	r3, [pc, #40]	; (800d824 <xTaskRemoveFromEventList+0xc4>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	e001      	b.n	800d804 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d800:	2300      	movs	r3, #0
 800d802:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d804:	697b      	ldr	r3, [r7, #20]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	2400ab90 	.word	0x2400ab90
 800d814:	2400ab70 	.word	0x2400ab70
 800d818:	2400a698 	.word	0x2400a698
 800d81c:	2400ab28 	.word	0x2400ab28
 800d820:	2400a694 	.word	0x2400a694
 800d824:	2400ab7c 	.word	0x2400ab7c

0800d828 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d830:	4b06      	ldr	r3, [pc, #24]	; (800d84c <vTaskInternalSetTimeOutState+0x24>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d838:	4b05      	ldr	r3, [pc, #20]	; (800d850 <vTaskInternalSetTimeOutState+0x28>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	605a      	str	r2, [r3, #4]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	2400ab80 	.word	0x2400ab80
 800d850:	2400ab6c 	.word	0x2400ab6c

0800d854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b088      	sub	sp, #32
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	613b      	str	r3, [r7, #16]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	60fb      	str	r3, [r7, #12]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d896:	f7fe f9ad 	bl	800bbf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d89a:	4b1d      	ldr	r3, [pc, #116]	; (800d910 <xTaskCheckForTimeOut+0xbc>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	69ba      	ldr	r2, [r7, #24]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b2:	d102      	bne.n	800d8ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	61fb      	str	r3, [r7, #28]
 800d8b8:	e023      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <xTaskCheckForTimeOut+0xc0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d007      	beq.n	800d8d6 <xTaskCheckForTimeOut+0x82>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	69ba      	ldr	r2, [r7, #24]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d302      	bcc.n	800d8d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	61fb      	str	r3, [r7, #28]
 800d8d4:	e015      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d20b      	bcs.n	800d8f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ff9b 	bl	800d828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61fb      	str	r3, [r7, #28]
 800d8f6:	e004      	b.n	800d902 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8fe:	2301      	movs	r3, #1
 800d900:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d902:	f7fe f9a7 	bl	800bc54 <vPortExitCritical>

	return xReturn;
 800d906:	69fb      	ldr	r3, [r7, #28]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3720      	adds	r7, #32
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	2400ab6c 	.word	0x2400ab6c
 800d914:	2400ab80 	.word	0x2400ab80

0800d918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <vTaskMissedYield+0x14>)
 800d91e:	2201      	movs	r2, #1
 800d920:	601a      	str	r2, [r3, #0]
}
 800d922:	bf00      	nop
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	2400ab7c 	.word	0x2400ab7c

0800d930 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d938:	f000 f852 	bl	800d9e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d93c:	4b06      	ldr	r3, [pc, #24]	; (800d958 <prvIdleTask+0x28>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d9f9      	bls.n	800d938 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d944:	4b05      	ldr	r3, [pc, #20]	; (800d95c <prvIdleTask+0x2c>)
 800d946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94a:	601a      	str	r2, [r3, #0]
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d954:	e7f0      	b.n	800d938 <prvIdleTask+0x8>
 800d956:	bf00      	nop
 800d958:	2400a698 	.word	0x2400a698
 800d95c:	e000ed04 	.word	0xe000ed04

0800d960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d966:	2300      	movs	r3, #0
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	e00c      	b.n	800d986 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4a12      	ldr	r2, [pc, #72]	; (800d9c0 <prvInitialiseTaskLists+0x60>)
 800d978:	4413      	add	r3, r2
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fd ff5a 	bl	800b834 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3301      	adds	r3, #1
 800d984:	607b      	str	r3, [r7, #4]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b37      	cmp	r3, #55	; 0x37
 800d98a:	d9ef      	bls.n	800d96c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d98c:	480d      	ldr	r0, [pc, #52]	; (800d9c4 <prvInitialiseTaskLists+0x64>)
 800d98e:	f7fd ff51 	bl	800b834 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d992:	480d      	ldr	r0, [pc, #52]	; (800d9c8 <prvInitialiseTaskLists+0x68>)
 800d994:	f7fd ff4e 	bl	800b834 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d998:	480c      	ldr	r0, [pc, #48]	; (800d9cc <prvInitialiseTaskLists+0x6c>)
 800d99a:	f7fd ff4b 	bl	800b834 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d99e:	480c      	ldr	r0, [pc, #48]	; (800d9d0 <prvInitialiseTaskLists+0x70>)
 800d9a0:	f7fd ff48 	bl	800b834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9a4:	480b      	ldr	r0, [pc, #44]	; (800d9d4 <prvInitialiseTaskLists+0x74>)
 800d9a6:	f7fd ff45 	bl	800b834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <prvInitialiseTaskLists+0x78>)
 800d9ac:	4a05      	ldr	r2, [pc, #20]	; (800d9c4 <prvInitialiseTaskLists+0x64>)
 800d9ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <prvInitialiseTaskLists+0x7c>)
 800d9b2:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <prvInitialiseTaskLists+0x68>)
 800d9b4:	601a      	str	r2, [r3, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	2400a698 	.word	0x2400a698
 800d9c4:	2400aaf8 	.word	0x2400aaf8
 800d9c8:	2400ab0c 	.word	0x2400ab0c
 800d9cc:	2400ab28 	.word	0x2400ab28
 800d9d0:	2400ab3c 	.word	0x2400ab3c
 800d9d4:	2400ab54 	.word	0x2400ab54
 800d9d8:	2400ab20 	.word	0x2400ab20
 800d9dc:	2400ab24 	.word	0x2400ab24

0800d9e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9e6:	e019      	b.n	800da1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9e8:	f7fe f904 	bl	800bbf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ec:	4b10      	ldr	r3, [pc, #64]	; (800da30 <prvCheckTasksWaitingTermination+0x50>)
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fd ffa5 	bl	800b948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <prvCheckTasksWaitingTermination+0x54>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3b01      	subs	r3, #1
 800da04:	4a0b      	ldr	r2, [pc, #44]	; (800da34 <prvCheckTasksWaitingTermination+0x54>)
 800da06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da08:	4b0b      	ldr	r3, [pc, #44]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	4a0a      	ldr	r2, [pc, #40]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da12:	f7fe f91f 	bl	800bc54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f810 	bl	800da3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da1c:	4b06      	ldr	r3, [pc, #24]	; (800da38 <prvCheckTasksWaitingTermination+0x58>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d1e1      	bne.n	800d9e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	2400ab3c 	.word	0x2400ab3c
 800da34:	2400ab68 	.word	0x2400ab68
 800da38:	2400ab50 	.word	0x2400ab50

0800da3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3354      	adds	r3, #84	; 0x54
 800da48:	4618      	mov	r0, r3
 800da4a:	f01d f991 	bl	802ad70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800da54:	2b00      	cmp	r3, #0
 800da56:	d108      	bne.n	800da6a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fd fdcb 	bl	800b5f8 <vPortFree>
				vPortFree( pxTCB );
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7fd fdc8 	bl	800b5f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da68:	e018      	b.n	800da9c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800da70:	2b01      	cmp	r3, #1
 800da72:	d103      	bne.n	800da7c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7fd fdbf 	bl	800b5f8 <vPortFree>
	}
 800da7a:	e00f      	b.n	800da9c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800da82:	2b02      	cmp	r3, #2
 800da84:	d00a      	beq.n	800da9c <prvDeleteTCB+0x60>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	60fb      	str	r3, [r7, #12]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <prvDeleteTCB+0x5e>
	}
 800da9c:	bf00      	nop
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daaa:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <prvResetNextTaskUnblockTime+0x38>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d104      	bne.n	800dabe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dab4:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <prvResetNextTaskUnblockTime+0x3c>)
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295
 800daba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dabc:	e008      	b.n	800dad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dabe:	4b07      	ldr	r3, [pc, #28]	; (800dadc <prvResetNextTaskUnblockTime+0x38>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	68db      	ldr	r3, [r3, #12]
 800dac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	4a04      	ldr	r2, [pc, #16]	; (800dae0 <prvResetNextTaskUnblockTime+0x3c>)
 800dace:	6013      	str	r3, [r2, #0]
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	2400ab20 	.word	0x2400ab20
 800dae0:	2400ab88 	.word	0x2400ab88

0800dae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800daea:	4b0b      	ldr	r3, [pc, #44]	; (800db18 <xTaskGetSchedulerState+0x34>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d102      	bne.n	800daf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daf2:	2301      	movs	r3, #1
 800daf4:	607b      	str	r3, [r7, #4]
 800daf6:	e008      	b.n	800db0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf8:	4b08      	ldr	r3, [pc, #32]	; (800db1c <xTaskGetSchedulerState+0x38>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db00:	2302      	movs	r3, #2
 800db02:	607b      	str	r3, [r7, #4]
 800db04:	e001      	b.n	800db0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db06:	2300      	movs	r3, #0
 800db08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db0a:	687b      	ldr	r3, [r7, #4]
	}
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	2400ab74 	.word	0x2400ab74
 800db1c:	2400ab90 	.word	0x2400ab90

0800db20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db2c:	2300      	movs	r3, #0
 800db2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d051      	beq.n	800dbda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3a:	4b2a      	ldr	r3, [pc, #168]	; (800dbe4 <xTaskPriorityInherit+0xc4>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	429a      	cmp	r2, r3
 800db42:	d241      	bcs.n	800dbc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	db06      	blt.n	800db5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4c:	4b25      	ldr	r3, [pc, #148]	; (800dbe4 <xTaskPriorityInherit+0xc4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	6959      	ldr	r1, [r3, #20]
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	4613      	mov	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4413      	add	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4a1f      	ldr	r2, [pc, #124]	; (800dbe8 <xTaskPriorityInherit+0xc8>)
 800db6c:	4413      	add	r3, r2
 800db6e:	4299      	cmp	r1, r3
 800db70:	d122      	bne.n	800dbb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	3304      	adds	r3, #4
 800db76:	4618      	mov	r0, r3
 800db78:	f7fd fee6 	bl	800b948 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db7c:	4b19      	ldr	r3, [pc, #100]	; (800dbe4 <xTaskPriorityInherit+0xc4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8a:	4b18      	ldr	r3, [pc, #96]	; (800dbec <xTaskPriorityInherit+0xcc>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d903      	bls.n	800db9a <xTaskPriorityInherit+0x7a>
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db96:	4a15      	ldr	r2, [pc, #84]	; (800dbec <xTaskPriorityInherit+0xcc>)
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	4613      	mov	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4a10      	ldr	r2, [pc, #64]	; (800dbe8 <xTaskPriorityInherit+0xc8>)
 800dba8:	441a      	add	r2, r3
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	3304      	adds	r3, #4
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f7fd fe6c 	bl	800b88e <vListInsertEnd>
 800dbb6:	e004      	b.n	800dbc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <xTaskPriorityInherit+0xc4>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e008      	b.n	800dbda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <xTaskPriorityInherit+0xc4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d201      	bcs.n	800dbda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbda:	68fb      	ldr	r3, [r7, #12]
	}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3710      	adds	r7, #16
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	2400a694 	.word	0x2400a694
 800dbe8:	2400a698 	.word	0x2400a698
 800dbec:	2400ab70 	.word	0x2400ab70

0800dbf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d056      	beq.n	800dcb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc06:	4b2e      	ldr	r3, [pc, #184]	; (800dcc0 <xTaskPriorityDisinherit+0xd0>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	693a      	ldr	r2, [r7, #16]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d00a      	beq.n	800dc26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	60fb      	str	r3, [r7, #12]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10a      	bne.n	800dc44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	60bb      	str	r3, [r7, #8]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc48:	1e5a      	subs	r2, r3, #1
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d02c      	beq.n	800dcb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d128      	bne.n	800dcb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	3304      	adds	r3, #4
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fe6e 	bl	800b948 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc84:	4b0f      	ldr	r3, [pc, #60]	; (800dcc4 <xTaskPriorityDisinherit+0xd4>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d903      	bls.n	800dc94 <xTaskPriorityDisinherit+0xa4>
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	4a0c      	ldr	r2, [pc, #48]	; (800dcc4 <xTaskPriorityDisinherit+0xd4>)
 800dc92:	6013      	str	r3, [r2, #0]
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc98:	4613      	mov	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4a09      	ldr	r2, [pc, #36]	; (800dcc8 <xTaskPriorityDisinherit+0xd8>)
 800dca2:	441a      	add	r2, r3
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	3304      	adds	r3, #4
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4610      	mov	r0, r2
 800dcac:	f7fd fdef 	bl	800b88e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcb4:	697b      	ldr	r3, [r7, #20]
	}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2400a694 	.word	0x2400a694
 800dcc4:	2400ab70 	.word	0x2400ab70
 800dcc8:	2400a698 	.word	0x2400a698

0800dccc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d06a      	beq.n	800ddba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10a      	bne.n	800dd02 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf0:	f383 8811 	msr	BASEPRI, r3
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	f3bf 8f4f 	dsb	sy
 800dcfc:	60fb      	str	r3, [r7, #12]
}
 800dcfe:	bf00      	nop
 800dd00:	e7fe      	b.n	800dd00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d902      	bls.n	800dd12 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	61fb      	str	r3, [r7, #28]
 800dd10:	e002      	b.n	800dd18 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd16:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd1c:	69fa      	ldr	r2, [r7, #28]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d04b      	beq.n	800ddba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d146      	bne.n	800ddba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd2c:	4b25      	ldr	r3, [pc, #148]	; (800ddc4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d10a      	bne.n	800dd4c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd3a:	f383 8811 	msr	BASEPRI, r3
 800dd3e:	f3bf 8f6f 	isb	sy
 800dd42:	f3bf 8f4f 	dsb	sy
 800dd46:	60bb      	str	r3, [r7, #8]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	69fa      	ldr	r2, [r7, #28]
 800dd56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	699b      	ldr	r3, [r3, #24]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	db04      	blt.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	6959      	ldr	r1, [r3, #20]
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	4613      	mov	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4a13      	ldr	r2, [pc, #76]	; (800ddc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd7a:	4413      	add	r3, r2
 800dd7c:	4299      	cmp	r1, r3
 800dd7e:	d11c      	bne.n	800ddba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7fd fddf 	bl	800b948 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8e:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d903      	bls.n	800dd9e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd9a:	4a0c      	ldr	r2, [pc, #48]	; (800ddcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4a07      	ldr	r2, [pc, #28]	; (800ddc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddac:	441a      	add	r2, r3
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	f7fd fd6a 	bl	800b88e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddba:	bf00      	nop
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2400a694 	.word	0x2400a694
 800ddc8:	2400a698 	.word	0x2400a698
 800ddcc:	2400ab70 	.word	0x2400ab70

0800ddd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ddd0:	b480      	push	{r7}
 800ddd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ddd4:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d004      	beq.n	800dde6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dde2:	3201      	adds	r2, #1
 800dde4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dde6:	4b03      	ldr	r3, [pc, #12]	; (800ddf4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dde8:	681b      	ldr	r3, [r3, #0]
	}
 800ddea:	4618      	mov	r0, r3
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	2400a694 	.word	0x2400a694

0800ddf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de02:	4b21      	ldr	r3, [pc, #132]	; (800de88 <prvAddCurrentTaskToDelayedList+0x90>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de08:	4b20      	ldr	r3, [pc, #128]	; (800de8c <prvAddCurrentTaskToDelayedList+0x94>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd fd9a 	bl	800b948 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d10a      	bne.n	800de32 <prvAddCurrentTaskToDelayedList+0x3a>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d007      	beq.n	800de32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de22:	4b1a      	ldr	r3, [pc, #104]	; (800de8c <prvAddCurrentTaskToDelayedList+0x94>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3304      	adds	r3, #4
 800de28:	4619      	mov	r1, r3
 800de2a:	4819      	ldr	r0, [pc, #100]	; (800de90 <prvAddCurrentTaskToDelayedList+0x98>)
 800de2c:	f7fd fd2f 	bl	800b88e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de30:	e026      	b.n	800de80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4413      	add	r3, r2
 800de38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de3a:	4b14      	ldr	r3, [pc, #80]	; (800de8c <prvAddCurrentTaskToDelayedList+0x94>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	429a      	cmp	r2, r3
 800de48:	d209      	bcs.n	800de5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de4a:	4b12      	ldr	r3, [pc, #72]	; (800de94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <prvAddCurrentTaskToDelayedList+0x94>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	3304      	adds	r3, #4
 800de54:	4619      	mov	r1, r3
 800de56:	4610      	mov	r0, r2
 800de58:	f7fd fd3d 	bl	800b8d6 <vListInsert>
}
 800de5c:	e010      	b.n	800de80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de5e:	4b0e      	ldr	r3, [pc, #56]	; (800de98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <prvAddCurrentTaskToDelayedList+0x94>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3304      	adds	r3, #4
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f7fd fd33 	bl	800b8d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de70:	4b0a      	ldr	r3, [pc, #40]	; (800de9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	429a      	cmp	r2, r3
 800de78:	d202      	bcs.n	800de80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de7a:	4a08      	ldr	r2, [pc, #32]	; (800de9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	6013      	str	r3, [r2, #0]
}
 800de80:	bf00      	nop
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	2400ab6c 	.word	0x2400ab6c
 800de8c:	2400a694 	.word	0x2400a694
 800de90:	2400ab54 	.word	0x2400ab54
 800de94:	2400ab24 	.word	0x2400ab24
 800de98:	2400ab20 	.word	0x2400ab20
 800de9c:	2400ab88 	.word	0x2400ab88

0800dea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08a      	sub	sp, #40	; 0x28
 800dea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800deaa:	f000 fb07 	bl	800e4bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800deae:	4b1c      	ldr	r3, [pc, #112]	; (800df20 <xTimerCreateTimerTask+0x80>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d021      	beq.n	800defa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800debe:	1d3a      	adds	r2, r7, #4
 800dec0:	f107 0108 	add.w	r1, r7, #8
 800dec4:	f107 030c 	add.w	r3, r7, #12
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd faaf 	bl	800b42c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	9202      	str	r2, [sp, #8]
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	2302      	movs	r3, #2
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	2300      	movs	r3, #0
 800dede:	460a      	mov	r2, r1
 800dee0:	4910      	ldr	r1, [pc, #64]	; (800df24 <xTimerCreateTimerTask+0x84>)
 800dee2:	4811      	ldr	r0, [pc, #68]	; (800df28 <xTimerCreateTimerTask+0x88>)
 800dee4:	f7fe ffb6 	bl	800ce54 <xTaskCreateStatic>
 800dee8:	4603      	mov	r3, r0
 800deea:	4a10      	ldr	r2, [pc, #64]	; (800df2c <xTimerCreateTimerTask+0x8c>)
 800deec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800deee:	4b0f      	ldr	r3, [pc, #60]	; (800df2c <xTimerCreateTimerTask+0x8c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800def6:	2301      	movs	r3, #1
 800def8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10a      	bne.n	800df16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	613b      	str	r3, [r7, #16]
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df16:	697b      	ldr	r3, [r7, #20]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3718      	adds	r7, #24
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	2400abc4 	.word	0x2400abc4
 800df24:	0802c72c 	.word	0x0802c72c
 800df28:	0800e065 	.word	0x0800e065
 800df2c:	2400abc8 	.word	0x2400abc8

0800df30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b08a      	sub	sp, #40	; 0x28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df3e:	2300      	movs	r3, #0
 800df40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	623b      	str	r3, [r7, #32]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df5e:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <xTimerGenericCommand+0x98>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d02a      	beq.n	800dfbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b05      	cmp	r3, #5
 800df76:	dc18      	bgt.n	800dfaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df78:	f7ff fdb4 	bl	800dae4 <xTaskGetSchedulerState>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d109      	bne.n	800df96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df82:	4b11      	ldr	r3, [pc, #68]	; (800dfc8 <xTimerGenericCommand+0x98>)
 800df84:	6818      	ldr	r0, [r3, #0]
 800df86:	f107 0110 	add.w	r1, r7, #16
 800df8a:	2300      	movs	r3, #0
 800df8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df8e:	f7fe f8fb 	bl	800c188 <xQueueGenericSend>
 800df92:	6278      	str	r0, [r7, #36]	; 0x24
 800df94:	e012      	b.n	800dfbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df96:	4b0c      	ldr	r3, [pc, #48]	; (800dfc8 <xTimerGenericCommand+0x98>)
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f107 0110 	add.w	r1, r7, #16
 800df9e:	2300      	movs	r3, #0
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f7fe f8f1 	bl	800c188 <xQueueGenericSend>
 800dfa6:	6278      	str	r0, [r7, #36]	; 0x24
 800dfa8:	e008      	b.n	800dfbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dfaa:	4b07      	ldr	r3, [pc, #28]	; (800dfc8 <xTimerGenericCommand+0x98>)
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f107 0110 	add.w	r1, r7, #16
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	f7fe f9e5 	bl	800c384 <xQueueGenericSendFromISR>
 800dfba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3728      	adds	r7, #40	; 0x28
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	2400abc4 	.word	0x2400abc4

0800dfcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af02      	add	r7, sp, #8
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfd6:	4b22      	ldr	r3, [pc, #136]	; (800e060 <prvProcessExpiredTimer+0x94>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	3304      	adds	r3, #4
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fd fcaf 	bl	800b948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d022      	beq.n	800e03e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	699a      	ldr	r2, [r3, #24]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	18d1      	adds	r1, r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	6978      	ldr	r0, [r7, #20]
 800e006:	f000 f8d1 	bl	800e1ac <prvInsertTimerInActiveList>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01f      	beq.n	800e050 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e010:	2300      	movs	r3, #0
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	2300      	movs	r3, #0
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	2100      	movs	r1, #0
 800e01a:	6978      	ldr	r0, [r7, #20]
 800e01c:	f7ff ff88 	bl	800df30 <xTimerGenericCommand>
 800e020:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d113      	bne.n	800e050 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	60fb      	str	r3, [r7, #12]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e044:	f023 0301 	bic.w	r3, r3, #1
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	6978      	ldr	r0, [r7, #20]
 800e056:	4798      	blx	r3
}
 800e058:	bf00      	nop
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2400abbc 	.word	0x2400abbc

0800e064 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e06c:	f107 0308 	add.w	r3, r7, #8
 800e070:	4618      	mov	r0, r3
 800e072:	f000 f857 	bl	800e124 <prvGetNextExpireTime>
 800e076:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	4619      	mov	r1, r3
 800e07c:	68f8      	ldr	r0, [r7, #12]
 800e07e:	f000 f803 	bl	800e088 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e082:	f000 f8d5 	bl	800e230 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e086:	e7f1      	b.n	800e06c <prvTimerTask+0x8>

0800e088 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e092:	f7ff f93b 	bl	800d30c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e096:	f107 0308 	add.w	r3, r7, #8
 800e09a:	4618      	mov	r0, r3
 800e09c:	f000 f866 	bl	800e16c <prvSampleTimeNow>
 800e0a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d130      	bne.n	800e10a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <prvProcessTimerOrBlockTask+0x3c>
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d806      	bhi.n	800e0c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e0b6:	f7ff f937 	bl	800d328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0ba:	68f9      	ldr	r1, [r7, #12]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff ff85 	bl	800dfcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e0c2:	e024      	b.n	800e10e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d008      	beq.n	800e0dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0ca:	4b13      	ldr	r3, [pc, #76]	; (800e118 <prvProcessTimerOrBlockTask+0x90>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <prvProcessTimerOrBlockTask+0x50>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e000      	b.n	800e0da <prvProcessTimerOrBlockTask+0x52>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0dc:	4b0f      	ldr	r3, [pc, #60]	; (800e11c <prvProcessTimerOrBlockTask+0x94>)
 800e0de:	6818      	ldr	r0, [r3, #0]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	1ad3      	subs	r3, r2, r3
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	f7fe fe7f 	bl	800cdec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0ee:	f7ff f91b 	bl	800d328 <xTaskResumeAll>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0f8:	4b09      	ldr	r3, [pc, #36]	; (800e120 <prvProcessTimerOrBlockTask+0x98>)
 800e0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fe:	601a      	str	r2, [r3, #0]
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	f3bf 8f6f 	isb	sy
}
 800e108:	e001      	b.n	800e10e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e10a:	f7ff f90d 	bl	800d328 <xTaskResumeAll>
}
 800e10e:	bf00      	nop
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	2400abc0 	.word	0x2400abc0
 800e11c:	2400abc4 	.word	0x2400abc4
 800e120:	e000ed04 	.word	0xe000ed04

0800e124 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e12c:	4b0e      	ldr	r3, [pc, #56]	; (800e168 <prvGetNextExpireTime+0x44>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d101      	bne.n	800e13a <prvGetNextExpireTime+0x16>
 800e136:	2201      	movs	r2, #1
 800e138:	e000      	b.n	800e13c <prvGetNextExpireTime+0x18>
 800e13a:	2200      	movs	r2, #0
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d105      	bne.n	800e154 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e148:	4b07      	ldr	r3, [pc, #28]	; (800e168 <prvGetNextExpireTime+0x44>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	60fb      	str	r3, [r7, #12]
 800e152:	e001      	b.n	800e158 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e154:	2300      	movs	r3, #0
 800e156:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e158:	68fb      	ldr	r3, [r7, #12]
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3714      	adds	r7, #20
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	2400abbc 	.word	0x2400abbc

0800e16c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e174:	f7ff f976 	bl	800d464 <xTaskGetTickCount>
 800e178:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e17a:	4b0b      	ldr	r3, [pc, #44]	; (800e1a8 <prvSampleTimeNow+0x3c>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	429a      	cmp	r2, r3
 800e182:	d205      	bcs.n	800e190 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e184:	f000 f936 	bl	800e3f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	e002      	b.n	800e196 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e196:	4a04      	ldr	r2, [pc, #16]	; (800e1a8 <prvSampleTimeNow+0x3c>)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e19c:	68fb      	ldr	r3, [r7, #12]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	2400abcc 	.word	0x2400abcc

0800e1ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b086      	sub	sp, #24
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1ca:	68ba      	ldr	r2, [r7, #8]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d812      	bhi.n	800e1f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	1ad2      	subs	r2, r2, r3
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d302      	bcc.n	800e1e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	e01b      	b.n	800e21e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1e6:	4b10      	ldr	r3, [pc, #64]	; (800e228 <prvInsertTimerInActiveList+0x7c>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7fd fb70 	bl	800b8d6 <vListInsert>
 800e1f6:	e012      	b.n	800e21e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d206      	bcs.n	800e20e <prvInsertTimerInActiveList+0x62>
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	d302      	bcc.n	800e20e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e208:	2301      	movs	r3, #1
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	e007      	b.n	800e21e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e20e:	4b07      	ldr	r3, [pc, #28]	; (800e22c <prvInsertTimerInActiveList+0x80>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	3304      	adds	r3, #4
 800e216:	4619      	mov	r1, r3
 800e218:	4610      	mov	r0, r2
 800e21a:	f7fd fb5c 	bl	800b8d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e21e:	697b      	ldr	r3, [r7, #20]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	2400abc0 	.word	0x2400abc0
 800e22c:	2400abbc 	.word	0x2400abbc

0800e230 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08e      	sub	sp, #56	; 0x38
 800e234:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e236:	e0ca      	b.n	800e3ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	da18      	bge.n	800e270 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e23e:	1d3b      	adds	r3, r7, #4
 800e240:	3304      	adds	r3, #4
 800e242:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d10a      	bne.n	800e260 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24e:	f383 8811 	msr	BASEPRI, r3
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	f3bf 8f4f 	dsb	sy
 800e25a:	61fb      	str	r3, [r7, #28]
}
 800e25c:	bf00      	nop
 800e25e:	e7fe      	b.n	800e25e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e266:	6850      	ldr	r0, [r2, #4]
 800e268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e26a:	6892      	ldr	r2, [r2, #8]
 800e26c:	4611      	mov	r1, r2
 800e26e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f2c0 80ab 	blt.w	800e3ce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	695b      	ldr	r3, [r3, #20]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d004      	beq.n	800e28e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e286:	3304      	adds	r3, #4
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fd fb5d 	bl	800b948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e28e:	463b      	mov	r3, r7
 800e290:	4618      	mov	r0, r3
 800e292:	f7ff ff6b 	bl	800e16c <prvSampleTimeNow>
 800e296:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b09      	cmp	r3, #9
 800e29c:	f200 8096 	bhi.w	800e3cc <prvProcessReceivedCommands+0x19c>
 800e2a0:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <prvProcessReceivedCommands+0x78>)
 800e2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a6:	bf00      	nop
 800e2a8:	0800e2d1 	.word	0x0800e2d1
 800e2ac:	0800e2d1 	.word	0x0800e2d1
 800e2b0:	0800e2d1 	.word	0x0800e2d1
 800e2b4:	0800e345 	.word	0x0800e345
 800e2b8:	0800e359 	.word	0x0800e359
 800e2bc:	0800e3a3 	.word	0x0800e3a3
 800e2c0:	0800e2d1 	.word	0x0800e2d1
 800e2c4:	0800e2d1 	.word	0x0800e2d1
 800e2c8:	0800e345 	.word	0x0800e345
 800e2cc:	0800e359 	.word	0x0800e359
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2d6:	f043 0301 	orr.w	r3, r3, #1
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	18d1      	adds	r1, r2, r3
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f0:	f7ff ff5c 	bl	800e1ac <prvInsertTimerInActiveList>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d069      	beq.n	800e3ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fc:	6a1b      	ldr	r3, [r3, #32]
 800e2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e300:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e308:	f003 0304 	and.w	r3, r3, #4
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d05e      	beq.n	800e3ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	441a      	add	r2, r3
 800e318:	2300      	movs	r3, #0
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	2300      	movs	r3, #0
 800e31e:	2100      	movs	r1, #0
 800e320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e322:	f7ff fe05 	bl	800df30 <xTimerGenericCommand>
 800e326:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d14f      	bne.n	800e3ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	61bb      	str	r3, [r7, #24]
}
 800e340:	bf00      	nop
 800e342:	e7fe      	b.n	800e342 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e34a:	f023 0301 	bic.w	r3, r3, #1
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e356:	e03a      	b.n	800e3ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e35e:	f043 0301 	orr.w	r3, r3, #1
 800e362:	b2da      	uxtb	r2, r3
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	617b      	str	r3, [r7, #20]
}
 800e38a:	bf00      	nop
 800e38c:	e7fe      	b.n	800e38c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e390:	699a      	ldr	r2, [r3, #24]
 800e392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e394:	18d1      	adds	r1, r2, r3
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e39a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e39c:	f7ff ff06 	bl	800e1ac <prvInsertTimerInActiveList>
					break;
 800e3a0:	e015      	b.n	800e3ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3a8:	f003 0302 	and.w	r3, r3, #2
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d103      	bne.n	800e3b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3b2:	f7fd f921 	bl	800b5f8 <vPortFree>
 800e3b6:	e00a      	b.n	800e3ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3be:	f023 0301 	bic.w	r3, r3, #1
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e3ca:	e000      	b.n	800e3ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e3cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3ce:	4b08      	ldr	r3, [pc, #32]	; (800e3f0 <prvProcessReceivedCommands+0x1c0>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	1d39      	adds	r1, r7, #4
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe f8fc 	bl	800c5d4 <xQueueReceive>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f47f af2a 	bne.w	800e238 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3e4:	bf00      	nop
 800e3e6:	bf00      	nop
 800e3e8:	3730      	adds	r7, #48	; 0x30
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	2400abc4 	.word	0x2400abc4

0800e3f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3fa:	e048      	b.n	800e48e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3fc:	4b2d      	ldr	r3, [pc, #180]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e406:	4b2b      	ldr	r3, [pc, #172]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3304      	adds	r3, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f7fd fa97 	bl	800b948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d02e      	beq.n	800e48e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	4413      	add	r3, r2
 800e438:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e43a:	68ba      	ldr	r2, [r7, #8]
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d90e      	bls.n	800e460 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	68ba      	ldr	r2, [r7, #8]
 800e446:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e44e:	4b19      	ldr	r3, [pc, #100]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3304      	adds	r3, #4
 800e456:	4619      	mov	r1, r3
 800e458:	4610      	mov	r0, r2
 800e45a:	f7fd fa3c 	bl	800b8d6 <vListInsert>
 800e45e:	e016      	b.n	800e48e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e460:	2300      	movs	r3, #0
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	2300      	movs	r3, #0
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	2100      	movs	r1, #0
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fd60 	bl	800df30 <xTimerGenericCommand>
 800e470:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d10a      	bne.n	800e48e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	603b      	str	r3, [r7, #0]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e48e:	4b09      	ldr	r3, [pc, #36]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1b1      	bne.n	800e3fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e498:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e49e:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <prvSwitchTimerLists+0xc4>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a04      	ldr	r2, [pc, #16]	; (800e4b4 <prvSwitchTimerLists+0xc0>)
 800e4a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e4a6:	4a04      	ldr	r2, [pc, #16]	; (800e4b8 <prvSwitchTimerLists+0xc4>)
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	6013      	str	r3, [r2, #0]
}
 800e4ac:	bf00      	nop
 800e4ae:	3718      	adds	r7, #24
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	2400abbc 	.word	0x2400abbc
 800e4b8:	2400abc0 	.word	0x2400abc0

0800e4bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e4c2:	f7fd fb97 	bl	800bbf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e4c6:	4b15      	ldr	r3, [pc, #84]	; (800e51c <prvCheckForValidListAndQueue+0x60>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d120      	bne.n	800e510 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4ce:	4814      	ldr	r0, [pc, #80]	; (800e520 <prvCheckForValidListAndQueue+0x64>)
 800e4d0:	f7fd f9b0 	bl	800b834 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4d4:	4813      	ldr	r0, [pc, #76]	; (800e524 <prvCheckForValidListAndQueue+0x68>)
 800e4d6:	f7fd f9ad 	bl	800b834 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4da:	4b13      	ldr	r3, [pc, #76]	; (800e528 <prvCheckForValidListAndQueue+0x6c>)
 800e4dc:	4a10      	ldr	r2, [pc, #64]	; (800e520 <prvCheckForValidListAndQueue+0x64>)
 800e4de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4e0:	4b12      	ldr	r3, [pc, #72]	; (800e52c <prvCheckForValidListAndQueue+0x70>)
 800e4e2:	4a10      	ldr	r2, [pc, #64]	; (800e524 <prvCheckForValidListAndQueue+0x68>)
 800e4e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	4b11      	ldr	r3, [pc, #68]	; (800e530 <prvCheckForValidListAndQueue+0x74>)
 800e4ec:	4a11      	ldr	r2, [pc, #68]	; (800e534 <prvCheckForValidListAndQueue+0x78>)
 800e4ee:	2110      	movs	r1, #16
 800e4f0:	200a      	movs	r0, #10
 800e4f2:	f7fd fd09 	bl	800bf08 <xQueueGenericCreateStatic>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	4a08      	ldr	r2, [pc, #32]	; (800e51c <prvCheckForValidListAndQueue+0x60>)
 800e4fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4fc:	4b07      	ldr	r3, [pc, #28]	; (800e51c <prvCheckForValidListAndQueue+0x60>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d005      	beq.n	800e510 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e504:	4b05      	ldr	r3, [pc, #20]	; (800e51c <prvCheckForValidListAndQueue+0x60>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	490b      	ldr	r1, [pc, #44]	; (800e538 <prvCheckForValidListAndQueue+0x7c>)
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe fc1a 	bl	800cd44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e510:	f7fd fba0 	bl	800bc54 <vPortExitCritical>
}
 800e514:	bf00      	nop
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	2400abc4 	.word	0x2400abc4
 800e520:	2400ab94 	.word	0x2400ab94
 800e524:	2400aba8 	.word	0x2400aba8
 800e528:	2400abbc 	.word	0x2400abbc
 800e52c:	2400abc0 	.word	0x2400abc0
 800e530:	2400ac70 	.word	0x2400ac70
 800e534:	2400abd0 	.word	0x2400abd0
 800e538:	0802c734 	.word	0x0802c734

0800e53c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e540:	4b3f      	ldr	r3, [pc, #252]	; (800e640 <SystemInit+0x104>)
 800e542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e546:	4a3e      	ldr	r2, [pc, #248]	; (800e640 <SystemInit+0x104>)
 800e548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e54c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e550:	4b3b      	ldr	r3, [pc, #236]	; (800e640 <SystemInit+0x104>)
 800e552:	691b      	ldr	r3, [r3, #16]
 800e554:	4a3a      	ldr	r2, [pc, #232]	; (800e640 <SystemInit+0x104>)
 800e556:	f043 0310 	orr.w	r3, r3, #16
 800e55a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e55c:	4b39      	ldr	r3, [pc, #228]	; (800e644 <SystemInit+0x108>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f003 030f 	and.w	r3, r3, #15
 800e564:	2b06      	cmp	r3, #6
 800e566:	d807      	bhi.n	800e578 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e568:	4b36      	ldr	r3, [pc, #216]	; (800e644 <SystemInit+0x108>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f023 030f 	bic.w	r3, r3, #15
 800e570:	4a34      	ldr	r2, [pc, #208]	; (800e644 <SystemInit+0x108>)
 800e572:	f043 0307 	orr.w	r3, r3, #7
 800e576:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e578:	4b33      	ldr	r3, [pc, #204]	; (800e648 <SystemInit+0x10c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a32      	ldr	r2, [pc, #200]	; (800e648 <SystemInit+0x10c>)
 800e57e:	f043 0301 	orr.w	r3, r3, #1
 800e582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e584:	4b30      	ldr	r3, [pc, #192]	; (800e648 <SystemInit+0x10c>)
 800e586:	2200      	movs	r2, #0
 800e588:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e58a:	4b2f      	ldr	r3, [pc, #188]	; (800e648 <SystemInit+0x10c>)
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	492e      	ldr	r1, [pc, #184]	; (800e648 <SystemInit+0x10c>)
 800e590:	4b2e      	ldr	r3, [pc, #184]	; (800e64c <SystemInit+0x110>)
 800e592:	4013      	ands	r3, r2
 800e594:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e596:	4b2b      	ldr	r3, [pc, #172]	; (800e644 <SystemInit+0x108>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 0308 	and.w	r3, r3, #8
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d007      	beq.n	800e5b2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e5a2:	4b28      	ldr	r3, [pc, #160]	; (800e644 <SystemInit+0x108>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f023 030f 	bic.w	r3, r3, #15
 800e5aa:	4a26      	ldr	r2, [pc, #152]	; (800e644 <SystemInit+0x108>)
 800e5ac:	f043 0307 	orr.w	r3, r3, #7
 800e5b0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e5b2:	4b25      	ldr	r3, [pc, #148]	; (800e648 <SystemInit+0x10c>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e5b8:	4b23      	ldr	r3, [pc, #140]	; (800e648 <SystemInit+0x10c>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e5be:	4b22      	ldr	r3, [pc, #136]	; (800e648 <SystemInit+0x10c>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e5c4:	4b20      	ldr	r3, [pc, #128]	; (800e648 <SystemInit+0x10c>)
 800e5c6:	4a22      	ldr	r2, [pc, #136]	; (800e650 <SystemInit+0x114>)
 800e5c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e5ca:	4b1f      	ldr	r3, [pc, #124]	; (800e648 <SystemInit+0x10c>)
 800e5cc:	4a21      	ldr	r2, [pc, #132]	; (800e654 <SystemInit+0x118>)
 800e5ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e5d0:	4b1d      	ldr	r3, [pc, #116]	; (800e648 <SystemInit+0x10c>)
 800e5d2:	4a21      	ldr	r2, [pc, #132]	; (800e658 <SystemInit+0x11c>)
 800e5d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e5d6:	4b1c      	ldr	r3, [pc, #112]	; (800e648 <SystemInit+0x10c>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e5dc:	4b1a      	ldr	r3, [pc, #104]	; (800e648 <SystemInit+0x10c>)
 800e5de:	4a1e      	ldr	r2, [pc, #120]	; (800e658 <SystemInit+0x11c>)
 800e5e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e5e2:	4b19      	ldr	r3, [pc, #100]	; (800e648 <SystemInit+0x10c>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e5e8:	4b17      	ldr	r3, [pc, #92]	; (800e648 <SystemInit+0x10c>)
 800e5ea:	4a1b      	ldr	r2, [pc, #108]	; (800e658 <SystemInit+0x11c>)
 800e5ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e5ee:	4b16      	ldr	r3, [pc, #88]	; (800e648 <SystemInit+0x10c>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e5f4:	4b14      	ldr	r3, [pc, #80]	; (800e648 <SystemInit+0x10c>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a13      	ldr	r2, [pc, #76]	; (800e648 <SystemInit+0x10c>)
 800e5fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e5fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e600:	4b11      	ldr	r3, [pc, #68]	; (800e648 <SystemInit+0x10c>)
 800e602:	2200      	movs	r2, #0
 800e604:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e606:	4b15      	ldr	r3, [pc, #84]	; (800e65c <SystemInit+0x120>)
 800e608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60a:	4a14      	ldr	r2, [pc, #80]	; (800e65c <SystemInit+0x120>)
 800e60c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e610:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e612:	4b13      	ldr	r3, [pc, #76]	; (800e660 <SystemInit+0x124>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	4b13      	ldr	r3, [pc, #76]	; (800e664 <SystemInit+0x128>)
 800e618:	4013      	ands	r3, r2
 800e61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e61e:	d202      	bcs.n	800e626 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e620:	4b11      	ldr	r3, [pc, #68]	; (800e668 <SystemInit+0x12c>)
 800e622:	2201      	movs	r2, #1
 800e624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e626:	4b11      	ldr	r3, [pc, #68]	; (800e66c <SystemInit+0x130>)
 800e628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800e62c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e62e:	4b04      	ldr	r3, [pc, #16]	; (800e640 <SystemInit+0x104>)
 800e630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e634:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800e636:	bf00      	nop
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr
 800e640:	e000ed00 	.word	0xe000ed00
 800e644:	52002000 	.word	0x52002000
 800e648:	58024400 	.word	0x58024400
 800e64c:	eaf6ed7f 	.word	0xeaf6ed7f
 800e650:	02020200 	.word	0x02020200
 800e654:	01ff0000 	.word	0x01ff0000
 800e658:	01010280 	.word	0x01010280
 800e65c:	580000c0 	.word	0x580000c0
 800e660:	5c001000 	.word	0x5c001000
 800e664:	ffff0000 	.word	0xffff0000
 800e668:	51008108 	.word	0x51008108
 800e66c:	52004000 	.word	0x52004000

0800e670 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d103      	bne.n	800e688 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800e680:	f04f 33ff 	mov.w	r3, #4294967295
 800e684:	60fb      	str	r3, [r7, #12]
 800e686:	e02c      	b.n	800e6e2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	891a      	ldrh	r2, [r3, #8]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	68da      	ldr	r2, [r3, #12]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	691a      	ldr	r2, [r3, #16]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	695a      	ldr	r2, [r3, #20]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a0c      	ldr	r2, [pc, #48]	; (800e6ec <FT5336_RegisterBusIO+0x7c>)
 800e6bc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a0b      	ldr	r2, [pc, #44]	; (800e6f0 <FT5336_RegisterBusIO+0x80>)
 800e6c2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d004      	beq.n	800e6dc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4798      	blx	r3
 800e6d8:	60f8      	str	r0, [r7, #12]
 800e6da:	e002      	b.n	800e6e2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	0800eae9 	.word	0x0800eae9
 800e6f0:	0800eb1d 	.word	0x0800eb1d

0800e6f4 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2201      	movs	r2, #1
 800e708:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2205      	movs	r2, #5
 800e70e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e716:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e71e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10d      	bne.n	800e760 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 f987 	bl	800ea5e <FT5336_DisableIT>
 800e750:	4602      	mov	r2, r0
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	4413      	add	r3, r2
 800e756:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800e766:	f04f 33ff 	mov.w	r3, #4294967295
 800e76a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e76c:	68fb      	ldr	r3, [r7, #12]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d103      	bne.n	800e794 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800e794:	68fb      	ldr	r3, [r7, #12]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b084      	sub	sp, #16
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f103 0218 	add.w	r2, r3, #24
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f000 fa25 	bl	800ec0a <ft5336_radian_value>
 800e7c0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f103 0218 	add.w	r2, r3, #24
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	4610      	mov	r0, r2
 800e7d2:	f000 fa2b 	bl	800ec2c <ft5336_offset_left_right>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4413      	add	r3, r2
 800e7dc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f103 0218 	add.w	r2, r3, #24
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f000 fa2e 	bl	800ec4e <ft5336_offset_up_down>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f103 0218 	add.w	r2, r3, #24
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	b2db      	uxtb	r3, r3
 800e806:	4619      	mov	r1, r3
 800e808:	4610      	mov	r0, r2
 800e80a:	f000 fa31 	bl	800ec70 <ft5336_disatnce_left_right>
 800e80e:	4602      	mov	r2, r0
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	4413      	add	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f103 0218 	add.w	r2, r3, #24
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	b2db      	uxtb	r3, r3
 800e822:	4619      	mov	r1, r3
 800e824:	4610      	mov	r0, r2
 800e826:	f000 fa34 	bl	800ec92 <ft5336_distance_up_down>
 800e82a:	4602      	mov	r2, r0
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4413      	add	r3, r2
 800e830:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f103 0218 	add.w	r2, r3, #24
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	4619      	mov	r1, r3
 800e840:	4610      	mov	r0, r2
 800e842:	f000 fa37 	bl	800ecb4 <ft5336_distance_zoom>
 800e846:	4602      	mov	r2, r0
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4413      	add	r3, r2
 800e84c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800e854:	f04f 33ff 	mov.w	r3, #4294967295
 800e858:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e85a:	68fb      	ldr	r3, [r7, #12]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	3318      	adds	r3, #24
 800e872:	6839      	ldr	r1, [r7, #0]
 800e874:	4618      	mov	r0, r3
 800e876:	f000 fa3f 	bl	800ecf8 <ft5336_chip_id>
 800e87a:	4603      	mov	r3, r0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f908 	bl	800eaa8 <FT5336_DetectTouch>
 800e898:	4603      	mov	r3, r0
 800e89a:	461a      	mov	r2, r3
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f103 0018 	add.w	r0, r3, #24
 800e8a6:	f107 0208 	add.w	r2, r7, #8
 800e8aa:	2304      	movs	r3, #4
 800e8ac:	2103      	movs	r1, #3
 800e8ae:	f000 f94f 	bl	800eb50 <ft5336_read_reg>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d003      	beq.n	800e8c0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800e8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8bc:	60fb      	str	r3, [r7, #12]
 800e8be:	e00f      	b.n	800e8e0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800e8c0:	7a3b      	ldrb	r3, [r7, #8]
 800e8c2:	021b      	lsls	r3, r3, #8
 800e8c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e8c8:	7a7a      	ldrb	r2, [r7, #9]
 800e8ca:	431a      	orrs	r2, r3
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800e8d0:	7abb      	ldrb	r3, [r7, #10]
 800e8d2:	021b      	lsls	r3, r3, #8
 800e8d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e8d8:	7afa      	ldrb	r2, [r7, #11]
 800e8da:	431a      	orrs	r2, r3
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b08c      	sub	sp, #48	; 0x30
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f8d5 	bl	800eaa8 <FT5336_DetectTouch>
 800e8fe:	4603      	mov	r3, r0
 800e900:	461a      	mov	r2, r3
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f103 0018 	add.w	r0, r3, #24
 800e90c:	f107 0208 	add.w	r2, r7, #8
 800e910:	231e      	movs	r3, #30
 800e912:	2103      	movs	r1, #3
 800e914:	f000 f91c 	bl	800eb50 <ft5336_read_reg>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d003      	beq.n	800e926 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e924:	e077      	b.n	800ea16 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e926:	2300      	movs	r3, #0
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28
 800e92a:	e071      	b.n	800ea10 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800e92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e92e:	4613      	mov	r3, r2
 800e930:	005b      	lsls	r3, r3, #1
 800e932:	4413      	add	r3, r2
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	3330      	adds	r3, #48	; 0x30
 800e938:	443b      	add	r3, r7
 800e93a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e93e:	021b      	lsls	r3, r3, #8
 800e940:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e946:	4613      	mov	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	3301      	adds	r3, #1
 800e950:	3330      	adds	r3, #48	; 0x30
 800e952:	443b      	add	r3, r7
 800e954:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e958:	ea41 0203 	orr.w	r2, r1, r3
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	440b      	add	r3, r1
 800e964:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800e966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e968:	4613      	mov	r3, r2
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	4413      	add	r3, r2
 800e96e:	005b      	lsls	r3, r3, #1
 800e970:	3302      	adds	r3, #2
 800e972:	3330      	adds	r3, #48	; 0x30
 800e974:	443b      	add	r3, r7
 800e976:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e97a:	021b      	lsls	r3, r3, #8
 800e97c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e982:	4613      	mov	r3, r2
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	4413      	add	r3, r2
 800e988:	005b      	lsls	r3, r3, #1
 800e98a:	3303      	adds	r3, #3
 800e98c:	3330      	adds	r3, #48	; 0x30
 800e98e:	443b      	add	r3, r7
 800e990:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e994:	4319      	orrs	r1, r3
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e99a:	3206      	adds	r2, #6
 800e99c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800e9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	3330      	adds	r3, #48	; 0x30
 800e9ac:	443b      	add	r3, r7
 800e9ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9b2:	099b      	lsrs	r3, r3, #6
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9bc:	3210      	adds	r2, #16
 800e9be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800e9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	4413      	add	r3, r2
 800e9ca:	005b      	lsls	r3, r3, #1
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	3330      	adds	r3, #48	; 0x30
 800e9d0:	443b      	add	r3, r7
 800e9d2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9dc:	330a      	adds	r3, #10
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800e9e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	4413      	add	r3, r2
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	3305      	adds	r3, #5
 800e9f0:	3330      	adds	r3, #48	; 0x30
 800e9f2:	443b      	add	r3, r7
 800e9f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9f8:	091b      	lsrs	r3, r3, #4
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	683a      	ldr	r2, [r7, #0]
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	3314      	adds	r3, #20
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	2b04      	cmp	r3, #4
 800ea14:	d98a      	bls.n	800e92c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3730      	adds	r7, #48	; 0x30
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	3318      	adds	r3, #24
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 f8bb 	bl	800ebac <ft5336_gest_id>
 800ea36:	4603      	mov	r3, r0
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3318      	adds	r3, #24
 800ea4c:	2101      	movs	r1, #1
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 f941 	bl	800ecd6 <ft5336_g_mode>
 800ea54:	4603      	mov	r3, r0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	3318      	adds	r3, #24
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 f932 	bl	800ecd6 <ft5336_g_mode>
 800ea72:	4603      	mov	r3, r0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800ea92:	b480      	push	{r7}
 800ea94:	b083      	sub	sp, #12
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3318      	adds	r3, #24
 800eab4:	f107 020b 	add.w	r2, r7, #11
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 f886 	bl	800ebcc <ft5336_td_status>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d003      	beq.n	800eace <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800eac6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	e007      	b.n	800eade <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800eace:	7afb      	ldrb	r3, [r7, #11]
 800ead0:	2b05      	cmp	r3, #5
 800ead2:	d902      	bls.n	800eada <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e001      	b.n	800eade <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800eade:	68fb      	ldr	r3, [r7, #12]
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eae8:	b590      	push	{r4, r7, lr}
 800eaea:	b087      	sub	sp, #28
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	607a      	str	r2, [r7, #4]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	72fb      	strb	r3, [r7, #11]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	691c      	ldr	r4, [r3, #16]
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	8918      	ldrh	r0, [r3, #8]
 800eb08:	7afb      	ldrb	r3, [r7, #11]
 800eb0a:	b299      	uxth	r1, r3
 800eb0c:	893b      	ldrh	r3, [r7, #8]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	47a0      	blx	r4
 800eb12:	4603      	mov	r3, r0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	371c      	adds	r7, #28
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd90      	pop	{r4, r7, pc}

0800eb1c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eb1c:	b590      	push	{r4, r7, lr}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	607a      	str	r2, [r7, #4]
 800eb26:	461a      	mov	r2, r3
 800eb28:	460b      	mov	r3, r1
 800eb2a:	72fb      	strb	r3, [r7, #11]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	68dc      	ldr	r4, [r3, #12]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	8918      	ldrh	r0, [r3, #8]
 800eb3c:	7afb      	ldrb	r3, [r7, #11]
 800eb3e:	b299      	uxth	r1, r3
 800eb40:	893b      	ldrh	r3, [r7, #8]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	47a0      	blx	r4
 800eb46:	4603      	mov	r3, r0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	371c      	adds	r7, #28
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd90      	pop	{r4, r7, pc}

0800eb50 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	607a      	str	r2, [r7, #4]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	72fb      	strb	r3, [r7, #11]
 800eb60:	4613      	mov	r3, r2
 800eb62:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	685c      	ldr	r4, [r3, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6898      	ldr	r0, [r3, #8]
 800eb6c:	893b      	ldrh	r3, [r7, #8]
 800eb6e:	7af9      	ldrb	r1, [r7, #11]
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	47a0      	blx	r4
 800eb74:	4603      	mov	r3, r0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd90      	pop	{r4, r7, pc}

0800eb7e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800eb7e:	b590      	push	{r4, r7, lr}
 800eb80:	b085      	sub	sp, #20
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	60f8      	str	r0, [r7, #12]
 800eb86:	607a      	str	r2, [r7, #4]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	72fb      	strb	r3, [r7, #11]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681c      	ldr	r4, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6898      	ldr	r0, [r3, #8]
 800eb9a:	893b      	ldrh	r3, [r7, #8]
 800eb9c:	7af9      	ldrb	r1, [r7, #11]
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	47a0      	blx	r4
 800eba2:	4603      	mov	r3, r0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd90      	pop	{r4, r7, pc}

0800ebac <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	2101      	movs	r1, #1
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7ff ffc7 	bl	800eb50 <ft5336_read_reg>
 800ebc2:	4603      	mov	r3, r0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	2102      	movs	r1, #2
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff ffb7 	bl	800eb50 <ft5336_read_reg>
 800ebe2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10a      	bne.n	800ec00 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	f003 030f 	and.w	r3, r3, #15
 800ebf2:	b2da      	uxtb	r2, r3
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	781a      	ldrb	r2, [r3, #0]
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ec00:	68fb      	ldr	r3, [r7, #12]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3710      	adds	r7, #16
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ec16:	1cfa      	adds	r2, r7, #3
 800ec18:	2301      	movs	r3, #1
 800ec1a:	2191      	movs	r1, #145	; 0x91
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff ffae 	bl	800eb7e <ft5336_write_reg>
 800ec22:	4603      	mov	r3, r0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	460b      	mov	r3, r1
 800ec36:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ec38:	1cfa      	adds	r2, r7, #3
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	2192      	movs	r1, #146	; 0x92
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff ff9d 	bl	800eb7e <ft5336_write_reg>
 800ec44:	4603      	mov	r3, r0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	460b      	mov	r3, r1
 800ec58:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ec5a:	1cfa      	adds	r2, r7, #3
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	2193      	movs	r1, #147	; 0x93
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff ff8c 	bl	800eb7e <ft5336_write_reg>
 800ec66:	4603      	mov	r3, r0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ec7c:	1cfa      	adds	r2, r7, #3
 800ec7e:	2301      	movs	r3, #1
 800ec80:	2194      	movs	r1, #148	; 0x94
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ff7b 	bl	800eb7e <ft5336_write_reg>
 800ec88:	4603      	mov	r3, r0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b082      	sub	sp, #8
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800ec9e:	1cfa      	adds	r2, r7, #3
 800eca0:	2301      	movs	r3, #1
 800eca2:	2195      	movs	r1, #149	; 0x95
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ff6a 	bl	800eb7e <ft5336_write_reg>
 800ecaa:	4603      	mov	r3, r0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ecc0:	1cfa      	adds	r2, r7, #3
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	2196      	movs	r1, #150	; 0x96
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff ff59 	bl	800eb7e <ft5336_write_reg>
 800eccc:	4603      	mov	r3, r0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b082      	sub	sp, #8
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	460b      	mov	r3, r1
 800ece0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800ece2:	1cfa      	adds	r2, r7, #3
 800ece4:	2301      	movs	r3, #1
 800ece6:	21a4      	movs	r1, #164	; 0xa4
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff ff48 	bl	800eb7e <ft5336_write_reg>
 800ecee:	4603      	mov	r3, r0
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ed02:	2301      	movs	r3, #1
 800ed04:	683a      	ldr	r2, [r7, #0]
 800ed06:	21a8      	movs	r1, #168	; 0xa8
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff ff21 	bl	800eb50 <ft5336_read_reg>
 800ed0e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d107      	bne.n	800ed26 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	781a      	ldrb	r2, [r3, #0]
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	781a      	ldrb	r2, [r3, #0]
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ed26:	68fb      	ldr	r3, [r7, #12]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed3e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ed46:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed4e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed58:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed68:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b090      	sub	sp, #64	; 0x40
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	460b      	mov	r3, r1
 800ed88:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ed8a:	78fb      	ldrb	r3, [r7, #3]
 800ed8c:	2b03      	cmp	r3, #3
 800ed8e:	d102      	bne.n	800ed96 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800ed90:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ed94:	e001      	b.n	800ed9a <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800ed96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed9a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800ed9c:	23b7      	movs	r3, #183	; 0xb7
 800ed9e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800eda0:	2300      	movs	r3, #0
 800eda2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800eda4:	2300      	movs	r3, #0
 800eda6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800eda8:	2300      	movs	r3, #0
 800edaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800edb4:	2300      	movs	r3, #0
 800edb6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800edb8:	2300      	movs	r3, #0
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800edbc:	78fb      	ldrb	r3, [r7, #3]
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f860 	bl	800ee86 <MT25TL01G_WriteEnable>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800edcc:	f06f 0301 	mvn.w	r3, #1
 800edd0:	e019      	b.n	800ee06 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800edd2:	f107 0308 	add.w	r3, r7, #8
 800edd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edda:	4619      	mov	r1, r3
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f004 fd2b 	bl	8013838 <HAL_QSPI_Command>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d002      	beq.n	800edee <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ede8:	f06f 0301 	mvn.w	r3, #1
 800edec:	e00b      	b.n	800ee06 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 f80b 	bl	800ee0e <MT25TL01G_AutoPollingMemReady>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800edfe:	f06f 0301 	mvn.w	r3, #1
 800ee02:	e000      	b.n	800ee06 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800ee04:	2300      	movs	r3, #0
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3740      	adds	r7, #64	; 0x40
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b096      	sub	sp, #88	; 0x58
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
 800ee16:	460b      	mov	r3, r1
 800ee18:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ee1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee1e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ee20:	2305      	movs	r3, #5
 800ee22:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ee24:	2300      	movs	r3, #0
 800ee26:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ee2c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ee30:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800ee32:	2302      	movs	r3, #2
 800ee34:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ee36:	2300      	movs	r3, #0
 800ee38:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ee46:	2300      	movs	r3, #0
 800ee48:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800ee4a:	2310      	movs	r3, #16
 800ee4c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ee4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ee52:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800ee54:	f240 1301 	movw	r3, #257	; 0x101
 800ee58:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ee5e:	f107 0208 	add.w	r2, r7, #8
 800ee62:	f107 0120 	add.w	r1, r7, #32
 800ee66:	f241 3388 	movw	r3, #5000	; 0x1388
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f004 fe71 	bl	8013b52 <HAL_QSPI_AutoPolling>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d002      	beq.n	800ee7c <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ee76:	f06f 0304 	mvn.w	r3, #4
 800ee7a:	e000      	b.n	800ee7e <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800ee7c:	2300      	movs	r3, #0

}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3758      	adds	r7, #88	; 0x58
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}

0800ee86 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b096      	sub	sp, #88	; 0x58
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	460b      	mov	r3, r1
 800ee90:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ee92:	78fb      	ldrb	r3, [r7, #3]
 800ee94:	2b03      	cmp	r3, #3
 800ee96:	d102      	bne.n	800ee9e <MT25TL01G_WriteEnable+0x18>
 800ee98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee9c:	e001      	b.n	800eea2 <MT25TL01G_WriteEnable+0x1c>
 800ee9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eea2:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800eea4:	2306      	movs	r3, #6
 800eea6:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800eeac:	2300      	movs	r3, #0
 800eeae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800eebc:	2300      	movs	r3, #0
 800eebe:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800eec0:	2300      	movs	r3, #0
 800eec2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800eec4:	f107 0320 	add.w	r3, r7, #32
 800eec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eecc:	4619      	mov	r1, r3
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f004 fcb2 	bl	8013838 <HAL_QSPI_Command>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d002      	beq.n	800eee0 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800eeda:	f06f 0301 	mvn.w	r3, #1
 800eede:	e029      	b.n	800ef34 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800eee0:	f240 2302 	movw	r3, #514	; 0x202
 800eee4:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800eee6:	f240 2302 	movw	r3, #514	; 0x202
 800eeea:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800eeec:	2300      	movs	r3, #0
 800eeee:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800eef0:	2302      	movs	r3, #2
 800eef2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800eef4:	2310      	movs	r3, #16
 800eef6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800eef8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eefc:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800eefe:	2305      	movs	r3, #5
 800ef00:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ef02:	78fb      	ldrb	r3, [r7, #3]
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	d102      	bne.n	800ef0e <MT25TL01G_WriteEnable+0x88>
 800ef08:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ef0c:	e001      	b.n	800ef12 <MT25TL01G_WriteEnable+0x8c>
 800ef0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ef12:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef14:	f107 0208 	add.w	r2, r7, #8
 800ef18:	f107 0120 	add.w	r1, r7, #32
 800ef1c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f004 fe16 	bl	8013b52 <HAL_QSPI_AutoPolling>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ef2c:	f06f 0304 	mvn.w	r3, #4
 800ef30:	e000      	b.n	800ef34 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3758      	adds	r7, #88	; 0x58
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b090      	sub	sp, #64	; 0x40
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ef44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef48:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ef4a:	2335      	movs	r3, #53	; 0x35
 800ef4c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ef52:	2300      	movs	r3, #0
 800ef54:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ef56:	2300      	movs	r3, #0
 800ef58:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ef62:	2300      	movs	r3, #0
 800ef64:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ef66:	2300      	movs	r3, #0
 800ef68:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef6a:	f107 0308 	add.w	r3, r7, #8
 800ef6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef72:	4619      	mov	r1, r3
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f004 fc5f 	bl	8013838 <HAL_QSPI_Command>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ef80:	f06f 0301 	mvn.w	r3, #1
 800ef84:	e000      	b.n	800ef88 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3740      	adds	r7, #64	; 0x40
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b090      	sub	sp, #64	; 0x40
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ef98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef9c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800ef9e:	23f5      	movs	r3, #245	; 0xf5
 800efa0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800efa2:	2300      	movs	r3, #0
 800efa4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800efa6:	2300      	movs	r3, #0
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800efaa:	2300      	movs	r3, #0
 800efac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800efb6:	2300      	movs	r3, #0
 800efb8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800efba:	2300      	movs	r3, #0
 800efbc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800efbe:	f107 0308 	add.w	r3, r7, #8
 800efc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800efc6:	4619      	mov	r1, r3
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f004 fc35 	bl	8013838 <HAL_QSPI_Command>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800efd4:	f06f 0301 	mvn.w	r3, #1
 800efd8:	e000      	b.n	800efdc <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3740      	adds	r7, #64	; 0x40
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b092      	sub	sp, #72	; 0x48
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d83a      	bhi.n	800f06c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800eff6:	a201      	add	r2, pc, #4	; (adr r2, 800effc <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f00d 	.word	0x0800f00d
 800f000:	0800f025 	.word	0x0800f025
 800f004:	0800f03d 	.word	0x0800f03d
 800f008:	0800f055 	.word	0x0800f055
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f010:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800f012:	230e      	movs	r3, #14
 800f014:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f01a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f01c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f020:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f022:	e023      	b.n	800f06c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f028:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800f02a:	233d      	movs	r3, #61	; 0x3d
 800f02c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f032:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f038:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f03a:	e017      	b.n	800f06c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f03c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f040:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800f042:	23ee      	movs	r3, #238	; 0xee
 800f044:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f046:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f04a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f04c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f050:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f052:	e00b      	b.n	800f06c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f054:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f058:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800f05a:	23ed      	movs	r3, #237	; 0xed
 800f05c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f05e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f062:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f064:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f068:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f06a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f06c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f070:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f072:	2300      	movs	r3, #0
 800f074:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800f076:	2308      	movs	r3, #8
 800f078:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800f07a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800f080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f084:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f086:	2300      	movs	r3, #0
 800f088:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f08e:	2300      	movs	r3, #0
 800f090:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f092:	f107 0208 	add.w	r2, r7, #8
 800f096:	f107 0310 	add.w	r3, r7, #16
 800f09a:	4619      	mov	r1, r3
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f004 fdcf 	bl	8013c40 <HAL_QSPI_MemoryMapped>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f0a8:	f06f 0305 	mvn.w	r3, #5
 800f0ac:	e000      	b.n	800f0b0 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3748      	adds	r7, #72	; 0x48
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b092      	sub	sp, #72	; 0x48
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f0c4:	78fb      	ldrb	r3, [r7, #3]
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	d83a      	bhi.n	800f140 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800f0ca:	a201      	add	r2, pc, #4	; (adr r2, 800f0d0 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800f0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d0:	0800f0e1 	.word	0x0800f0e1
 800f0d4:	0800f0f9 	.word	0x0800f0f9
 800f0d8:	0800f111 	.word	0x0800f111
 800f0dc:	0800f129 	.word	0x0800f129
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f0e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0e4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800f0e6:	230c      	movs	r3, #12
 800f0e8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f0f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f0f4:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800f0f6:	e023      	b.n	800f140 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f0f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f0fe:	23bc      	movs	r3, #188	; 0xbc
 800f100:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800f102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f106:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f10e:	e017      	b.n	800f140 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f114:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f116:	23ec      	movs	r3, #236	; 0xec
 800f118:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f11a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f11e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f120:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f124:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f126:	e00b      	b.n	800f140 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f128:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f12c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800f12e:	23eb      	movs	r3, #235	; 0xeb
 800f130:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f132:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f136:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f138:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f13c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f13e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f140:	2308      	movs	r3, #8
 800f142:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f144:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f148:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f14a:	2300      	movs	r3, #0
 800f14c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f14e:	2300      	movs	r3, #0
 800f150:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f152:	2300      	movs	r3, #0
 800f154:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f156:	2300      	movs	r3, #0
 800f158:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f15a:	2300      	movs	r3, #0
 800f15c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f162:	f107 0208 	add.w	r2, r7, #8
 800f166:	f107 0310 	add.w	r3, r7, #16
 800f16a:	4619      	mov	r1, r3
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f004 fd67 	bl	8013c40 <HAL_QSPI_MemoryMapped>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f178:	f06f 0305 	mvn.w	r3, #5
 800f17c:	e000      	b.n	800f180 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	3748      	adds	r7, #72	; 0x48
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b090      	sub	sp, #64	; 0x40
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f194:	78fb      	ldrb	r3, [r7, #3]
 800f196:	2b03      	cmp	r3, #3
 800f198:	d102      	bne.n	800f1a0 <MT25TL01G_ResetEnable+0x18>
 800f19a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f19e:	e001      	b.n	800f1a4 <MT25TL01G_ResetEnable+0x1c>
 800f1a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1a4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f1a6:	2366      	movs	r3, #102	; 0x66
 800f1a8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f1c6:	f107 0308 	add.w	r3, r7, #8
 800f1ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f004 fb31 	bl	8013838 <HAL_QSPI_Command>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f1dc:	f06f 0301 	mvn.w	r3, #1
 800f1e0:	e000      	b.n	800f1e4 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3740      	adds	r7, #64	; 0x40
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b090      	sub	sp, #64	; 0x40
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f1f8:	78fb      	ldrb	r3, [r7, #3]
 800f1fa:	2b03      	cmp	r3, #3
 800f1fc:	d102      	bne.n	800f204 <MT25TL01G_ResetMemory+0x18>
 800f1fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f202:	e001      	b.n	800f208 <MT25TL01G_ResetMemory+0x1c>
 800f204:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f208:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f20a:	2399      	movs	r3, #153	; 0x99
 800f20c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f20e:	2300      	movs	r3, #0
 800f210:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f212:	2300      	movs	r3, #0
 800f214:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f216:	2300      	movs	r3, #0
 800f218:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f21a:	2300      	movs	r3, #0
 800f21c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f21e:	2300      	movs	r3, #0
 800f220:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f222:	2300      	movs	r3, #0
 800f224:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f226:	2300      	movs	r3, #0
 800f228:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f22a:	f107 0308 	add.w	r3, r7, #8
 800f22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f232:	4619      	mov	r1, r3
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f004 faff 	bl	8013838 <HAL_QSPI_Command>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f240:	f06f 0301 	mvn.w	r3, #1
 800f244:	e000      	b.n	800f248 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3740      	adds	r7, #64	; 0x40
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4619      	mov	r1, r3
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f000 f832 	bl	800f2d0 <MT48LC4M32B2_ClockEnable>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d128      	bne.n	800f2c4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f272:	2001      	movs	r0, #1
 800f274:	f000 f8e2 	bl	800f43c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4619      	mov	r1, r3
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f84a 	bl	800f318 <MT48LC4M32B2_Precharge>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d11c      	bne.n	800f2c4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	6819      	ldr	r1, [r3, #0]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	461a      	mov	r2, r3
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f897 	bl	800f3c8 <MT48LC4M32B2_RefreshMode>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d111      	bne.n	800f2c4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 f85c 	bl	800f360 <MT48LC4M32B2_ModeRegConfig>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10a      	bne.n	800f2c4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f8ad 	bl	800f414 <MT48LC4M32B2_RefreshRate>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3710      	adds	r7, #16
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
	...

0800f2d0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f2da:	4b0e      	ldr	r3, [pc, #56]	; (800f314 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2dc:	2201      	movs	r2, #1
 800f2de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f2e0:	4a0c      	ldr	r2, [pc, #48]	; (800f314 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f2e6:	4b0b      	ldr	r3, [pc, #44]	; (800f314 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f2ec:	4b09      	ldr	r3, [pc, #36]	; (800f314 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f2f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2f6:	4907      	ldr	r1, [pc, #28]	; (800f314 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f007 f8b9 	bl	8016470 <HAL_SDRAM_SendCommand>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d002      	beq.n	800f30a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f304:	f04f 33ff 	mov.w	r3, #4294967295
 800f308:	e000      	b.n	800f30c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f30a:	2300      	movs	r3, #0
  }
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3708      	adds	r7, #8
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	2400acc0 	.word	0x2400acc0

0800f318 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f322:	4b0e      	ldr	r3, [pc, #56]	; (800f35c <MT48LC4M32B2_Precharge+0x44>)
 800f324:	2202      	movs	r2, #2
 800f326:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f328:	4a0c      	ldr	r2, [pc, #48]	; (800f35c <MT48LC4M32B2_Precharge+0x44>)
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f32e:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <MT48LC4M32B2_Precharge+0x44>)
 800f330:	2201      	movs	r2, #1
 800f332:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f334:	4b09      	ldr	r3, [pc, #36]	; (800f35c <MT48LC4M32B2_Precharge+0x44>)
 800f336:	2200      	movs	r2, #0
 800f338:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f33a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f33e:	4907      	ldr	r1, [pc, #28]	; (800f35c <MT48LC4M32B2_Precharge+0x44>)
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f007 f895 	bl	8016470 <HAL_SDRAM_SendCommand>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f34c:	f04f 33ff 	mov.w	r3, #4294967295
 800f350:	e000      	b.n	800f354 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f352:	2300      	movs	r3, #0
  }
}
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	2400acc0 	.word	0x2400acc0

0800f360 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f372:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f378:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f37e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f384:	4313      	orrs	r3, r2
 800f386:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f388:	4b0e      	ldr	r3, [pc, #56]	; (800f3c4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f38a:	2204      	movs	r2, #4
 800f38c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a0c      	ldr	r2, [pc, #48]	; (800f3c4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f394:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f396:	4b0b      	ldr	r3, [pc, #44]	; (800f3c4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f398:	2201      	movs	r2, #1
 800f39a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f39c:	4a09      	ldr	r2, [pc, #36]	; (800f3c4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f3a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3a6:	4907      	ldr	r1, [pc, #28]	; (800f3c4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f007 f861 	bl	8016470 <HAL_SDRAM_SendCommand>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b8:	e000      	b.n	800f3bc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f3ba:	2300      	movs	r3, #0
  }
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	2400acc0 	.word	0x2400acc0

0800f3c8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b084      	sub	sp, #16
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f3d4:	4a0e      	ldr	r2, [pc, #56]	; (800f410 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f3da:	4a0d      	ldr	r2, [pc, #52]	; (800f410 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f3e0:	4b0b      	ldr	r3, [pc, #44]	; (800f410 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3e2:	2208      	movs	r2, #8
 800f3e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f3e6:	4b0a      	ldr	r3, [pc, #40]	; (800f410 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f3ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3f0:	4907      	ldr	r1, [pc, #28]	; (800f410 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f007 f83c 	bl	8016470 <HAL_SDRAM_SendCommand>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d002      	beq.n	800f404 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f402:	e000      	b.n	800f406 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f404:	2300      	movs	r3, #0
  }
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
 800f40e:	bf00      	nop
 800f410:	2400acc0 	.word	0x2400acc0

0800f414 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f007 f85a 	bl	80164da <HAL_SDRAM_ProgramRefreshRate>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f42c:	f04f 33ff 	mov.w	r3, #4294967295
 800f430:	e000      	b.n	800f434 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f432:	2300      	movs	r3, #0
  }
}
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f444:	f001 fcfc 	bl	8010e40 <HAL_GetTick>
 800f448:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f44a:	bf00      	nop
 800f44c:	f001 fcf8 	bl	8010e40 <HAL_GetTick>
 800f450:	4602      	mov	r2, r0
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d8f7      	bhi.n	800f44c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f46e:	2300      	movs	r3, #0
 800f470:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f472:	4b16      	ldr	r3, [pc, #88]	; (800f4cc <BSP_I2C4_Init+0x64>)
 800f474:	4a16      	ldr	r2, [pc, #88]	; (800f4d0 <BSP_I2C4_Init+0x68>)
 800f476:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f478:	4b16      	ldr	r3, [pc, #88]	; (800f4d4 <BSP_I2C4_Init+0x6c>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d11f      	bne.n	800f4c0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f480:	4b14      	ldr	r3, [pc, #80]	; (800f4d4 <BSP_I2C4_Init+0x6c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3301      	adds	r3, #1
 800f486:	4a13      	ldr	r2, [pc, #76]	; (800f4d4 <BSP_I2C4_Init+0x6c>)
 800f488:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f48a:	4810      	ldr	r0, [pc, #64]	; (800f4cc <BSP_I2C4_Init+0x64>)
 800f48c:	f002 fef8 	bl	8012280 <HAL_I2C_GetState>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d114      	bne.n	800f4c0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f496:	480d      	ldr	r0, [pc, #52]	; (800f4cc <BSP_I2C4_Init+0x64>)
 800f498:	f000 fb60 	bl	800fb5c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f49c:	f005 fe8e 	bl	80151bc <HAL_RCC_GetPCLK2Freq>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	490d      	ldr	r1, [pc, #52]	; (800f4d8 <BSP_I2C4_Init+0x70>)
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 f8e3 	bl	800f670 <I2C_GetTiming>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4807      	ldr	r0, [pc, #28]	; (800f4cc <BSP_I2C4_Init+0x64>)
 800f4b0:	f000 f838 	bl	800f524 <MX_I2C4_Init>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d002      	beq.n	800f4c0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f4ba:	f06f 0307 	mvn.w	r3, #7
 800f4be:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f4c0:	687b      	ldr	r3, [r7, #4]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	2400b6d8 	.word	0x2400b6d8
 800f4d0:	58001c00 	.word	0x58001c00
 800f4d4:	2400acd0 	.word	0x2400acd0
 800f4d8:	000186a0 	.word	0x000186a0

0800f4dc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f4e6:	4b0d      	ldr	r3, [pc, #52]	; (800f51c <BSP_I2C4_DeInit+0x40>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	4a0b      	ldr	r2, [pc, #44]	; (800f51c <BSP_I2C4_DeInit+0x40>)
 800f4ee:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	; (800f51c <BSP_I2C4_DeInit+0x40>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10b      	bne.n	800f510 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f4f8:	4809      	ldr	r0, [pc, #36]	; (800f520 <BSP_I2C4_DeInit+0x44>)
 800f4fa:	f000 fb9b 	bl	800fc34 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f4fe:	4808      	ldr	r0, [pc, #32]	; (800f520 <BSP_I2C4_DeInit+0x44>)
 800f500:	f002 fc4c 	bl	8011d9c <HAL_I2C_DeInit>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f50a:	f06f 0307 	mvn.w	r3, #7
 800f50e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f510:	687b      	ldr	r3, [r7, #4]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	2400acd0 	.word	0x2400acd0
 800f520:	2400b6d8 	.word	0x2400b6d8

0800f524 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2200      	movs	r2, #0
 800f560:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f002 fb8a 	bl	8011c7c <HAL_I2C_Init>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d002      	beq.n	800f574 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f56e:	2301      	movs	r3, #1
 800f570:	73fb      	strb	r3, [r7, #15]
 800f572:	e014      	b.n	800f59e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f574:	2300      	movs	r3, #0
 800f576:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f578:	68b9      	ldr	r1, [r7, #8]
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f003 f940 	bl	8012800 <HAL_I2CEx_ConfigAnalogFilter>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	73fb      	strb	r3, [r7, #15]
 800f58a:	e008      	b.n	800f59e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800f58c:	2100      	movs	r1, #0
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f003 f981 	bl	8012896 <HAL_I2CEx_ConfigDigitalFilter>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af02      	add	r7, sp, #8
 800f5ae:	60ba      	str	r2, [r7, #8]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	81fb      	strh	r3, [r7, #14]
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	81bb      	strh	r3, [r7, #12]
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f5be:	89b9      	ldrh	r1, [r7, #12]
 800f5c0:	89f8      	ldrh	r0, [r7, #14]
 800f5c2:	88fb      	ldrh	r3, [r7, #6]
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f000 fb57 	bl	800fc7c <I2C4_WriteReg>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d102      	bne.n	800f5da <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	617b      	str	r3, [r7, #20]
 800f5d8:	e00c      	b.n	800f5f4 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f5da:	4809      	ldr	r0, [pc, #36]	; (800f600 <BSP_I2C4_WriteReg+0x58>)
 800f5dc:	f002 fe5e 	bl	801229c <HAL_I2C_GetError>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b04      	cmp	r3, #4
 800f5e4:	d103      	bne.n	800f5ee <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f5e6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800f5ea:	617b      	str	r3, [r7, #20]
 800f5ec:	e002      	b.n	800f5f4 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f5ee:	f06f 0303 	mvn.w	r3, #3
 800f5f2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f5f4:	697b      	ldr	r3, [r7, #20]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	2400b6d8 	.word	0x2400b6d8

0800f604 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af02      	add	r7, sp, #8
 800f60a:	60ba      	str	r2, [r7, #8]
 800f60c:	461a      	mov	r2, r3
 800f60e:	4603      	mov	r3, r0
 800f610:	81fb      	strh	r3, [r7, #14]
 800f612:	460b      	mov	r3, r1
 800f614:	81bb      	strh	r3, [r7, #12]
 800f616:	4613      	mov	r3, r2
 800f618:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f61a:	89b9      	ldrh	r1, [r7, #12]
 800f61c:	89f8      	ldrh	r0, [r7, #14]
 800f61e:	88fb      	ldrh	r3, [r7, #6]
 800f620:	9300      	str	r3, [sp, #0]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2201      	movs	r2, #1
 800f626:	f000 fb4f 	bl	800fcc8 <I2C4_ReadReg>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d102      	bne.n	800f636 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f630:	2300      	movs	r3, #0
 800f632:	617b      	str	r3, [r7, #20]
 800f634:	e00c      	b.n	800f650 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f636:	4809      	ldr	r0, [pc, #36]	; (800f65c <BSP_I2C4_ReadReg+0x58>)
 800f638:	f002 fe30 	bl	801229c <HAL_I2C_GetError>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b04      	cmp	r3, #4
 800f640:	d103      	bne.n	800f64a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f642:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800f646:	617b      	str	r3, [r7, #20]
 800f648:	e002      	b.n	800f650 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f64a:	f06f 0303 	mvn.w	r3, #3
 800f64e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f650:	697b      	ldr	r3, [r7, #20]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3718      	adds	r7, #24
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	2400b6d8 	.word	0x2400b6d8

0800f660 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800f664:	f001 fbec 	bl	8010e40 <HAL_GetTick>
 800f668:	4603      	mov	r3, r0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	bd80      	pop	{r7, pc}
	...

0800f670 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d06b      	beq.n	800f75c <I2C_GetTiming+0xec>
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d068      	beq.n	800f75c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f68a:	2300      	movs	r3, #0
 800f68c:	613b      	str	r3, [r7, #16]
 800f68e:	e060      	b.n	800f752 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f690:	4a35      	ldr	r2, [pc, #212]	; (800f768 <I2C_GetTiming+0xf8>)
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	212c      	movs	r1, #44	; 0x2c
 800f696:	fb01 f303 	mul.w	r3, r1, r3
 800f69a:	4413      	add	r3, r2
 800f69c:	3304      	adds	r3, #4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	683a      	ldr	r2, [r7, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d352      	bcc.n	800f74c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800f6a6:	4a30      	ldr	r2, [pc, #192]	; (800f768 <I2C_GetTiming+0xf8>)
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	212c      	movs	r1, #44	; 0x2c
 800f6ac:	fb01 f303 	mul.w	r3, r1, r3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	3308      	adds	r3, #8
 800f6b4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d847      	bhi.n	800f74c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800f6bc:	6939      	ldr	r1, [r7, #16]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f856 	bl	800f770 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800f6c4:	6939      	ldr	r1, [r7, #16]
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 f940 	bl	800f94c <I2C_Compute_SCLL_SCLH>
 800f6cc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b7f      	cmp	r3, #127	; 0x7f
 800f6d2:	d842      	bhi.n	800f75a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f6d4:	4925      	ldr	r1, [pc, #148]	; (800f76c <I2C_GetTiming+0xfc>)
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	009b      	lsls	r3, r3, #2
 800f6dc:	4413      	add	r3, r2
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	440b      	add	r3, r1
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f6e6:	4821      	ldr	r0, [pc, #132]	; (800f76c <I2C_GetTiming+0xfc>)
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	4413      	add	r3, r2
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	4403      	add	r3, r0
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	051b      	lsls	r3, r3, #20
 800f6fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f6fe:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f700:	481a      	ldr	r0, [pc, #104]	; (800f76c <I2C_GetTiming+0xfc>)
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	4613      	mov	r3, r2
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	4413      	add	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4403      	add	r3, r0
 800f70e:	3308      	adds	r3, #8
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	041b      	lsls	r3, r3, #16
 800f714:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f718:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800f71a:	4814      	ldr	r0, [pc, #80]	; (800f76c <I2C_GetTiming+0xfc>)
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	4613      	mov	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4413      	add	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4403      	add	r3, r0
 800f728:	330c      	adds	r3, #12
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f730:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800f732:	480e      	ldr	r0, [pc, #56]	; (800f76c <I2C_GetTiming+0xfc>)
 800f734:	68fa      	ldr	r2, [r7, #12]
 800f736:	4613      	mov	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4413      	add	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4403      	add	r3, r0
 800f740:	3310      	adds	r3, #16
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f746:	430b      	orrs	r3, r1
 800f748:	617b      	str	r3, [r7, #20]
        }
        break;
 800f74a:	e006      	b.n	800f75a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	3301      	adds	r3, #1
 800f750:	613b      	str	r3, [r7, #16]
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b02      	cmp	r3, #2
 800f756:	d99b      	bls.n	800f690 <I2C_GetTiming+0x20>
 800f758:	e000      	b.n	800f75c <I2C_GetTiming+0xec>
        break;
 800f75a:	bf00      	nop
      }
    }
  }

  return ret;
 800f75c:	697b      	ldr	r3, [r7, #20]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	0802d22c 	.word	0x0802d22c
 800f76c:	2400acd4 	.word	0x2400acd4

0800f770 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f770:	b480      	push	{r7}
 800f772:	b08f      	sub	sp, #60	; 0x3c
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800f77a:	2310      	movs	r3, #16
 800f77c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	085a      	lsrs	r2, r3, #1
 800f782:	4b6e      	ldr	r3, [pc, #440]	; (800f93c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800f784:	4413      	add	r3, r2
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	fbb3 f3f2 	udiv	r3, r3, r2
 800f78c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f78e:	2332      	movs	r3, #50	; 0x32
 800f790:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800f792:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f796:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f798:	4a69      	ldr	r2, [pc, #420]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	212c      	movs	r1, #44	; 0x2c
 800f79e:	fb01 f303 	mul.w	r3, r1, r3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	3324      	adds	r3, #36	; 0x24
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	4a65      	ldr	r2, [pc, #404]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	212c      	movs	r1, #44	; 0x2c
 800f7b0:	fb01 f303 	mul.w	r3, r1, r3
 800f7b4:	4413      	add	r3, r2
 800f7b6:	330c      	adds	r3, #12
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f7bc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f7be:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f7c0:	495f      	ldr	r1, [pc, #380]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	202c      	movs	r0, #44	; 0x2c
 800f7c6:	fb00 f303 	mul.w	r3, r0, r3
 800f7ca:	440b      	add	r3, r1
 800f7cc:	3328      	adds	r3, #40	; 0x28
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3303      	adds	r3, #3
 800f7d2:	69f9      	ldr	r1, [r7, #28]
 800f7d4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f7dc:	4a58      	ldr	r2, [pc, #352]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	212c      	movs	r1, #44	; 0x2c
 800f7e2:	fb01 f303 	mul.w	r3, r1, r3
 800f7e6:	4413      	add	r3, r2
 800f7e8:	3310      	adds	r3, #16
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	4a54      	ldr	r2, [pc, #336]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	212c      	movs	r1, #44	; 0x2c
 800f7f4:	fb01 f303 	mul.w	r3, r1, r3
 800f7f8:	4413      	add	r3, r2
 800f7fa:	3320      	adds	r3, #32
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f800:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f802:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f804:	494e      	ldr	r1, [pc, #312]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	202c      	movs	r0, #44	; 0x2c
 800f80a:	fb00 f303 	mul.w	r3, r0, r3
 800f80e:	440b      	add	r3, r1
 800f810:	3328      	adds	r3, #40	; 0x28
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	3304      	adds	r3, #4
 800f816:	69f9      	ldr	r1, [r7, #28]
 800f818:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f81c:	1ad3      	subs	r3, r2, r3
 800f81e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800f820:	4a47      	ldr	r2, [pc, #284]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	212c      	movs	r1, #44	; 0x2c
 800f826:	fb01 f303 	mul.w	r3, r1, r3
 800f82a:	4413      	add	r3, r2
 800f82c:	3320      	adds	r3, #32
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4618      	mov	r0, r3
 800f832:	4a43      	ldr	r2, [pc, #268]	; (800f940 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	212c      	movs	r1, #44	; 0x2c
 800f838:	fb01 f303 	mul.w	r3, r1, r3
 800f83c:	4413      	add	r3, r2
 800f83e:	3314      	adds	r3, #20
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4403      	add	r3, r0
 800f844:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	2b00      	cmp	r3, #0
 800f84a:	dc01      	bgt.n	800f850 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800f84c:	2300      	movs	r3, #0
 800f84e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800f850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f852:	2b00      	cmp	r3, #0
 800f854:	dc01      	bgt.n	800f85a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800f856:	2300      	movs	r3, #0
 800f858:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f85a:	2300      	movs	r3, #0
 800f85c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f85e:	e062      	b.n	800f926 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f860:	2300      	movs	r3, #0
 800f862:	627b      	str	r3, [r7, #36]	; 0x24
 800f864:	e059      	b.n	800f91a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800f866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f868:	3301      	adds	r3, #1
 800f86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f86c:	3201      	adds	r2, #1
 800f86e:	fb03 f202 	mul.w	r2, r3, r2
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	fb02 f303 	mul.w	r3, r2, r3
 800f878:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d348      	bcc.n	800f914 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f882:	2300      	movs	r3, #0
 800f884:	623b      	str	r3, [r7, #32]
 800f886:	e042      	b.n	800f90e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	3301      	adds	r3, #1
 800f88c:	6a3a      	ldr	r2, [r7, #32]
 800f88e:	fb03 f202 	mul.w	r2, r3, r2
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	fb02 f303 	mul.w	r3, r2, r3
 800f898:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d332      	bcc.n	800f908 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d82e      	bhi.n	800f908 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800f8aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d02a      	beq.n	800f908 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800f8b2:	4b24      	ldr	r3, [pc, #144]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	4924      	ldr	r1, [pc, #144]	; (800f948 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	440b      	add	r3, r1
 800f8c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8c4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800f8c6:	4b1f      	ldr	r3, [pc, #124]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	491f      	ldr	r1, [pc, #124]	; (800f948 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	440b      	add	r3, r1
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8da:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800f8dc:	4b19      	ldr	r3, [pc, #100]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	4919      	ldr	r1, [pc, #100]	; (800f948 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	440b      	add	r3, r1
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	6a3a      	ldr	r2, [r7, #32]
 800f8f0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800f8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800f8f6:	4b13      	ldr	r3, [pc, #76]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	4a11      	ldr	r2, [pc, #68]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8fe:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800f900:	4b10      	ldr	r3, [pc, #64]	; (800f944 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2b7f      	cmp	r3, #127	; 0x7f
 800f906:	d812      	bhi.n	800f92e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	3301      	adds	r3, #1
 800f90c:	623b      	str	r3, [r7, #32]
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	2b0f      	cmp	r3, #15
 800f912:	d9b9      	bls.n	800f888 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f916:	3301      	adds	r3, #1
 800f918:	627b      	str	r3, [r7, #36]	; 0x24
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	2b0f      	cmp	r3, #15
 800f91e:	d9a2      	bls.n	800f866 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	3301      	adds	r3, #1
 800f924:	62bb      	str	r3, [r7, #40]	; 0x28
 800f926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f928:	2b0f      	cmp	r3, #15
 800f92a:	d999      	bls.n	800f860 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800f92c:	e000      	b.n	800f930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800f92e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800f930:	373c      	adds	r7, #60	; 0x3c
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	3b9aca00 	.word	0x3b9aca00
 800f940:	0802d22c 	.word	0x0802d22c
 800f944:	2400b6d4 	.word	0x2400b6d4
 800f948:	2400acd4 	.word	0x2400acd4

0800f94c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b093      	sub	sp, #76	; 0x4c
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800f956:	f04f 33ff 	mov.w	r3, #4294967295
 800f95a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	085a      	lsrs	r2, r3, #1
 800f960:	4b7a      	ldr	r3, [pc, #488]	; (800fb4c <I2C_Compute_SCLL_SCLH+0x200>)
 800f962:	4413      	add	r3, r2
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	fbb3 f3f2 	udiv	r3, r3, r2
 800f96a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800f96c:	4a78      	ldr	r2, [pc, #480]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	212c      	movs	r1, #44	; 0x2c
 800f972:	fb01 f303 	mul.w	r3, r1, r3
 800f976:	4413      	add	r3, r2
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	085a      	lsrs	r2, r3, #1
 800f97c:	4b73      	ldr	r3, [pc, #460]	; (800fb4c <I2C_Compute_SCLL_SCLH+0x200>)
 800f97e:	4413      	add	r3, r2
 800f980:	4973      	ldr	r1, [pc, #460]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	202c      	movs	r0, #44	; 0x2c
 800f986:	fb00 f202 	mul.w	r2, r0, r2
 800f98a:	440a      	add	r2, r1
 800f98c:	6812      	ldr	r2, [r2, #0]
 800f98e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f992:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f994:	2332      	movs	r3, #50	; 0x32
 800f996:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800f998:	4a6d      	ldr	r2, [pc, #436]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	212c      	movs	r1, #44	; 0x2c
 800f99e:	fb01 f303 	mul.w	r3, r1, r3
 800f9a2:	4413      	add	r3, r2
 800f9a4:	3328      	adds	r3, #40	; 0x28
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	fb02 f303 	mul.w	r3, r2, r3
 800f9ae:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800f9b0:	4a67      	ldr	r2, [pc, #412]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	212c      	movs	r1, #44	; 0x2c
 800f9b6:	fb01 f303 	mul.w	r3, r1, r3
 800f9ba:	4413      	add	r3, r2
 800f9bc:	3304      	adds	r3, #4
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a62      	ldr	r2, [pc, #392]	; (800fb4c <I2C_Compute_SCLL_SCLH+0x200>)
 800f9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9c6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800f9c8:	4a61      	ldr	r2, [pc, #388]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	212c      	movs	r1, #44	; 0x2c
 800f9ce:	fb01 f303 	mul.w	r3, r1, r3
 800f9d2:	4413      	add	r3, r2
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a5c      	ldr	r2, [pc, #368]	; (800fb4c <I2C_Compute_SCLL_SCLH+0x200>)
 800f9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9de:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800f9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800f9e8:	e0a3      	b.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800f9ea:	495a      	ldr	r1, [pc, #360]	; (800fb54 <I2C_Compute_SCLL_SCLH+0x208>)
 800f9ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4413      	add	r3, r2
 800f9f4:	009b      	lsls	r3, r3, #2
 800f9f6:	440b      	add	r3, r1
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	1c5a      	adds	r2, r3, #1
 800f9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fe:	fb02 f303 	mul.w	r3, r2, r3
 800fa02:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fa04:	2300      	movs	r3, #0
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa08:	e08c      	b.n	800fb24 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800fa0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	441a      	add	r2, r3
 800fa10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa12:	3301      	adds	r3, #1
 800fa14:	6979      	ldr	r1, [r7, #20]
 800fa16:	fb03 f101 	mul.w	r1, r3, r1
 800fa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1c:	005b      	lsls	r3, r3, #1
 800fa1e:	440b      	add	r3, r1
 800fa20:	4413      	add	r3, r2
 800fa22:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800fa24:	4a4a      	ldr	r2, [pc, #296]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	212c      	movs	r1, #44	; 0x2c
 800fa2a:	fb01 f303 	mul.w	r3, r1, r3
 800fa2e:	4413      	add	r3, r2
 800fa30:	3318      	adds	r3, #24
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	693a      	ldr	r2, [r7, #16]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d971      	bls.n	800fb1e <I2C_Compute_SCLL_SCLH+0x1d2>
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3e:	1ad2      	subs	r2, r2, r3
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	089b      	lsrs	r3, r3, #2
 800fa46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d268      	bcs.n	800fb1e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa50:	e062      	b.n	800fb18 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800fa52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	441a      	add	r2, r3
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	6979      	ldr	r1, [r7, #20]
 800fa5e:	fb03 f101 	mul.w	r1, r3, r1
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	005b      	lsls	r3, r3, #1
 800fa66:	440b      	add	r3, r1
 800fa68:	4413      	add	r3, r2
 800fa6a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	441a      	add	r2, r3
 800fa72:	4937      	ldr	r1, [pc, #220]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	202c      	movs	r0, #44	; 0x2c
 800fa78:	fb00 f303 	mul.w	r3, r0, r3
 800fa7c:	440b      	add	r3, r1
 800fa7e:	3320      	adds	r3, #32
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	441a      	add	r2, r3
 800fa84:	4932      	ldr	r1, [pc, #200]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	202c      	movs	r0, #44	; 0x2c
 800fa8a:	fb00 f303 	mul.w	r3, r0, r3
 800fa8e:	440b      	add	r3, r1
 800fa90:	3324      	adds	r3, #36	; 0x24
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4413      	add	r3, r2
 800fa96:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d338      	bcc.n	800fb12 <I2C_Compute_SCLL_SCLH+0x1c6>
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d834      	bhi.n	800fb12 <I2C_Compute_SCLL_SCLH+0x1c6>
 800faa8:	4a29      	ldr	r2, [pc, #164]	; (800fb50 <I2C_Compute_SCLL_SCLH+0x204>)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	212c      	movs	r1, #44	; 0x2c
 800faae:	fb01 f303 	mul.w	r3, r1, r3
 800fab2:	4413      	add	r3, r2
 800fab4:	331c      	adds	r3, #28
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d329      	bcc.n	800fb12 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fabe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d225      	bcs.n	800fb12 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	da02      	bge.n	800fada <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800fad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad6:	425b      	negs	r3, r3
 800fad8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fade:	429a      	cmp	r2, r3
 800fae0:	d917      	bls.n	800fb12 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800fae6:	491b      	ldr	r1, [pc, #108]	; (800fb54 <I2C_Compute_SCLL_SCLH+0x208>)
 800fae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faea:	4613      	mov	r3, r2
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	4413      	add	r3, r2
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	440b      	add	r3, r1
 800faf4:	3310      	adds	r3, #16
 800faf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800faf8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800fafa:	4916      	ldr	r1, [pc, #88]	; (800fb54 <I2C_Compute_SCLL_SCLH+0x208>)
 800fafc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fafe:	4613      	mov	r3, r2
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	4413      	add	r3, r2
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	440b      	add	r3, r1
 800fb08:	330c      	adds	r3, #12
 800fb0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb0c:	601a      	str	r2, [r3, #0]
              ret = count;
 800fb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb10:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	3301      	adds	r3, #1
 800fb16:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1a:	2bff      	cmp	r3, #255	; 0xff
 800fb1c:	d999      	bls.n	800fa52 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb20:	3301      	adds	r3, #1
 800fb22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb26:	2bff      	cmp	r3, #255	; 0xff
 800fb28:	f67f af6f 	bls.w	800fa0a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	3301      	adds	r3, #1
 800fb30:	637b      	str	r3, [r7, #52]	; 0x34
 800fb32:	4b09      	ldr	r3, [pc, #36]	; (800fb58 <I2C_Compute_SCLL_SCLH+0x20c>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	f4ff af56 	bcc.w	800f9ea <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800fb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	374c      	adds	r7, #76	; 0x4c
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr
 800fb4c:	3b9aca00 	.word	0x3b9aca00
 800fb50:	0802d22c 	.word	0x0802d22c
 800fb54:	2400acd4 	.word	0x2400acd4
 800fb58:	2400b6d4 	.word	0x2400b6d4

0800fb5c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08a      	sub	sp, #40	; 0x28
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800fb64:	4b31      	ldr	r3, [pc, #196]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb6a:	4a30      	ldr	r2, [pc, #192]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb6c:	f043 0308 	orr.w	r3, r3, #8
 800fb70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb74:	4b2d      	ldr	r3, [pc, #180]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb7a:	f003 0308 	and.w	r3, r3, #8
 800fb7e:	613b      	str	r3, [r7, #16]
 800fb80:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800fb82:	4b2a      	ldr	r3, [pc, #168]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb88:	4a28      	ldr	r2, [pc, #160]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb8a:	f043 0308 	orr.w	r3, r3, #8
 800fb8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb92:	4b26      	ldr	r3, [pc, #152]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fb94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb98:	f003 0308 	and.w	r3, r3, #8
 800fb9c:	60fb      	str	r3, [r7, #12]
 800fb9e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800fba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fba4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fba6:	2312      	movs	r3, #18
 800fba8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fbae:	2302      	movs	r3, #2
 800fbb0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800fbb2:	2304      	movs	r3, #4
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800fbb6:	f107 0314 	add.w	r3, r7, #20
 800fbba:	4619      	mov	r1, r3
 800fbbc:	481c      	ldr	r0, [pc, #112]	; (800fc30 <I2C4_MspInit+0xd4>)
 800fbbe:	f001 fd43 	bl	8011648 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800fbc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbc6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fbc8:	2312      	movs	r3, #18
 800fbca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fbd0:	2302      	movs	r3, #2
 800fbd2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800fbd8:	f107 0314 	add.w	r3, r7, #20
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4814      	ldr	r0, [pc, #80]	; (800fc30 <I2C4_MspInit+0xd4>)
 800fbe0:	f001 fd32 	bl	8011648 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800fbe4:	4b11      	ldr	r3, [pc, #68]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fbe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbea:	4a10      	ldr	r2, [pc, #64]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fbec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800fbf4:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fbf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbfe:	60bb      	str	r3, [r7, #8]
 800fc00:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800fc02:	4b0a      	ldr	r3, [pc, #40]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fc04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc08:	4a08      	ldr	r2, [pc, #32]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc0e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800fc12:	4b06      	ldr	r3, [pc, #24]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fc14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc18:	4a04      	ldr	r2, [pc, #16]	; (800fc2c <I2C4_MspInit+0xd0>)
 800fc1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800fc22:	bf00      	nop
 800fc24:	3728      	adds	r7, #40	; 0x28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	58024400 	.word	0x58024400
 800fc30:	58020c00 	.word	0x58020c00

0800fc34 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b088      	sub	sp, #32
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800fc3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	4619      	mov	r1, r3
 800fc46:	480b      	ldr	r0, [pc, #44]	; (800fc74 <I2C4_MspDeInit+0x40>)
 800fc48:	f001 feae 	bl	80119a8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800fc4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	4619      	mov	r1, r3
 800fc56:	4807      	ldr	r0, [pc, #28]	; (800fc74 <I2C4_MspDeInit+0x40>)
 800fc58:	f001 fea6 	bl	80119a8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800fc5c:	4b06      	ldr	r3, [pc, #24]	; (800fc78 <I2C4_MspDeInit+0x44>)
 800fc5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc62:	4a05      	ldr	r2, [pc, #20]	; (800fc78 <I2C4_MspDeInit+0x44>)
 800fc64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800fc6c:	bf00      	nop
 800fc6e:	3720      	adds	r7, #32
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	58020c00 	.word	0x58020c00
 800fc78:	58024400 	.word	0x58024400

0800fc7c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af04      	add	r7, sp, #16
 800fc82:	607b      	str	r3, [r7, #4]
 800fc84:	4603      	mov	r3, r0
 800fc86:	81fb      	strh	r3, [r7, #14]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	81bb      	strh	r3, [r7, #12]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fc90:	8978      	ldrh	r0, [r7, #10]
 800fc92:	89ba      	ldrh	r2, [r7, #12]
 800fc94:	89f9      	ldrh	r1, [r7, #14]
 800fc96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc9a:	9302      	str	r3, [sp, #8]
 800fc9c:	8b3b      	ldrh	r3, [r7, #24]
 800fc9e:	9301      	str	r3, [sp, #4]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	4603      	mov	r3, r0
 800fca6:	4807      	ldr	r0, [pc, #28]	; (800fcc4 <I2C4_WriteReg+0x48>)
 800fca8:	f002 f8bc 	bl	8011e24 <HAL_I2C_Mem_Write>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	e001      	b.n	800fcba <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fcb6:	f06f 0307 	mvn.w	r3, #7
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	2400b6d8 	.word	0x2400b6d8

0800fcc8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b088      	sub	sp, #32
 800fccc:	af04      	add	r7, sp, #16
 800fcce:	607b      	str	r3, [r7, #4]
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	81fb      	strh	r3, [r7, #14]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	81bb      	strh	r3, [r7, #12]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fcdc:	8978      	ldrh	r0, [r7, #10]
 800fcde:	89ba      	ldrh	r2, [r7, #12]
 800fce0:	89f9      	ldrh	r1, [r7, #14]
 800fce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fce6:	9302      	str	r3, [sp, #8]
 800fce8:	8b3b      	ldrh	r3, [r7, #24]
 800fcea:	9301      	str	r3, [sp, #4]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	4807      	ldr	r0, [pc, #28]	; (800fd10 <I2C4_ReadReg+0x48>)
 800fcf4:	f002 f9aa 	bl	801204c <HAL_I2C_Mem_Read>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d101      	bne.n	800fd02 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e001      	b.n	800fd06 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fd02:	f06f 0307 	mvn.w	r3, #7
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	2400b6d8 	.word	0x2400b6d8

0800fd14 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b090      	sub	sp, #64	; 0x40
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d003      	beq.n	800fd30 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fd28:	f06f 0301 	mvn.w	r3, #1
 800fd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd2e:	e090      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800fd30:	494a      	ldr	r1, [pc, #296]	; (800fe5c <BSP_QSPI_Init+0x148>)
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	4613      	mov	r3, r2
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	4413      	add	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	440b      	add	r3, r1
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f040 8086 	bne.w	800fe52 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800fd46:	4846      	ldr	r0, [pc, #280]	; (800fe60 <BSP_QSPI_Init+0x14c>)
 800fd48:	f000 f99c 	bl	8010084 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d17f      	bne.n	800fe52 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800fd52:	f107 031c 	add.w	r3, r7, #28
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe ffea 	bl	800ed30 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	785b      	ldrb	r3, [r3, #1]
 800fd60:	461a      	mov	r2, r3
 800fd62:	4b40      	ldr	r3, [pc, #256]	; (800fe64 <BSP_QSPI_Init+0x150>)
 800fd64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd68:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800fd6a:	2340      	movs	r3, #64	; 0x40
 800fd6c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd74:	fa93 f3a3 	rbit	r3, r3
 800fd78:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d101      	bne.n	800fd88 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800fd84:	2320      	movs	r3, #32
 800fd86:	e003      	b.n	800fd90 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	fab3 f383 	clz	r3, r3
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	3b01      	subs	r3, #1
 800fd92:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	785b      	ldrb	r3, [r3, #1]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d101      	bne.n	800fda0 <BSP_QSPI_Init+0x8c>
 800fd9c:	2310      	movs	r3, #16
 800fd9e:	e000      	b.n	800fda2 <BSP_QSPI_Init+0x8e>
 800fda0:	2300      	movs	r3, #0
 800fda2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800fda4:	f107 030c 	add.w	r3, r7, #12
 800fda8:	4619      	mov	r1, r3
 800fdaa:	482d      	ldr	r0, [pc, #180]	; (800fe60 <BSP_QSPI_Init+0x14c>)
 800fdac:	f000 f85c 	bl	800fe68 <MX_QSPI_Init>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d003      	beq.n	800fdbe <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800fdb6:	f06f 0303 	mvn.w	r3, #3
 800fdba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdbc:	e049      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 faa8 	bl	8010314 <QSPI_ResetMemory>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d003      	beq.n	800fdd2 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fdca:	f06f 0304 	mvn.w	r3, #4
 800fdce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdd0:	e03f      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fdd2:	4922      	ldr	r1, [pc, #136]	; (800fe5c <BSP_QSPI_Init+0x148>)
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	4613      	mov	r3, r2
 800fdd8:	005b      	lsls	r3, r3, #1
 800fdda:	4413      	add	r3, r2
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	440b      	add	r3, r1
 800fde0:	3301      	adds	r3, #1
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	4619      	mov	r1, r3
 800fde6:	481e      	ldr	r0, [pc, #120]	; (800fe60 <BSP_QSPI_Init+0x14c>)
 800fde8:	f7ff f811 	bl	800ee0e <MT25TL01G_AutoPollingMemReady>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fdf2:	f06f 0304 	mvn.w	r3, #4
 800fdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdf8:	e02b      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fdfa:	4918      	ldr	r1, [pc, #96]	; (800fe5c <BSP_QSPI_Init+0x148>)
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	4613      	mov	r3, r2
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	4413      	add	r3, r2
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	440b      	add	r3, r1
 800fe08:	3301      	adds	r3, #1
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4814      	ldr	r0, [pc, #80]	; (800fe60 <BSP_QSPI_Init+0x14c>)
 800fe10:	f7fe ffb5 	bl	800ed7e <MT25TL01G_Enter4BytesAddressMode>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d003      	beq.n	800fe22 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe1a:	f06f 0304 	mvn.w	r3, #4
 800fe1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe20:	e017      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fae2 	bl	80103ec <QSPI_DummyCyclesCfg>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d003      	beq.n	800fe36 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe2e:	f06f 0304 	mvn.w	r3, #4
 800fe32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe34:	e00d      	b.n	800fe52 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	7819      	ldrb	r1, [r3, #0]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	785b      	ldrb	r3, [r3, #1]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f89d 	bl	800ff80 <BSP_QSPI_ConfigFlash>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d002      	beq.n	800fe52 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe4c:	f06f 0304 	mvn.w	r3, #4
 800fe50:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800fe52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3740      	adds	r7, #64	; 0x40
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	2400b724 	.word	0x2400b724
 800fe60:	2400027c 	.word	0x2400027c
 800fe64:	0802d2b0 	.word	0x0802d2b0

0800fe68 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a13      	ldr	r2, [pc, #76]	; (800fec4 <MX_QSPI_Init+0x5c>)
 800fe76:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2201      	movs	r2, #1
 800fe84:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	689a      	ldr	r2, [r3, #8]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	681a      	ldr	r2, [r3, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f44f 7240 	mov.w	r2, #768	; 0x300
 800fe9c:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2200      	movs	r2, #0
 800fea8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	68da      	ldr	r2, [r3, #12]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f003 fa92 	bl	80133dc <HAL_QSPI_Init>
 800feb8:	4603      	mov	r3, r0
}
 800feba:	4618      	mov	r0, r3
 800febc:	3708      	adds	r7, #8
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	52005000 	.word	0x52005000

0800fec8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fed0:	2300      	movs	r3, #0
 800fed2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800feda:	f06f 0301 	mvn.w	r3, #1
 800fede:	60fb      	str	r3, [r7, #12]
 800fee0:	e045      	b.n	800ff6e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800fee2:	4925      	ldr	r1, [pc, #148]	; (800ff78 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	4613      	mov	r3, r2
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	4413      	add	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	440b      	add	r3, r1
 800fef0:	3302      	adds	r3, #2
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d11d      	bne.n	800ff34 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fef8:	491f      	ldr	r1, [pc, #124]	; (800ff78 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800fefa:	687a      	ldr	r2, [r7, #4]
 800fefc:	4613      	mov	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	440b      	add	r3, r1
 800ff06:	3301      	adds	r3, #1
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	481b      	ldr	r0, [pc, #108]	; (800ff7c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ff0e:	f7ff f8d3 	bl	800f0b8 <MT25TL01G_EnableMemoryMappedModeSTR>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d003      	beq.n	800ff20 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff18:	f06f 0304 	mvn.w	r3, #4
 800ff1c:	60fb      	str	r3, [r7, #12]
 800ff1e:	e026      	b.n	800ff6e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ff20:	4915      	ldr	r1, [pc, #84]	; (800ff78 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	4613      	mov	r3, r2
 800ff26:	005b      	lsls	r3, r3, #1
 800ff28:	4413      	add	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	440b      	add	r3, r1
 800ff2e:	2202      	movs	r2, #2
 800ff30:	701a      	strb	r2, [r3, #0]
 800ff32:	e01c      	b.n	800ff6e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ff34:	4910      	ldr	r1, [pc, #64]	; (800ff78 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	005b      	lsls	r3, r3, #1
 800ff3c:	4413      	add	r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	440b      	add	r3, r1
 800ff42:	3301      	adds	r3, #1
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	4619      	mov	r1, r3
 800ff48:	480c      	ldr	r0, [pc, #48]	; (800ff7c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ff4a:	f7ff f84b 	bl	800efe4 <MT25TL01G_EnableMemoryMappedModeDTR>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff54:	f06f 0304 	mvn.w	r3, #4
 800ff58:	60fb      	str	r3, [r7, #12]
 800ff5a:	e008      	b.n	800ff6e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ff5c:	4906      	ldr	r1, [pc, #24]	; (800ff78 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	4613      	mov	r3, r2
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	4413      	add	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	440b      	add	r3, r1
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	2400b724 	.word	0x2400b724
 800ff7c:	2400027c 	.word	0x2400027c

0800ff80 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	460b      	mov	r3, r1
 800ff8a:	70fb      	strb	r3, [r7, #3]
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800ff90:	2300      	movs	r3, #0
 800ff92:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ff9a:	f06f 0301 	mvn.w	r3, #1
 800ff9e:	60fb      	str	r3, [r7, #12]
 800ffa0:	e067      	b.n	8010072 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800ffa2:	4936      	ldr	r1, [pc, #216]	; (801007c <BSP_QSPI_ConfigFlash+0xfc>)
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	005b      	lsls	r3, r3, #1
 800ffaa:	4413      	add	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	440b      	add	r3, r1
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b02      	cmp	r3, #2
 800ffb4:	d103      	bne.n	800ffbe <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800ffb6:	f06f 0319 	mvn.w	r3, #25
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	e059      	b.n	8010072 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ffbe:	78bb      	ldrb	r3, [r7, #2]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d101      	bne.n	800ffc8 <BSP_QSPI_ConfigFlash+0x48>
 800ffc4:	2310      	movs	r3, #16
 800ffc6:	e000      	b.n	800ffca <BSP_QSPI_ConfigFlash+0x4a>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	4a2d      	ldr	r2, [pc, #180]	; (8010080 <BSP_QSPI_ConfigFlash+0x100>)
 800ffcc:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800ffce:	482c      	ldr	r0, [pc, #176]	; (8010080 <BSP_QSPI_ConfigFlash+0x100>)
 800ffd0:	f003 fa04 	bl	80133dc <HAL_QSPI_Init>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d003      	beq.n	800ffe2 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800ffda:	f06f 0303 	mvn.w	r3, #3
 800ffde:	60fb      	str	r3, [r7, #12]
 800ffe0:	e047      	b.n	8010072 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800ffe2:	4926      	ldr	r1, [pc, #152]	; (801007c <BSP_QSPI_ConfigFlash+0xfc>)
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	4613      	mov	r3, r2
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4413      	add	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	440b      	add	r3, r1
 800fff0:	3301      	adds	r3, #1
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2b03      	cmp	r3, #3
 800fff6:	d10c      	bne.n	8010012 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800fff8:	78fb      	ldrb	r3, [r7, #3]
 800fffa:	2b03      	cmp	r3, #3
 800fffc:	d016      	beq.n	801002c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800fffe:	4820      	ldr	r0, [pc, #128]	; (8010080 <BSP_QSPI_ConfigFlash+0x100>)
 8010000:	f7fe ffc6 	bl	800ef90 <MT25TL01G_ExitQPIMode>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d010      	beq.n	801002c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 801000a:	f06f 0304 	mvn.w	r3, #4
 801000e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010010:	e00c      	b.n	801002c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8010012:	78fb      	ldrb	r3, [r7, #3]
 8010014:	2b03      	cmp	r3, #3
 8010016:	d10b      	bne.n	8010030 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8010018:	4819      	ldr	r0, [pc, #100]	; (8010080 <BSP_QSPI_ConfigFlash+0x100>)
 801001a:	f7fe ff8f 	bl	800ef3c <MT25TL01G_EnterQPIMode>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d005      	beq.n	8010030 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8010024:	f06f 0304 	mvn.w	r3, #4
 8010028:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 801002a:	e001      	b.n	8010030 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8010030:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d11c      	bne.n	8010072 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8010038:	4910      	ldr	r1, [pc, #64]	; (801007c <BSP_QSPI_ConfigFlash+0xfc>)
 801003a:	687a      	ldr	r2, [r7, #4]
 801003c:	4613      	mov	r3, r2
 801003e:	005b      	lsls	r3, r3, #1
 8010040:	4413      	add	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	440b      	add	r3, r1
 8010046:	2201      	movs	r2, #1
 8010048:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 801004a:	490c      	ldr	r1, [pc, #48]	; (801007c <BSP_QSPI_ConfigFlash+0xfc>)
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	4613      	mov	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	009b      	lsls	r3, r3, #2
 8010056:	440b      	add	r3, r1
 8010058:	3301      	adds	r3, #1
 801005a:	78fa      	ldrb	r2, [r7, #3]
 801005c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 801005e:	4907      	ldr	r1, [pc, #28]	; (801007c <BSP_QSPI_ConfigFlash+0xfc>)
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	4613      	mov	r3, r2
 8010064:	005b      	lsls	r3, r3, #1
 8010066:	4413      	add	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	440b      	add	r3, r1
 801006c:	3302      	adds	r3, #2
 801006e:	78ba      	ldrb	r2, [r7, #2]
 8010070:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010072:	68fb      	ldr	r3, [r7, #12]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	2400b724 	.word	0x2400b724
 8010080:	2400027c 	.word	0x2400027c

08010084 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b094      	sub	sp, #80	; 0x50
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 801008c:	4b9c      	ldr	r3, [pc, #624]	; (8010300 <QSPI_MspInit+0x27c>)
 801008e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010092:	4a9b      	ldr	r2, [pc, #620]	; (8010300 <QSPI_MspInit+0x27c>)
 8010094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010098:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801009c:	4b98      	ldr	r3, [pc, #608]	; (8010300 <QSPI_MspInit+0x27c>)
 801009e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80100a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80100aa:	4b95      	ldr	r3, [pc, #596]	; (8010300 <QSPI_MspInit+0x27c>)
 80100ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ae:	4a94      	ldr	r2, [pc, #592]	; (8010300 <QSPI_MspInit+0x27c>)
 80100b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100b4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80100b6:	4b92      	ldr	r3, [pc, #584]	; (8010300 <QSPI_MspInit+0x27c>)
 80100b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ba:	4a91      	ldr	r2, [pc, #580]	; (8010300 <QSPI_MspInit+0x27c>)
 80100bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100c0:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 80100c2:	4b8f      	ldr	r3, [pc, #572]	; (8010300 <QSPI_MspInit+0x27c>)
 80100c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100c8:	4a8d      	ldr	r2, [pc, #564]	; (8010300 <QSPI_MspInit+0x27c>)
 80100ca:	f043 0320 	orr.w	r3, r3, #32
 80100ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80100d2:	4b8b      	ldr	r3, [pc, #556]	; (8010300 <QSPI_MspInit+0x27c>)
 80100d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100d8:	f003 0320 	and.w	r3, r3, #32
 80100dc:	637b      	str	r3, [r7, #52]	; 0x34
 80100de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80100e0:	4b87      	ldr	r3, [pc, #540]	; (8010300 <QSPI_MspInit+0x27c>)
 80100e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100e6:	4a86      	ldr	r2, [pc, #536]	; (8010300 <QSPI_MspInit+0x27c>)
 80100e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80100f0:	4b83      	ldr	r3, [pc, #524]	; (8010300 <QSPI_MspInit+0x27c>)
 80100f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100fa:	633b      	str	r3, [r7, #48]	; 0x30
 80100fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80100fe:	4b80      	ldr	r3, [pc, #512]	; (8010300 <QSPI_MspInit+0x27c>)
 8010100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010104:	4a7e      	ldr	r2, [pc, #504]	; (8010300 <QSPI_MspInit+0x27c>)
 8010106:	f043 0308 	orr.w	r3, r3, #8
 801010a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801010e:	4b7c      	ldr	r3, [pc, #496]	; (8010300 <QSPI_MspInit+0x27c>)
 8010110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 801011c:	4b78      	ldr	r3, [pc, #480]	; (8010300 <QSPI_MspInit+0x27c>)
 801011e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010122:	4a77      	ldr	r2, [pc, #476]	; (8010300 <QSPI_MspInit+0x27c>)
 8010124:	f043 0320 	orr.w	r3, r3, #32
 8010128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801012c:	4b74      	ldr	r3, [pc, #464]	; (8010300 <QSPI_MspInit+0x27c>)
 801012e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010132:	f003 0320 	and.w	r3, r3, #32
 8010136:	62bb      	str	r3, [r7, #40]	; 0x28
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 801013a:	4b71      	ldr	r3, [pc, #452]	; (8010300 <QSPI_MspInit+0x27c>)
 801013c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010140:	4a6f      	ldr	r2, [pc, #444]	; (8010300 <QSPI_MspInit+0x27c>)
 8010142:	f043 0320 	orr.w	r3, r3, #32
 8010146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801014a:	4b6d      	ldr	r3, [pc, #436]	; (8010300 <QSPI_MspInit+0x27c>)
 801014c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010150:	f003 0320 	and.w	r3, r3, #32
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8010158:	4b69      	ldr	r3, [pc, #420]	; (8010300 <QSPI_MspInit+0x27c>)
 801015a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801015e:	4a68      	ldr	r2, [pc, #416]	; (8010300 <QSPI_MspInit+0x27c>)
 8010160:	f043 0320 	orr.w	r3, r3, #32
 8010164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010168:	4b65      	ldr	r3, [pc, #404]	; (8010300 <QSPI_MspInit+0x27c>)
 801016a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801016e:	f003 0320 	and.w	r3, r3, #32
 8010172:	623b      	str	r3, [r7, #32]
 8010174:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8010176:	4b62      	ldr	r3, [pc, #392]	; (8010300 <QSPI_MspInit+0x27c>)
 8010178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801017c:	4a60      	ldr	r2, [pc, #384]	; (8010300 <QSPI_MspInit+0x27c>)
 801017e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010186:	4b5e      	ldr	r3, [pc, #376]	; (8010300 <QSPI_MspInit+0x27c>)
 8010188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801018c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8010194:	4b5a      	ldr	r3, [pc, #360]	; (8010300 <QSPI_MspInit+0x27c>)
 8010196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801019a:	4a59      	ldr	r2, [pc, #356]	; (8010300 <QSPI_MspInit+0x27c>)
 801019c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101a4:	4b56      	ldr	r3, [pc, #344]	; (8010300 <QSPI_MspInit+0x27c>)
 80101a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ae:	61bb      	str	r3, [r7, #24]
 80101b0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80101b2:	4b53      	ldr	r3, [pc, #332]	; (8010300 <QSPI_MspInit+0x27c>)
 80101b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101b8:	4a51      	ldr	r2, [pc, #324]	; (8010300 <QSPI_MspInit+0x27c>)
 80101ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101c2:	4b4f      	ldr	r3, [pc, #316]	; (8010300 <QSPI_MspInit+0x27c>)
 80101c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80101d0:	4b4b      	ldr	r3, [pc, #300]	; (8010300 <QSPI_MspInit+0x27c>)
 80101d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101d6:	4a4a      	ldr	r2, [pc, #296]	; (8010300 <QSPI_MspInit+0x27c>)
 80101d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101e0:	4b47      	ldr	r3, [pc, #284]	; (8010300 <QSPI_MspInit+0x27c>)
 80101e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101ea:	613b      	str	r3, [r7, #16]
 80101ec:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80101ee:	4b44      	ldr	r3, [pc, #272]	; (8010300 <QSPI_MspInit+0x27c>)
 80101f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101f4:	4a42      	ldr	r2, [pc, #264]	; (8010300 <QSPI_MspInit+0x27c>)
 80101f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101fe:	4b40      	ldr	r3, [pc, #256]	; (8010300 <QSPI_MspInit+0x27c>)
 8010200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 801020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010210:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010212:	2302      	movs	r3, #2
 8010214:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010216:	2303      	movs	r3, #3
 8010218:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801021a:	2300      	movs	r3, #0
 801021c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801021e:	2309      	movs	r3, #9
 8010220:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8010222:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010226:	4619      	mov	r1, r3
 8010228:	4836      	ldr	r0, [pc, #216]	; (8010304 <QSPI_MspInit+0x280>)
 801022a:	f001 fa0d 	bl	8011648 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 801022e:	2340      	movs	r3, #64	; 0x40
 8010230:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010232:	2301      	movs	r3, #1
 8010234:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8010236:	230a      	movs	r3, #10
 8010238:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 801023a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801023e:	4619      	mov	r1, r3
 8010240:	4831      	ldr	r0, [pc, #196]	; (8010308 <QSPI_MspInit+0x284>)
 8010242:	f001 fa01 	bl	8011648 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8010246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801024c:	2300      	movs	r3, #0
 801024e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010250:	2309      	movs	r3, #9
 8010252:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8010254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010258:	4619      	mov	r1, r3
 801025a:	482c      	ldr	r0, [pc, #176]	; (801030c <QSPI_MspInit+0x288>)
 801025c:	f001 f9f4 	bl	8011648 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8010260:	2304      	movs	r3, #4
 8010262:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010264:	2309      	movs	r3, #9
 8010266:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8010268:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801026c:	4619      	mov	r1, r3
 801026e:	4828      	ldr	r0, [pc, #160]	; (8010310 <QSPI_MspInit+0x28c>)
 8010270:	f001 f9ea 	bl	8011648 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8010274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010278:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801027a:	230a      	movs	r3, #10
 801027c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 801027e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010282:	4619      	mov	r1, r3
 8010284:	481f      	ldr	r0, [pc, #124]	; (8010304 <QSPI_MspInit+0x280>)
 8010286:	f001 f9df 	bl	8011648 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801028a:	2308      	movs	r3, #8
 801028c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801028e:	2309      	movs	r3, #9
 8010290:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010296:	4619      	mov	r1, r3
 8010298:	481d      	ldr	r0, [pc, #116]	; (8010310 <QSPI_MspInit+0x28c>)
 801029a:	f001 f9d5 	bl	8011648 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 801029e:	2380      	movs	r3, #128	; 0x80
 80102a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80102a2:	2309      	movs	r3, #9
 80102a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80102a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102aa:	4619      	mov	r1, r3
 80102ac:	4815      	ldr	r0, [pc, #84]	; (8010304 <QSPI_MspInit+0x280>)
 80102ae:	f001 f9cb 	bl	8011648 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80102b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80102b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102bc:	4619      	mov	r1, r3
 80102be:	4812      	ldr	r0, [pc, #72]	; (8010308 <QSPI_MspInit+0x284>)
 80102c0:	f001 f9c2 	bl	8011648 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80102c4:	2340      	movs	r3, #64	; 0x40
 80102c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80102c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102cc:	4619      	mov	r1, r3
 80102ce:	480d      	ldr	r0, [pc, #52]	; (8010304 <QSPI_MspInit+0x280>)
 80102d0:	f001 f9ba 	bl	8011648 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80102d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80102d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80102da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102de:	4619      	mov	r1, r3
 80102e0:	4809      	ldr	r0, [pc, #36]	; (8010308 <QSPI_MspInit+0x284>)
 80102e2:	f001 f9b1 	bl	8011648 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80102e6:	2200      	movs	r2, #0
 80102e8:	210f      	movs	r1, #15
 80102ea:	205c      	movs	r0, #92	; 0x5c
 80102ec:	f000 fe9c 	bl	8011028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80102f0:	205c      	movs	r0, #92	; 0x5c
 80102f2:	f000 feb3 	bl	801105c <HAL_NVIC_EnableIRQ>
}
 80102f6:	bf00      	nop
 80102f8:	3750      	adds	r7, #80	; 0x50
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	58024400 	.word	0x58024400
 8010304:	58021400 	.word	0x58021400
 8010308:	58021800 	.word	0x58021800
 801030c:	58020c00 	.word	0x58020c00
 8010310:	58021c00 	.word	0x58021c00

08010314 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801031c:	2300      	movs	r3, #0
 801031e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010320:	2103      	movs	r1, #3
 8010322:	4830      	ldr	r0, [pc, #192]	; (80103e4 <QSPI_ResetMemory+0xd0>)
 8010324:	f7fe ff30 	bl	800f188 <MT25TL01G_ResetEnable>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d003      	beq.n	8010336 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 801032e:	f06f 0304 	mvn.w	r3, #4
 8010332:	60fb      	str	r3, [r7, #12]
 8010334:	e051      	b.n	80103da <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010336:	2103      	movs	r1, #3
 8010338:	482a      	ldr	r0, [pc, #168]	; (80103e4 <QSPI_ResetMemory+0xd0>)
 801033a:	f7fe ff57 	bl	800f1ec <MT25TL01G_ResetMemory>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d003      	beq.n	801034c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010344:	f06f 0304 	mvn.w	r3, #4
 8010348:	60fb      	str	r3, [r7, #12]
 801034a:	e046      	b.n	80103da <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801034c:	4926      	ldr	r1, [pc, #152]	; (80103e8 <QSPI_ResetMemory+0xd4>)
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4613      	mov	r3, r2
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	4413      	add	r3, r2
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	440b      	add	r3, r1
 801035a:	3301      	adds	r3, #1
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	4619      	mov	r1, r3
 8010360:	4820      	ldr	r0, [pc, #128]	; (80103e4 <QSPI_ResetMemory+0xd0>)
 8010362:	f7fe fd54 	bl	800ee0e <MT25TL01G_AutoPollingMemReady>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d003      	beq.n	8010374 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801036c:	f06f 0304 	mvn.w	r3, #4
 8010370:	60fb      	str	r3, [r7, #12]
 8010372:	e032      	b.n	80103da <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8010374:	2100      	movs	r1, #0
 8010376:	481b      	ldr	r0, [pc, #108]	; (80103e4 <QSPI_ResetMemory+0xd0>)
 8010378:	f7fe ff06 	bl	800f188 <MT25TL01G_ResetEnable>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d003      	beq.n	801038a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010382:	f06f 0304 	mvn.w	r3, #4
 8010386:	60fb      	str	r3, [r7, #12]
 8010388:	e027      	b.n	80103da <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801038a:	2100      	movs	r1, #0
 801038c:	4815      	ldr	r0, [pc, #84]	; (80103e4 <QSPI_ResetMemory+0xd0>)
 801038e:	f7fe ff2d 	bl	800f1ec <MT25TL01G_ResetMemory>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d003      	beq.n	80103a0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010398:	f06f 0304 	mvn.w	r3, #4
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e01c      	b.n	80103da <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80103a0:	4911      	ldr	r1, [pc, #68]	; (80103e8 <QSPI_ResetMemory+0xd4>)
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	440b      	add	r3, r1
 80103ae:	2201      	movs	r2, #1
 80103b0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 80103b2:	490d      	ldr	r1, [pc, #52]	; (80103e8 <QSPI_ResetMemory+0xd4>)
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	4613      	mov	r3, r2
 80103b8:	005b      	lsls	r3, r3, #1
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	440b      	add	r3, r1
 80103c0:	3301      	adds	r3, #1
 80103c2:	2200      	movs	r2, #0
 80103c4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80103c6:	4908      	ldr	r1, [pc, #32]	; (80103e8 <QSPI_ResetMemory+0xd4>)
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	4613      	mov	r3, r2
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	4413      	add	r3, r2
 80103d0:	009b      	lsls	r3, r3, #2
 80103d2:	440b      	add	r3, r1
 80103d4:	3302      	adds	r3, #2
 80103d6:	2200      	movs	r2, #0
 80103d8:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 80103da:	68fb      	ldr	r3, [r7, #12]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	2400027c 	.word	0x2400027c
 80103e8:	2400b724 	.word	0x2400b724

080103ec <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b092      	sub	sp, #72	; 0x48
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 80103f4:	2300      	movs	r3, #0
 80103f6:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80103fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010400:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8010402:	2385      	movs	r3, #133	; 0x85
 8010404:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010406:	2300      	movs	r3, #0
 8010408:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801040a:	2300      	movs	r3, #0
 801040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801040e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010412:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8010414:	2300      	movs	r3, #0
 8010416:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8010418:	2302      	movs	r3, #2
 801041a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801041c:	2300      	movs	r3, #0
 801041e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010420:	2300      	movs	r3, #0
 8010422:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010424:	2300      	movs	r3, #0
 8010426:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010428:	f107 030c 	add.w	r3, r7, #12
 801042c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010430:	4619      	mov	r1, r3
 8010432:	482b      	ldr	r0, [pc, #172]	; (80104e0 <QSPI_DummyCyclesCfg+0xf4>)
 8010434:	f003 fa00 	bl	8013838 <HAL_QSPI_Command>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801043e:	f06f 0304 	mvn.w	r3, #4
 8010442:	e048      	b.n	80104d6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010444:	f107 030a 	add.w	r3, r7, #10
 8010448:	f241 3288 	movw	r2, #5000	; 0x1388
 801044c:	4619      	mov	r1, r3
 801044e:	4824      	ldr	r0, [pc, #144]	; (80104e0 <QSPI_DummyCyclesCfg+0xf4>)
 8010450:	f003 fae2 	bl	8013a18 <HAL_QSPI_Receive>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d002      	beq.n	8010460 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801045a:	f06f 0304 	mvn.w	r3, #4
 801045e:	e03a      	b.n	80104d6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010460:	4920      	ldr	r1, [pc, #128]	; (80104e4 <QSPI_DummyCyclesCfg+0xf8>)
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	4613      	mov	r3, r2
 8010466:	005b      	lsls	r3, r3, #1
 8010468:	4413      	add	r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	440b      	add	r3, r1
 801046e:	3301      	adds	r3, #1
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	4619      	mov	r1, r3
 8010474:	481a      	ldr	r0, [pc, #104]	; (80104e0 <QSPI_DummyCyclesCfg+0xf4>)
 8010476:	f7fe fd06 	bl	800ee86 <MT25TL01G_WriteEnable>
 801047a:	4603      	mov	r3, r0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010480:	f06f 0304 	mvn.w	r3, #4
 8010484:	e027      	b.n	80104d6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8010486:	2381      	movs	r3, #129	; 0x81
 8010488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801048a:	897a      	ldrh	r2, [r7, #10]
 801048c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8010490:	4013      	ands	r3, r2
 8010492:	b29a      	uxth	r2, r3
 8010494:	4b14      	ldr	r3, [pc, #80]	; (80104e8 <QSPI_DummyCyclesCfg+0xfc>)
 8010496:	4313      	orrs	r3, r2
 8010498:	b29b      	uxth	r3, r3
 801049a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801049c:	f107 030c 	add.w	r3, r7, #12
 80104a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80104a4:	4619      	mov	r1, r3
 80104a6:	480e      	ldr	r0, [pc, #56]	; (80104e0 <QSPI_DummyCyclesCfg+0xf4>)
 80104a8:	f003 f9c6 	bl	8013838 <HAL_QSPI_Command>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d002      	beq.n	80104b8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104b2:	f06f 0304 	mvn.w	r3, #4
 80104b6:	e00e      	b.n	80104d6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80104b8:	f107 030a 	add.w	r3, r7, #10
 80104bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80104c0:	4619      	mov	r1, r3
 80104c2:	4807      	ldr	r0, [pc, #28]	; (80104e0 <QSPI_DummyCyclesCfg+0xf4>)
 80104c4:	f003 fa16 	bl	80138f4 <HAL_QSPI_Transmit>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d002      	beq.n	80104d4 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104ce:	f06f 0304 	mvn.w	r3, #4
 80104d2:	e000      	b.n	80104d6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 80104d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3748      	adds	r7, #72	; 0x48
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	2400027c 	.word	0x2400027c
 80104e4:	2400b724 	.word	0x2400b724
 80104e8:	ffff8080 	.word	0xffff8080

080104ec <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80104f4:	2300      	movs	r3, #0
 80104f6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d003      	beq.n	8010506 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80104fe:	f06f 0301 	mvn.w	r3, #1
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e044      	b.n	8010590 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2234      	movs	r2, #52	; 0x34
 801050a:	fb02 f303 	mul.w	r3, r2, r3
 801050e:	4a23      	ldr	r2, [pc, #140]	; (801059c <BSP_SDRAM_Init+0xb0>)
 8010510:	4413      	add	r3, r2
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f8b8 	bl	8010688 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2234      	movs	r2, #52	; 0x34
 801051c:	fb02 f303 	mul.w	r3, r2, r3
 8010520:	4a1e      	ldr	r2, [pc, #120]	; (801059c <BSP_SDRAM_Init+0xb0>)
 8010522:	4413      	add	r3, r2
 8010524:	2210      	movs	r2, #16
 8010526:	2104      	movs	r1, #4
 8010528:	4618      	mov	r0, r3
 801052a:	f000 f861 	bl	80105f0 <MX_SDRAM_BANK2_Init>
 801052e:	4603      	mov	r3, r0
 8010530:	2b00      	cmp	r3, #0
 8010532:	d003      	beq.n	801053c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8010534:	f04f 33ff 	mov.w	r3, #4294967295
 8010538:	60fb      	str	r3, [r7, #12]
 801053a:	e029      	b.n	8010590 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 801053c:	4b18      	ldr	r3, [pc, #96]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 801053e:	2208      	movs	r2, #8
 8010540:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8010542:	4b17      	ldr	r3, [pc, #92]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 8010544:	2203      	movs	r2, #3
 8010546:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8010548:	4b15      	ldr	r3, [pc, #84]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 801054a:	f240 6203 	movw	r2, #1539	; 0x603
 801054e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8010550:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 8010552:	2200      	movs	r2, #0
 8010554:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8010556:	4b12      	ldr	r3, [pc, #72]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 8010558:	2200      	movs	r2, #0
 801055a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 801055c:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 801055e:	2230      	movs	r2, #48	; 0x30
 8010560:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8010562:	4b0f      	ldr	r3, [pc, #60]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 8010564:	2200      	movs	r2, #0
 8010566:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8010568:	4b0d      	ldr	r3, [pc, #52]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 801056a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801056e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2234      	movs	r2, #52	; 0x34
 8010574:	fb02 f303 	mul.w	r3, r2, r3
 8010578:	4a08      	ldr	r2, [pc, #32]	; (801059c <BSP_SDRAM_Init+0xb0>)
 801057a:	4413      	add	r3, r2
 801057c:	4908      	ldr	r1, [pc, #32]	; (80105a0 <BSP_SDRAM_Init+0xb4>)
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fe66 	bl	800f250 <MT48LC4M32B2_Init>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 801058a:	f06f 0304 	mvn.w	r3, #4
 801058e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8010590:	68fb      	ldr	r3, [r7, #12]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	2400b730 	.word	0x2400b730
 80105a0:	2400b764 	.word	0x2400b764

080105a4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80105ac:	2300      	movs	r3, #0
 80105ae:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d003      	beq.n	80105be <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80105b6:	f06f 0301 	mvn.w	r3, #1
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	e011      	b.n	80105e2 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2234      	movs	r2, #52	; 0x34
 80105c2:	fb02 f303 	mul.w	r3, r2, r3
 80105c6:	4a09      	ldr	r2, [pc, #36]	; (80105ec <BSP_SDRAM_DeInit+0x48>)
 80105c8:	4413      	add	r3, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f005 ff34 	bl	8016438 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2234      	movs	r2, #52	; 0x34
 80105d4:	fb02 f303 	mul.w	r3, r2, r3
 80105d8:	4a04      	ldr	r2, [pc, #16]	; (80105ec <BSP_SDRAM_DeInit+0x48>)
 80105da:	4413      	add	r3, r2
 80105dc:	4618      	mov	r0, r3
 80105de:	f000 f951 	bl	8010884 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 80105e2:	68fb      	ldr	r3, [r7, #12]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	2400b730 	.word	0x2400b730

080105f0 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b08c      	sub	sp, #48	; 0x30
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80105fc:	4b20      	ldr	r3, [pc, #128]	; (8010680 <MX_SDRAM_BANK2_Init+0x90>)
 80105fe:	4a21      	ldr	r2, [pc, #132]	; (8010684 <MX_SDRAM_BANK2_Init+0x94>)
 8010600:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2201      	movs	r2, #1
 8010606:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	2200      	movs	r2, #0
 801060c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801061a:	4b19      	ldr	r3, [pc, #100]	; (8010680 <MX_SDRAM_BANK2_Init+0x90>)
 801061c:	2240      	movs	r2, #64	; 0x40
 801061e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8010626:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2200      	movs	r2, #0
 801062c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010634:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801063c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2200      	movs	r2, #0
 8010642:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8010644:	2302      	movs	r3, #2
 8010646:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8010648:	2307      	movs	r3, #7
 801064a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 801064c:	2304      	movs	r3, #4
 801064e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8010650:	2307      	movs	r3, #7
 8010652:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8010654:	2302      	movs	r3, #2
 8010656:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8010658:	2302      	movs	r3, #2
 801065a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 801065c:	2302      	movs	r3, #2
 801065e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8010660:	f107 0314 	add.w	r3, r7, #20
 8010664:	4619      	mov	r1, r3
 8010666:	68f8      	ldr	r0, [r7, #12]
 8010668:	f005 feaa 	bl	80163c0 <HAL_SDRAM_Init>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8010672:	2301      	movs	r3, #1
 8010674:	e000      	b.n	8010678 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	3730      	adds	r7, #48	; 0x30
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	2400b730 	.word	0x2400b730
 8010684:	52004140 	.word	0x52004140

08010688 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b08e      	sub	sp, #56	; 0x38
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010690:	4b73      	ldr	r3, [pc, #460]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010692:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010696:	4a72      	ldr	r2, [pc, #456]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801069c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80106a0:	4b6f      	ldr	r3, [pc, #444]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80106aa:	623b      	str	r3, [r7, #32]
 80106ac:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80106ae:	4b6c      	ldr	r3, [pc, #432]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106b4:	4a6a      	ldr	r2, [pc, #424]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106b6:	f043 0301 	orr.w	r3, r3, #1
 80106ba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80106be:	4b68      	ldr	r3, [pc, #416]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	61fb      	str	r3, [r7, #28]
 80106ca:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80106cc:	4b64      	ldr	r3, [pc, #400]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106d2:	4a63      	ldr	r2, [pc, #396]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106d4:	f043 0308 	orr.w	r3, r3, #8
 80106d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80106dc:	4b60      	ldr	r3, [pc, #384]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106e2:	f003 0308 	and.w	r3, r3, #8
 80106e6:	61bb      	str	r3, [r7, #24]
 80106e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80106ea:	4b5d      	ldr	r3, [pc, #372]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106f0:	4a5b      	ldr	r2, [pc, #364]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106f2:	f043 0310 	orr.w	r3, r3, #16
 80106f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80106fa:	4b59      	ldr	r3, [pc, #356]	; (8010860 <SDRAM_MspInit+0x1d8>)
 80106fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010700:	f003 0310 	and.w	r3, r3, #16
 8010704:	617b      	str	r3, [r7, #20]
 8010706:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010708:	4b55      	ldr	r3, [pc, #340]	; (8010860 <SDRAM_MspInit+0x1d8>)
 801070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801070e:	4a54      	ldr	r2, [pc, #336]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010710:	f043 0320 	orr.w	r3, r3, #32
 8010714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010718:	4b51      	ldr	r3, [pc, #324]	; (8010860 <SDRAM_MspInit+0x1d8>)
 801071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801071e:	f003 0320 	and.w	r3, r3, #32
 8010722:	613b      	str	r3, [r7, #16]
 8010724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010726:	4b4e      	ldr	r3, [pc, #312]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801072c:	4a4c      	ldr	r2, [pc, #304]	; (8010860 <SDRAM_MspInit+0x1d8>)
 801072e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010736:	4b4a      	ldr	r3, [pc, #296]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801073c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010740:	60fb      	str	r3, [r7, #12]
 8010742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010744:	4b46      	ldr	r3, [pc, #280]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801074a:	4a45      	ldr	r2, [pc, #276]	; (8010860 <SDRAM_MspInit+0x1d8>)
 801074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010754:	4b42      	ldr	r3, [pc, #264]	; (8010860 <SDRAM_MspInit+0x1d8>)
 8010756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801075e:	60bb      	str	r3, [r7, #8]
 8010760:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010762:	2302      	movs	r3, #2
 8010764:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010766:	2301      	movs	r3, #1
 8010768:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801076a:	2303      	movs	r3, #3
 801076c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801076e:	230c      	movs	r3, #12
 8010770:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8010772:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010776:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801077c:	4619      	mov	r1, r3
 801077e:	4839      	ldr	r0, [pc, #228]	; (8010864 <SDRAM_MspInit+0x1dc>)
 8010780:	f000 ff62 	bl	8011648 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8010784:	f64f 7383 	movw	r3, #65411	; 0xff83
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801078e:	4619      	mov	r1, r3
 8010790:	4835      	ldr	r0, [pc, #212]	; (8010868 <SDRAM_MspInit+0x1e0>)
 8010792:	f000 ff59 	bl	8011648 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8010796:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801079a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107a0:	4619      	mov	r1, r3
 80107a2:	4832      	ldr	r0, [pc, #200]	; (801086c <SDRAM_MspInit+0x1e4>)
 80107a4:	f000 ff50 	bl	8011648 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80107a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80107ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80107ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107b2:	4619      	mov	r1, r3
 80107b4:	482e      	ldr	r0, [pc, #184]	; (8010870 <SDRAM_MspInit+0x1e8>)
 80107b6:	f000 ff47 	bl	8011648 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80107ba:	23e0      	movs	r3, #224	; 0xe0
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80107be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107c2:	4619      	mov	r1, r3
 80107c4:	482b      	ldr	r0, [pc, #172]	; (8010874 <SDRAM_MspInit+0x1ec>)
 80107c6:	f000 ff3f 	bl	8011648 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80107ca:	4b2b      	ldr	r3, [pc, #172]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107d0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80107d2:	4b29      	ldr	r3, [pc, #164]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107d8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80107da:	4b27      	ldr	r3, [pc, #156]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107dc:	2280      	movs	r2, #128	; 0x80
 80107de:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80107e0:	4b25      	ldr	r3, [pc, #148]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80107e6:	4b24      	ldr	r3, [pc, #144]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107e8:	f240 2202 	movw	r2, #514	; 0x202
 80107ec:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80107ee:	4b22      	ldr	r3, [pc, #136]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107f0:	f640 0208 	movw	r2, #2056	; 0x808
 80107f4:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80107f6:	4b20      	ldr	r3, [pc, #128]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107f8:	2220      	movs	r2, #32
 80107fa:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80107fc:	4b1e      	ldr	r3, [pc, #120]	; (8010878 <SDRAM_MspInit+0x1f0>)
 80107fe:	2280      	movs	r2, #128	; 0x80
 8010800:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8010802:	4b1d      	ldr	r3, [pc, #116]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010808:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 801080a:	4b1b      	ldr	r3, [pc, #108]	; (8010878 <SDRAM_MspInit+0x1f0>)
 801080c:	2200      	movs	r2, #0
 801080e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8010810:	4b19      	ldr	r3, [pc, #100]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010812:	2200      	movs	r2, #0
 8010814:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8010816:	4b18      	ldr	r3, [pc, #96]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010818:	2280      	movs	r2, #128	; 0x80
 801081a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 801081c:	4b16      	ldr	r3, [pc, #88]	; (8010878 <SDRAM_MspInit+0x1f0>)
 801081e:	2200      	movs	r2, #0
 8010820:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8010822:	4b15      	ldr	r3, [pc, #84]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010824:	2200      	movs	r2, #0
 8010826:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010828:	4b13      	ldr	r3, [pc, #76]	; (8010878 <SDRAM_MspInit+0x1f0>)
 801082a:	4a14      	ldr	r2, [pc, #80]	; (801087c <SDRAM_MspInit+0x1f4>)
 801082c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 801082e:	4b14      	ldr	r3, [pc, #80]	; (8010880 <SDRAM_MspInit+0x1f8>)
 8010830:	4a11      	ldr	r2, [pc, #68]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010832:	631a      	str	r2, [r3, #48]	; 0x30
 8010834:	4b10      	ldr	r3, [pc, #64]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010836:	4a12      	ldr	r2, [pc, #72]	; (8010880 <SDRAM_MspInit+0x1f8>)
 8010838:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 801083a:	480f      	ldr	r0, [pc, #60]	; (8010878 <SDRAM_MspInit+0x1f0>)
 801083c:	f002 fc5c 	bl	80130f8 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8010840:	480d      	ldr	r0, [pc, #52]	; (8010878 <SDRAM_MspInit+0x1f0>)
 8010842:	f002 fc0d 	bl	8013060 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8010846:	2200      	movs	r2, #0
 8010848:	210f      	movs	r1, #15
 801084a:	207a      	movs	r0, #122	; 0x7a
 801084c:	f000 fbec 	bl	8011028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8010850:	207a      	movs	r0, #122	; 0x7a
 8010852:	f000 fc03 	bl	801105c <HAL_NVIC_EnableIRQ>
}
 8010856:	bf00      	nop
 8010858:	3738      	adds	r7, #56	; 0x38
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	58024400 	.word	0x58024400
 8010864:	58020c00 	.word	0x58020c00
 8010868:	58021000 	.word	0x58021000
 801086c:	58021400 	.word	0x58021400
 8010870:	58021800 	.word	0x58021800
 8010874:	58021c00 	.word	0x58021c00
 8010878:	2400b784 	.word	0x2400b784
 801087c:	52000040 	.word	0x52000040
 8010880:	2400b730 	.word	0x2400b730

08010884 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 801088c:	207a      	movs	r0, #122	; 0x7a
 801088e:	f000 fbf3 	bl	8011078 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010892:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <SDRAM_MspDeInit+0x24>)
 8010894:	4a05      	ldr	r2, [pc, #20]	; (80108ac <SDRAM_MspDeInit+0x28>)
 8010896:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8010898:	4803      	ldr	r0, [pc, #12]	; (80108a8 <SDRAM_MspDeInit+0x24>)
 801089a:	f002 fc2d 	bl	80130f8 <HAL_MDMA_DeInit>
}
 801089e:	bf00      	nop
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	2400b7f0 	.word	0x2400b7f0
 80108ac:	52000040 	.word	0x52000040

080108b0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b088      	sub	sp, #32
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80108ba:	2300      	movs	r3, #0
 80108bc:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d11c      	bne.n	80108fe <BSP_TS_Init+0x4e>
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d018      	beq.n	80108fe <BSP_TS_Init+0x4e>
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80108d4:	d813      	bhi.n	80108fe <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00f      	beq.n	80108fe <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80108e6:	d80a      	bhi.n	80108fe <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	68da      	ldr	r2, [r3, #12]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	6819      	ldr	r1, [r3, #0]
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	428b      	cmp	r3, r1
 80108f6:	bf28      	it	cs
 80108f8:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d903      	bls.n	8010906 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80108fe:	f06f 0301 	mvn.w	r3, #1
 8010902:	61fb      	str	r3, [r7, #28]
 8010904:	e085      	b.n	8010a12 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f9e6 	bl	8010cd8 <FT5336_Probe>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d003      	beq.n	801091a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010912:	f04f 33ff 	mov.w	r3, #4294967295
 8010916:	61fb      	str	r3, [r7, #28]
 8010918:	e07b      	b.n	8010a12 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	6819      	ldr	r1, [r3, #0]
 801091e:	483f      	ldr	r0, [pc, #252]	; (8010a1c <BSP_TS_Init+0x16c>)
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	4613      	mov	r3, r2
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	4413      	add	r3, r2
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	4403      	add	r3, r0
 801092c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	6859      	ldr	r1, [r3, #4]
 8010932:	483a      	ldr	r0, [pc, #232]	; (8010a1c <BSP_TS_Init+0x16c>)
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	4613      	mov	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	4413      	add	r3, r2
 801093c:	00db      	lsls	r3, r3, #3
 801093e:	4403      	add	r3, r0
 8010940:	3304      	adds	r3, #4
 8010942:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	6899      	ldr	r1, [r3, #8]
 8010948:	4834      	ldr	r0, [pc, #208]	; (8010a1c <BSP_TS_Init+0x16c>)
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	4613      	mov	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	00db      	lsls	r3, r3, #3
 8010954:	4403      	add	r3, r0
 8010956:	3308      	adds	r3, #8
 8010958:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	68d9      	ldr	r1, [r3, #12]
 801095e:	482f      	ldr	r0, [pc, #188]	; (8010a1c <BSP_TS_Init+0x16c>)
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	4613      	mov	r3, r2
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	00db      	lsls	r3, r3, #3
 801096a:	4403      	add	r3, r0
 801096c:	330c      	adds	r3, #12
 801096e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010970:	4b2b      	ldr	r3, [pc, #172]	; (8010a20 <BSP_TS_Init+0x170>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	69db      	ldr	r3, [r3, #28]
 8010976:	492b      	ldr	r1, [pc, #172]	; (8010a24 <BSP_TS_Init+0x174>)
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801097e:	f107 010c 	add.w	r1, r7, #12
 8010982:	4610      	mov	r0, r2
 8010984:	4798      	blx	r3
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	da03      	bge.n	8010994 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801098c:	f06f 0304 	mvn.w	r3, #4
 8010990:	61fb      	str	r3, [r7, #28]
 8010992:	e03e      	b.n	8010a12 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8010994:	6939      	ldr	r1, [r7, #16]
 8010996:	4821      	ldr	r0, [pc, #132]	; (8010a1c <BSP_TS_Init+0x16c>)
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	4613      	mov	r3, r2
 801099c:	009b      	lsls	r3, r3, #2
 801099e:	4413      	add	r3, r2
 80109a0:	00db      	lsls	r3, r3, #3
 80109a2:	4403      	add	r3, r0
 80109a4:	3310      	adds	r3, #16
 80109a6:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80109a8:	6979      	ldr	r1, [r7, #20]
 80109aa:	481c      	ldr	r0, [pc, #112]	; (8010a1c <BSP_TS_Init+0x16c>)
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	4613      	mov	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	4413      	add	r3, r2
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	4403      	add	r3, r0
 80109b8:	3314      	adds	r3, #20
 80109ba:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80109bc:	2300      	movs	r3, #0
 80109be:	61bb      	str	r3, [r7, #24]
 80109c0:	e024      	b.n	8010a0c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	68db      	ldr	r3, [r3, #12]
 80109ca:	4413      	add	r3, r2
 80109cc:	1c59      	adds	r1, r3, #1
 80109ce:	4813      	ldr	r0, [pc, #76]	; (8010a1c <BSP_TS_Init+0x16c>)
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	4613      	mov	r3, r2
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	4413      	add	r3, r2
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	69ba      	ldr	r2, [r7, #24]
 80109dc:	4413      	add	r3, r2
 80109de:	3306      	adds	r3, #6
 80109e0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	4413      	add	r3, r2
 80109ee:	1c59      	adds	r1, r3, #1
 80109f0:	480a      	ldr	r0, [pc, #40]	; (8010a1c <BSP_TS_Init+0x16c>)
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	4613      	mov	r3, r2
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	4413      	add	r3, r2
 80109fa:	005b      	lsls	r3, r3, #1
 80109fc:	69ba      	ldr	r2, [r7, #24]
 80109fe:	4413      	add	r3, r2
 8010a00:	3308      	adds	r3, #8
 8010a02:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	61bb      	str	r3, [r7, #24]
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d9d7      	bls.n	80109c2 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010a12:	69fb      	ldr	r3, [r7, #28]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	2400b864 	.word	0x2400b864
 8010a20:	2400b85c 	.word	0x2400b85c
 8010a24:	2400b860 	.word	0x2400b860

08010a28 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08a      	sub	sp, #40	; 0x28
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010a32:	2300      	movs	r3, #0
 8010a34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d003      	beq.n	8010a44 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010a3c:	f06f 0301 	mvn.w	r3, #1
 8010a40:	627b      	str	r3, [r7, #36]	; 0x24
 8010a42:	e13e      	b.n	8010cc2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010a44:	4ba1      	ldr	r3, [pc, #644]	; (8010ccc <BSP_TS_GetState+0x2a4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	691b      	ldr	r3, [r3, #16]
 8010a4a:	49a1      	ldr	r1, [pc, #644]	; (8010cd0 <BSP_TS_GetState+0x2a8>)
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010a52:	f107 0108 	add.w	r1, r7, #8
 8010a56:	4610      	mov	r0, r2
 8010a58:	4798      	blx	r3
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	da03      	bge.n	8010a68 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010a60:	f06f 0304 	mvn.w	r3, #4
 8010a64:	627b      	str	r3, [r7, #36]	; 0x24
 8010a66:	e12c      	b.n	8010cc2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 8110 	beq.w	8010c90 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010a78:	4996      	ldr	r1, [pc, #600]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	440b      	add	r3, r1
 8010a86:	3308      	adds	r3, #8
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f003 0308 	and.w	r3, r3, #8
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d003      	beq.n	8010a9a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8010a9a:	498e      	ldr	r1, [pc, #568]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	4613      	mov	r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4413      	add	r3, r2
 8010aa4:	00db      	lsls	r3, r3, #3
 8010aa6:	440b      	add	r3, r1
 8010aa8:	3308      	adds	r3, #8
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 0302 	and.w	r3, r3, #2
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00c      	beq.n	8010ace <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010ab4:	4987      	ldr	r1, [pc, #540]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	009b      	lsls	r3, r3, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	00db      	lsls	r3, r3, #3
 8010ac0:	440b      	add	r3, r1
 8010ac2:	3310      	adds	r3, #16
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	3b01      	subs	r3, #1
 8010acc:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8010ace:	4981      	ldr	r1, [pc, #516]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	00db      	lsls	r3, r3, #3
 8010ada:	440b      	add	r3, r1
 8010adc:	3308      	adds	r3, #8
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d00b      	beq.n	8010b00 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010ae8:	497a      	ldr	r1, [pc, #488]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	4613      	mov	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	4413      	add	r3, r2
 8010af2:	00db      	lsls	r3, r3, #3
 8010af4:	440b      	add	r3, r1
 8010af6:	3314      	adds	r3, #20
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	1ad3      	subs	r3, r2, r3
 8010afe:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010b00:	4974      	ldr	r1, [pc, #464]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	4613      	mov	r3, r2
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	440b      	add	r3, r1
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6a3a      	ldr	r2, [r7, #32]
 8010b12:	fb02 f103 	mul.w	r1, r2, r3
 8010b16:	486f      	ldr	r0, [pc, #444]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	4413      	add	r3, r2
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	4403      	add	r3, r0
 8010b24:	3310      	adds	r3, #16
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	fbb1 f2f3 	udiv	r2, r1, r3
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010b30:	4968      	ldr	r1, [pc, #416]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	4613      	mov	r3, r2
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	4413      	add	r3, r2
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	440b      	add	r3, r1
 8010b3e:	3304      	adds	r3, #4
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	69fa      	ldr	r2, [r7, #28]
 8010b44:	fb02 f103 	mul.w	r1, r2, r3
 8010b48:	4862      	ldr	r0, [pc, #392]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	4413      	add	r3, r2
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	4403      	add	r3, r0
 8010b56:	3314      	adds	r3, #20
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	fbb1 f2f3 	udiv	r2, r1, r3
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010b62:	68ba      	ldr	r2, [r7, #8]
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	6859      	ldr	r1, [r3, #4]
 8010b6c:	4859      	ldr	r0, [pc, #356]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	4613      	mov	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	4403      	add	r3, r0
 8010b7a:	3318      	adds	r3, #24
 8010b7c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010b7e:	4299      	cmp	r1, r3
 8010b80:	d90c      	bls.n	8010b9c <BSP_TS_GetState+0x174>
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	6859      	ldr	r1, [r3, #4]
 8010b86:	4853      	ldr	r0, [pc, #332]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4413      	add	r3, r2
 8010b90:	00db      	lsls	r3, r3, #3
 8010b92:	4403      	add	r3, r0
 8010b94:	3318      	adds	r3, #24
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	1acb      	subs	r3, r1, r3
 8010b9a:	e00b      	b.n	8010bb4 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8010b9c:	494d      	ldr	r1, [pc, #308]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	440b      	add	r3, r1
 8010baa:	3318      	adds	r3, #24
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010bb2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010bb4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	6899      	ldr	r1, [r3, #8]
 8010bba:	4846      	ldr	r0, [pc, #280]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	00db      	lsls	r3, r3, #3
 8010bc6:	4403      	add	r3, r0
 8010bc8:	3320      	adds	r3, #32
 8010bca:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010bcc:	4299      	cmp	r1, r3
 8010bce:	d90c      	bls.n	8010bea <BSP_TS_GetState+0x1c2>
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	6899      	ldr	r1, [r3, #8]
 8010bd4:	483f      	ldr	r0, [pc, #252]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	4403      	add	r3, r0
 8010be2:	3320      	adds	r3, #32
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	1acb      	subs	r3, r1, r3
 8010be8:	e00b      	b.n	8010c02 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8010bea:	493a      	ldr	r1, [pc, #232]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3320      	adds	r3, #32
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010c00:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010c02:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010c04:	4933      	ldr	r1, [pc, #204]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	4413      	add	r3, r2
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	440b      	add	r3, r1
 8010c12:	330c      	adds	r3, #12
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	69ba      	ldr	r2, [r7, #24]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d80b      	bhi.n	8010c34 <BSP_TS_GetState+0x20c>
 8010c1c:	492d      	ldr	r1, [pc, #180]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	4613      	mov	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	440b      	add	r3, r1
 8010c2a:	330c      	adds	r3, #12
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	697a      	ldr	r2, [r7, #20]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d916      	bls.n	8010c62 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	6859      	ldr	r1, [r3, #4]
 8010c38:	4826      	ldr	r0, [pc, #152]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	00db      	lsls	r3, r3, #3
 8010c44:	4403      	add	r3, r0
 8010c46:	3318      	adds	r3, #24
 8010c48:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	6899      	ldr	r1, [r3, #8]
 8010c4e:	4821      	ldr	r0, [pc, #132]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	4613      	mov	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	4413      	add	r3, r2
 8010c58:	00db      	lsls	r3, r3, #3
 8010c5a:	4403      	add	r3, r0
 8010c5c:	3320      	adds	r3, #32
 8010c5e:	6019      	str	r1, [r3, #0]
 8010c60:	e02f      	b.n	8010cc2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010c62:	491c      	ldr	r1, [pc, #112]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	4613      	mov	r3, r2
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	4413      	add	r3, r2
 8010c6c:	00db      	lsls	r3, r3, #3
 8010c6e:	440b      	add	r3, r1
 8010c70:	3318      	adds	r3, #24
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010c78:	4916      	ldr	r1, [pc, #88]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	4413      	add	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	3320      	adds	r3, #32
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	609a      	str	r2, [r3, #8]
 8010c8e:	e018      	b.n	8010cc2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010c96:	490f      	ldr	r1, [pc, #60]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	440b      	add	r3, r1
 8010ca4:	3318      	adds	r3, #24
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010cac:	4909      	ldr	r1, [pc, #36]	; (8010cd4 <BSP_TS_GetState+0x2ac>)
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	440b      	add	r3, r1
 8010cba:	3320      	adds	r3, #32
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3728      	adds	r7, #40	; 0x28
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	2400b85c 	.word	0x2400b85c
 8010cd0:	2400b860 	.word	0x2400b860
 8010cd4:	2400b864 	.word	0x2400b864

08010cd8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b08a      	sub	sp, #40	; 0x28
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010ce8:	2370      	movs	r3, #112	; 0x70
 8010cea:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8010cec:	4b23      	ldr	r3, [pc, #140]	; (8010d7c <FT5336_Probe+0xa4>)
 8010cee:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010cf0:	4b23      	ldr	r3, [pc, #140]	; (8010d80 <FT5336_Probe+0xa8>)
 8010cf2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010cf4:	4b23      	ldr	r3, [pc, #140]	; (8010d84 <FT5336_Probe+0xac>)
 8010cf6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010cf8:	4b23      	ldr	r3, [pc, #140]	; (8010d88 <FT5336_Probe+0xb0>)
 8010cfa:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8010cfc:	4b23      	ldr	r3, [pc, #140]	; (8010d8c <FT5336_Probe+0xb4>)
 8010cfe:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010d00:	f107 030c 	add.w	r3, r7, #12
 8010d04:	4619      	mov	r1, r3
 8010d06:	4822      	ldr	r0, [pc, #136]	; (8010d90 <FT5336_Probe+0xb8>)
 8010d08:	f7fd fcb2 	bl	800e670 <FT5336_RegisterBusIO>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d003      	beq.n	8010d1a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010d12:	f06f 0307 	mvn.w	r3, #7
 8010d16:	627b      	str	r3, [r7, #36]	; 0x24
 8010d18:	e02a      	b.n	8010d70 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8010d1a:	f107 0308 	add.w	r3, r7, #8
 8010d1e:	4619      	mov	r1, r3
 8010d20:	481b      	ldr	r0, [pc, #108]	; (8010d90 <FT5336_Probe+0xb8>)
 8010d22:	f7fd fd9f 	bl	800e864 <FT5336_ReadID>
 8010d26:	4603      	mov	r3, r0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d003      	beq.n	8010d34 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010d2c:	f06f 0304 	mvn.w	r3, #4
 8010d30:	627b      	str	r3, [r7, #36]	; 0x24
 8010d32:	e01d      	b.n	8010d70 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2b51      	cmp	r3, #81	; 0x51
 8010d38:	d003      	beq.n	8010d42 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010d3a:	f06f 0306 	mvn.w	r3, #6
 8010d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d40:	e016      	b.n	8010d70 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010d42:	4a14      	ldr	r2, [pc, #80]	; (8010d94 <FT5336_Probe+0xbc>)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4912      	ldr	r1, [pc, #72]	; (8010d90 <FT5336_Probe+0xb8>)
 8010d48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8010d4c:	4b12      	ldr	r3, [pc, #72]	; (8010d98 <FT5336_Probe+0xc0>)
 8010d4e:	4a13      	ldr	r2, [pc, #76]	; (8010d9c <FT5336_Probe+0xc4>)
 8010d50:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010d52:	4b11      	ldr	r3, [pc, #68]	; (8010d98 <FT5336_Probe+0xc0>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	490e      	ldr	r1, [pc, #56]	; (8010d94 <FT5336_Probe+0xbc>)
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010d60:	4610      	mov	r0, r2
 8010d62:	4798      	blx	r3
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d002      	beq.n	8010d70 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010d6a:	f06f 0304 	mvn.w	r3, #4
 8010d6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8010d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3728      	adds	r7, #40	; 0x28
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	0800f469 	.word	0x0800f469
 8010d80:	0800f4dd 	.word	0x0800f4dd
 8010d84:	0800f605 	.word	0x0800f605
 8010d88:	0800f5a9 	.word	0x0800f5a9
 8010d8c:	0800f661 	.word	0x0800f661
 8010d90:	2400b88c 	.word	0x2400b88c
 8010d94:	2400b860 	.word	0x2400b860
 8010d98:	2400b85c 	.word	0x2400b85c
 8010d9c:	24000020 	.word	0x24000020

08010da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010da6:	2003      	movs	r0, #3
 8010da8:	f000 f933 	bl	8011012 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010dac:	f004 f846 	bl	8014e3c <HAL_RCC_GetSysClockFreq>
 8010db0:	4602      	mov	r2, r0
 8010db2:	4b15      	ldr	r3, [pc, #84]	; (8010e08 <HAL_Init+0x68>)
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	0a1b      	lsrs	r3, r3, #8
 8010db8:	f003 030f 	and.w	r3, r3, #15
 8010dbc:	4913      	ldr	r1, [pc, #76]	; (8010e0c <HAL_Init+0x6c>)
 8010dbe:	5ccb      	ldrb	r3, [r1, r3]
 8010dc0:	f003 031f 	and.w	r3, r3, #31
 8010dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8010dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010dca:	4b0f      	ldr	r3, [pc, #60]	; (8010e08 <HAL_Init+0x68>)
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	f003 030f 	and.w	r3, r3, #15
 8010dd2:	4a0e      	ldr	r2, [pc, #56]	; (8010e0c <HAL_Init+0x6c>)
 8010dd4:	5cd3      	ldrb	r3, [r2, r3]
 8010dd6:	f003 031f 	and.w	r3, r3, #31
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8010de0:	4a0b      	ldr	r2, [pc, #44]	; (8010e10 <HAL_Init+0x70>)
 8010de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010de4:	4a0b      	ldr	r2, [pc, #44]	; (8010e14 <HAL_Init+0x74>)
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010dea:	200f      	movs	r0, #15
 8010dec:	f7f0 fbdc 	bl	80015a8 <HAL_InitTick>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d001      	beq.n	8010dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	e002      	b.n	8010e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010dfa:	f7f0 f81d 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	58024400 	.word	0x58024400
 8010e0c:	0802d21c 	.word	0x0802d21c
 8010e10:	2400001c 	.word	0x2400001c
 8010e14:	24000018 	.word	0x24000018

08010e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010e1c:	4b06      	ldr	r3, [pc, #24]	; (8010e38 <HAL_IncTick+0x20>)
 8010e1e:	781b      	ldrb	r3, [r3, #0]
 8010e20:	461a      	mov	r2, r3
 8010e22:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <HAL_IncTick+0x24>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4413      	add	r3, r2
 8010e28:	4a04      	ldr	r2, [pc, #16]	; (8010e3c <HAL_IncTick+0x24>)
 8010e2a:	6013      	str	r3, [r2, #0]
}
 8010e2c:	bf00      	nop
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	24000054 	.word	0x24000054
 8010e3c:	2400b8b4 	.word	0x2400b8b4

08010e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010e40:	b480      	push	{r7}
 8010e42:	af00      	add	r7, sp, #0
  return uwTick;
 8010e44:	4b03      	ldr	r3, [pc, #12]	; (8010e54 <HAL_GetTick+0x14>)
 8010e46:	681b      	ldr	r3, [r3, #0]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	2400b8b4 	.word	0x2400b8b4

08010e58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010e5c:	4b03      	ldr	r3, [pc, #12]	; (8010e6c <HAL_GetREVID+0x14>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	0c1b      	lsrs	r3, r3, #16
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	5c001000 	.word	0x5c001000

08010e70 <__NVIC_SetPriorityGrouping>:
{
 8010e70:	b480      	push	{r7}
 8010e72:	b085      	sub	sp, #20
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f003 0307 	and.w	r3, r3, #7
 8010e7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010e80:	4b0b      	ldr	r3, [pc, #44]	; (8010eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010e86:	68ba      	ldr	r2, [r7, #8]
 8010e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010e98:	4b06      	ldr	r3, [pc, #24]	; (8010eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010e9e:	4a04      	ldr	r2, [pc, #16]	; (8010eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	60d3      	str	r3, [r2, #12]
}
 8010ea4:	bf00      	nop
 8010ea6:	3714      	adds	r7, #20
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	e000ed00 	.word	0xe000ed00
 8010eb4:	05fa0000 	.word	0x05fa0000

08010eb8 <__NVIC_GetPriorityGrouping>:
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010ebc:	4b04      	ldr	r3, [pc, #16]	; (8010ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	0a1b      	lsrs	r3, r3, #8
 8010ec2:	f003 0307 	and.w	r3, r3, #7
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	e000ed00 	.word	0xe000ed00

08010ed4 <__NVIC_EnableIRQ>:
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b083      	sub	sp, #12
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	4603      	mov	r3, r0
 8010edc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	db0b      	blt.n	8010efe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010ee6:	88fb      	ldrh	r3, [r7, #6]
 8010ee8:	f003 021f 	and.w	r2, r3, #31
 8010eec:	4907      	ldr	r1, [pc, #28]	; (8010f0c <__NVIC_EnableIRQ+0x38>)
 8010eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ef2:	095b      	lsrs	r3, r3, #5
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8010efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010efe:	bf00      	nop
 8010f00:	370c      	adds	r7, #12
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr
 8010f0a:	bf00      	nop
 8010f0c:	e000e100 	.word	0xe000e100

08010f10 <__NVIC_DisableIRQ>:
{
 8010f10:	b480      	push	{r7}
 8010f12:	b083      	sub	sp, #12
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	4603      	mov	r3, r0
 8010f18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	db12      	blt.n	8010f48 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f22:	88fb      	ldrh	r3, [r7, #6]
 8010f24:	f003 021f 	and.w	r2, r3, #31
 8010f28:	490a      	ldr	r1, [pc, #40]	; (8010f54 <__NVIC_DisableIRQ+0x44>)
 8010f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f2e:	095b      	lsrs	r3, r3, #5
 8010f30:	2001      	movs	r0, #1
 8010f32:	fa00 f202 	lsl.w	r2, r0, r2
 8010f36:	3320      	adds	r3, #32
 8010f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010f3c:	f3bf 8f4f 	dsb	sy
}
 8010f40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010f42:	f3bf 8f6f 	isb	sy
}
 8010f46:	bf00      	nop
}
 8010f48:	bf00      	nop
 8010f4a:	370c      	adds	r7, #12
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	e000e100 	.word	0xe000e100

08010f58 <__NVIC_SetPriority>:
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	4603      	mov	r3, r0
 8010f60:	6039      	str	r1, [r7, #0]
 8010f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	db0a      	blt.n	8010f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	b2da      	uxtb	r2, r3
 8010f70:	490c      	ldr	r1, [pc, #48]	; (8010fa4 <__NVIC_SetPriority+0x4c>)
 8010f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f76:	0112      	lsls	r2, r2, #4
 8010f78:	b2d2      	uxtb	r2, r2
 8010f7a:	440b      	add	r3, r1
 8010f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010f80:	e00a      	b.n	8010f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	b2da      	uxtb	r2, r3
 8010f86:	4908      	ldr	r1, [pc, #32]	; (8010fa8 <__NVIC_SetPriority+0x50>)
 8010f88:	88fb      	ldrh	r3, [r7, #6]
 8010f8a:	f003 030f 	and.w	r3, r3, #15
 8010f8e:	3b04      	subs	r3, #4
 8010f90:	0112      	lsls	r2, r2, #4
 8010f92:	b2d2      	uxtb	r2, r2
 8010f94:	440b      	add	r3, r1
 8010f96:	761a      	strb	r2, [r3, #24]
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr
 8010fa4:	e000e100 	.word	0xe000e100
 8010fa8:	e000ed00 	.word	0xe000ed00

08010fac <NVIC_EncodePriority>:
{
 8010fac:	b480      	push	{r7}
 8010fae:	b089      	sub	sp, #36	; 0x24
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f003 0307 	and.w	r3, r3, #7
 8010fbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	f1c3 0307 	rsb	r3, r3, #7
 8010fc6:	2b04      	cmp	r3, #4
 8010fc8:	bf28      	it	cs
 8010fca:	2304      	movcs	r3, #4
 8010fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	2b06      	cmp	r3, #6
 8010fd4:	d902      	bls.n	8010fdc <NVIC_EncodePriority+0x30>
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	3b03      	subs	r3, #3
 8010fda:	e000      	b.n	8010fde <NVIC_EncodePriority+0x32>
 8010fdc:	2300      	movs	r3, #0
 8010fde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8010fea:	43da      	mvns	r2, r3
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	401a      	ands	r2, r3
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8010ffe:	43d9      	mvns	r1, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011004:	4313      	orrs	r3, r2
}
 8011006:	4618      	mov	r0, r3
 8011008:	3724      	adds	r7, #36	; 0x24
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr

08011012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b082      	sub	sp, #8
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff ff28 	bl	8010e70 <__NVIC_SetPriorityGrouping>
}
 8011020:	bf00      	nop
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011036:	f7ff ff3f 	bl	8010eb8 <__NVIC_GetPriorityGrouping>
 801103a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	68b9      	ldr	r1, [r7, #8]
 8011040:	6978      	ldr	r0, [r7, #20]
 8011042:	f7ff ffb3 	bl	8010fac <NVIC_EncodePriority>
 8011046:	4602      	mov	r2, r0
 8011048:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801104c:	4611      	mov	r1, r2
 801104e:	4618      	mov	r0, r3
 8011050:	f7ff ff82 	bl	8010f58 <__NVIC_SetPriority>
}
 8011054:	bf00      	nop
 8011056:	3718      	adds	r7, #24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	4603      	mov	r3, r0
 8011064:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff ff32 	bl	8010ed4 <__NVIC_EnableIRQ>
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	4603      	mov	r3, r0
 8011080:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011086:	4618      	mov	r0, r3
 8011088:	f7ff ff42 	bl	8010f10 <__NVIC_DisableIRQ>
}
 801108c:	bf00      	nop
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011094:	b480      	push	{r7}
 8011096:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8011098:	f3bf 8f5f 	dmb	sy
}
 801109c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801109e:	4b07      	ldr	r3, [pc, #28]	; (80110bc <HAL_MPU_Disable+0x28>)
 80110a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110a2:	4a06      	ldr	r2, [pc, #24]	; (80110bc <HAL_MPU_Disable+0x28>)
 80110a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80110a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80110aa:	4b05      	ldr	r3, [pc, #20]	; (80110c0 <HAL_MPU_Disable+0x2c>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	605a      	str	r2, [r3, #4]
}
 80110b0:	bf00      	nop
 80110b2:	46bd      	mov	sp, r7
 80110b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b8:	4770      	bx	lr
 80110ba:	bf00      	nop
 80110bc:	e000ed00 	.word	0xe000ed00
 80110c0:	e000ed90 	.word	0xe000ed90

080110c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80110cc:	4a0b      	ldr	r2, [pc, #44]	; (80110fc <HAL_MPU_Enable+0x38>)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f043 0301 	orr.w	r3, r3, #1
 80110d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80110d6:	4b0a      	ldr	r3, [pc, #40]	; (8011100 <HAL_MPU_Enable+0x3c>)
 80110d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110da:	4a09      	ldr	r2, [pc, #36]	; (8011100 <HAL_MPU_Enable+0x3c>)
 80110dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80110e2:	f3bf 8f4f 	dsb	sy
}
 80110e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80110e8:	f3bf 8f6f 	isb	sy
}
 80110ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80110ee:	bf00      	nop
 80110f0:	370c      	adds	r7, #12
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	e000ed90 	.word	0xe000ed90
 8011100:	e000ed00 	.word	0xe000ed00

08011104 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	785a      	ldrb	r2, [r3, #1]
 8011110:	4b1d      	ldr	r3, [pc, #116]	; (8011188 <HAL_MPU_ConfigRegion+0x84>)
 8011112:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d029      	beq.n	8011170 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 801111c:	4a1a      	ldr	r2, [pc, #104]	; (8011188 <HAL_MPU_ConfigRegion+0x84>)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	7b1b      	ldrb	r3, [r3, #12]
 8011128:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	7adb      	ldrb	r3, [r3, #11]
 801112e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	7a9b      	ldrb	r3, [r3, #10]
 8011136:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011138:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	7b5b      	ldrb	r3, [r3, #13]
 801113e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	7b9b      	ldrb	r3, [r3, #14]
 8011146:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011148:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	7bdb      	ldrb	r3, [r3, #15]
 801114e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	7a5b      	ldrb	r3, [r3, #9]
 8011156:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	7a1b      	ldrb	r3, [r3, #8]
 801115e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011160:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	7812      	ldrb	r2, [r2, #0]
 8011166:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011168:	4a07      	ldr	r2, [pc, #28]	; (8011188 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801116a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801116c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801116e:	e005      	b.n	801117c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8011170:	4b05      	ldr	r3, [pc, #20]	; (8011188 <HAL_MPU_ConfigRegion+0x84>)
 8011172:	2200      	movs	r2, #0
 8011174:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8011176:	4b04      	ldr	r3, [pc, #16]	; (8011188 <HAL_MPU_ConfigRegion+0x84>)
 8011178:	2200      	movs	r2, #0
 801117a:	611a      	str	r2, [r3, #16]
}
 801117c:	bf00      	nop
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr
 8011188:	e000ed90 	.word	0xe000ed90

0801118c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d101      	bne.n	801119e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	e054      	b.n	8011248 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	7f5b      	ldrb	r3, [r3, #29]
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d105      	bne.n	80111b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f7ef fe60 	bl	8000e74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2202      	movs	r2, #2
 80111b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	791b      	ldrb	r3, [r3, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d10c      	bne.n	80111dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a22      	ldr	r2, [pc, #136]	; (8011250 <HAL_CRC_Init+0xc4>)
 80111c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	689a      	ldr	r2, [r3, #8]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f022 0218 	bic.w	r2, r2, #24
 80111d8:	609a      	str	r2, [r3, #8]
 80111da:	e00c      	b.n	80111f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6899      	ldr	r1, [r3, #8]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	461a      	mov	r2, r3
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 f834 	bl	8011254 <HAL_CRCEx_Polynomial_Set>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d001      	beq.n	80111f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80111f2:	2301      	movs	r3, #1
 80111f4:	e028      	b.n	8011248 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	795b      	ldrb	r3, [r3, #5]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d105      	bne.n	801120a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f04f 32ff 	mov.w	r2, #4294967295
 8011206:	611a      	str	r2, [r3, #16]
 8011208:	e004      	b.n	8011214 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	6912      	ldr	r2, [r2, #16]
 8011212:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	695a      	ldr	r2, [r3, #20]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	689b      	ldr	r3, [r3, #8]
 8011230:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	699a      	ldr	r2, [r3, #24]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	430a      	orrs	r2, r1
 801123e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2201      	movs	r2, #1
 8011244:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8011246:	2300      	movs	r3, #0
}
 8011248:	4618      	mov	r0, r3
 801124a:	3708      	adds	r7, #8
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	04c11db7 	.word	0x04c11db7

08011254 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011254:	b480      	push	{r7}
 8011256:	b087      	sub	sp, #28
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011264:	231f      	movs	r3, #31
 8011266:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011268:	bf00      	nop
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	1e5a      	subs	r2, r3, #1
 801126e:	613a      	str	r2, [r7, #16]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d009      	beq.n	8011288 <HAL_CRCEx_Polynomial_Set+0x34>
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	f003 031f 	and.w	r3, r3, #31
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	fa22 f303 	lsr.w	r3, r2, r3
 8011280:	f003 0301 	and.w	r3, r3, #1
 8011284:	2b00      	cmp	r3, #0
 8011286:	d0f0      	beq.n	801126a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b18      	cmp	r3, #24
 801128c:	d846      	bhi.n	801131c <HAL_CRCEx_Polynomial_Set+0xc8>
 801128e:	a201      	add	r2, pc, #4	; (adr r2, 8011294 <HAL_CRCEx_Polynomial_Set+0x40>)
 8011290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011294:	08011323 	.word	0x08011323
 8011298:	0801131d 	.word	0x0801131d
 801129c:	0801131d 	.word	0x0801131d
 80112a0:	0801131d 	.word	0x0801131d
 80112a4:	0801131d 	.word	0x0801131d
 80112a8:	0801131d 	.word	0x0801131d
 80112ac:	0801131d 	.word	0x0801131d
 80112b0:	0801131d 	.word	0x0801131d
 80112b4:	08011311 	.word	0x08011311
 80112b8:	0801131d 	.word	0x0801131d
 80112bc:	0801131d 	.word	0x0801131d
 80112c0:	0801131d 	.word	0x0801131d
 80112c4:	0801131d 	.word	0x0801131d
 80112c8:	0801131d 	.word	0x0801131d
 80112cc:	0801131d 	.word	0x0801131d
 80112d0:	0801131d 	.word	0x0801131d
 80112d4:	08011305 	.word	0x08011305
 80112d8:	0801131d 	.word	0x0801131d
 80112dc:	0801131d 	.word	0x0801131d
 80112e0:	0801131d 	.word	0x0801131d
 80112e4:	0801131d 	.word	0x0801131d
 80112e8:	0801131d 	.word	0x0801131d
 80112ec:	0801131d 	.word	0x0801131d
 80112f0:	0801131d 	.word	0x0801131d
 80112f4:	080112f9 	.word	0x080112f9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	2b06      	cmp	r3, #6
 80112fc:	d913      	bls.n	8011326 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011302:	e010      	b.n	8011326 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	2b07      	cmp	r3, #7
 8011308:	d90f      	bls.n	801132a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 801130a:	2301      	movs	r3, #1
 801130c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801130e:	e00c      	b.n	801132a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	2b0f      	cmp	r3, #15
 8011314:	d90b      	bls.n	801132e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801131a:	e008      	b.n	801132e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	75fb      	strb	r3, [r7, #23]
      break;
 8011320:	e006      	b.n	8011330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011322:	bf00      	nop
 8011324:	e004      	b.n	8011330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8011326:	bf00      	nop
 8011328:	e002      	b.n	8011330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801132a:	bf00      	nop
 801132c:	e000      	b.n	8011330 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 801132e:	bf00      	nop
  }
  if (status == HAL_OK)
 8011330:	7dfb      	ldrb	r3, [r7, #23]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10d      	bne.n	8011352 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	68ba      	ldr	r2, [r7, #8]
 801133c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	689b      	ldr	r3, [r3, #8]
 8011344:	f023 0118 	bic.w	r1, r3, #24
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	430a      	orrs	r2, r1
 8011350:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8011352:	7dfb      	ldrb	r3, [r7, #23]
}
 8011354:	4618      	mov	r0, r3
 8011356:	371c      	adds	r7, #28
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d101      	bne.n	8011372 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	e04f      	b.n	8011412 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8011378:	b2db      	uxtb	r3, r3
 801137a:	2b00      	cmp	r3, #0
 801137c:	d106      	bne.n	801138c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ef fd96 	bl	8000eb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2202      	movs	r2, #2
 8011390:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	4b20      	ldr	r3, [pc, #128]	; (801141c <HAL_DMA2D_Init+0xbc>)
 801139c:	4013      	ands	r3, r2
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	6851      	ldr	r1, [r2, #4]
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	69d2      	ldr	r2, [r2, #28]
 80113a6:	4311      	orrs	r1, r2
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	430b      	orrs	r3, r1
 80113ae:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113b6:	4b1a      	ldr	r3, [pc, #104]	; (8011420 <HAL_DMA2D_Init+0xc0>)
 80113b8:	4013      	ands	r3, r2
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	6891      	ldr	r1, [r2, #8]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	6992      	ldr	r2, [r2, #24]
 80113c2:	4311      	orrs	r1, r2
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	6812      	ldr	r2, [r2, #0]
 80113c8:	430b      	orrs	r3, r1
 80113ca:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80113d2:	4b14      	ldr	r3, [pc, #80]	; (8011424 <HAL_DMA2D_Init+0xc4>)
 80113d4:	4013      	ands	r3, r2
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	68d1      	ldr	r1, [r2, #12]
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	6812      	ldr	r2, [r2, #0]
 80113de:	430b      	orrs	r3, r1
 80113e0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	051a      	lsls	r2, r3, #20
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	695b      	ldr	r3, [r3, #20]
 80113f6:	055b      	lsls	r3, r3, #21
 80113f8:	431a      	orrs	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	430a      	orrs	r2, r1
 8011400:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2201      	movs	r2, #1
 801140c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	fff8ffbf 	.word	0xfff8ffbf
 8011420:	fffffef8 	.word	0xfffffef8
 8011424:	ffff0000 	.word	0xffff0000

08011428 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f003 0301 	and.w	r3, r3, #1
 8011446:	2b00      	cmp	r3, #0
 8011448:	d026      	beq.n	8011498 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011450:	2b00      	cmp	r3, #0
 8011452:	d021      	beq.n	8011498 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011462:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011468:	f043 0201 	orr.w	r2, r3, #1
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2201      	movs	r2, #1
 8011476:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2204      	movs	r2, #4
 801147c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801148c:	2b00      	cmp	r3, #0
 801148e:	d003      	beq.n	8011498 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f003 0320 	and.w	r3, r3, #32
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d026      	beq.n	80114f0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d021      	beq.n	80114f0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114ba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2220      	movs	r2, #32
 80114c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114c8:	f043 0202 	orr.w	r2, r3, #2
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2204      	movs	r2, #4
 80114d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d003      	beq.n	80114f0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	f003 0308 	and.w	r3, r3, #8
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d026      	beq.n	8011548 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011500:	2b00      	cmp	r3, #0
 8011502:	d021      	beq.n	8011548 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011512:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2208      	movs	r2, #8
 801151a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011520:	f043 0204 	orr.w	r2, r3, #4
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2204      	movs	r2, #4
 801152c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801153c:	2b00      	cmp	r3, #0
 801153e:	d003      	beq.n	8011548 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	f003 0304 	and.w	r3, r3, #4
 801154e:	2b00      	cmp	r3, #0
 8011550:	d013      	beq.n	801157a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00e      	beq.n	801157a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801156a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	2204      	movs	r2, #4
 8011572:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 f853 	bl	8011620 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f003 0302 	and.w	r3, r3, #2
 8011580:	2b00      	cmp	r3, #0
 8011582:	d024      	beq.n	80115ce <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801158a:	2b00      	cmp	r3, #0
 801158c:	d01f      	beq.n	80115ce <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801159c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2202      	movs	r2, #2
 80115a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2201      	movs	r2, #1
 80115b2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2200      	movs	r2, #0
 80115ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a1b      	ldr	r3, [r3, #32]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d003      	beq.n	80115ce <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a1b      	ldr	r3, [r3, #32]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f003 0310 	and.w	r3, r3, #16
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d01f      	beq.n	8011618 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d01a      	beq.n	8011618 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80115f0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2210      	movs	r2, #16
 80115f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2200      	movs	r2, #0
 801160e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 f80e 	bl	8011634 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8011618:	bf00      	nop
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011620:	b480      	push	{r7}
 8011622:	b083      	sub	sp, #12
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8011628:	bf00      	nop
 801162a:	370c      	adds	r7, #12
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr

08011634 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011648:	b480      	push	{r7}
 801164a:	b089      	sub	sp, #36	; 0x24
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011652:	2300      	movs	r3, #0
 8011654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011656:	4b89      	ldr	r3, [pc, #548]	; (801187c <HAL_GPIO_Init+0x234>)
 8011658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801165a:	e194      	b.n	8011986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	2101      	movs	r1, #1
 8011662:	69fb      	ldr	r3, [r7, #28]
 8011664:	fa01 f303 	lsl.w	r3, r1, r3
 8011668:	4013      	ands	r3, r2
 801166a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	f000 8186 	beq.w	8011980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	f003 0303 	and.w	r3, r3, #3
 801167c:	2b01      	cmp	r3, #1
 801167e:	d005      	beq.n	801168c <HAL_GPIO_Init+0x44>
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	f003 0303 	and.w	r3, r3, #3
 8011688:	2b02      	cmp	r3, #2
 801168a:	d130      	bne.n	80116ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	2203      	movs	r2, #3
 8011698:	fa02 f303 	lsl.w	r3, r2, r3
 801169c:	43db      	mvns	r3, r3
 801169e:	69ba      	ldr	r2, [r7, #24]
 80116a0:	4013      	ands	r3, r2
 80116a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	68da      	ldr	r2, [r3, #12]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	fa02 f303 	lsl.w	r3, r2, r3
 80116b0:	69ba      	ldr	r2, [r7, #24]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	69ba      	ldr	r2, [r7, #24]
 80116ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80116c2:	2201      	movs	r2, #1
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	fa02 f303 	lsl.w	r3, r2, r3
 80116ca:	43db      	mvns	r3, r3
 80116cc:	69ba      	ldr	r2, [r7, #24]
 80116ce:	4013      	ands	r3, r2
 80116d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	091b      	lsrs	r3, r3, #4
 80116d8:	f003 0201 	and.w	r2, r3, #1
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	fa02 f303 	lsl.w	r3, r2, r3
 80116e2:	69ba      	ldr	r2, [r7, #24]
 80116e4:	4313      	orrs	r3, r2
 80116e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	69ba      	ldr	r2, [r7, #24]
 80116ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	f003 0303 	and.w	r3, r3, #3
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	d017      	beq.n	801172a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	2203      	movs	r2, #3
 8011706:	fa02 f303 	lsl.w	r3, r2, r3
 801170a:	43db      	mvns	r3, r3
 801170c:	69ba      	ldr	r2, [r7, #24]
 801170e:	4013      	ands	r3, r2
 8011710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	689a      	ldr	r2, [r3, #8]
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	005b      	lsls	r3, r3, #1
 801171a:	fa02 f303 	lsl.w	r3, r2, r3
 801171e:	69ba      	ldr	r2, [r7, #24]
 8011720:	4313      	orrs	r3, r2
 8011722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	69ba      	ldr	r2, [r7, #24]
 8011728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	f003 0303 	and.w	r3, r3, #3
 8011732:	2b02      	cmp	r3, #2
 8011734:	d123      	bne.n	801177e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	08da      	lsrs	r2, r3, #3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3208      	adds	r2, #8
 801173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	f003 0307 	and.w	r3, r3, #7
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	220f      	movs	r2, #15
 801174e:	fa02 f303 	lsl.w	r3, r2, r3
 8011752:	43db      	mvns	r3, r3
 8011754:	69ba      	ldr	r2, [r7, #24]
 8011756:	4013      	ands	r3, r2
 8011758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	691a      	ldr	r2, [r3, #16]
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	f003 0307 	and.w	r3, r3, #7
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	fa02 f303 	lsl.w	r3, r2, r3
 801176a:	69ba      	ldr	r2, [r7, #24]
 801176c:	4313      	orrs	r3, r2
 801176e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	08da      	lsrs	r2, r3, #3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3208      	adds	r2, #8
 8011778:	69b9      	ldr	r1, [r7, #24]
 801177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	2203      	movs	r2, #3
 801178a:	fa02 f303 	lsl.w	r3, r2, r3
 801178e:	43db      	mvns	r3, r3
 8011790:	69ba      	ldr	r2, [r7, #24]
 8011792:	4013      	ands	r3, r2
 8011794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	f003 0203 	and.w	r2, r3, #3
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	fa02 f303 	lsl.w	r3, r2, r3
 80117a6:	69ba      	ldr	r2, [r7, #24]
 80117a8:	4313      	orrs	r3, r2
 80117aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	69ba      	ldr	r2, [r7, #24]
 80117b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f000 80e0 	beq.w	8011980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80117c0:	4b2f      	ldr	r3, [pc, #188]	; (8011880 <HAL_GPIO_Init+0x238>)
 80117c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80117c6:	4a2e      	ldr	r2, [pc, #184]	; (8011880 <HAL_GPIO_Init+0x238>)
 80117c8:	f043 0302 	orr.w	r3, r3, #2
 80117cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80117d0:	4b2b      	ldr	r3, [pc, #172]	; (8011880 <HAL_GPIO_Init+0x238>)
 80117d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80117d6:	f003 0302 	and.w	r3, r3, #2
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80117de:	4a29      	ldr	r2, [pc, #164]	; (8011884 <HAL_GPIO_Init+0x23c>)
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	089b      	lsrs	r3, r3, #2
 80117e4:	3302      	adds	r3, #2
 80117e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	f003 0303 	and.w	r3, r3, #3
 80117f2:	009b      	lsls	r3, r3, #2
 80117f4:	220f      	movs	r2, #15
 80117f6:	fa02 f303 	lsl.w	r3, r2, r3
 80117fa:	43db      	mvns	r3, r3
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	4013      	ands	r3, r2
 8011800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4a20      	ldr	r2, [pc, #128]	; (8011888 <HAL_GPIO_Init+0x240>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d052      	beq.n	80118b0 <HAL_GPIO_Init+0x268>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4a1f      	ldr	r2, [pc, #124]	; (801188c <HAL_GPIO_Init+0x244>)
 801180e:	4293      	cmp	r3, r2
 8011810:	d031      	beq.n	8011876 <HAL_GPIO_Init+0x22e>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4a1e      	ldr	r2, [pc, #120]	; (8011890 <HAL_GPIO_Init+0x248>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d02b      	beq.n	8011872 <HAL_GPIO_Init+0x22a>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4a1d      	ldr	r2, [pc, #116]	; (8011894 <HAL_GPIO_Init+0x24c>)
 801181e:	4293      	cmp	r3, r2
 8011820:	d025      	beq.n	801186e <HAL_GPIO_Init+0x226>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a1c      	ldr	r2, [pc, #112]	; (8011898 <HAL_GPIO_Init+0x250>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d01f      	beq.n	801186a <HAL_GPIO_Init+0x222>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	4a1b      	ldr	r2, [pc, #108]	; (801189c <HAL_GPIO_Init+0x254>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d019      	beq.n	8011866 <HAL_GPIO_Init+0x21e>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4a1a      	ldr	r2, [pc, #104]	; (80118a0 <HAL_GPIO_Init+0x258>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d013      	beq.n	8011862 <HAL_GPIO_Init+0x21a>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4a19      	ldr	r2, [pc, #100]	; (80118a4 <HAL_GPIO_Init+0x25c>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d00d      	beq.n	801185e <HAL_GPIO_Init+0x216>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4a18      	ldr	r2, [pc, #96]	; (80118a8 <HAL_GPIO_Init+0x260>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d007      	beq.n	801185a <HAL_GPIO_Init+0x212>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4a17      	ldr	r2, [pc, #92]	; (80118ac <HAL_GPIO_Init+0x264>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d101      	bne.n	8011856 <HAL_GPIO_Init+0x20e>
 8011852:	2309      	movs	r3, #9
 8011854:	e02d      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 8011856:	230a      	movs	r3, #10
 8011858:	e02b      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 801185a:	2308      	movs	r3, #8
 801185c:	e029      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 801185e:	2307      	movs	r3, #7
 8011860:	e027      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 8011862:	2306      	movs	r3, #6
 8011864:	e025      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 8011866:	2305      	movs	r3, #5
 8011868:	e023      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 801186a:	2304      	movs	r3, #4
 801186c:	e021      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 801186e:	2303      	movs	r3, #3
 8011870:	e01f      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 8011872:	2302      	movs	r3, #2
 8011874:	e01d      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 8011876:	2301      	movs	r3, #1
 8011878:	e01b      	b.n	80118b2 <HAL_GPIO_Init+0x26a>
 801187a:	bf00      	nop
 801187c:	58000080 	.word	0x58000080
 8011880:	58024400 	.word	0x58024400
 8011884:	58000400 	.word	0x58000400
 8011888:	58020000 	.word	0x58020000
 801188c:	58020400 	.word	0x58020400
 8011890:	58020800 	.word	0x58020800
 8011894:	58020c00 	.word	0x58020c00
 8011898:	58021000 	.word	0x58021000
 801189c:	58021400 	.word	0x58021400
 80118a0:	58021800 	.word	0x58021800
 80118a4:	58021c00 	.word	0x58021c00
 80118a8:	58022000 	.word	0x58022000
 80118ac:	58022400 	.word	0x58022400
 80118b0:	2300      	movs	r3, #0
 80118b2:	69fa      	ldr	r2, [r7, #28]
 80118b4:	f002 0203 	and.w	r2, r2, #3
 80118b8:	0092      	lsls	r2, r2, #2
 80118ba:	4093      	lsls	r3, r2
 80118bc:	69ba      	ldr	r2, [r7, #24]
 80118be:	4313      	orrs	r3, r2
 80118c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80118c2:	4938      	ldr	r1, [pc, #224]	; (80119a4 <HAL_GPIO_Init+0x35c>)
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	089b      	lsrs	r3, r3, #2
 80118c8:	3302      	adds	r3, #2
 80118ca:	69ba      	ldr	r2, [r7, #24]
 80118cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80118d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	43db      	mvns	r3, r3
 80118dc:	69ba      	ldr	r2, [r7, #24]
 80118de:	4013      	ands	r3, r2
 80118e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d003      	beq.n	80118f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80118ee:	69ba      	ldr	r2, [r7, #24]
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80118f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80118fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	43db      	mvns	r3, r3
 801190a:	69ba      	ldr	r2, [r7, #24]
 801190c:	4013      	ands	r3, r2
 801190e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011918:	2b00      	cmp	r3, #0
 801191a:	d003      	beq.n	8011924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801191c:	69ba      	ldr	r2, [r7, #24]
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	4313      	orrs	r3, r2
 8011922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011928:	69bb      	ldr	r3, [r7, #24]
 801192a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	43db      	mvns	r3, r3
 8011936:	69ba      	ldr	r2, [r7, #24]
 8011938:	4013      	ands	r3, r2
 801193a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	4313      	orrs	r3, r2
 801194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	69ba      	ldr	r2, [r7, #24]
 8011954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	43db      	mvns	r3, r3
 8011960:	69ba      	ldr	r2, [r7, #24]
 8011962:	4013      	ands	r3, r2
 8011964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801196e:	2b00      	cmp	r3, #0
 8011970:	d003      	beq.n	801197a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011972:	69ba      	ldr	r2, [r7, #24]
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	4313      	orrs	r3, r2
 8011978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	69ba      	ldr	r2, [r7, #24]
 801197e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	3301      	adds	r3, #1
 8011984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	fa22 f303 	lsr.w	r3, r2, r3
 8011990:	2b00      	cmp	r3, #0
 8011992:	f47f ae63 	bne.w	801165c <HAL_GPIO_Init+0x14>
  }
}
 8011996:	bf00      	nop
 8011998:	bf00      	nop
 801199a:	3724      	adds	r7, #36	; 0x24
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	58000400 	.word	0x58000400

080119a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b087      	sub	sp, #28
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80119b2:	2300      	movs	r3, #0
 80119b4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80119b6:	4b75      	ldr	r3, [pc, #468]	; (8011b8c <HAL_GPIO_DeInit+0x1e4>)
 80119b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80119ba:	e0d9      	b.n	8011b70 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80119bc:	2201      	movs	r2, #1
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	fa02 f303 	lsl.w	r3, r2, r3
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	4013      	ands	r3, r2
 80119c8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 80cc 	beq.w	8011b6a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80119d2:	4a6f      	ldr	r2, [pc, #444]	; (8011b90 <HAL_GPIO_DeInit+0x1e8>)
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	089b      	lsrs	r3, r3, #2
 80119d8:	3302      	adds	r3, #2
 80119da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119de:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	f003 0303 	and.w	r3, r3, #3
 80119e6:	009b      	lsls	r3, r3, #2
 80119e8:	220f      	movs	r2, #15
 80119ea:	fa02 f303 	lsl.w	r3, r2, r3
 80119ee:	68ba      	ldr	r2, [r7, #8]
 80119f0:	4013      	ands	r3, r2
 80119f2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4a67      	ldr	r2, [pc, #412]	; (8011b94 <HAL_GPIO_DeInit+0x1ec>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d037      	beq.n	8011a6c <HAL_GPIO_DeInit+0xc4>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4a66      	ldr	r2, [pc, #408]	; (8011b98 <HAL_GPIO_DeInit+0x1f0>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d031      	beq.n	8011a68 <HAL_GPIO_DeInit+0xc0>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4a65      	ldr	r2, [pc, #404]	; (8011b9c <HAL_GPIO_DeInit+0x1f4>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d02b      	beq.n	8011a64 <HAL_GPIO_DeInit+0xbc>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4a64      	ldr	r2, [pc, #400]	; (8011ba0 <HAL_GPIO_DeInit+0x1f8>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d025      	beq.n	8011a60 <HAL_GPIO_DeInit+0xb8>
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	4a63      	ldr	r2, [pc, #396]	; (8011ba4 <HAL_GPIO_DeInit+0x1fc>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d01f      	beq.n	8011a5c <HAL_GPIO_DeInit+0xb4>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4a62      	ldr	r2, [pc, #392]	; (8011ba8 <HAL_GPIO_DeInit+0x200>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d019      	beq.n	8011a58 <HAL_GPIO_DeInit+0xb0>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a61      	ldr	r2, [pc, #388]	; (8011bac <HAL_GPIO_DeInit+0x204>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d013      	beq.n	8011a54 <HAL_GPIO_DeInit+0xac>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	4a60      	ldr	r2, [pc, #384]	; (8011bb0 <HAL_GPIO_DeInit+0x208>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d00d      	beq.n	8011a50 <HAL_GPIO_DeInit+0xa8>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4a5f      	ldr	r2, [pc, #380]	; (8011bb4 <HAL_GPIO_DeInit+0x20c>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d007      	beq.n	8011a4c <HAL_GPIO_DeInit+0xa4>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	4a5e      	ldr	r2, [pc, #376]	; (8011bb8 <HAL_GPIO_DeInit+0x210>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d101      	bne.n	8011a48 <HAL_GPIO_DeInit+0xa0>
 8011a44:	2309      	movs	r3, #9
 8011a46:	e012      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a48:	230a      	movs	r3, #10
 8011a4a:	e010      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a4c:	2308      	movs	r3, #8
 8011a4e:	e00e      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a50:	2307      	movs	r3, #7
 8011a52:	e00c      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a54:	2306      	movs	r3, #6
 8011a56:	e00a      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a58:	2305      	movs	r3, #5
 8011a5a:	e008      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a5c:	2304      	movs	r3, #4
 8011a5e:	e006      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a60:	2303      	movs	r3, #3
 8011a62:	e004      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a64:	2302      	movs	r3, #2
 8011a66:	e002      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e000      	b.n	8011a6e <HAL_GPIO_DeInit+0xc6>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	697a      	ldr	r2, [r7, #20]
 8011a70:	f002 0203 	and.w	r2, r2, #3
 8011a74:	0092      	lsls	r2, r2, #2
 8011a76:	4093      	lsls	r3, r2
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d136      	bne.n	8011aec <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	43db      	mvns	r3, r3
 8011a86:	401a      	ands	r2, r3
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	685a      	ldr	r2, [r3, #4]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	43db      	mvns	r3, r3
 8011a94:	401a      	ands	r2, r3
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	43db      	mvns	r3, r3
 8011aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011aa8:	4013      	ands	r3, r2
 8011aaa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	43db      	mvns	r3, r3
 8011ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011aba:	4013      	ands	r3, r2
 8011abc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	f003 0303 	and.w	r3, r3, #3
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	220f      	movs	r2, #15
 8011ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8011acc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011ace:	4a30      	ldr	r2, [pc, #192]	; (8011b90 <HAL_GPIO_DeInit+0x1e8>)
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	089b      	lsrs	r3, r3, #2
 8011ad4:	3302      	adds	r3, #2
 8011ad6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	43da      	mvns	r2, r3
 8011ade:	482c      	ldr	r0, [pc, #176]	; (8011b90 <HAL_GPIO_DeInit+0x1e8>)
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	089b      	lsrs	r3, r3, #2
 8011ae4:	400a      	ands	r2, r1
 8011ae6:	3302      	adds	r3, #2
 8011ae8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	2103      	movs	r1, #3
 8011af6:	fa01 f303 	lsl.w	r3, r1, r3
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	08da      	lsrs	r2, r3, #3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	3208      	adds	r2, #8
 8011b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	f003 0307 	and.w	r3, r3, #7
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	220f      	movs	r2, #15
 8011b16:	fa02 f303 	lsl.w	r3, r2, r3
 8011b1a:	43db      	mvns	r3, r3
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	08d2      	lsrs	r2, r2, #3
 8011b20:	4019      	ands	r1, r3
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	3208      	adds	r2, #8
 8011b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	68da      	ldr	r2, [r3, #12]
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	005b      	lsls	r3, r3, #1
 8011b32:	2103      	movs	r1, #3
 8011b34:	fa01 f303 	lsl.w	r3, r1, r3
 8011b38:	43db      	mvns	r3, r3
 8011b3a:	401a      	ands	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685a      	ldr	r2, [r3, #4]
 8011b44:	2101      	movs	r1, #1
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	fa01 f303 	lsl.w	r3, r1, r3
 8011b4c:	43db      	mvns	r3, r3
 8011b4e:	401a      	ands	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	689a      	ldr	r2, [r3, #8]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	005b      	lsls	r3, r3, #1
 8011b5c:	2103      	movs	r1, #3
 8011b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b62:	43db      	mvns	r3, r3
 8011b64:	401a      	ands	r2, r3
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	3301      	adds	r3, #1
 8011b6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011b70:	683a      	ldr	r2, [r7, #0]
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	fa22 f303 	lsr.w	r3, r2, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f47f af1f 	bne.w	80119bc <HAL_GPIO_DeInit+0x14>
  }
}
 8011b7e:	bf00      	nop
 8011b80:	bf00      	nop
 8011b82:	371c      	adds	r7, #28
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr
 8011b8c:	58000080 	.word	0x58000080
 8011b90:	58000400 	.word	0x58000400
 8011b94:	58020000 	.word	0x58020000
 8011b98:	58020400 	.word	0x58020400
 8011b9c:	58020800 	.word	0x58020800
 8011ba0:	58020c00 	.word	0x58020c00
 8011ba4:	58021000 	.word	0x58021000
 8011ba8:	58021400 	.word	0x58021400
 8011bac:	58021800 	.word	0x58021800
 8011bb0:	58021c00 	.word	0x58021c00
 8011bb4:	58022000 	.word	0x58022000
 8011bb8:	58022400 	.word	0x58022400

08011bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	691a      	ldr	r2, [r3, #16]
 8011bcc:	887b      	ldrh	r3, [r7, #2]
 8011bce:	4013      	ands	r3, r2
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	73fb      	strb	r3, [r7, #15]
 8011bd8:	e001      	b.n	8011bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3714      	adds	r7, #20
 8011be4:	46bd      	mov	sp, r7
 8011be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bea:	4770      	bx	lr

08011bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	807b      	strh	r3, [r7, #2]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011bfc:	787b      	ldrb	r3, [r7, #1]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d003      	beq.n	8011c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011c02:	887a      	ldrh	r2, [r7, #2]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011c08:	e003      	b.n	8011c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011c0a:	887b      	ldrh	r3, [r7, #2]
 8011c0c:	041a      	lsls	r2, r3, #16
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	619a      	str	r2, [r3, #24]
}
 8011c12:	bf00      	nop
 8011c14:	370c      	adds	r7, #12
 8011c16:	46bd      	mov	sp, r7
 8011c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1c:	4770      	bx	lr
	...

08011c20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b083      	sub	sp, #12
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011c28:	4a08      	ldr	r2, [pc, #32]	; (8011c4c <HAL_HSEM_FastTake+0x2c>)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	3320      	adds	r3, #32
 8011c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c32:	4a07      	ldr	r2, [pc, #28]	; (8011c50 <HAL_HSEM_FastTake+0x30>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d101      	bne.n	8011c3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e000      	b.n	8011c3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011c3c:	2301      	movs	r3, #1
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	58026400 	.word	0x58026400
 8011c50:	80000300 	.word	0x80000300

08011c54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8011c5e:	4906      	ldr	r1, [pc, #24]	; (8011c78 <HAL_HSEM_Release+0x24>)
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8011c6c:	bf00      	nop
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr
 8011c78:	58026400 	.word	0x58026400

08011c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e07f      	b.n	8011d8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f000 f8a9 	bl	8011dfa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2224      	movs	r2, #36	; 0x24
 8011cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f022 0201 	bic.w	r2, r2, #1
 8011cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011ccc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	689a      	ldr	r2, [r3, #8]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011cdc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	d107      	bne.n	8011cf6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	689a      	ldr	r2, [r3, #8]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011cf2:	609a      	str	r2, [r3, #8]
 8011cf4:	e006      	b.n	8011d04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	689a      	ldr	r2, [r3, #8]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011d02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d104      	bne.n	8011d16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	6859      	ldr	r1, [r3, #4]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	4b1d      	ldr	r3, [pc, #116]	; (8011d98 <HAL_I2C_Init+0x11c>)
 8011d22:	430b      	orrs	r3, r1
 8011d24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	68da      	ldr	r2, [r3, #12]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011d34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	691a      	ldr	r2, [r3, #16]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	699b      	ldr	r3, [r3, #24]
 8011d46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	430a      	orrs	r2, r1
 8011d4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	69d9      	ldr	r1, [r3, #28]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6a1a      	ldr	r2, [r3, #32]
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	430a      	orrs	r2, r1
 8011d5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	681a      	ldr	r2, [r3, #0]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f042 0201 	orr.w	r2, r2, #1
 8011d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2220      	movs	r2, #32
 8011d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3708      	adds	r7, #8
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop
 8011d98:	02008000 	.word	0x02008000

08011d9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d101      	bne.n	8011dae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e021      	b.n	8011df2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2224      	movs	r2, #36	; 0x24
 8011db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f022 0201 	bic.w	r2, r2, #1
 8011dc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 f821 	bl	8011e0e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2200      	movs	r2, #0
 8011dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2200      	movs	r2, #0
 8011de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011e02:	bf00      	nop
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr

08011e0e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011e0e:	b480      	push	{r7}
 8011e10:	b083      	sub	sp, #12
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011e16:	bf00      	nop
 8011e18:	370c      	adds	r7, #12
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e20:	4770      	bx	lr
	...

08011e24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b088      	sub	sp, #32
 8011e28:	af02      	add	r7, sp, #8
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	4608      	mov	r0, r1
 8011e2e:	4611      	mov	r1, r2
 8011e30:	461a      	mov	r2, r3
 8011e32:	4603      	mov	r3, r0
 8011e34:	817b      	strh	r3, [r7, #10]
 8011e36:	460b      	mov	r3, r1
 8011e38:	813b      	strh	r3, [r7, #8]
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b20      	cmp	r3, #32
 8011e48:	f040 80f9 	bne.w	801203e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e4c:	6a3b      	ldr	r3, [r7, #32]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d002      	beq.n	8011e58 <HAL_I2C_Mem_Write+0x34>
 8011e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d105      	bne.n	8011e64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8011e60:	2301      	movs	r3, #1
 8011e62:	e0ed      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e6a:	2b01      	cmp	r3, #1
 8011e6c:	d101      	bne.n	8011e72 <HAL_I2C_Mem_Write+0x4e>
 8011e6e:	2302      	movs	r3, #2
 8011e70:	e0e6      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011e7a:	f7fe ffe1 	bl	8010e40 <HAL_GetTick>
 8011e7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	2319      	movs	r3, #25
 8011e86:	2201      	movs	r2, #1
 8011e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f000 fadd 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d001      	beq.n	8011e9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	e0d1      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2221      	movs	r2, #33	; 0x21
 8011ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2240      	movs	r2, #64	; 0x40
 8011ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6a3a      	ldr	r2, [r7, #32]
 8011eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011ec4:	88f8      	ldrh	r0, [r7, #6]
 8011ec6:	893a      	ldrh	r2, [r7, #8]
 8011ec8:	8979      	ldrh	r1, [r7, #10]
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	9301      	str	r3, [sp, #4]
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f000 f9ed 	bl	80122b4 <I2C_RequestMemoryWrite>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d005      	beq.n	8011eec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e0a9      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	2bff      	cmp	r3, #255	; 0xff
 8011ef4:	d90e      	bls.n	8011f14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	22ff      	movs	r2, #255	; 0xff
 8011efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	8979      	ldrh	r1, [r7, #10]
 8011f04:	2300      	movs	r3, #0
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	f000 fc45 	bl	801279c <I2C_TransferConfig>
 8011f12:	e00f      	b.n	8011f34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	8979      	ldrh	r1, [r7, #10]
 8011f26:	2300      	movs	r3, #0
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f000 fc34 	bl	801279c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011f34:	697a      	ldr	r2, [r7, #20]
 8011f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f000 fac7 	bl	80124cc <I2C_WaitOnTXISFlagUntilTimeout>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011f44:	2301      	movs	r3, #1
 8011f46:	e07b      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f4c:	781a      	ldrb	r2, [r3, #0]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	3b01      	subs	r3, #1
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f70:	3b01      	subs	r3, #1
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d034      	beq.n	8011fec <HAL_I2C_Mem_Write+0x1c8>
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d130      	bne.n	8011fec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	2200      	movs	r2, #0
 8011f92:	2180      	movs	r1, #128	; 0x80
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f000 fa59 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e04d      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	2bff      	cmp	r3, #255	; 0xff
 8011fac:	d90e      	bls.n	8011fcc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	22ff      	movs	r2, #255	; 0xff
 8011fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fb8:	b2da      	uxtb	r2, r3
 8011fba:	8979      	ldrh	r1, [r7, #10]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f000 fbe9 	bl	801279c <I2C_TransferConfig>
 8011fca:	e00f      	b.n	8011fec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fda:	b2da      	uxtb	r2, r3
 8011fdc:	8979      	ldrh	r1, [r7, #10]
 8011fde:	2300      	movs	r3, #0
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f000 fbd8 	bl	801279c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d19e      	bne.n	8011f34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f000 faa6 	bl	801254c <I2C_WaitOnSTOPFlagUntilTimeout>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	e01a      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2220      	movs	r2, #32
 8012010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	6859      	ldr	r1, [r3, #4]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	4b0a      	ldr	r3, [pc, #40]	; (8012048 <HAL_I2C_Mem_Write+0x224>)
 801201e:	400b      	ands	r3, r1
 8012020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2220      	movs	r2, #32
 8012026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2200      	movs	r2, #0
 801202e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801203a:	2300      	movs	r3, #0
 801203c:	e000      	b.n	8012040 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801203e:	2302      	movs	r3, #2
  }
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	fe00e800 	.word	0xfe00e800

0801204c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af02      	add	r7, sp, #8
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	4608      	mov	r0, r1
 8012056:	4611      	mov	r1, r2
 8012058:	461a      	mov	r2, r3
 801205a:	4603      	mov	r3, r0
 801205c:	817b      	strh	r3, [r7, #10]
 801205e:	460b      	mov	r3, r1
 8012060:	813b      	strh	r3, [r7, #8]
 8012062:	4613      	mov	r3, r2
 8012064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801206c:	b2db      	uxtb	r3, r3
 801206e:	2b20      	cmp	r3, #32
 8012070:	f040 80fd 	bne.w	801226e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8012074:	6a3b      	ldr	r3, [r7, #32]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d002      	beq.n	8012080 <HAL_I2C_Mem_Read+0x34>
 801207a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801207c:	2b00      	cmp	r3, #0
 801207e:	d105      	bne.n	801208c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012086:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8012088:	2301      	movs	r3, #1
 801208a:	e0f1      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012092:	2b01      	cmp	r3, #1
 8012094:	d101      	bne.n	801209a <HAL_I2C_Mem_Read+0x4e>
 8012096:	2302      	movs	r3, #2
 8012098:	e0ea      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2201      	movs	r2, #1
 801209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80120a2:	f7fe fecd 	bl	8010e40 <HAL_GetTick>
 80120a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	2319      	movs	r3, #25
 80120ae:	2201      	movs	r2, #1
 80120b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f000 f9c9 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d001      	beq.n	80120c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	e0d5      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2222      	movs	r2, #34	; 0x22
 80120c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2240      	movs	r2, #64	; 0x40
 80120d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2200      	movs	r2, #0
 80120d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6a3a      	ldr	r2, [r7, #32]
 80120de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80120e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80120ec:	88f8      	ldrh	r0, [r7, #6]
 80120ee:	893a      	ldrh	r2, [r7, #8]
 80120f0:	8979      	ldrh	r1, [r7, #10]
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	9301      	str	r3, [sp, #4]
 80120f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	4603      	mov	r3, r0
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f000 f92d 	bl	801235c <I2C_RequestMemoryRead>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d005      	beq.n	8012114 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2200      	movs	r2, #0
 801210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8012110:	2301      	movs	r3, #1
 8012112:	e0ad      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012118:	b29b      	uxth	r3, r3
 801211a:	2bff      	cmp	r3, #255	; 0xff
 801211c:	d90e      	bls.n	801213c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	22ff      	movs	r2, #255	; 0xff
 8012122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012128:	b2da      	uxtb	r2, r3
 801212a:	8979      	ldrh	r1, [r7, #10]
 801212c:	4b52      	ldr	r3, [pc, #328]	; (8012278 <HAL_I2C_Mem_Read+0x22c>)
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f000 fb31 	bl	801279c <I2C_TransferConfig>
 801213a:	e00f      	b.n	801215c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012140:	b29a      	uxth	r2, r3
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801214a:	b2da      	uxtb	r2, r3
 801214c:	8979      	ldrh	r1, [r7, #10]
 801214e:	4b4a      	ldr	r3, [pc, #296]	; (8012278 <HAL_I2C_Mem_Read+0x22c>)
 8012150:	9300      	str	r3, [sp, #0]
 8012152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012156:	68f8      	ldr	r0, [r7, #12]
 8012158:	f000 fb20 	bl	801279c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012162:	2200      	movs	r2, #0
 8012164:	2104      	movs	r1, #4
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 f970 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	d001      	beq.n	8012176 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e07c      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012180:	b2d2      	uxtb	r2, r2
 8012182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012188:	1c5a      	adds	r2, r3, #1
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012192:	3b01      	subs	r3, #1
 8012194:	b29a      	uxth	r2, r3
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801219e:	b29b      	uxth	r3, r3
 80121a0:	3b01      	subs	r3, #1
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d034      	beq.n	801221c <HAL_I2C_Mem_Read+0x1d0>
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d130      	bne.n	801221c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c0:	2200      	movs	r2, #0
 80121c2:	2180      	movs	r1, #128	; 0x80
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 f941 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80121d0:	2301      	movs	r3, #1
 80121d2:	e04d      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121d8:	b29b      	uxth	r3, r3
 80121da:	2bff      	cmp	r3, #255	; 0xff
 80121dc:	d90e      	bls.n	80121fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	22ff      	movs	r2, #255	; 0xff
 80121e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121e8:	b2da      	uxtb	r2, r3
 80121ea:	8979      	ldrh	r1, [r7, #10]
 80121ec:	2300      	movs	r3, #0
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f000 fad1 	bl	801279c <I2C_TransferConfig>
 80121fa:	e00f      	b.n	801221c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012200:	b29a      	uxth	r2, r3
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801220a:	b2da      	uxtb	r2, r3
 801220c:	8979      	ldrh	r1, [r7, #10]
 801220e:	2300      	movs	r3, #0
 8012210:	9300      	str	r3, [sp, #0]
 8012212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f000 fac0 	bl	801279c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012220:	b29b      	uxth	r3, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	d19a      	bne.n	801215c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012226:	697a      	ldr	r2, [r7, #20]
 8012228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f000 f98e 	bl	801254c <I2C_WaitOnSTOPFlagUntilTimeout>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d001      	beq.n	801223a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8012236:	2301      	movs	r3, #1
 8012238:	e01a      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2220      	movs	r2, #32
 8012240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6859      	ldr	r1, [r3, #4]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	4b0b      	ldr	r3, [pc, #44]	; (801227c <HAL_I2C_Mem_Read+0x230>)
 801224e:	400b      	ands	r3, r1
 8012250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2220      	movs	r2, #32
 8012256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2200      	movs	r2, #0
 801225e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2200      	movs	r2, #0
 8012266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801226a:	2300      	movs	r3, #0
 801226c:	e000      	b.n	8012270 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801226e:	2302      	movs	r3, #2
  }
}
 8012270:	4618      	mov	r0, r3
 8012272:	3718      	adds	r7, #24
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	80002400 	.word	0x80002400
 801227c:	fe00e800 	.word	0xfe00e800

08012280 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012280:	b480      	push	{r7}
 8012282:	b083      	sub	sp, #12
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801228e:	b2db      	uxtb	r3, r3
}
 8012290:	4618      	mov	r0, r3
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr

080122b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af02      	add	r7, sp, #8
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	4608      	mov	r0, r1
 80122be:	4611      	mov	r1, r2
 80122c0:	461a      	mov	r2, r3
 80122c2:	4603      	mov	r3, r0
 80122c4:	817b      	strh	r3, [r7, #10]
 80122c6:	460b      	mov	r3, r1
 80122c8:	813b      	strh	r3, [r7, #8]
 80122ca:	4613      	mov	r3, r2
 80122cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80122ce:	88fb      	ldrh	r3, [r7, #6]
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	8979      	ldrh	r1, [r7, #10]
 80122d4:	4b20      	ldr	r3, [pc, #128]	; (8012358 <I2C_RequestMemoryWrite+0xa4>)
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80122dc:	68f8      	ldr	r0, [r7, #12]
 80122de:	f000 fa5d 	bl	801279c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80122e2:	69fa      	ldr	r2, [r7, #28]
 80122e4:	69b9      	ldr	r1, [r7, #24]
 80122e6:	68f8      	ldr	r0, [r7, #12]
 80122e8:	f000 f8f0 	bl	80124cc <I2C_WaitOnTXISFlagUntilTimeout>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80122f2:	2301      	movs	r3, #1
 80122f4:	e02c      	b.n	8012350 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80122f6:	88fb      	ldrh	r3, [r7, #6]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d105      	bne.n	8012308 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80122fc:	893b      	ldrh	r3, [r7, #8]
 80122fe:	b2da      	uxtb	r2, r3
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	629a      	str	r2, [r3, #40]	; 0x28
 8012306:	e015      	b.n	8012334 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012308:	893b      	ldrh	r3, [r7, #8]
 801230a:	0a1b      	lsrs	r3, r3, #8
 801230c:	b29b      	uxth	r3, r3
 801230e:	b2da      	uxtb	r2, r3
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012316:	69fa      	ldr	r2, [r7, #28]
 8012318:	69b9      	ldr	r1, [r7, #24]
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f000 f8d6 	bl	80124cc <I2C_WaitOnTXISFlagUntilTimeout>
 8012320:	4603      	mov	r3, r0
 8012322:	2b00      	cmp	r3, #0
 8012324:	d001      	beq.n	801232a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8012326:	2301      	movs	r3, #1
 8012328:	e012      	b.n	8012350 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801232a:	893b      	ldrh	r3, [r7, #8]
 801232c:	b2da      	uxtb	r2, r3
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	2200      	movs	r2, #0
 801233c:	2180      	movs	r1, #128	; 0x80
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f000 f884 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d001      	beq.n	801234e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801234a:	2301      	movs	r3, #1
 801234c:	e000      	b.n	8012350 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3710      	adds	r7, #16
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	80002000 	.word	0x80002000

0801235c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af02      	add	r7, sp, #8
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	4608      	mov	r0, r1
 8012366:	4611      	mov	r1, r2
 8012368:	461a      	mov	r2, r3
 801236a:	4603      	mov	r3, r0
 801236c:	817b      	strh	r3, [r7, #10]
 801236e:	460b      	mov	r3, r1
 8012370:	813b      	strh	r3, [r7, #8]
 8012372:	4613      	mov	r3, r2
 8012374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8012376:	88fb      	ldrh	r3, [r7, #6]
 8012378:	b2da      	uxtb	r2, r3
 801237a:	8979      	ldrh	r1, [r7, #10]
 801237c:	4b20      	ldr	r3, [pc, #128]	; (8012400 <I2C_RequestMemoryRead+0xa4>)
 801237e:	9300      	str	r3, [sp, #0]
 8012380:	2300      	movs	r3, #0
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f000 fa0a 	bl	801279c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012388:	69fa      	ldr	r2, [r7, #28]
 801238a:	69b9      	ldr	r1, [r7, #24]
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f000 f89d 	bl	80124cc <I2C_WaitOnTXISFlagUntilTimeout>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d001      	beq.n	801239c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8012398:	2301      	movs	r3, #1
 801239a:	e02c      	b.n	80123f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801239c:	88fb      	ldrh	r3, [r7, #6]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d105      	bne.n	80123ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80123a2:	893b      	ldrh	r3, [r7, #8]
 80123a4:	b2da      	uxtb	r2, r3
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	629a      	str	r2, [r3, #40]	; 0x28
 80123ac:	e015      	b.n	80123da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80123ae:	893b      	ldrh	r3, [r7, #8]
 80123b0:	0a1b      	lsrs	r3, r3, #8
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80123bc:	69fa      	ldr	r2, [r7, #28]
 80123be:	69b9      	ldr	r1, [r7, #24]
 80123c0:	68f8      	ldr	r0, [r7, #12]
 80123c2:	f000 f883 	bl	80124cc <I2C_WaitOnTXISFlagUntilTimeout>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80123cc:	2301      	movs	r3, #1
 80123ce:	e012      	b.n	80123f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80123d0:	893b      	ldrh	r3, [r7, #8]
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	2200      	movs	r2, #0
 80123e2:	2140      	movs	r1, #64	; 0x40
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f000 f831 	bl	801244c <I2C_WaitOnFlagUntilTimeout>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80123f0:	2301      	movs	r3, #1
 80123f2:	e000      	b.n	80123f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80123f4:	2300      	movs	r3, #0
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	80002000 	.word	0x80002000

08012404 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	699b      	ldr	r3, [r3, #24]
 8012412:	f003 0302 	and.w	r3, r3, #2
 8012416:	2b02      	cmp	r3, #2
 8012418:	d103      	bne.n	8012422 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2200      	movs	r2, #0
 8012420:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	699b      	ldr	r3, [r3, #24]
 8012428:	f003 0301 	and.w	r3, r3, #1
 801242c:	2b01      	cmp	r3, #1
 801242e:	d007      	beq.n	8012440 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	699a      	ldr	r2, [r3, #24]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f042 0201 	orr.w	r2, r2, #1
 801243e:	619a      	str	r2, [r3, #24]
  }
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr

0801244c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	603b      	str	r3, [r7, #0]
 8012458:	4613      	mov	r3, r2
 801245a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801245c:	e022      	b.n	80124a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012464:	d01e      	beq.n	80124a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012466:	f7fe fceb 	bl	8010e40 <HAL_GetTick>
 801246a:	4602      	mov	r2, r0
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	683a      	ldr	r2, [r7, #0]
 8012472:	429a      	cmp	r2, r3
 8012474:	d302      	bcc.n	801247c <I2C_WaitOnFlagUntilTimeout+0x30>
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d113      	bne.n	80124a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012480:	f043 0220 	orr.w	r2, r3, #32
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2220      	movs	r2, #32
 801248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2200      	movs	r2, #0
 8012494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2200      	movs	r2, #0
 801249c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80124a0:	2301      	movs	r3, #1
 80124a2:	e00f      	b.n	80124c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	699a      	ldr	r2, [r3, #24]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	4013      	ands	r3, r2
 80124ae:	68ba      	ldr	r2, [r7, #8]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	bf0c      	ite	eq
 80124b4:	2301      	moveq	r3, #1
 80124b6:	2300      	movne	r3, #0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	461a      	mov	r2, r3
 80124bc:	79fb      	ldrb	r3, [r7, #7]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d0cd      	beq.n	801245e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80124c2:	2300      	movs	r3, #0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3710      	adds	r7, #16
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80124d8:	e02c      	b.n	8012534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	68b9      	ldr	r1, [r7, #8]
 80124de:	68f8      	ldr	r0, [r7, #12]
 80124e0:	f000 f870 	bl	80125c4 <I2C_IsErrorOccurred>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e02a      	b.n	8012544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f4:	d01e      	beq.n	8012534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124f6:	f7fe fca3 	bl	8010e40 <HAL_GetTick>
 80124fa:	4602      	mov	r2, r0
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	429a      	cmp	r2, r3
 8012504:	d302      	bcc.n	801250c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d113      	bne.n	8012534 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012510:	f043 0220 	orr.w	r2, r3, #32
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	2220      	movs	r2, #32
 801251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2200      	movs	r2, #0
 8012524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2200      	movs	r2, #0
 801252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8012530:	2301      	movs	r3, #1
 8012532:	e007      	b.n	8012544 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	699b      	ldr	r3, [r3, #24]
 801253a:	f003 0302 	and.w	r3, r3, #2
 801253e:	2b02      	cmp	r3, #2
 8012540:	d1cb      	bne.n	80124da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012542:	2300      	movs	r3, #0
}
 8012544:	4618      	mov	r0, r3
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012558:	e028      	b.n	80125ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	68b9      	ldr	r1, [r7, #8]
 801255e:	68f8      	ldr	r0, [r7, #12]
 8012560:	f000 f830 	bl	80125c4 <I2C_IsErrorOccurred>
 8012564:	4603      	mov	r3, r0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d001      	beq.n	801256e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801256a:	2301      	movs	r3, #1
 801256c:	e026      	b.n	80125bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801256e:	f7fe fc67 	bl	8010e40 <HAL_GetTick>
 8012572:	4602      	mov	r2, r0
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	1ad3      	subs	r3, r2, r3
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	429a      	cmp	r2, r3
 801257c:	d302      	bcc.n	8012584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d113      	bne.n	80125ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012588:	f043 0220 	orr.w	r2, r3, #32
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2220      	movs	r2, #32
 8012594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2200      	movs	r2, #0
 801259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2200      	movs	r2, #0
 80125a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80125a8:	2301      	movs	r3, #1
 80125aa:	e007      	b.n	80125bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	699b      	ldr	r3, [r3, #24]
 80125b2:	f003 0320 	and.w	r3, r3, #32
 80125b6:	2b20      	cmp	r3, #32
 80125b8:	d1cf      	bne.n	801255a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b08a      	sub	sp, #40	; 0x28
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80125d0:	2300      	movs	r3, #0
 80125d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	699b      	ldr	r3, [r3, #24]
 80125dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	f003 0310 	and.w	r3, r3, #16
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d075      	beq.n	80126dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	2210      	movs	r2, #16
 80125f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80125f8:	e056      	b.n	80126a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012600:	d052      	beq.n	80126a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012602:	f7fe fc1d 	bl	8010e40 <HAL_GetTick>
 8012606:	4602      	mov	r2, r0
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	1ad3      	subs	r3, r2, r3
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	429a      	cmp	r2, r3
 8012610:	d302      	bcc.n	8012618 <I2C_IsErrorOccurred+0x54>
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d147      	bne.n	80126a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012622:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801262a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	699b      	ldr	r3, [r3, #24]
 8012632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801263a:	d12e      	bne.n	801269a <I2C_IsErrorOccurred+0xd6>
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012642:	d02a      	beq.n	801269a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8012644:	7cfb      	ldrb	r3, [r7, #19]
 8012646:	2b20      	cmp	r3, #32
 8012648:	d027      	beq.n	801269a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	685a      	ldr	r2, [r3, #4]
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012658:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801265a:	f7fe fbf1 	bl	8010e40 <HAL_GetTick>
 801265e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012660:	e01b      	b.n	801269a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012662:	f7fe fbed 	bl	8010e40 <HAL_GetTick>
 8012666:	4602      	mov	r2, r0
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	1ad3      	subs	r3, r2, r3
 801266c:	2b19      	cmp	r3, #25
 801266e:	d914      	bls.n	801269a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012674:	f043 0220 	orr.w	r2, r3, #32
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2220      	movs	r2, #32
 8012680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8012694:	2301      	movs	r3, #1
 8012696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	699b      	ldr	r3, [r3, #24]
 80126a0:	f003 0320 	and.w	r3, r3, #32
 80126a4:	2b20      	cmp	r3, #32
 80126a6:	d1dc      	bne.n	8012662 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	699b      	ldr	r3, [r3, #24]
 80126ae:	f003 0320 	and.w	r3, r3, #32
 80126b2:	2b20      	cmp	r3, #32
 80126b4:	d003      	beq.n	80126be <I2C_IsErrorOccurred+0xfa>
 80126b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d09d      	beq.n	80125fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80126be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d103      	bne.n	80126ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2220      	movs	r2, #32
 80126cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80126ce:	6a3b      	ldr	r3, [r7, #32]
 80126d0:	f043 0304 	orr.w	r3, r3, #4
 80126d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	699b      	ldr	r3, [r3, #24]
 80126e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00b      	beq.n	8012706 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80126ee:	6a3b      	ldr	r3, [r7, #32]
 80126f0:	f043 0301 	orr.w	r3, r3, #1
 80126f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012700:	2301      	movs	r3, #1
 8012702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012710:	6a3b      	ldr	r3, [r7, #32]
 8012712:	f043 0308 	orr.w	r3, r3, #8
 8012716:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012722:	2301      	movs	r3, #1
 8012724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00b      	beq.n	801274a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	f043 0302 	orr.w	r3, r3, #2
 8012738:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012742:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012744:	2301      	movs	r3, #1
 8012746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801274a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801274e:	2b00      	cmp	r3, #0
 8012750:	d01c      	beq.n	801278c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7ff fe56 	bl	8012404 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	6859      	ldr	r1, [r3, #4]
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	4b0d      	ldr	r3, [pc, #52]	; (8012798 <I2C_IsErrorOccurred+0x1d4>)
 8012764:	400b      	ands	r3, r1
 8012766:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	431a      	orrs	r2, r3
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2220      	movs	r2, #32
 8012778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2200      	movs	r2, #0
 8012780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2200      	movs	r2, #0
 8012788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801278c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012790:	4618      	mov	r0, r3
 8012792:	3728      	adds	r7, #40	; 0x28
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	fe00e800 	.word	0xfe00e800

0801279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801279c:	b480      	push	{r7}
 801279e:	b087      	sub	sp, #28
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	607b      	str	r3, [r7, #4]
 80127a6:	460b      	mov	r3, r1
 80127a8:	817b      	strh	r3, [r7, #10]
 80127aa:	4613      	mov	r3, r2
 80127ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127ae:	897b      	ldrh	r3, [r7, #10]
 80127b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80127b4:	7a7b      	ldrb	r3, [r7, #9]
 80127b6:	041b      	lsls	r3, r3, #16
 80127b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127bc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127c2:	6a3b      	ldr	r3, [r7, #32]
 80127c4:	4313      	orrs	r3, r2
 80127c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127ca:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	685a      	ldr	r2, [r3, #4]
 80127d2:	6a3b      	ldr	r3, [r7, #32]
 80127d4:	0d5b      	lsrs	r3, r3, #21
 80127d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80127da:	4b08      	ldr	r3, [pc, #32]	; (80127fc <I2C_TransferConfig+0x60>)
 80127dc:	430b      	orrs	r3, r1
 80127de:	43db      	mvns	r3, r3
 80127e0:	ea02 0103 	and.w	r1, r2, r3
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	697a      	ldr	r2, [r7, #20]
 80127ea:	430a      	orrs	r2, r1
 80127ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80127ee:	bf00      	nop
 80127f0:	371c      	adds	r7, #28
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	03ff63ff 	.word	0x03ff63ff

08012800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b20      	cmp	r3, #32
 8012814:	d138      	bne.n	8012888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801281c:	2b01      	cmp	r3, #1
 801281e:	d101      	bne.n	8012824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012820:	2302      	movs	r3, #2
 8012822:	e032      	b.n	801288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2201      	movs	r2, #1
 8012828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2224      	movs	r2, #36	; 0x24
 8012830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f022 0201 	bic.w	r2, r2, #1
 8012842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	6819      	ldr	r1, [r3, #0]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	683a      	ldr	r2, [r7, #0]
 8012860:	430a      	orrs	r2, r1
 8012862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f042 0201 	orr.w	r2, r2, #1
 8012872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2220      	movs	r2, #32
 8012878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2200      	movs	r2, #0
 8012880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	e000      	b.n	801288a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012888:	2302      	movs	r3, #2
  }
}
 801288a:	4618      	mov	r0, r3
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012896:	b480      	push	{r7}
 8012898:	b085      	sub	sp, #20
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b20      	cmp	r3, #32
 80128aa:	d139      	bne.n	8012920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d101      	bne.n	80128ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80128b6:	2302      	movs	r3, #2
 80128b8:	e033      	b.n	8012922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2201      	movs	r2, #1
 80128be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2224      	movs	r2, #36	; 0x24
 80128c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f022 0201 	bic.w	r2, r2, #1
 80128d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80128e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	021b      	lsls	r3, r3, #8
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f042 0201 	orr.w	r2, r2, #1
 801290a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2220      	movs	r2, #32
 8012910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	e000      	b.n	8012922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012920:	2302      	movs	r3, #2
  }
}
 8012922:	4618      	mov	r0, r3
 8012924:	3714      	adds	r7, #20
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr
	...

08012930 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d101      	bne.n	8012942 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 801293e:	2301      	movs	r3, #1
 8012940:	e0bf      	b.n	8012ac2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	d106      	bne.n	801295c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7ee fad6 	bl	8000f08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2202      	movs	r2, #2
 8012960:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	699a      	ldr	r2, [r3, #24]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8012972:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	6999      	ldr	r1, [r3, #24]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	685a      	ldr	r2, [r3, #4]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	689b      	ldr	r3, [r3, #8]
 8012982:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012988:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	691b      	ldr	r3, [r3, #16]
 801298e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	430a      	orrs	r2, r1
 8012996:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	6899      	ldr	r1, [r3, #8]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	4b4a      	ldr	r3, [pc, #296]	; (8012acc <HAL_LTDC_Init+0x19c>)
 80129a4:	400b      	ands	r3, r1
 80129a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	695b      	ldr	r3, [r3, #20]
 80129ac:	041b      	lsls	r3, r3, #16
 80129ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	6899      	ldr	r1, [r3, #8]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	699a      	ldr	r2, [r3, #24]
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	431a      	orrs	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	430a      	orrs	r2, r1
 80129c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	68d9      	ldr	r1, [r3, #12]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	4b3e      	ldr	r3, [pc, #248]	; (8012acc <HAL_LTDC_Init+0x19c>)
 80129d2:	400b      	ands	r3, r1
 80129d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	69db      	ldr	r3, [r3, #28]
 80129da:	041b      	lsls	r3, r3, #16
 80129dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	68d9      	ldr	r1, [r3, #12]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6a1a      	ldr	r2, [r3, #32]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	431a      	orrs	r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	430a      	orrs	r2, r1
 80129f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	6919      	ldr	r1, [r3, #16]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	4b33      	ldr	r3, [pc, #204]	; (8012acc <HAL_LTDC_Init+0x19c>)
 8012a00:	400b      	ands	r3, r1
 8012a02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a08:	041b      	lsls	r3, r3, #16
 8012a0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	6919      	ldr	r1, [r3, #16]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	431a      	orrs	r2, r3
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	430a      	orrs	r2, r1
 8012a20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6959      	ldr	r1, [r3, #20]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	4b27      	ldr	r3, [pc, #156]	; (8012acc <HAL_LTDC_Init+0x19c>)
 8012a2e:	400b      	ands	r3, r1
 8012a30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	041b      	lsls	r3, r3, #16
 8012a38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	6959      	ldr	r1, [r3, #20]
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	431a      	orrs	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	430a      	orrs	r2, r1
 8012a4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012a56:	021b      	lsls	r3, r3, #8
 8012a58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012a60:	041b      	lsls	r3, r3, #16
 8012a62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8012a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012a7a:	68ba      	ldr	r2, [r7, #8]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012a86:	431a      	orrs	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	430a      	orrs	r2, r1
 8012a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f042 0206 	orr.w	r2, r2, #6
 8012a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	699a      	ldr	r2, [r3, #24]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	f042 0201 	orr.w	r2, r2, #1
 8012aae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2201      	movs	r2, #1
 8012abc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8012ac0:	2300      	movs	r3, #0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3710      	adds	r7, #16
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	f000f800 	.word	0xf000f800

08012ad0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ade:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ae6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f003 0304 	and.w	r3, r3, #4
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d023      	beq.n	8012b3a <HAL_LTDC_IRQHandler+0x6a>
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	f003 0304 	and.w	r3, r3, #4
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d01e      	beq.n	8012b3a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f022 0204 	bic.w	r2, r2, #4
 8012b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2204      	movs	r2, #4
 8012b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012b1a:	f043 0201 	orr.w	r2, r3, #1
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2204      	movs	r2, #4
 8012b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f000 f86f 	bl	8012c18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f003 0302 	and.w	r3, r3, #2
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d023      	beq.n	8012b8c <HAL_LTDC_IRQHandler+0xbc>
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	f003 0302 	and.w	r3, r3, #2
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d01e      	beq.n	8012b8c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f022 0202 	bic.w	r2, r2, #2
 8012b5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2202      	movs	r2, #2
 8012b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012b6c:	f043 0202 	orr.w	r2, r3, #2
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2204      	movs	r2, #4
 8012b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2200      	movs	r2, #0
 8012b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 f846 	bl	8012c18 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	f003 0301 	and.w	r3, r3, #1
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d01b      	beq.n	8012bce <HAL_LTDC_IRQHandler+0xfe>
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d016      	beq.n	8012bce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f022 0201 	bic.w	r2, r2, #1
 8012bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f7f0 ffd7 	bl	8003b7c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f003 0308 	and.w	r3, r3, #8
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d01b      	beq.n	8012c10 <HAL_LTDC_IRQHandler+0x140>
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f003 0308 	and.w	r3, r3, #8
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d016      	beq.n	8012c10 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f022 0208 	bic.w	r2, r2, #8
 8012bf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	2208      	movs	r2, #8
 8012bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 f80e 	bl	8012c2c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012c10:	bf00      	nop
 8012c12:	3710      	adds	r7, #16
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012c34:	bf00      	nop
 8012c36:	370c      	adds	r7, #12
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012c40:	b5b0      	push	{r4, r5, r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012c52:	2b01      	cmp	r3, #1
 8012c54:	d101      	bne.n	8012c5a <HAL_LTDC_ConfigLayer+0x1a>
 8012c56:	2302      	movs	r3, #2
 8012c58:	e02c      	b.n	8012cb4 <HAL_LTDC_ConfigLayer+0x74>
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2202      	movs	r2, #2
 8012c66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012c6a:	68fa      	ldr	r2, [r7, #12]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2134      	movs	r1, #52	; 0x34
 8012c70:	fb01 f303 	mul.w	r3, r1, r3
 8012c74:	4413      	add	r3, r2
 8012c76:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	4614      	mov	r4, r2
 8012c7e:	461d      	mov	r5, r3
 8012c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c8c:	682b      	ldr	r3, [r5, #0]
 8012c8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012c90:	687a      	ldr	r2, [r7, #4]
 8012c92:	68b9      	ldr	r1, [r7, #8]
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f000 f849 	bl	8012d2c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2200      	movs	r2, #0
 8012cae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012cb2:	2300      	movs	r3, #0
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bdb0      	pop	{r4, r5, r7, pc}

08012cbc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d101      	bne.n	8012cd4 <HAL_LTDC_ProgramLineEvent+0x18>
 8012cd0:	2302      	movs	r3, #2
 8012cd2:	e023      	b.n	8012d1c <HAL_LTDC_ProgramLineEvent+0x60>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2202      	movs	r2, #2
 8012ce0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f022 0201 	bic.w	r2, r2, #1
 8012cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012cf4:	4a0c      	ldr	r2, [pc, #48]	; (8012d28 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f042 0201 	orr.w	r2, r2, #1
 8012d08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2201      	movs	r2, #1
 8012d0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2200      	movs	r2, #0
 8012d16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	370c      	adds	r7, #12
 8012d20:	46bd      	mov	sp, r7
 8012d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d26:	4770      	bx	lr
 8012d28:	50001000 	.word	0x50001000

08012d2c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b089      	sub	sp, #36	; 0x24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	685a      	ldr	r2, [r3, #4]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	0c1b      	lsrs	r3, r3, #16
 8012d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d48:	4413      	add	r3, r2
 8012d4a:	041b      	lsls	r3, r3, #16
 8012d4c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	461a      	mov	r2, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	01db      	lsls	r3, r3, #7
 8012d58:	4413      	add	r3, r2
 8012d5a:	3384      	adds	r3, #132	; 0x84
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	6812      	ldr	r2, [r2, #0]
 8012d62:	4611      	mov	r1, r2
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	01d2      	lsls	r2, r2, #7
 8012d68:	440a      	add	r2, r1
 8012d6a:	3284      	adds	r2, #132	; 0x84
 8012d6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012d70:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	0c1b      	lsrs	r3, r3, #16
 8012d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012d82:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012d84:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	01db      	lsls	r3, r3, #7
 8012d90:	440b      	add	r3, r1
 8012d92:	3384      	adds	r3, #132	; 0x84
 8012d94:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012d9a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	68da      	ldr	r2, [r3, #12]
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012daa:	4413      	add	r3, r2
 8012dac:	041b      	lsls	r3, r3, #16
 8012dae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	461a      	mov	r2, r3
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	01db      	lsls	r3, r3, #7
 8012dba:	4413      	add	r3, r2
 8012dbc:	3384      	adds	r3, #132	; 0x84
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	6812      	ldr	r2, [r2, #0]
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	01d2      	lsls	r2, r2, #7
 8012dca:	440a      	add	r2, r1
 8012dcc:	3284      	adds	r2, #132	; 0x84
 8012dce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012dd2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	689a      	ldr	r2, [r3, #8]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012de2:	4413      	add	r3, r2
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4619      	mov	r1, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	01db      	lsls	r3, r3, #7
 8012df0:	440b      	add	r3, r1
 8012df2:	3384      	adds	r3, #132	; 0x84
 8012df4:	4619      	mov	r1, r3
 8012df6:	69fb      	ldr	r3, [r7, #28]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	461a      	mov	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	01db      	lsls	r3, r3, #7
 8012e06:	4413      	add	r3, r2
 8012e08:	3384      	adds	r3, #132	; 0x84
 8012e0a:	691b      	ldr	r3, [r3, #16]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	6812      	ldr	r2, [r2, #0]
 8012e10:	4611      	mov	r1, r2
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	01d2      	lsls	r2, r2, #7
 8012e16:	440a      	add	r2, r1
 8012e18:	3284      	adds	r2, #132	; 0x84
 8012e1a:	f023 0307 	bic.w	r3, r3, #7
 8012e1e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	461a      	mov	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	01db      	lsls	r3, r3, #7
 8012e2a:	4413      	add	r3, r2
 8012e2c:	3384      	adds	r3, #132	; 0x84
 8012e2e:	461a      	mov	r2, r3
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	691b      	ldr	r3, [r3, #16]
 8012e34:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012e3c:	021b      	lsls	r3, r3, #8
 8012e3e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012e46:	041b      	lsls	r3, r3, #16
 8012e48:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	699b      	ldr	r3, [r3, #24]
 8012e4e:	061b      	lsls	r3, r3, #24
 8012e50:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	461a      	mov	r2, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	01db      	lsls	r3, r3, #7
 8012e5c:	4413      	add	r3, r2
 8012e5e:	3384      	adds	r3, #132	; 0x84
 8012e60:	699b      	ldr	r3, [r3, #24]
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	461a      	mov	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	01db      	lsls	r3, r3, #7
 8012e6c:	4413      	add	r3, r2
 8012e6e:	3384      	adds	r3, #132	; 0x84
 8012e70:	461a      	mov	r2, r3
 8012e72:	2300      	movs	r3, #0
 8012e74:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	431a      	orrs	r2, r3
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	431a      	orrs	r2, r3
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	01db      	lsls	r3, r3, #7
 8012e90:	440b      	add	r3, r1
 8012e92:	3384      	adds	r3, #132	; 0x84
 8012e94:	4619      	mov	r1, r3
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	4313      	orrs	r3, r2
 8012e9a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	461a      	mov	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	01db      	lsls	r3, r3, #7
 8012ea6:	4413      	add	r3, r2
 8012ea8:	3384      	adds	r3, #132	; 0x84
 8012eaa:	695b      	ldr	r3, [r3, #20]
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	6812      	ldr	r2, [r2, #0]
 8012eb0:	4611      	mov	r1, r2
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	01d2      	lsls	r2, r2, #7
 8012eb6:	440a      	add	r2, r1
 8012eb8:	3284      	adds	r2, #132	; 0x84
 8012eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012ebe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	01db      	lsls	r3, r3, #7
 8012eca:	4413      	add	r3, r2
 8012ecc:	3384      	adds	r3, #132	; 0x84
 8012ece:	461a      	mov	r2, r3
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	695b      	ldr	r3, [r3, #20]
 8012ed4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	461a      	mov	r2, r3
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	01db      	lsls	r3, r3, #7
 8012ee0:	4413      	add	r3, r2
 8012ee2:	3384      	adds	r3, #132	; 0x84
 8012ee4:	69da      	ldr	r2, [r3, #28]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4619      	mov	r1, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	01db      	lsls	r3, r3, #7
 8012ef0:	440b      	add	r3, r1
 8012ef2:	3384      	adds	r3, #132	; 0x84
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	4b58      	ldr	r3, [pc, #352]	; (8013058 <LTDC_SetConfig+0x32c>)
 8012ef8:	4013      	ands	r3, r2
 8012efa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	69da      	ldr	r2, [r3, #28]
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	6a1b      	ldr	r3, [r3, #32]
 8012f04:	68f9      	ldr	r1, [r7, #12]
 8012f06:	6809      	ldr	r1, [r1, #0]
 8012f08:	4608      	mov	r0, r1
 8012f0a:	6879      	ldr	r1, [r7, #4]
 8012f0c:	01c9      	lsls	r1, r1, #7
 8012f0e:	4401      	add	r1, r0
 8012f10:	3184      	adds	r1, #132	; 0x84
 8012f12:	4313      	orrs	r3, r2
 8012f14:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	01db      	lsls	r3, r3, #7
 8012f20:	4413      	add	r3, r2
 8012f22:	3384      	adds	r3, #132	; 0x84
 8012f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	01db      	lsls	r3, r3, #7
 8012f30:	4413      	add	r3, r2
 8012f32:	3384      	adds	r3, #132	; 0x84
 8012f34:	461a      	mov	r2, r3
 8012f36:	2300      	movs	r3, #0
 8012f38:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	461a      	mov	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	01db      	lsls	r3, r3, #7
 8012f44:	4413      	add	r3, r2
 8012f46:	3384      	adds	r3, #132	; 0x84
 8012f48:	461a      	mov	r2, r3
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	691b      	ldr	r3, [r3, #16]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d102      	bne.n	8012f5e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8012f58:	2304      	movs	r3, #4
 8012f5a:	61fb      	str	r3, [r7, #28]
 8012f5c:	e01b      	b.n	8012f96 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d102      	bne.n	8012f6c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8012f66:	2303      	movs	r3, #3
 8012f68:	61fb      	str	r3, [r7, #28]
 8012f6a:	e014      	b.n	8012f96 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	691b      	ldr	r3, [r3, #16]
 8012f70:	2b04      	cmp	r3, #4
 8012f72:	d00b      	beq.n	8012f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d007      	beq.n	8012f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012f80:	2b03      	cmp	r3, #3
 8012f82:	d003      	beq.n	8012f8c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012f88:	2b07      	cmp	r3, #7
 8012f8a:	d102      	bne.n	8012f92 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8012f8c:	2302      	movs	r3, #2
 8012f8e:	61fb      	str	r3, [r7, #28]
 8012f90:	e001      	b.n	8012f96 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8012f92:	2301      	movs	r3, #1
 8012f94:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	01db      	lsls	r3, r3, #7
 8012fa0:	4413      	add	r3, r2
 8012fa2:	3384      	adds	r3, #132	; 0x84
 8012fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fa6:	68fa      	ldr	r2, [r7, #12]
 8012fa8:	6812      	ldr	r2, [r2, #0]
 8012faa:	4611      	mov	r1, r2
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	01d2      	lsls	r2, r2, #7
 8012fb0:	440a      	add	r2, r1
 8012fb2:	3284      	adds	r2, #132	; 0x84
 8012fb4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8012fb8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fbe:	69fa      	ldr	r2, [r7, #28]
 8012fc0:	fb02 f303 	mul.w	r3, r2, r3
 8012fc4:	041a      	lsls	r2, r3, #16
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	6859      	ldr	r1, [r3, #4]
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	1acb      	subs	r3, r1, r3
 8012fd0:	69f9      	ldr	r1, [r7, #28]
 8012fd2:	fb01 f303 	mul.w	r3, r1, r3
 8012fd6:	3307      	adds	r3, #7
 8012fd8:	68f9      	ldr	r1, [r7, #12]
 8012fda:	6809      	ldr	r1, [r1, #0]
 8012fdc:	4608      	mov	r0, r1
 8012fde:	6879      	ldr	r1, [r7, #4]
 8012fe0:	01c9      	lsls	r1, r1, #7
 8012fe2:	4401      	add	r1, r0
 8012fe4:	3184      	adds	r1, #132	; 0x84
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	01db      	lsls	r3, r3, #7
 8012ff4:	4413      	add	r3, r2
 8012ff6:	3384      	adds	r3, #132	; 0x84
 8012ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	4619      	mov	r1, r3
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	01db      	lsls	r3, r3, #7
 8013004:	440b      	add	r3, r1
 8013006:	3384      	adds	r3, #132	; 0x84
 8013008:	4619      	mov	r1, r3
 801300a:	4b14      	ldr	r3, [pc, #80]	; (801305c <LTDC_SetConfig+0x330>)
 801300c:	4013      	ands	r3, r2
 801300e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	461a      	mov	r2, r3
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	01db      	lsls	r3, r3, #7
 801301a:	4413      	add	r3, r2
 801301c:	3384      	adds	r3, #132	; 0x84
 801301e:	461a      	mov	r2, r3
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013024:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	461a      	mov	r2, r3
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	01db      	lsls	r3, r3, #7
 8013030:	4413      	add	r3, r2
 8013032:	3384      	adds	r3, #132	; 0x84
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	68fa      	ldr	r2, [r7, #12]
 8013038:	6812      	ldr	r2, [r2, #0]
 801303a:	4611      	mov	r1, r2
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	01d2      	lsls	r2, r2, #7
 8013040:	440a      	add	r2, r1
 8013042:	3284      	adds	r2, #132	; 0x84
 8013044:	f043 0301 	orr.w	r3, r3, #1
 8013048:	6013      	str	r3, [r2, #0]
}
 801304a:	bf00      	nop
 801304c:	3724      	adds	r7, #36	; 0x24
 801304e:	46bd      	mov	sp, r7
 8013050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013054:	4770      	bx	lr
 8013056:	bf00      	nop
 8013058:	fffff8f8 	.word	0xfffff8f8
 801305c:	fffff800 	.word	0xfffff800

08013060 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013068:	f7fd feea 	bl	8010e40 <HAL_GetTick>
 801306c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d101      	bne.n	8013078 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8013074:	2301      	movs	r3, #1
 8013076:	e03b      	b.n	80130f0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2202      	movs	r2, #2
 8013084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68da      	ldr	r2, [r3, #12]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f022 0201 	bic.w	r2, r2, #1
 8013096:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8013098:	e00f      	b.n	80130ba <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801309a:	f7fd fed1 	bl	8010e40 <HAL_GetTick>
 801309e:	4602      	mov	r2, r0
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	2b05      	cmp	r3, #5
 80130a6:	d908      	bls.n	80130ba <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2240      	movs	r2, #64	; 0x40
 80130ac:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2203      	movs	r2, #3
 80130b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80130b6:	2301      	movs	r3, #1
 80130b8:	e01a      	b.n	80130f0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	f003 0301 	and.w	r3, r3, #1
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d1e8      	bne.n	801309a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 f894 	bl	80131f6 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2200      	movs	r2, #0
 80130d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2200      	movs	r2, #0
 80130de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	2200      	movs	r2, #0
 80130e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2201      	movs	r2, #1
 80130ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130ee:	2300      	movs	r3, #0
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d101      	bne.n	801310a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8013106:	2301      	movs	r3, #1
 8013108:	e048      	b.n	801319c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	68da      	ldr	r2, [r3, #12]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	f022 0201 	bic.w	r2, r2, #1
 8013118:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2200      	movs	r2, #0
 8013120:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2200      	movs	r2, #0
 8013128:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	2200      	movs	r2, #0
 8013130:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2200      	movs	r2, #0
 8013138:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	2200      	movs	r2, #0
 8013140:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	2200      	movs	r2, #0
 8013148:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2200      	movs	r2, #0
 8013150:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2200      	movs	r2, #0
 8013158:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2200      	movs	r2, #0
 8013160:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2200      	movs	r2, #0
 8013168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	221f      	movs	r2, #31
 8013170:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2200      	movs	r2, #0
 8013176:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2200      	movs	r2, #0
 801317c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2200      	movs	r2, #0
 8013182:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2200      	movs	r2, #0
 8013188:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2200      	movs	r2, #0
 801318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr

080131a8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b083      	sub	sp, #12
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d101      	bne.n	80131ba <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80131b6:	2301      	movs	r3, #1
 80131b8:	e017      	b.n	80131ea <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131c0:	b2db      	uxtb	r3, r3
 80131c2:	2b02      	cmp	r3, #2
 80131c4:	d004      	beq.n	80131d0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2280      	movs	r2, #128	; 0x80
 80131ca:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80131cc:	2301      	movs	r3, #1
 80131ce:	e00c      	b.n	80131ea <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2204      	movs	r2, #4
 80131d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68da      	ldr	r2, [r3, #12]
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f022 0201 	bic.w	r2, r2, #1
 80131e6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr

080131f6 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80131f6:	b480      	push	{r7}
 80131f8:	b085      	sub	sp, #20
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	68d9      	ldr	r1, [r3, #12]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	691a      	ldr	r2, [r3, #16]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	430a      	orrs	r2, r1
 801320c:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	695a      	ldr	r2, [r3, #20]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	699b      	ldr	r3, [r3, #24]
 8013216:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801321c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6a1b      	ldr	r3, [r3, #32]
 8013222:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013228:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801322e:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013234:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801323a:	3b01      	subs	r3, #1
 801323c:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801323e:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801324a:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801324c:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013256:	d107      	bne.n	8013268 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	691a      	ldr	r2, [r3, #16]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8013266:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2200      	movs	r2, #0
 801326e:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013274:	2b00      	cmp	r3, #0
 8013276:	da11      	bge.n	801329c <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	695a      	ldr	r2, [r3, #20]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8013286:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801328c:	425b      	negs	r3, r3
 801328e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	68fa      	ldr	r2, [r7, #12]
 8013296:	b292      	uxth	r2, r2
 8013298:	621a      	str	r2, [r3, #32]
 801329a:	e006      	b.n	80132aa <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132a0:	461a      	mov	r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	b292      	uxth	r2, r2
 80132a8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	da15      	bge.n	80132de <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	695a      	ldr	r2, [r3, #20]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80132c0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	425b      	negs	r3, r3
 80132c8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	6a19      	ldr	r1, [r3, #32]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	041a      	lsls	r2, r3, #16
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	430a      	orrs	r2, r1
 80132da:	621a      	str	r2, [r3, #32]
 80132dc:	e009      	b.n	80132f2 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6a19      	ldr	r1, [r3, #32]
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e8:	041a      	lsls	r2, r3, #16
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	430a      	orrs	r2, r1
 80132f0:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132fa:	d006      	beq.n	801330a <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	685a      	ldr	r2, [r3, #4]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	b2d2      	uxtb	r2, r2
 8013306:	629a      	str	r2, [r3, #40]	; 0x28
 8013308:	e003      	b.n	8013312 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2200      	movs	r2, #0
 8013310:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	2200      	movs	r2, #0
 8013318:	625a      	str	r2, [r3, #36]	; 0x24
}
 801331a:	bf00      	nop
 801331c:	3714      	adds	r7, #20
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr
	...

08013328 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b084      	sub	sp, #16
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8013330:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	f003 0307 	and.w	r3, r3, #7
 8013338:	2b06      	cmp	r3, #6
 801333a:	d00a      	beq.n	8013352 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801333c:	4b26      	ldr	r3, [pc, #152]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	429a      	cmp	r2, r3
 8013348:	d001      	beq.n	801334e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801334a:	2301      	movs	r3, #1
 801334c:	e040      	b.n	80133d0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801334e:	2300      	movs	r3, #0
 8013350:	e03e      	b.n	80133d0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013352:	4b21      	ldr	r3, [pc, #132]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 801335a:	491f      	ldr	r1, [pc, #124]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4313      	orrs	r3, r2
 8013360:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013362:	f7fd fd6d 	bl	8010e40 <HAL_GetTick>
 8013366:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013368:	e009      	b.n	801337e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801336a:	f7fd fd69 	bl	8010e40 <HAL_GetTick>
 801336e:	4602      	mov	r2, r0
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013378:	d901      	bls.n	801337e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801337a:	2301      	movs	r3, #1
 801337c:	e028      	b.n	80133d0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801337e:	4b16      	ldr	r3, [pc, #88]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 8013380:	685b      	ldr	r3, [r3, #4]
 8013382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801338a:	d1ee      	bne.n	801336a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b1e      	cmp	r3, #30
 8013390:	d008      	beq.n	80133a4 <HAL_PWREx_ConfigSupply+0x7c>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2b2e      	cmp	r3, #46	; 0x2e
 8013396:	d005      	beq.n	80133a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b1d      	cmp	r3, #29
 801339c:	d002      	beq.n	80133a4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2b2d      	cmp	r3, #45	; 0x2d
 80133a2:	d114      	bne.n	80133ce <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80133a4:	f7fd fd4c 	bl	8010e40 <HAL_GetTick>
 80133a8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80133aa:	e009      	b.n	80133c0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80133ac:	f7fd fd48 	bl	8010e40 <HAL_GetTick>
 80133b0:	4602      	mov	r2, r0
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	1ad3      	subs	r3, r2, r3
 80133b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80133ba:	d901      	bls.n	80133c0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80133bc:	2301      	movs	r3, #1
 80133be:	e007      	b.n	80133d0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80133c0:	4b05      	ldr	r3, [pc, #20]	; (80133d8 <HAL_PWREx_ConfigSupply+0xb0>)
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80133c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133cc:	d1ee      	bne.n	80133ac <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80133ce:	2300      	movs	r3, #0
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	3710      	adds	r7, #16
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	58024800 	.word	0x58024800

080133dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af02      	add	r7, sp, #8
 80133e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80133e4:	f7fd fd2c 	bl	8010e40 <HAL_GetTick>
 80133e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d101      	bne.n	80133f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	e05f      	b.n	80134b4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d107      	bne.n	8013410 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ed fe73 	bl	80010ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8013406:	f241 3188 	movw	r1, #5000	; 0x1388
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 fcca 	bl	8013da4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	3b01      	subs	r3, #1
 8013420:	021a      	lsls	r2, r3, #8
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	430a      	orrs	r2, r1
 8013428:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	2200      	movs	r2, #0
 8013434:	2120      	movs	r1, #32
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fcf5 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 801343c:	4603      	mov	r3, r0
 801343e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8013440:	7afb      	ldrb	r3, [r7, #11]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d135      	bne.n	80134b2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	681a      	ldr	r2, [r3, #0]
 801344c:	4b1b      	ldr	r3, [pc, #108]	; (80134bc <HAL_QSPI_Init+0xe0>)
 801344e:	4013      	ands	r3, r2
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	6852      	ldr	r2, [r2, #4]
 8013454:	0611      	lsls	r1, r2, #24
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	68d2      	ldr	r2, [r2, #12]
 801345a:	4311      	orrs	r1, r2
 801345c:	687a      	ldr	r2, [r7, #4]
 801345e:	69d2      	ldr	r2, [r2, #28]
 8013460:	4311      	orrs	r1, r2
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	6a12      	ldr	r2, [r2, #32]
 8013466:	4311      	orrs	r1, r2
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	6812      	ldr	r2, [r2, #0]
 801346c:	430b      	orrs	r3, r1
 801346e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	685a      	ldr	r2, [r3, #4]
 8013476:	4b12      	ldr	r3, [pc, #72]	; (80134c0 <HAL_QSPI_Init+0xe4>)
 8013478:	4013      	ands	r3, r2
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	6912      	ldr	r2, [r2, #16]
 801347e:	0411      	lsls	r1, r2, #16
 8013480:	687a      	ldr	r2, [r7, #4]
 8013482:	6952      	ldr	r2, [r2, #20]
 8013484:	4311      	orrs	r1, r2
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	6992      	ldr	r2, [r2, #24]
 801348a:	4311      	orrs	r1, r2
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	6812      	ldr	r2, [r2, #0]
 8013490:	430b      	orrs	r3, r1
 8013492:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0201 	orr.w	r2, r2, #1
 80134a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2200      	movs	r2, #0
 80134a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2201      	movs	r2, #1
 80134ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80134b2:	7afb      	ldrb	r3, [r7, #11]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3710      	adds	r7, #16
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	00ffff2f 	.word	0x00ffff2f
 80134c0:	ffe0f8fe 	.word	0xffe0f8fe

080134c4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80134dc:	697b      	ldr	r3, [r7, #20]
 80134de:	f003 0304 	and.w	r3, r3, #4
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d064      	beq.n	80135b0 <HAL_QSPI_IRQHandler+0xec>
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d05f      	beq.n	80135b0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	3320      	adds	r3, #32
 80134f6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	2b12      	cmp	r3, #18
 8013502:	d125      	bne.n	8013550 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013504:	e01c      	b.n	8013540 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00f      	beq.n	801352e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013512:	781a      	ldrb	r2, [r3, #0]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801351c:	1c5a      	adds	r2, r3, #1
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013526:	1e5a      	subs	r2, r3, #1
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	62da      	str	r2, [r3, #44]	; 0x2c
 801352c:	e008      	b.n	8013540 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801353c:	601a      	str	r2, [r3, #0]
          break;
 801353e:	e033      	b.n	80135a8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f003 0304 	and.w	r3, r3, #4
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1db      	bne.n	8013506 <HAL_QSPI_IRQHandler+0x42>
 801354e:	e02b      	b.n	80135a8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013556:	b2db      	uxtb	r3, r3
 8013558:	2b22      	cmp	r3, #34	; 0x22
 801355a:	d125      	bne.n	80135a8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801355c:	e01d      	b.n	801359a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013562:	2b00      	cmp	r3, #0
 8013564:	d010      	beq.n	8013588 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801356a:	68fa      	ldr	r2, [r7, #12]
 801356c:	7812      	ldrb	r2, [r2, #0]
 801356e:	b2d2      	uxtb	r2, r2
 8013570:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013576:	1c5a      	adds	r2, r3, #1
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013580:	1e5a      	subs	r2, r3, #1
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	639a      	str	r2, [r3, #56]	; 0x38
 8013586:	e008      	b.n	801359a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013596:	601a      	str	r2, [r3, #0]
          break;
 8013598:	e006      	b.n	80135a8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	f003 0304 	and.w	r3, r3, #4
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d1da      	bne.n	801355e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f000 fbdd 	bl	8013d68 <HAL_QSPI_FifoThresholdCallback>
 80135ae:	e13c      	b.n	801382a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	f003 0302 	and.w	r3, r3, #2
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f000 80b0 	beq.w	801371c <HAL_QSPI_IRQHandler+0x258>
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 80aa 	beq.w	801371c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2202      	movs	r2, #2
 80135ce:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80135de:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	2b12      	cmp	r3, #18
 80135ea:	d120      	bne.n	801362e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f003 0304 	and.w	r3, r3, #4
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d011      	beq.n	801361e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	f022 0204 	bic.w	r2, r2, #4
 8013608:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	68da      	ldr	r2, [r3, #12]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f022 0201 	bic.w	r2, r2, #1
 801361c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2201      	movs	r2, #1
 8013622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 fb94 	bl	8013d54 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801362c:	e0fa      	b.n	8013824 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013634:	b2db      	uxtb	r3, r3
 8013636:	2b22      	cmp	r3, #34	; 0x22
 8013638:	d143      	bne.n	80136c2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f003 0304 	and.w	r3, r3, #4
 8013644:	2b00      	cmp	r3, #0
 8013646:	d012      	beq.n	801366e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	f022 0204 	bic.w	r2, r2, #4
 8013656:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	68da      	ldr	r2, [r3, #12]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f022 0201 	bic.w	r2, r2, #1
 801366a:	60da      	str	r2, [r3, #12]
 801366c:	e021      	b.n	80136b2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	3320      	adds	r3, #32
 8013674:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8013676:	e013      	b.n	80136a0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801367c:	2b00      	cmp	r3, #0
 801367e:	d017      	beq.n	80136b0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013684:	68fa      	ldr	r2, [r7, #12]
 8013686:	7812      	ldrb	r2, [r2, #0]
 8013688:	b2d2      	uxtb	r2, r2
 801368a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369a:	1e5a      	subs	r2, r3, #1
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	689b      	ldr	r3, [r3, #8]
 80136a6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d1e4      	bne.n	8013678 <HAL_QSPI_IRQHandler+0x1b4>
 80136ae:	e000      	b.n	80136b2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80136b0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2201      	movs	r2, #1
 80136b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f000 fb40 	bl	8013d40 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80136c0:	e0b0      	b.n	8013824 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80136c8:	b2db      	uxtb	r3, r3
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d107      	bne.n	80136de <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2201      	movs	r2, #1
 80136d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f000 fb28 	bl	8013d2c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80136dc:	e0a2      	b.n	8013824 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	2b08      	cmp	r3, #8
 80136e8:	f040 809c 	bne.w	8013824 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	695a      	ldr	r2, [r3, #20]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80136fa:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2201      	movs	r2, #1
 8013700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013708:	2b00      	cmp	r3, #0
 801370a:	d103      	bne.n	8013714 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f000 fb03 	bl	8013d18 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013712:	e087      	b.n	8013824 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f000 faf5 	bl	8013d04 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801371a:	e083      	b.n	8013824 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	f003 0308 	and.w	r3, r3, #8
 8013722:	2b00      	cmp	r3, #0
 8013724:	d01f      	beq.n	8013766 <HAL_QSPI_IRQHandler+0x2a2>
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801372c:	2b00      	cmp	r3, #0
 801372e:	d01a      	beq.n	8013766 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2208      	movs	r2, #8
 8013736:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00b      	beq.n	801375e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8013754:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2201      	movs	r2, #1
 801375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 fb0c 	bl	8013d7c <HAL_QSPI_StatusMatchCallback>
 8013764:	e061      	b.n	801382a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f003 0301 	and.w	r3, r3, #1
 801376c:	2b00      	cmp	r3, #0
 801376e:	d047      	beq.n	8013800 <HAL_QSPI_IRQHandler+0x33c>
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013776:	2b00      	cmp	r3, #0
 8013778:	d042      	beq.n	8013800 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2201      	movs	r2, #1
 8013780:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8013790:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013796:	f043 0202 	orr.w	r2, r3, #2
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f003 0304 	and.w	r3, r3, #4
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d021      	beq.n	80137f0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f022 0204 	bic.w	r2, r2, #4
 80137ba:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137c0:	4a1c      	ldr	r2, [pc, #112]	; (8013834 <HAL_QSPI_IRQHandler+0x370>)
 80137c2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7ff fced 	bl	80131a8 <HAL_MDMA_Abort_IT>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d029      	beq.n	8013828 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137d8:	f043 0204 	orr.w	r2, r3, #4
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2201      	movs	r2, #1
 80137e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f000 fa8b 	bl	8013d04 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80137ee:	e01b      	b.n	8013828 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2201      	movs	r2, #1
 80137f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f000 fa83 	bl	8013d04 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80137fe:	e013      	b.n	8013828 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	f003 0310 	and.w	r3, r3, #16
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00f      	beq.n	801382a <HAL_QSPI_IRQHandler+0x366>
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00a      	beq.n	801382a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2210      	movs	r2, #16
 801381a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 fab7 	bl	8013d90 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8013822:	e002      	b.n	801382a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013824:	bf00      	nop
 8013826:	e000      	b.n	801382a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013828:	bf00      	nop
}
 801382a:	bf00      	nop
 801382c:	3718      	adds	r7, #24
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	08013dc1 	.word	0x08013dc1

08013838 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b088      	sub	sp, #32
 801383c:	af02      	add	r7, sp, #8
 801383e:	60f8      	str	r0, [r7, #12]
 8013840:	60b9      	str	r1, [r7, #8]
 8013842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013844:	f7fd fafc 	bl	8010e40 <HAL_GetTick>
 8013848:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013850:	b2db      	uxtb	r3, r3
 8013852:	2b01      	cmp	r3, #1
 8013854:	d101      	bne.n	801385a <HAL_QSPI_Command+0x22>
 8013856:	2302      	movs	r3, #2
 8013858:	e048      	b.n	80138ec <HAL_QSPI_Command+0xb4>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2201      	movs	r2, #1
 801385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013868:	b2db      	uxtb	r3, r3
 801386a:	2b01      	cmp	r3, #1
 801386c:	d137      	bne.n	80138de <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2202      	movs	r2, #2
 8013878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	2200      	movs	r2, #0
 8013884:	2120      	movs	r1, #32
 8013886:	68f8      	ldr	r0, [r7, #12]
 8013888:	f000 facd 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 801388c:	4603      	mov	r3, r0
 801388e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013890:	7dfb      	ldrb	r3, [r7, #23]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d125      	bne.n	80138e2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013896:	2200      	movs	r2, #0
 8013898:	68b9      	ldr	r1, [r7, #8]
 801389a:	68f8      	ldr	r0, [r7, #12]
 801389c:	f000 fafa 	bl	8013e94 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d115      	bne.n	80138d4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	9300      	str	r3, [sp, #0]
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	2201      	movs	r2, #1
 80138b0:	2102      	movs	r1, #2
 80138b2:	68f8      	ldr	r0, [r7, #12]
 80138b4:	f000 fab7 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 80138b8:	4603      	mov	r3, r0
 80138ba:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10f      	bne.n	80138e2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2202      	movs	r2, #2
 80138c8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2201      	movs	r2, #1
 80138ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80138d2:	e006      	b.n	80138e2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2201      	movs	r2, #1
 80138d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80138dc:	e001      	b.n	80138e2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80138de:	2302      	movs	r3, #2
 80138e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2200      	movs	r2, #0
 80138e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80138ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3718      	adds	r7, #24
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b08a      	sub	sp, #40	; 0x28
 80138f8:	af02      	add	r7, sp, #8
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013900:	2300      	movs	r3, #0
 8013902:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013904:	f7fd fa9c 	bl	8010e40 <HAL_GetTick>
 8013908:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	3320      	adds	r3, #32
 8013910:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013918:	b2db      	uxtb	r3, r3
 801391a:	2b01      	cmp	r3, #1
 801391c:	d101      	bne.n	8013922 <HAL_QSPI_Transmit+0x2e>
 801391e:	2302      	movs	r3, #2
 8013920:	e076      	b.n	8013a10 <HAL_QSPI_Transmit+0x11c>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2201      	movs	r2, #1
 8013926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013930:	b2db      	uxtb	r3, r3
 8013932:	2b01      	cmp	r3, #1
 8013934:	d165      	bne.n	8013a02 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2200      	movs	r2, #0
 801393a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d056      	beq.n	80139f0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	2212      	movs	r2, #18
 8013946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	691b      	ldr	r3, [r3, #16]
 8013950:	1c5a      	adds	r2, r3, #1
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	691b      	ldr	r3, [r3, #16]
 801395c:	1c5a      	adds	r2, r3, #1
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	68ba      	ldr	r2, [r7, #8]
 8013966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	695a      	ldr	r2, [r3, #20]
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8013976:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8013978:	e01b      	b.n	80139b2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	9300      	str	r3, [sp, #0]
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	2201      	movs	r2, #1
 8013982:	2104      	movs	r1, #4
 8013984:	68f8      	ldr	r0, [r7, #12]
 8013986:	f000 fa4e 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 801398a:	4603      	mov	r3, r0
 801398c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801398e:	7ffb      	ldrb	r3, [r7, #31]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d113      	bne.n	80139bc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013998:	781a      	ldrb	r2, [r3, #0]
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a2:	1c5a      	adds	r2, r3, #1
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ac:	1e5a      	subs	r2, r3, #1
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d1df      	bne.n	801397a <HAL_QSPI_Transmit+0x86>
 80139ba:	e000      	b.n	80139be <HAL_QSPI_Transmit+0xca>
          break;
 80139bc:	bf00      	nop
      }

      if (status == HAL_OK)
 80139be:	7ffb      	ldrb	r3, [r7, #31]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d110      	bne.n	80139e6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	2201      	movs	r2, #1
 80139cc:	2102      	movs	r1, #2
 80139ce:	68f8      	ldr	r0, [r7, #12]
 80139d0:	f000 fa29 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 80139d4:	4603      	mov	r3, r0
 80139d6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80139d8:	7ffb      	ldrb	r3, [r7, #31]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d103      	bne.n	80139e6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	2202      	movs	r2, #2
 80139e4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2201      	movs	r2, #1
 80139ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80139ee:	e00a      	b.n	8013a06 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139f4:	f043 0208 	orr.w	r2, r3, #8
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80139fc:	2301      	movs	r3, #1
 80139fe:	77fb      	strb	r3, [r7, #31]
 8013a00:	e001      	b.n	8013a06 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013a02:	2302      	movs	r3, #2
 8013a04:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3720      	adds	r7, #32
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b08a      	sub	sp, #40	; 0x28
 8013a1c:	af02      	add	r7, sp, #8
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013a28:	f7fd fa0a 	bl	8010e40 <HAL_GetTick>
 8013a2c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	699b      	ldr	r3, [r3, #24]
 8013a34:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	3320      	adds	r3, #32
 8013a3c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a44:	b2db      	uxtb	r3, r3
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	d101      	bne.n	8013a4e <HAL_QSPI_Receive+0x36>
 8013a4a:	2302      	movs	r3, #2
 8013a4c:	e07d      	b.n	8013b4a <HAL_QSPI_Receive+0x132>
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2201      	movs	r2, #1
 8013a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013a5c:	b2db      	uxtb	r3, r3
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d16c      	bne.n	8013b3c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2200      	movs	r2, #0
 8013a66:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d05d      	beq.n	8013b2a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2222      	movs	r2, #34	; 0x22
 8013a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	691b      	ldr	r3, [r3, #16]
 8013a7c:	1c5a      	adds	r2, r3, #1
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	691b      	ldr	r3, [r3, #16]
 8013a88:	1c5a      	adds	r2, r3, #1
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	695b      	ldr	r3, [r3, #20]
 8013a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013aa6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	697a      	ldr	r2, [r7, #20]
 8013aae:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8013ab0:	e01c      	b.n	8013aec <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	2201      	movs	r2, #1
 8013aba:	2106      	movs	r1, #6
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f000 f9b2 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013ac6:	7ffb      	ldrb	r3, [r7, #31]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d114      	bne.n	8013af6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad0:	693a      	ldr	r2, [r7, #16]
 8013ad2:	7812      	ldrb	r2, [r2, #0]
 8013ad4:	b2d2      	uxtb	r2, r2
 8013ad6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013adc:	1c5a      	adds	r2, r3, #1
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ae6:	1e5a      	subs	r2, r3, #1
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d1de      	bne.n	8013ab2 <HAL_QSPI_Receive+0x9a>
 8013af4:	e000      	b.n	8013af8 <HAL_QSPI_Receive+0xe0>
          break;
 8013af6:	bf00      	nop
      }

      if (status == HAL_OK)
 8013af8:	7ffb      	ldrb	r3, [r7, #31]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d110      	bne.n	8013b20 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	69bb      	ldr	r3, [r7, #24]
 8013b04:	2201      	movs	r2, #1
 8013b06:	2102      	movs	r1, #2
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f000 f98c 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013b12:	7ffb      	ldrb	r3, [r7, #31]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d103      	bne.n	8013b20 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2202      	movs	r2, #2
 8013b1e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2201      	movs	r2, #1
 8013b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013b28:	e00a      	b.n	8013b40 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b2e:	f043 0208 	orr.w	r2, r3, #8
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013b36:	2301      	movs	r3, #1
 8013b38:	77fb      	strb	r3, [r7, #31]
 8013b3a:	e001      	b.n	8013b40 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013b3c:	2302      	movs	r3, #2
 8013b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3720      	adds	r7, #32
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b088      	sub	sp, #32
 8013b56:	af02      	add	r7, sp, #8
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
 8013b5e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013b60:	f7fd f96e 	bl	8010e40 <HAL_GetTick>
 8013b64:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d101      	bne.n	8013b76 <HAL_QSPI_AutoPolling+0x24>
 8013b72:	2302      	movs	r3, #2
 8013b74:	e060      	b.n	8013c38 <HAL_QSPI_AutoPolling+0xe6>
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2201      	movs	r2, #1
 8013b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013b84:	b2db      	uxtb	r3, r3
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d14f      	bne.n	8013c2a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2242      	movs	r2, #66	; 0x42
 8013b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	9300      	str	r3, [sp, #0]
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	2120      	movs	r1, #32
 8013ba2:	68f8      	ldr	r0, [r7, #12]
 8013ba4:	f000 f93f 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d13d      	bne.n	8013c2e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	6812      	ldr	r2, [r2, #0]
 8013bba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	6852      	ldr	r2, [r2, #4]
 8013bc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	6892      	ldr	r2, [r2, #8]
 8013bce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	691b      	ldr	r3, [r3, #16]
 8013bde:	431a      	orrs	r2, r3
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8013be8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	68da      	ldr	r2, [r3, #12]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013bf6:	68b9      	ldr	r1, [r7, #8]
 8013bf8:	68f8      	ldr	r0, [r7, #12]
 8013bfa:	f000 f94b 	bl	8013e94 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	9300      	str	r3, [sp, #0]
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	2201      	movs	r2, #1
 8013c06:	2108      	movs	r1, #8
 8013c08:	68f8      	ldr	r0, [r7, #12]
 8013c0a:	f000 f90c 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013c12:	7dfb      	ldrb	r3, [r7, #23]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d10a      	bne.n	8013c2e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2208      	movs	r2, #8
 8013c1e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2201      	movs	r2, #1
 8013c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013c28:	e001      	b.n	8013c2e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013c2a:	2302      	movs	r3, #2
 8013c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3718      	adds	r7, #24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b088      	sub	sp, #32
 8013c44:	af02      	add	r7, sp, #8
 8013c46:	60f8      	str	r0, [r7, #12]
 8013c48:	60b9      	str	r1, [r7, #8]
 8013c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013c4c:	f7fd f8f8 	bl	8010e40 <HAL_GetTick>
 8013c50:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	2b01      	cmp	r3, #1
 8013c5c:	d101      	bne.n	8013c62 <HAL_QSPI_MemoryMapped+0x22>
 8013c5e:	2302      	movs	r3, #2
 8013c60:	e04c      	b.n	8013cfc <HAL_QSPI_MemoryMapped+0xbc>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2201      	movs	r2, #1
 8013c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013c70:	b2db      	uxtb	r3, r3
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d13b      	bne.n	8013cee <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2282      	movs	r2, #130	; 0x82
 8013c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	2120      	movs	r1, #32
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	f000 f8c8 	bl	8013e26 <QSPI_WaitFlagStateUntilTimeout>
 8013c96:	4603      	mov	r3, r0
 8013c98:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013c9a:	7dfb      	ldrb	r3, [r7, #23]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d128      	bne.n	8013cf2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	f023 0108 	bic.w	r1, r3, #8
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	685a      	ldr	r2, [r3, #4]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	430a      	orrs	r2, r1
 8013cb4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	2b08      	cmp	r3, #8
 8013cbc:	d110      	bne.n	8013ce0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	687a      	ldr	r2, [r7, #4]
 8013cc4:	6812      	ldr	r2, [r2, #0]
 8013cc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2210      	movs	r2, #16
 8013cce:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013cde:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013ce0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8013ce4:	68b9      	ldr	r1, [r7, #8]
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	f000 f8d4 	bl	8013e94 <QSPI_Config>
 8013cec:	e001      	b.n	8013cf2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013cee:	2302      	movs	r3, #2
 8013cf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013d0c:	bf00      	nop
 8013d0e:	370c      	adds	r7, #12
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr

08013d18 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013d20:	bf00      	nop
 8013d22:	370c      	adds	r7, #12
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr

08013d2c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013d34:	bf00      	nop
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013d48:	bf00      	nop
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d54:	b480      	push	{r7}
 8013d56:	b083      	sub	sp, #12
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8013d5c:	bf00      	nop
 8013d5e:	370c      	adds	r7, #12
 8013d60:	46bd      	mov	sp, r7
 8013d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d66:	4770      	bx	lr

08013d68 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013d70:	bf00      	nop
 8013d72:	370c      	adds	r7, #12
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr

08013d7c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8013d84:	bf00      	nop
 8013d86:	370c      	adds	r7, #12
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013d98:	bf00      	nop
 8013d9a:	370c      	adds	r7, #12
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	683a      	ldr	r2, [r7, #0]
 8013db2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8013db4:	bf00      	nop
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dcc:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b08      	cmp	r3, #8
 8013de4:	d114      	bne.n	8013e10 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	2202      	movs	r2, #2
 8013dec:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013dfc:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f042 0202 	orr.w	r2, r2, #2
 8013e0c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8013e0e:	e006      	b.n	8013e1e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2201      	movs	r2, #1
 8013e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8013e18:	68f8      	ldr	r0, [r7, #12]
 8013e1a:	f7ff ff73 	bl	8013d04 <HAL_QSPI_ErrorCallback>
}
 8013e1e:	bf00      	nop
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}

08013e26 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013e26:	b580      	push	{r7, lr}
 8013e28:	b084      	sub	sp, #16
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	60f8      	str	r0, [r7, #12]
 8013e2e:	60b9      	str	r1, [r7, #8]
 8013e30:	603b      	str	r3, [r7, #0]
 8013e32:	4613      	mov	r3, r2
 8013e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013e36:	e01a      	b.n	8013e6e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e3e:	d016      	beq.n	8013e6e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e40:	f7fc fffe 	bl	8010e40 <HAL_GetTick>
 8013e44:	4602      	mov	r2, r0
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	1ad3      	subs	r3, r2, r3
 8013e4a:	69ba      	ldr	r2, [r7, #24]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d302      	bcc.n	8013e56 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8013e50:	69bb      	ldr	r3, [r7, #24]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10b      	bne.n	8013e6e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2204      	movs	r2, #4
 8013e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e62:	f043 0201 	orr.w	r2, r3, #1
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e00e      	b.n	8013e8c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	689a      	ldr	r2, [r3, #8]
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	4013      	ands	r3, r2
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	bf14      	ite	ne
 8013e7c:	2301      	movne	r3, #1
 8013e7e:	2300      	moveq	r3, #0
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	461a      	mov	r2, r3
 8013e84:	79fb      	ldrb	r3, [r7, #7]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d1d6      	bne.n	8013e38 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013e8a:	2300      	movs	r3, #0
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3710      	adds	r7, #16
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d009      	beq.n	8013ebc <QSPI_Config+0x28>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013eae:	d005      	beq.n	8013ebc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	3a01      	subs	r2, #1
 8013eba:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	699b      	ldr	r3, [r3, #24]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 80b9 	beq.w	8014038 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	6a1b      	ldr	r3, [r3, #32]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d05f      	beq.n	8013f8e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	68ba      	ldr	r2, [r7, #8]
 8013ed4:	6892      	ldr	r2, [r2, #8]
 8013ed6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	69db      	ldr	r3, [r3, #28]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d031      	beq.n	8013f44 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee8:	431a      	orrs	r2, r3
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eee:	431a      	orrs	r2, r3
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef4:	431a      	orrs	r2, r3
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	695b      	ldr	r3, [r3, #20]
 8013efa:	049b      	lsls	r3, r3, #18
 8013efc:	431a      	orrs	r2, r3
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	431a      	orrs	r2, r3
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	6a1b      	ldr	r3, [r3, #32]
 8013f08:	431a      	orrs	r2, r3
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	431a      	orrs	r2, r3
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	69db      	ldr	r3, [r3, #28]
 8013f14:	431a      	orrs	r2, r3
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	699b      	ldr	r3, [r3, #24]
 8013f1a:	431a      	orrs	r2, r3
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	ea42 0103 	orr.w	r1, r2, r3
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	430a      	orrs	r2, r1
 8013f2c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013f34:	f000 812e 	beq.w	8014194 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	6852      	ldr	r2, [r2, #4]
 8013f40:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8013f42:	e127      	b.n	8014194 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f4c:	431a      	orrs	r2, r3
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f52:	431a      	orrs	r2, r3
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f58:	431a      	orrs	r2, r3
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	695b      	ldr	r3, [r3, #20]
 8013f5e:	049b      	lsls	r3, r3, #18
 8013f60:	431a      	orrs	r2, r3
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	691b      	ldr	r3, [r3, #16]
 8013f66:	431a      	orrs	r2, r3
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	6a1b      	ldr	r3, [r3, #32]
 8013f6c:	431a      	orrs	r2, r3
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	69db      	ldr	r3, [r3, #28]
 8013f72:	431a      	orrs	r2, r3
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	699b      	ldr	r3, [r3, #24]
 8013f78:	431a      	orrs	r2, r3
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	ea42 0103 	orr.w	r1, r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	430a      	orrs	r2, r1
 8013f8a:	615a      	str	r2, [r3, #20]
}
 8013f8c:	e102      	b.n	8014194 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	69db      	ldr	r3, [r3, #28]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d02e      	beq.n	8013ff4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f9e:	431a      	orrs	r2, r3
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa4:	431a      	orrs	r2, r3
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013faa:	431a      	orrs	r2, r3
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	695b      	ldr	r3, [r3, #20]
 8013fb0:	049b      	lsls	r3, r3, #18
 8013fb2:	431a      	orrs	r2, r3
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	6a1b      	ldr	r3, [r3, #32]
 8013fb8:	431a      	orrs	r2, r3
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	431a      	orrs	r2, r3
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	69db      	ldr	r3, [r3, #28]
 8013fc4:	431a      	orrs	r2, r3
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	699b      	ldr	r3, [r3, #24]
 8013fca:	431a      	orrs	r2, r3
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	ea42 0103 	orr.w	r1, r2, r3
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	687a      	ldr	r2, [r7, #4]
 8013fda:	430a      	orrs	r2, r1
 8013fdc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013fe4:	f000 80d6 	beq.w	8014194 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	6852      	ldr	r2, [r2, #4]
 8013ff0:	619a      	str	r2, [r3, #24]
}
 8013ff2:	e0cf      	b.n	8014194 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ffc:	431a      	orrs	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014002:	431a      	orrs	r2, r3
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014008:	431a      	orrs	r2, r3
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	695b      	ldr	r3, [r3, #20]
 801400e:	049b      	lsls	r3, r3, #18
 8014010:	431a      	orrs	r2, r3
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	6a1b      	ldr	r3, [r3, #32]
 8014016:	431a      	orrs	r2, r3
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	69db      	ldr	r3, [r3, #28]
 801401c:	431a      	orrs	r2, r3
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	699b      	ldr	r3, [r3, #24]
 8014022:	431a      	orrs	r2, r3
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	ea42 0103 	orr.w	r1, r2, r3
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	687a      	ldr	r2, [r7, #4]
 8014032:	430a      	orrs	r2, r1
 8014034:	615a      	str	r2, [r3, #20]
}
 8014036:	e0ad      	b.n	8014194 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	6a1b      	ldr	r3, [r3, #32]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d058      	beq.n	80140f2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	68ba      	ldr	r2, [r7, #8]
 8014046:	6892      	ldr	r2, [r2, #8]
 8014048:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d02d      	beq.n	80140ae <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801405a:	431a      	orrs	r2, r3
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014060:	431a      	orrs	r2, r3
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014066:	431a      	orrs	r2, r3
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	049b      	lsls	r3, r3, #18
 801406e:	431a      	orrs	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	691b      	ldr	r3, [r3, #16]
 8014074:	431a      	orrs	r2, r3
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	6a1b      	ldr	r3, [r3, #32]
 801407a:	431a      	orrs	r2, r3
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	68db      	ldr	r3, [r3, #12]
 8014080:	431a      	orrs	r2, r3
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	69db      	ldr	r3, [r3, #28]
 8014086:	431a      	orrs	r2, r3
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	699b      	ldr	r3, [r3, #24]
 801408c:	ea42 0103 	orr.w	r1, r2, r3
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	430a      	orrs	r2, r1
 8014098:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80140a0:	d078      	beq.n	8014194 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	68ba      	ldr	r2, [r7, #8]
 80140a8:	6852      	ldr	r2, [r2, #4]
 80140aa:	619a      	str	r2, [r3, #24]
}
 80140ac:	e072      	b.n	8014194 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140b6:	431a      	orrs	r2, r3
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140bc:	431a      	orrs	r2, r3
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c2:	431a      	orrs	r2, r3
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	695b      	ldr	r3, [r3, #20]
 80140c8:	049b      	lsls	r3, r3, #18
 80140ca:	431a      	orrs	r2, r3
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	691b      	ldr	r3, [r3, #16]
 80140d0:	431a      	orrs	r2, r3
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	6a1b      	ldr	r3, [r3, #32]
 80140d6:	431a      	orrs	r2, r3
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	69db      	ldr	r3, [r3, #28]
 80140dc:	431a      	orrs	r2, r3
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	699b      	ldr	r3, [r3, #24]
 80140e2:	ea42 0103 	orr.w	r1, r2, r3
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	430a      	orrs	r2, r1
 80140ee:	615a      	str	r2, [r3, #20]
}
 80140f0:	e050      	b.n	8014194 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	69db      	ldr	r3, [r3, #28]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d02a      	beq.n	8014150 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014102:	431a      	orrs	r2, r3
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014108:	431a      	orrs	r2, r3
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410e:	431a      	orrs	r2, r3
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	695b      	ldr	r3, [r3, #20]
 8014114:	049b      	lsls	r3, r3, #18
 8014116:	431a      	orrs	r2, r3
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	6a1b      	ldr	r3, [r3, #32]
 801411c:	431a      	orrs	r2, r3
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	68db      	ldr	r3, [r3, #12]
 8014122:	431a      	orrs	r2, r3
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	69db      	ldr	r3, [r3, #28]
 8014128:	431a      	orrs	r2, r3
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	699b      	ldr	r3, [r3, #24]
 801412e:	ea42 0103 	orr.w	r1, r2, r3
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	430a      	orrs	r2, r1
 801413a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8014142:	d027      	beq.n	8014194 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	6852      	ldr	r2, [r2, #4]
 801414c:	619a      	str	r2, [r3, #24]
}
 801414e:	e021      	b.n	8014194 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014154:	2b00      	cmp	r3, #0
 8014156:	d01d      	beq.n	8014194 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014160:	431a      	orrs	r2, r3
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014166:	431a      	orrs	r2, r3
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801416c:	431a      	orrs	r2, r3
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	695b      	ldr	r3, [r3, #20]
 8014172:	049b      	lsls	r3, r3, #18
 8014174:	431a      	orrs	r2, r3
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	6a1b      	ldr	r3, [r3, #32]
 801417a:	431a      	orrs	r2, r3
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	69db      	ldr	r3, [r3, #28]
 8014180:	431a      	orrs	r2, r3
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	699b      	ldr	r3, [r3, #24]
 8014186:	ea42 0103 	orr.w	r1, r2, r3
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	430a      	orrs	r2, r1
 8014192:	615a      	str	r2, [r3, #20]
}
 8014194:	bf00      	nop
 8014196:	3714      	adds	r7, #20
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b08c      	sub	sp, #48	; 0x30
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d102      	bne.n	80141b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80141ae:	2301      	movs	r3, #1
 80141b0:	f000 bc1d 	b.w	80149ee <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	f003 0301 	and.w	r3, r3, #1
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f000 8087 	beq.w	80142d0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80141c2:	4b99      	ldr	r3, [pc, #612]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80141cc:	4b96      	ldr	r3, [pc, #600]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80141ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80141d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d4:	2b10      	cmp	r3, #16
 80141d6:	d007      	beq.n	80141e8 <HAL_RCC_OscConfig+0x48>
 80141d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141da:	2b18      	cmp	r3, #24
 80141dc:	d110      	bne.n	8014200 <HAL_RCC_OscConfig+0x60>
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	f003 0303 	and.w	r3, r3, #3
 80141e4:	2b02      	cmp	r3, #2
 80141e6:	d10b      	bne.n	8014200 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80141e8:	4b8f      	ldr	r3, [pc, #572]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d06c      	beq.n	80142ce <HAL_RCC_OscConfig+0x12e>
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d168      	bne.n	80142ce <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80141fc:	2301      	movs	r3, #1
 80141fe:	e3f6      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014208:	d106      	bne.n	8014218 <HAL_RCC_OscConfig+0x78>
 801420a:	4b87      	ldr	r3, [pc, #540]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	4a86      	ldr	r2, [pc, #536]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014214:	6013      	str	r3, [r2, #0]
 8014216:	e02e      	b.n	8014276 <HAL_RCC_OscConfig+0xd6>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d10c      	bne.n	801423a <HAL_RCC_OscConfig+0x9a>
 8014220:	4b81      	ldr	r3, [pc, #516]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a80      	ldr	r2, [pc, #512]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801422a:	6013      	str	r3, [r2, #0]
 801422c:	4b7e      	ldr	r3, [pc, #504]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	4a7d      	ldr	r2, [pc, #500]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014236:	6013      	str	r3, [r2, #0]
 8014238:	e01d      	b.n	8014276 <HAL_RCC_OscConfig+0xd6>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014242:	d10c      	bne.n	801425e <HAL_RCC_OscConfig+0xbe>
 8014244:	4b78      	ldr	r3, [pc, #480]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a77      	ldr	r2, [pc, #476]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801424a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801424e:	6013      	str	r3, [r2, #0]
 8014250:	4b75      	ldr	r3, [pc, #468]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	4a74      	ldr	r2, [pc, #464]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801425a:	6013      	str	r3, [r2, #0]
 801425c:	e00b      	b.n	8014276 <HAL_RCC_OscConfig+0xd6>
 801425e:	4b72      	ldr	r3, [pc, #456]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a71      	ldr	r2, [pc, #452]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014268:	6013      	str	r3, [r2, #0]
 801426a:	4b6f      	ldr	r3, [pc, #444]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4a6e      	ldr	r2, [pc, #440]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014274:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d013      	beq.n	80142a6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801427e:	f7fc fddf 	bl	8010e40 <HAL_GetTick>
 8014282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014284:	e008      	b.n	8014298 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014286:	f7fc fddb 	bl	8010e40 <HAL_GetTick>
 801428a:	4602      	mov	r2, r0
 801428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	2b64      	cmp	r3, #100	; 0x64
 8014292:	d901      	bls.n	8014298 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8014294:	2303      	movs	r3, #3
 8014296:	e3aa      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014298:	4b63      	ldr	r3, [pc, #396]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d0f0      	beq.n	8014286 <HAL_RCC_OscConfig+0xe6>
 80142a4:	e014      	b.n	80142d0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142a6:	f7fc fdcb 	bl	8010e40 <HAL_GetTick>
 80142aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80142ac:	e008      	b.n	80142c0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80142ae:	f7fc fdc7 	bl	8010e40 <HAL_GetTick>
 80142b2:	4602      	mov	r2, r0
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	1ad3      	subs	r3, r2, r3
 80142b8:	2b64      	cmp	r3, #100	; 0x64
 80142ba:	d901      	bls.n	80142c0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80142bc:	2303      	movs	r3, #3
 80142be:	e396      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80142c0:	4b59      	ldr	r3, [pc, #356]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1f0      	bne.n	80142ae <HAL_RCC_OscConfig+0x10e>
 80142cc:	e000      	b.n	80142d0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80142ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f003 0302 	and.w	r3, r3, #2
 80142d8:	2b00      	cmp	r3, #0
 80142da:	f000 80cb 	beq.w	8014474 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80142de:	4b52      	ldr	r3, [pc, #328]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80142e0:	691b      	ldr	r3, [r3, #16]
 80142e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80142e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80142e8:	4b4f      	ldr	r3, [pc, #316]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80142ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ec:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80142ee:	6a3b      	ldr	r3, [r7, #32]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d007      	beq.n	8014304 <HAL_RCC_OscConfig+0x164>
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	2b18      	cmp	r3, #24
 80142f8:	d156      	bne.n	80143a8 <HAL_RCC_OscConfig+0x208>
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	f003 0303 	and.w	r3, r3, #3
 8014300:	2b00      	cmp	r3, #0
 8014302:	d151      	bne.n	80143a8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014304:	4b48      	ldr	r3, [pc, #288]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	f003 0304 	and.w	r3, r3, #4
 801430c:	2b00      	cmp	r3, #0
 801430e:	d005      	beq.n	801431c <HAL_RCC_OscConfig+0x17c>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d101      	bne.n	801431c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8014318:	2301      	movs	r3, #1
 801431a:	e368      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801431c:	4b42      	ldr	r3, [pc, #264]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f023 0219 	bic.w	r2, r3, #25
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	493f      	ldr	r1, [pc, #252]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801432a:	4313      	orrs	r3, r2
 801432c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801432e:	f7fc fd87 	bl	8010e40 <HAL_GetTick>
 8014332:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014334:	e008      	b.n	8014348 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014336:	f7fc fd83 	bl	8010e40 <HAL_GetTick>
 801433a:	4602      	mov	r2, r0
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	2b02      	cmp	r3, #2
 8014342:	d901      	bls.n	8014348 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8014344:	2303      	movs	r3, #3
 8014346:	e352      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014348:	4b37      	ldr	r3, [pc, #220]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f003 0304 	and.w	r3, r3, #4
 8014350:	2b00      	cmp	r3, #0
 8014352:	d0f0      	beq.n	8014336 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014354:	f7fc fd80 	bl	8010e58 <HAL_GetREVID>
 8014358:	4603      	mov	r3, r0
 801435a:	f241 0203 	movw	r2, #4099	; 0x1003
 801435e:	4293      	cmp	r3, r2
 8014360:	d817      	bhi.n	8014392 <HAL_RCC_OscConfig+0x1f2>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	691b      	ldr	r3, [r3, #16]
 8014366:	2b40      	cmp	r3, #64	; 0x40
 8014368:	d108      	bne.n	801437c <HAL_RCC_OscConfig+0x1dc>
 801436a:	4b2f      	ldr	r3, [pc, #188]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8014372:	4a2d      	ldr	r2, [pc, #180]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014378:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801437a:	e07b      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801437c:	4b2a      	ldr	r3, [pc, #168]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	691b      	ldr	r3, [r3, #16]
 8014388:	031b      	lsls	r3, r3, #12
 801438a:	4927      	ldr	r1, [pc, #156]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 801438c:	4313      	orrs	r3, r2
 801438e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014390:	e070      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014392:	4b25      	ldr	r3, [pc, #148]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	691b      	ldr	r3, [r3, #16]
 801439e:	061b      	lsls	r3, r3, #24
 80143a0:	4921      	ldr	r1, [pc, #132]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80143a2:	4313      	orrs	r3, r2
 80143a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80143a6:	e065      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d048      	beq.n	8014442 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80143b0:	4b1d      	ldr	r3, [pc, #116]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	f023 0219 	bic.w	r2, r3, #25
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	491a      	ldr	r1, [pc, #104]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80143be:	4313      	orrs	r3, r2
 80143c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80143c2:	f7fc fd3d 	bl	8010e40 <HAL_GetTick>
 80143c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80143c8:	e008      	b.n	80143dc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80143ca:	f7fc fd39 	bl	8010e40 <HAL_GetTick>
 80143ce:	4602      	mov	r2, r0
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	1ad3      	subs	r3, r2, r3
 80143d4:	2b02      	cmp	r3, #2
 80143d6:	d901      	bls.n	80143dc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80143d8:	2303      	movs	r3, #3
 80143da:	e308      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80143dc:	4b12      	ldr	r3, [pc, #72]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	f003 0304 	and.w	r3, r3, #4
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d0f0      	beq.n	80143ca <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80143e8:	f7fc fd36 	bl	8010e58 <HAL_GetREVID>
 80143ec:	4603      	mov	r3, r0
 80143ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d81a      	bhi.n	801442c <HAL_RCC_OscConfig+0x28c>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	2b40      	cmp	r3, #64	; 0x40
 80143fc:	d108      	bne.n	8014410 <HAL_RCC_OscConfig+0x270>
 80143fe:	4b0a      	ldr	r3, [pc, #40]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8014406:	4a08      	ldr	r2, [pc, #32]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801440c:	6053      	str	r3, [r2, #4]
 801440e:	e031      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
 8014410:	4b05      	ldr	r3, [pc, #20]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	031b      	lsls	r3, r3, #12
 801441e:	4902      	ldr	r1, [pc, #8]	; (8014428 <HAL_RCC_OscConfig+0x288>)
 8014420:	4313      	orrs	r3, r2
 8014422:	604b      	str	r3, [r1, #4]
 8014424:	e026      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
 8014426:	bf00      	nop
 8014428:	58024400 	.word	0x58024400
 801442c:	4b9a      	ldr	r3, [pc, #616]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	691b      	ldr	r3, [r3, #16]
 8014438:	061b      	lsls	r3, r3, #24
 801443a:	4997      	ldr	r1, [pc, #604]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801443c:	4313      	orrs	r3, r2
 801443e:	604b      	str	r3, [r1, #4]
 8014440:	e018      	b.n	8014474 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014442:	4b95      	ldr	r3, [pc, #596]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a94      	ldr	r2, [pc, #592]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014448:	f023 0301 	bic.w	r3, r3, #1
 801444c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801444e:	f7fc fcf7 	bl	8010e40 <HAL_GetTick>
 8014452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014454:	e008      	b.n	8014468 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014456:	f7fc fcf3 	bl	8010e40 <HAL_GetTick>
 801445a:	4602      	mov	r2, r0
 801445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445e:	1ad3      	subs	r3, r2, r3
 8014460:	2b02      	cmp	r3, #2
 8014462:	d901      	bls.n	8014468 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8014464:	2303      	movs	r3, #3
 8014466:	e2c2      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014468:	4b8b      	ldr	r3, [pc, #556]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	f003 0304 	and.w	r3, r3, #4
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1f0      	bne.n	8014456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	f003 0310 	and.w	r3, r3, #16
 801447c:	2b00      	cmp	r3, #0
 801447e:	f000 80a9 	beq.w	80145d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014482:	4b85      	ldr	r3, [pc, #532]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014484:	691b      	ldr	r3, [r3, #16]
 8014486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801448a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801448c:	4b82      	ldr	r3, [pc, #520]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014490:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	2b08      	cmp	r3, #8
 8014496:	d007      	beq.n	80144a8 <HAL_RCC_OscConfig+0x308>
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	2b18      	cmp	r3, #24
 801449c:	d13a      	bne.n	8014514 <HAL_RCC_OscConfig+0x374>
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	f003 0303 	and.w	r3, r3, #3
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d135      	bne.n	8014514 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80144a8:	4b7b      	ldr	r3, [pc, #492]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d005      	beq.n	80144c0 <HAL_RCC_OscConfig+0x320>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	69db      	ldr	r3, [r3, #28]
 80144b8:	2b80      	cmp	r3, #128	; 0x80
 80144ba:	d001      	beq.n	80144c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80144bc:	2301      	movs	r3, #1
 80144be:	e296      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80144c0:	f7fc fcca 	bl	8010e58 <HAL_GetREVID>
 80144c4:	4603      	mov	r3, r0
 80144c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80144ca:	4293      	cmp	r3, r2
 80144cc:	d817      	bhi.n	80144fe <HAL_RCC_OscConfig+0x35e>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6a1b      	ldr	r3, [r3, #32]
 80144d2:	2b20      	cmp	r3, #32
 80144d4:	d108      	bne.n	80144e8 <HAL_RCC_OscConfig+0x348>
 80144d6:	4b70      	ldr	r3, [pc, #448]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80144de:	4a6e      	ldr	r2, [pc, #440]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80144e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80144e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80144e6:	e075      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80144e8:	4b6b      	ldr	r3, [pc, #428]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80144ea:	685b      	ldr	r3, [r3, #4]
 80144ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6a1b      	ldr	r3, [r3, #32]
 80144f4:	069b      	lsls	r3, r3, #26
 80144f6:	4968      	ldr	r1, [pc, #416]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80144f8:	4313      	orrs	r3, r2
 80144fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80144fc:	e06a      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80144fe:	4b66      	ldr	r3, [pc, #408]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014500:	68db      	ldr	r3, [r3, #12]
 8014502:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6a1b      	ldr	r3, [r3, #32]
 801450a:	061b      	lsls	r3, r3, #24
 801450c:	4962      	ldr	r1, [pc, #392]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801450e:	4313      	orrs	r3, r2
 8014510:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014512:	e05f      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	69db      	ldr	r3, [r3, #28]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d042      	beq.n	80145a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801451c:	4b5e      	ldr	r3, [pc, #376]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a5d      	ldr	r2, [pc, #372]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014528:	f7fc fc8a 	bl	8010e40 <HAL_GetTick>
 801452c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801452e:	e008      	b.n	8014542 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014530:	f7fc fc86 	bl	8010e40 <HAL_GetTick>
 8014534:	4602      	mov	r2, r0
 8014536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014538:	1ad3      	subs	r3, r2, r3
 801453a:	2b02      	cmp	r3, #2
 801453c:	d901      	bls.n	8014542 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801453e:	2303      	movs	r3, #3
 8014540:	e255      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014542:	4b55      	ldr	r3, [pc, #340]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801454a:	2b00      	cmp	r3, #0
 801454c:	d0f0      	beq.n	8014530 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801454e:	f7fc fc83 	bl	8010e58 <HAL_GetREVID>
 8014552:	4603      	mov	r3, r0
 8014554:	f241 0203 	movw	r2, #4099	; 0x1003
 8014558:	4293      	cmp	r3, r2
 801455a:	d817      	bhi.n	801458c <HAL_RCC_OscConfig+0x3ec>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6a1b      	ldr	r3, [r3, #32]
 8014560:	2b20      	cmp	r3, #32
 8014562:	d108      	bne.n	8014576 <HAL_RCC_OscConfig+0x3d6>
 8014564:	4b4c      	ldr	r3, [pc, #304]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014566:	685b      	ldr	r3, [r3, #4]
 8014568:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801456c:	4a4a      	ldr	r2, [pc, #296]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801456e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014572:	6053      	str	r3, [r2, #4]
 8014574:	e02e      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
 8014576:	4b48      	ldr	r3, [pc, #288]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	6a1b      	ldr	r3, [r3, #32]
 8014582:	069b      	lsls	r3, r3, #26
 8014584:	4944      	ldr	r1, [pc, #272]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014586:	4313      	orrs	r3, r2
 8014588:	604b      	str	r3, [r1, #4]
 801458a:	e023      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
 801458c:	4b42      	ldr	r3, [pc, #264]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a1b      	ldr	r3, [r3, #32]
 8014598:	061b      	lsls	r3, r3, #24
 801459a:	493f      	ldr	r1, [pc, #252]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801459c:	4313      	orrs	r3, r2
 801459e:	60cb      	str	r3, [r1, #12]
 80145a0:	e018      	b.n	80145d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80145a2:	4b3d      	ldr	r3, [pc, #244]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	4a3c      	ldr	r2, [pc, #240]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80145a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145ae:	f7fc fc47 	bl	8010e40 <HAL_GetTick>
 80145b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80145b4:	e008      	b.n	80145c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80145b6:	f7fc fc43 	bl	8010e40 <HAL_GetTick>
 80145ba:	4602      	mov	r2, r0
 80145bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145be:	1ad3      	subs	r3, r2, r3
 80145c0:	2b02      	cmp	r3, #2
 80145c2:	d901      	bls.n	80145c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80145c4:	2303      	movs	r3, #3
 80145c6:	e212      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80145c8:	4b33      	ldr	r3, [pc, #204]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d1f0      	bne.n	80145b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f003 0308 	and.w	r3, r3, #8
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d036      	beq.n	801464e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	695b      	ldr	r3, [r3, #20]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d019      	beq.n	801461c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80145e8:	4b2b      	ldr	r3, [pc, #172]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80145ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ec:	4a2a      	ldr	r2, [pc, #168]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 80145ee:	f043 0301 	orr.w	r3, r3, #1
 80145f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80145f4:	f7fc fc24 	bl	8010e40 <HAL_GetTick>
 80145f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80145fa:	e008      	b.n	801460e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80145fc:	f7fc fc20 	bl	8010e40 <HAL_GetTick>
 8014600:	4602      	mov	r2, r0
 8014602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014604:	1ad3      	subs	r3, r2, r3
 8014606:	2b02      	cmp	r3, #2
 8014608:	d901      	bls.n	801460e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801460a:	2303      	movs	r3, #3
 801460c:	e1ef      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801460e:	4b22      	ldr	r3, [pc, #136]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014612:	f003 0302 	and.w	r3, r3, #2
 8014616:	2b00      	cmp	r3, #0
 8014618:	d0f0      	beq.n	80145fc <HAL_RCC_OscConfig+0x45c>
 801461a:	e018      	b.n	801464e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801461c:	4b1e      	ldr	r3, [pc, #120]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801461e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014620:	4a1d      	ldr	r2, [pc, #116]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014622:	f023 0301 	bic.w	r3, r3, #1
 8014626:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014628:	f7fc fc0a 	bl	8010e40 <HAL_GetTick>
 801462c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801462e:	e008      	b.n	8014642 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014630:	f7fc fc06 	bl	8010e40 <HAL_GetTick>
 8014634:	4602      	mov	r2, r0
 8014636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	2b02      	cmp	r3, #2
 801463c:	d901      	bls.n	8014642 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801463e:	2303      	movs	r3, #3
 8014640:	e1d5      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014642:	4b15      	ldr	r3, [pc, #84]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014646:	f003 0302 	and.w	r3, r3, #2
 801464a:	2b00      	cmp	r3, #0
 801464c:	d1f0      	bne.n	8014630 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f003 0320 	and.w	r3, r3, #32
 8014656:	2b00      	cmp	r3, #0
 8014658:	d039      	beq.n	80146ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	699b      	ldr	r3, [r3, #24]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d01c      	beq.n	801469c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014662:	4b0d      	ldr	r3, [pc, #52]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4a0c      	ldr	r2, [pc, #48]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 8014668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801466c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801466e:	f7fc fbe7 	bl	8010e40 <HAL_GetTick>
 8014672:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014674:	e008      	b.n	8014688 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014676:	f7fc fbe3 	bl	8010e40 <HAL_GetTick>
 801467a:	4602      	mov	r2, r0
 801467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467e:	1ad3      	subs	r3, r2, r3
 8014680:	2b02      	cmp	r3, #2
 8014682:	d901      	bls.n	8014688 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014684:	2303      	movs	r3, #3
 8014686:	e1b2      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014688:	4b03      	ldr	r3, [pc, #12]	; (8014698 <HAL_RCC_OscConfig+0x4f8>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014690:	2b00      	cmp	r3, #0
 8014692:	d0f0      	beq.n	8014676 <HAL_RCC_OscConfig+0x4d6>
 8014694:	e01b      	b.n	80146ce <HAL_RCC_OscConfig+0x52e>
 8014696:	bf00      	nop
 8014698:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801469c:	4b9b      	ldr	r3, [pc, #620]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	4a9a      	ldr	r2, [pc, #616]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80146a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80146a8:	f7fc fbca 	bl	8010e40 <HAL_GetTick>
 80146ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80146ae:	e008      	b.n	80146c2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80146b0:	f7fc fbc6 	bl	8010e40 <HAL_GetTick>
 80146b4:	4602      	mov	r2, r0
 80146b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d901      	bls.n	80146c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80146be:	2303      	movs	r3, #3
 80146c0:	e195      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80146c2:	4b92      	ldr	r3, [pc, #584]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d1f0      	bne.n	80146b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	f003 0304 	and.w	r3, r3, #4
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8081 	beq.w	80147de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80146dc:	4b8c      	ldr	r3, [pc, #560]	; (8014910 <HAL_RCC_OscConfig+0x770>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	4a8b      	ldr	r2, [pc, #556]	; (8014910 <HAL_RCC_OscConfig+0x770>)
 80146e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80146e8:	f7fc fbaa 	bl	8010e40 <HAL_GetTick>
 80146ec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80146ee:	e008      	b.n	8014702 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80146f0:	f7fc fba6 	bl	8010e40 <HAL_GetTick>
 80146f4:	4602      	mov	r2, r0
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	1ad3      	subs	r3, r2, r3
 80146fa:	2b64      	cmp	r3, #100	; 0x64
 80146fc:	d901      	bls.n	8014702 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80146fe:	2303      	movs	r3, #3
 8014700:	e175      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014702:	4b83      	ldr	r3, [pc, #524]	; (8014910 <HAL_RCC_OscConfig+0x770>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801470a:	2b00      	cmp	r3, #0
 801470c:	d0f0      	beq.n	80146f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	2b01      	cmp	r3, #1
 8014714:	d106      	bne.n	8014724 <HAL_RCC_OscConfig+0x584>
 8014716:	4b7d      	ldr	r3, [pc, #500]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801471a:	4a7c      	ldr	r2, [pc, #496]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801471c:	f043 0301 	orr.w	r3, r3, #1
 8014720:	6713      	str	r3, [r2, #112]	; 0x70
 8014722:	e02d      	b.n	8014780 <HAL_RCC_OscConfig+0x5e0>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d10c      	bne.n	8014746 <HAL_RCC_OscConfig+0x5a6>
 801472c:	4b77      	ldr	r3, [pc, #476]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014730:	4a76      	ldr	r2, [pc, #472]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014732:	f023 0301 	bic.w	r3, r3, #1
 8014736:	6713      	str	r3, [r2, #112]	; 0x70
 8014738:	4b74      	ldr	r3, [pc, #464]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801473c:	4a73      	ldr	r2, [pc, #460]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801473e:	f023 0304 	bic.w	r3, r3, #4
 8014742:	6713      	str	r3, [r2, #112]	; 0x70
 8014744:	e01c      	b.n	8014780 <HAL_RCC_OscConfig+0x5e0>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	2b05      	cmp	r3, #5
 801474c:	d10c      	bne.n	8014768 <HAL_RCC_OscConfig+0x5c8>
 801474e:	4b6f      	ldr	r3, [pc, #444]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014752:	4a6e      	ldr	r2, [pc, #440]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014754:	f043 0304 	orr.w	r3, r3, #4
 8014758:	6713      	str	r3, [r2, #112]	; 0x70
 801475a:	4b6c      	ldr	r3, [pc, #432]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801475e:	4a6b      	ldr	r2, [pc, #428]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014760:	f043 0301 	orr.w	r3, r3, #1
 8014764:	6713      	str	r3, [r2, #112]	; 0x70
 8014766:	e00b      	b.n	8014780 <HAL_RCC_OscConfig+0x5e0>
 8014768:	4b68      	ldr	r3, [pc, #416]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801476c:	4a67      	ldr	r2, [pc, #412]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801476e:	f023 0301 	bic.w	r3, r3, #1
 8014772:	6713      	str	r3, [r2, #112]	; 0x70
 8014774:	4b65      	ldr	r3, [pc, #404]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014778:	4a64      	ldr	r2, [pc, #400]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801477a:	f023 0304 	bic.w	r3, r3, #4
 801477e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	689b      	ldr	r3, [r3, #8]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d015      	beq.n	80147b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014788:	f7fc fb5a 	bl	8010e40 <HAL_GetTick>
 801478c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801478e:	e00a      	b.n	80147a6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014790:	f7fc fb56 	bl	8010e40 <HAL_GetTick>
 8014794:	4602      	mov	r2, r0
 8014796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014798:	1ad3      	subs	r3, r2, r3
 801479a:	f241 3288 	movw	r2, #5000	; 0x1388
 801479e:	4293      	cmp	r3, r2
 80147a0:	d901      	bls.n	80147a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80147a2:	2303      	movs	r3, #3
 80147a4:	e123      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80147a6:	4b59      	ldr	r3, [pc, #356]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80147a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147aa:	f003 0302 	and.w	r3, r3, #2
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d0ee      	beq.n	8014790 <HAL_RCC_OscConfig+0x5f0>
 80147b2:	e014      	b.n	80147de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147b4:	f7fc fb44 	bl	8010e40 <HAL_GetTick>
 80147b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80147ba:	e00a      	b.n	80147d2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80147bc:	f7fc fb40 	bl	8010e40 <HAL_GetTick>
 80147c0:	4602      	mov	r2, r0
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	1ad3      	subs	r3, r2, r3
 80147c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d901      	bls.n	80147d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80147ce:	2303      	movs	r3, #3
 80147d0:	e10d      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80147d2:	4b4e      	ldr	r3, [pc, #312]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80147d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147d6:	f003 0302 	and.w	r3, r3, #2
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d1ee      	bne.n	80147bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f000 8102 	beq.w	80149ec <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80147e8:	4b48      	ldr	r3, [pc, #288]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80147ea:	691b      	ldr	r3, [r3, #16]
 80147ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80147f0:	2b18      	cmp	r3, #24
 80147f2:	f000 80bd 	beq.w	8014970 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147fa:	2b02      	cmp	r3, #2
 80147fc:	f040 809e 	bne.w	801493c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014800:	4b42      	ldr	r3, [pc, #264]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a41      	ldr	r2, [pc, #260]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801480a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801480c:	f7fc fb18 	bl	8010e40 <HAL_GetTick>
 8014810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014812:	e008      	b.n	8014826 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014814:	f7fc fb14 	bl	8010e40 <HAL_GetTick>
 8014818:	4602      	mov	r2, r0
 801481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481c:	1ad3      	subs	r3, r2, r3
 801481e:	2b02      	cmp	r3, #2
 8014820:	d901      	bls.n	8014826 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014822:	2303      	movs	r3, #3
 8014824:	e0e3      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014826:	4b39      	ldr	r3, [pc, #228]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1f0      	bne.n	8014814 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014832:	4b36      	ldr	r3, [pc, #216]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014836:	4b37      	ldr	r3, [pc, #220]	; (8014914 <HAL_RCC_OscConfig+0x774>)
 8014838:	4013      	ands	r3, r2
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014842:	0112      	lsls	r2, r2, #4
 8014844:	430a      	orrs	r2, r1
 8014846:	4931      	ldr	r1, [pc, #196]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014848:	4313      	orrs	r3, r2
 801484a:	628b      	str	r3, [r1, #40]	; 0x28
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014850:	3b01      	subs	r3, #1
 8014852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801485a:	3b01      	subs	r3, #1
 801485c:	025b      	lsls	r3, r3, #9
 801485e:	b29b      	uxth	r3, r3
 8014860:	431a      	orrs	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014866:	3b01      	subs	r3, #1
 8014868:	041b      	lsls	r3, r3, #16
 801486a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801486e:	431a      	orrs	r2, r3
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014874:	3b01      	subs	r3, #1
 8014876:	061b      	lsls	r3, r3, #24
 8014878:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801487c:	4923      	ldr	r1, [pc, #140]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801487e:	4313      	orrs	r3, r2
 8014880:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8014882:	4b22      	ldr	r3, [pc, #136]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014886:	4a21      	ldr	r2, [pc, #132]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014888:	f023 0301 	bic.w	r3, r3, #1
 801488c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801488e:	4b1f      	ldr	r3, [pc, #124]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 8014890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014892:	4b21      	ldr	r3, [pc, #132]	; (8014918 <HAL_RCC_OscConfig+0x778>)
 8014894:	4013      	ands	r3, r2
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801489a:	00d2      	lsls	r2, r2, #3
 801489c:	491b      	ldr	r1, [pc, #108]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 801489e:	4313      	orrs	r3, r2
 80148a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80148a2:	4b1a      	ldr	r3, [pc, #104]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a6:	f023 020c 	bic.w	r2, r3, #12
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ae:	4917      	ldr	r1, [pc, #92]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148b0:	4313      	orrs	r3, r2
 80148b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80148b4:	4b15      	ldr	r3, [pc, #84]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b8:	f023 0202 	bic.w	r2, r3, #2
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148c0:	4912      	ldr	r1, [pc, #72]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148c2:	4313      	orrs	r3, r2
 80148c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80148c6:	4b11      	ldr	r3, [pc, #68]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ca:	4a10      	ldr	r2, [pc, #64]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80148d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80148d2:	4b0e      	ldr	r3, [pc, #56]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d6:	4a0d      	ldr	r2, [pc, #52]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80148dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80148de:	4b0b      	ldr	r3, [pc, #44]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e2:	4a0a      	ldr	r2, [pc, #40]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80148e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80148ea:	4b08      	ldr	r3, [pc, #32]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ee:	4a07      	ldr	r2, [pc, #28]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148f0:	f043 0301 	orr.w	r3, r3, #1
 80148f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4a04      	ldr	r2, [pc, #16]	; (801490c <HAL_RCC_OscConfig+0x76c>)
 80148fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014902:	f7fc fa9d 	bl	8010e40 <HAL_GetTick>
 8014906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014908:	e011      	b.n	801492e <HAL_RCC_OscConfig+0x78e>
 801490a:	bf00      	nop
 801490c:	58024400 	.word	0x58024400
 8014910:	58024800 	.word	0x58024800
 8014914:	fffffc0c 	.word	0xfffffc0c
 8014918:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801491c:	f7fc fa90 	bl	8010e40 <HAL_GetTick>
 8014920:	4602      	mov	r2, r0
 8014922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b02      	cmp	r3, #2
 8014928:	d901      	bls.n	801492e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801492a:	2303      	movs	r3, #3
 801492c:	e05f      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801492e:	4b32      	ldr	r3, [pc, #200]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014936:	2b00      	cmp	r3, #0
 8014938:	d0f0      	beq.n	801491c <HAL_RCC_OscConfig+0x77c>
 801493a:	e057      	b.n	80149ec <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801493c:	4b2e      	ldr	r3, [pc, #184]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	4a2d      	ldr	r2, [pc, #180]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 8014942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014948:	f7fc fa7a 	bl	8010e40 <HAL_GetTick>
 801494c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801494e:	e008      	b.n	8014962 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014950:	f7fc fa76 	bl	8010e40 <HAL_GetTick>
 8014954:	4602      	mov	r2, r0
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	1ad3      	subs	r3, r2, r3
 801495a:	2b02      	cmp	r3, #2
 801495c:	d901      	bls.n	8014962 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801495e:	2303      	movs	r3, #3
 8014960:	e045      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014962:	4b25      	ldr	r3, [pc, #148]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1f0      	bne.n	8014950 <HAL_RCC_OscConfig+0x7b0>
 801496e:	e03d      	b.n	80149ec <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014970:	4b21      	ldr	r3, [pc, #132]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 8014972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014974:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014976:	4b20      	ldr	r3, [pc, #128]	; (80149f8 <HAL_RCC_OscConfig+0x858>)
 8014978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014980:	2b01      	cmp	r3, #1
 8014982:	d031      	beq.n	80149e8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	f003 0203 	and.w	r2, r3, #3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801498e:	429a      	cmp	r2, r3
 8014990:	d12a      	bne.n	80149e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	091b      	lsrs	r3, r3, #4
 8014996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801499e:	429a      	cmp	r2, r3
 80149a0:	d122      	bne.n	80149e8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d11a      	bne.n	80149e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	0a5b      	lsrs	r3, r3, #9
 80149b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d111      	bne.n	80149e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	0c1b      	lsrs	r3, r3, #16
 80149c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d108      	bne.n	80149e8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	0e1b      	lsrs	r3, r3, #24
 80149da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d001      	beq.n	80149ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80149e8:	2301      	movs	r3, #1
 80149ea:	e000      	b.n	80149ee <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80149ec:	2300      	movs	r3, #0
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3730      	adds	r7, #48	; 0x30
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	58024400 	.word	0x58024400

080149fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d101      	bne.n	8014a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	e19c      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014a10:	4b8a      	ldr	r3, [pc, #552]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f003 030f 	and.w	r3, r3, #15
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d910      	bls.n	8014a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014a1e:	4b87      	ldr	r3, [pc, #540]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f023 020f 	bic.w	r2, r3, #15
 8014a26:	4985      	ldr	r1, [pc, #532]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	4313      	orrs	r3, r2
 8014a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a2e:	4b83      	ldr	r3, [pc, #524]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f003 030f 	and.w	r3, r3, #15
 8014a36:	683a      	ldr	r2, [r7, #0]
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d001      	beq.n	8014a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e184      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	f003 0304 	and.w	r3, r3, #4
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d010      	beq.n	8014a6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	691a      	ldr	r2, [r3, #16]
 8014a50:	4b7b      	ldr	r3, [pc, #492]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a52:	699b      	ldr	r3, [r3, #24]
 8014a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	d908      	bls.n	8014a6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014a5c:	4b78      	ldr	r3, [pc, #480]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a5e:	699b      	ldr	r3, [r3, #24]
 8014a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	691b      	ldr	r3, [r3, #16]
 8014a68:	4975      	ldr	r1, [pc, #468]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a6a:	4313      	orrs	r3, r2
 8014a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	f003 0308 	and.w	r3, r3, #8
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d010      	beq.n	8014a9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	695a      	ldr	r2, [r3, #20]
 8014a7e:	4b70      	ldr	r3, [pc, #448]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a80:	69db      	ldr	r3, [r3, #28]
 8014a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d908      	bls.n	8014a9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014a8a:	4b6d      	ldr	r3, [pc, #436]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a8c:	69db      	ldr	r3, [r3, #28]
 8014a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	695b      	ldr	r3, [r3, #20]
 8014a96:	496a      	ldr	r1, [pc, #424]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014a98:	4313      	orrs	r3, r2
 8014a9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f003 0310 	and.w	r3, r3, #16
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d010      	beq.n	8014aca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	699a      	ldr	r2, [r3, #24]
 8014aac:	4b64      	ldr	r3, [pc, #400]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014aae:	69db      	ldr	r3, [r3, #28]
 8014ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014ab4:	429a      	cmp	r2, r3
 8014ab6:	d908      	bls.n	8014aca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014ab8:	4b61      	ldr	r3, [pc, #388]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014aba:	69db      	ldr	r3, [r3, #28]
 8014abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	699b      	ldr	r3, [r3, #24]
 8014ac4:	495e      	ldr	r1, [pc, #376]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014ac6:	4313      	orrs	r3, r2
 8014ac8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f003 0320 	and.w	r3, r3, #32
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d010      	beq.n	8014af8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	69da      	ldr	r2, [r3, #28]
 8014ada:	4b59      	ldr	r3, [pc, #356]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014adc:	6a1b      	ldr	r3, [r3, #32]
 8014ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d908      	bls.n	8014af8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014ae6:	4b56      	ldr	r3, [pc, #344]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014ae8:	6a1b      	ldr	r3, [r3, #32]
 8014aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	69db      	ldr	r3, [r3, #28]
 8014af2:	4953      	ldr	r1, [pc, #332]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014af4:	4313      	orrs	r3, r2
 8014af6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	f003 0302 	and.w	r3, r3, #2
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d010      	beq.n	8014b26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	68da      	ldr	r2, [r3, #12]
 8014b08:	4b4d      	ldr	r3, [pc, #308]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b0a:	699b      	ldr	r3, [r3, #24]
 8014b0c:	f003 030f 	and.w	r3, r3, #15
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d908      	bls.n	8014b26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014b14:	4b4a      	ldr	r3, [pc, #296]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b16:	699b      	ldr	r3, [r3, #24]
 8014b18:	f023 020f 	bic.w	r2, r3, #15
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	4947      	ldr	r1, [pc, #284]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b22:	4313      	orrs	r3, r2
 8014b24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	f003 0301 	and.w	r3, r3, #1
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d055      	beq.n	8014bde <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014b32:	4b43      	ldr	r3, [pc, #268]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	4940      	ldr	r1, [pc, #256]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b40:	4313      	orrs	r3, r2
 8014b42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	2b02      	cmp	r3, #2
 8014b4a:	d107      	bne.n	8014b5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014b4c:	4b3c      	ldr	r3, [pc, #240]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d121      	bne.n	8014b9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	e0f6      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	2b03      	cmp	r3, #3
 8014b62:	d107      	bne.n	8014b74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014b64:	4b36      	ldr	r3, [pc, #216]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d115      	bne.n	8014b9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014b70:	2301      	movs	r3, #1
 8014b72:	e0ea      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d107      	bne.n	8014b8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014b7c:	4b30      	ldr	r3, [pc, #192]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d109      	bne.n	8014b9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	e0de      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014b8c:	4b2c      	ldr	r3, [pc, #176]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	f003 0304 	and.w	r3, r3, #4
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d101      	bne.n	8014b9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	e0d6      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014b9c:	4b28      	ldr	r3, [pc, #160]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	f023 0207 	bic.w	r2, r3, #7
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	4925      	ldr	r1, [pc, #148]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014baa:	4313      	orrs	r3, r2
 8014bac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bae:	f7fc f947 	bl	8010e40 <HAL_GetTick>
 8014bb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014bb4:	e00a      	b.n	8014bcc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bb6:	f7fc f943 	bl	8010e40 <HAL_GetTick>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d901      	bls.n	8014bcc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8014bc8:	2303      	movs	r3, #3
 8014bca:	e0be      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014bcc:	4b1c      	ldr	r3, [pc, #112]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014bce:	691b      	ldr	r3, [r3, #16]
 8014bd0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	685b      	ldr	r3, [r3, #4]
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d1eb      	bne.n	8014bb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f003 0302 	and.w	r3, r3, #2
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d010      	beq.n	8014c0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	68da      	ldr	r2, [r3, #12]
 8014bee:	4b14      	ldr	r3, [pc, #80]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014bf0:	699b      	ldr	r3, [r3, #24]
 8014bf2:	f003 030f 	and.w	r3, r3, #15
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d208      	bcs.n	8014c0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014bfa:	4b11      	ldr	r3, [pc, #68]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014bfc:	699b      	ldr	r3, [r3, #24]
 8014bfe:	f023 020f 	bic.w	r2, r3, #15
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	68db      	ldr	r3, [r3, #12]
 8014c06:	490e      	ldr	r1, [pc, #56]	; (8014c40 <HAL_RCC_ClockConfig+0x244>)
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014c0c:	4b0b      	ldr	r3, [pc, #44]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	f003 030f 	and.w	r3, r3, #15
 8014c14:	683a      	ldr	r2, [r7, #0]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d214      	bcs.n	8014c44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c1a:	4b08      	ldr	r3, [pc, #32]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f023 020f 	bic.w	r2, r3, #15
 8014c22:	4906      	ldr	r1, [pc, #24]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	4313      	orrs	r3, r2
 8014c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c2a:	4b04      	ldr	r3, [pc, #16]	; (8014c3c <HAL_RCC_ClockConfig+0x240>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	f003 030f 	and.w	r3, r3, #15
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d005      	beq.n	8014c44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	e086      	b.n	8014d4a <HAL_RCC_ClockConfig+0x34e>
 8014c3c:	52002000 	.word	0x52002000
 8014c40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	f003 0304 	and.w	r3, r3, #4
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d010      	beq.n	8014c72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	691a      	ldr	r2, [r3, #16]
 8014c54:	4b3f      	ldr	r3, [pc, #252]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c56:	699b      	ldr	r3, [r3, #24]
 8014c58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d208      	bcs.n	8014c72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014c60:	4b3c      	ldr	r3, [pc, #240]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c62:	699b      	ldr	r3, [r3, #24]
 8014c64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	691b      	ldr	r3, [r3, #16]
 8014c6c:	4939      	ldr	r1, [pc, #228]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c6e:	4313      	orrs	r3, r2
 8014c70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	f003 0308 	and.w	r3, r3, #8
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d010      	beq.n	8014ca0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	695a      	ldr	r2, [r3, #20]
 8014c82:	4b34      	ldr	r3, [pc, #208]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c84:	69db      	ldr	r3, [r3, #28]
 8014c86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d208      	bcs.n	8014ca0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014c8e:	4b31      	ldr	r3, [pc, #196]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c90:	69db      	ldr	r3, [r3, #28]
 8014c92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	695b      	ldr	r3, [r3, #20]
 8014c9a:	492e      	ldr	r1, [pc, #184]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f003 0310 	and.w	r3, r3, #16
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d010      	beq.n	8014cce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	699a      	ldr	r2, [r3, #24]
 8014cb0:	4b28      	ldr	r3, [pc, #160]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014cb2:	69db      	ldr	r3, [r3, #28]
 8014cb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	d208      	bcs.n	8014cce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014cbc:	4b25      	ldr	r3, [pc, #148]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014cbe:	69db      	ldr	r3, [r3, #28]
 8014cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	699b      	ldr	r3, [r3, #24]
 8014cc8:	4922      	ldr	r1, [pc, #136]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014cca:	4313      	orrs	r3, r2
 8014ccc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f003 0320 	and.w	r3, r3, #32
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d010      	beq.n	8014cfc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	69da      	ldr	r2, [r3, #28]
 8014cde:	4b1d      	ldr	r3, [pc, #116]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014ce0:	6a1b      	ldr	r3, [r3, #32]
 8014ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d208      	bcs.n	8014cfc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014cea:	4b1a      	ldr	r3, [pc, #104]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014cec:	6a1b      	ldr	r3, [r3, #32]
 8014cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	69db      	ldr	r3, [r3, #28]
 8014cf6:	4917      	ldr	r1, [pc, #92]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014cf8:	4313      	orrs	r3, r2
 8014cfa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014cfc:	f000 f89e 	bl	8014e3c <HAL_RCC_GetSysClockFreq>
 8014d00:	4602      	mov	r2, r0
 8014d02:	4b14      	ldr	r3, [pc, #80]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014d04:	699b      	ldr	r3, [r3, #24]
 8014d06:	0a1b      	lsrs	r3, r3, #8
 8014d08:	f003 030f 	and.w	r3, r3, #15
 8014d0c:	4912      	ldr	r1, [pc, #72]	; (8014d58 <HAL_RCC_ClockConfig+0x35c>)
 8014d0e:	5ccb      	ldrb	r3, [r1, r3]
 8014d10:	f003 031f 	and.w	r3, r3, #31
 8014d14:	fa22 f303 	lsr.w	r3, r2, r3
 8014d18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014d1a:	4b0e      	ldr	r3, [pc, #56]	; (8014d54 <HAL_RCC_ClockConfig+0x358>)
 8014d1c:	699b      	ldr	r3, [r3, #24]
 8014d1e:	f003 030f 	and.w	r3, r3, #15
 8014d22:	4a0d      	ldr	r2, [pc, #52]	; (8014d58 <HAL_RCC_ClockConfig+0x35c>)
 8014d24:	5cd3      	ldrb	r3, [r2, r3]
 8014d26:	f003 031f 	and.w	r3, r3, #31
 8014d2a:	693a      	ldr	r2, [r7, #16]
 8014d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8014d30:	4a0a      	ldr	r2, [pc, #40]	; (8014d5c <HAL_RCC_ClockConfig+0x360>)
 8014d32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014d34:	4a0a      	ldr	r2, [pc, #40]	; (8014d60 <HAL_RCC_ClockConfig+0x364>)
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8014d3a:	4b0a      	ldr	r3, [pc, #40]	; (8014d64 <HAL_RCC_ClockConfig+0x368>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7ec fc32 	bl	80015a8 <HAL_InitTick>
 8014d44:	4603      	mov	r3, r0
 8014d46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3718      	adds	r7, #24
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	58024400 	.word	0x58024400
 8014d58:	0802d21c 	.word	0x0802d21c
 8014d5c:	2400001c 	.word	0x2400001c
 8014d60:	24000018 	.word	0x24000018
 8014d64:	24000050 	.word	0x24000050

08014d68 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b08c      	sub	sp, #48	; 0x30
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d12a      	bne.n	8014dd0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014d7a:	4b2d      	ldr	r3, [pc, #180]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d80:	4a2b      	ldr	r2, [pc, #172]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014d82:	f043 0301 	orr.w	r3, r3, #1
 8014d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d8a:	4b29      	ldr	r3, [pc, #164]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d90:	f003 0301 	and.w	r3, r3, #1
 8014d94:	61bb      	str	r3, [r7, #24]
 8014d96:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8014d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d9e:	2302      	movs	r3, #2
 8014da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014da2:	2303      	movs	r3, #3
 8014da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014da6:	2300      	movs	r3, #0
 8014da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014daa:	2300      	movs	r3, #0
 8014dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8014dae:	f107 031c 	add.w	r3, r7, #28
 8014db2:	4619      	mov	r1, r3
 8014db4:	481f      	ldr	r0, [pc, #124]	; (8014e34 <HAL_RCC_MCOConfig+0xcc>)
 8014db6:	f7fc fc47 	bl	8011648 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8014dba:	4b1d      	ldr	r3, [pc, #116]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014dbc:	691b      	ldr	r3, [r3, #16]
 8014dbe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8014dc2:	68b9      	ldr	r1, [r7, #8]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	430b      	orrs	r3, r1
 8014dc8:	4919      	ldr	r1, [pc, #100]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014dca:	4313      	orrs	r3, r2
 8014dcc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8014dce:	e02a      	b.n	8014e26 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8014dd0:	4b17      	ldr	r3, [pc, #92]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dd6:	4a16      	ldr	r2, [pc, #88]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014dd8:	f043 0304 	orr.w	r3, r3, #4
 8014ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014de0:	4b13      	ldr	r3, [pc, #76]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014de6:	f003 0304 	and.w	r3, r3, #4
 8014dea:	617b      	str	r3, [r7, #20]
 8014dec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8014dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014df4:	2302      	movs	r3, #2
 8014df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014df8:	2303      	movs	r3, #3
 8014dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014e00:	2300      	movs	r3, #0
 8014e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8014e04:	f107 031c 	add.w	r3, r7, #28
 8014e08:	4619      	mov	r1, r3
 8014e0a:	480b      	ldr	r0, [pc, #44]	; (8014e38 <HAL_RCC_MCOConfig+0xd0>)
 8014e0c:	f7fc fc1c 	bl	8011648 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8014e10:	4b07      	ldr	r3, [pc, #28]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	01d9      	lsls	r1, r3, #7
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	430b      	orrs	r3, r1
 8014e20:	4903      	ldr	r1, [pc, #12]	; (8014e30 <HAL_RCC_MCOConfig+0xc8>)
 8014e22:	4313      	orrs	r3, r2
 8014e24:	610b      	str	r3, [r1, #16]
}
 8014e26:	bf00      	nop
 8014e28:	3730      	adds	r7, #48	; 0x30
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	58024400 	.word	0x58024400
 8014e34:	58020000 	.word	0x58020000
 8014e38:	58020800 	.word	0x58020800

08014e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b089      	sub	sp, #36	; 0x24
 8014e40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014e42:	4bb3      	ldr	r3, [pc, #716]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014e44:	691b      	ldr	r3, [r3, #16]
 8014e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014e4a:	2b18      	cmp	r3, #24
 8014e4c:	f200 8155 	bhi.w	80150fa <HAL_RCC_GetSysClockFreq+0x2be>
 8014e50:	a201      	add	r2, pc, #4	; (adr r2, 8014e58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8014e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e56:	bf00      	nop
 8014e58:	08014ebd 	.word	0x08014ebd
 8014e5c:	080150fb 	.word	0x080150fb
 8014e60:	080150fb 	.word	0x080150fb
 8014e64:	080150fb 	.word	0x080150fb
 8014e68:	080150fb 	.word	0x080150fb
 8014e6c:	080150fb 	.word	0x080150fb
 8014e70:	080150fb 	.word	0x080150fb
 8014e74:	080150fb 	.word	0x080150fb
 8014e78:	08014ee3 	.word	0x08014ee3
 8014e7c:	080150fb 	.word	0x080150fb
 8014e80:	080150fb 	.word	0x080150fb
 8014e84:	080150fb 	.word	0x080150fb
 8014e88:	080150fb 	.word	0x080150fb
 8014e8c:	080150fb 	.word	0x080150fb
 8014e90:	080150fb 	.word	0x080150fb
 8014e94:	080150fb 	.word	0x080150fb
 8014e98:	08014ee9 	.word	0x08014ee9
 8014e9c:	080150fb 	.word	0x080150fb
 8014ea0:	080150fb 	.word	0x080150fb
 8014ea4:	080150fb 	.word	0x080150fb
 8014ea8:	080150fb 	.word	0x080150fb
 8014eac:	080150fb 	.word	0x080150fb
 8014eb0:	080150fb 	.word	0x080150fb
 8014eb4:	080150fb 	.word	0x080150fb
 8014eb8:	08014eef 	.word	0x08014eef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014ebc:	4b94      	ldr	r3, [pc, #592]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f003 0320 	and.w	r3, r3, #32
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d009      	beq.n	8014edc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8014ec8:	4b91      	ldr	r3, [pc, #580]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	08db      	lsrs	r3, r3, #3
 8014ece:	f003 0303 	and.w	r3, r3, #3
 8014ed2:	4a90      	ldr	r2, [pc, #576]	; (8015114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8014ed8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8014eda:	e111      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014edc:	4b8d      	ldr	r3, [pc, #564]	; (8015114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014ede:	61bb      	str	r3, [r7, #24]
    break;
 8014ee0:	e10e      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8014ee2:	4b8d      	ldr	r3, [pc, #564]	; (8015118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014ee4:	61bb      	str	r3, [r7, #24]
    break;
 8014ee6:	e10b      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8014ee8:	4b8c      	ldr	r3, [pc, #560]	; (801511c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8014eea:	61bb      	str	r3, [r7, #24]
    break;
 8014eec:	e108      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014eee:	4b88      	ldr	r3, [pc, #544]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ef2:	f003 0303 	and.w	r3, r3, #3
 8014ef6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8014ef8:	4b85      	ldr	r3, [pc, #532]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014efc:	091b      	lsrs	r3, r3, #4
 8014efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014f04:	4b82      	ldr	r3, [pc, #520]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f08:	f003 0301 	and.w	r3, r3, #1
 8014f0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8014f0e:	4b80      	ldr	r3, [pc, #512]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f12:	08db      	lsrs	r3, r3, #3
 8014f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	fb02 f303 	mul.w	r3, r2, r3
 8014f1e:	ee07 3a90 	vmov	s15, r3
 8014f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f000 80e1 	beq.w	80150f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	2b02      	cmp	r3, #2
 8014f36:	f000 8083 	beq.w	8015040 <HAL_RCC_GetSysClockFreq+0x204>
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	f200 80a1 	bhi.w	8015084 <HAL_RCC_GetSysClockFreq+0x248>
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d003      	beq.n	8014f50 <HAL_RCC_GetSysClockFreq+0x114>
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d056      	beq.n	8014ffc <HAL_RCC_GetSysClockFreq+0x1c0>
 8014f4e:	e099      	b.n	8015084 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f50:	4b6f      	ldr	r3, [pc, #444]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f003 0320 	and.w	r3, r3, #32
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d02d      	beq.n	8014fb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8014f5c:	4b6c      	ldr	r3, [pc, #432]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	08db      	lsrs	r3, r3, #3
 8014f62:	f003 0303 	and.w	r3, r3, #3
 8014f66:	4a6b      	ldr	r2, [pc, #428]	; (8015114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014f68:	fa22 f303 	lsr.w	r3, r2, r3
 8014f6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	ee07 3a90 	vmov	s15, r3
 8014f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	ee07 3a90 	vmov	s15, r3
 8014f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f86:	4b62      	ldr	r3, [pc, #392]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f8e:	ee07 3a90 	vmov	s15, r3
 8014f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8014f9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8015120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8014fb6:	e087      	b.n	80150c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	ee07 3a90 	vmov	s15, r3
 8014fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015124 <HAL_RCC_GetSysClockFreq+0x2e8>
 8014fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014fca:	4b51      	ldr	r3, [pc, #324]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014fd2:	ee07 3a90 	vmov	s15, r3
 8014fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8014fde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8015120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8014fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014ffa:	e065      	b.n	80150c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	ee07 3a90 	vmov	s15, r3
 8015002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015006:	eddf 6a48 	vldr	s13, [pc, #288]	; 8015128 <HAL_RCC_GetSysClockFreq+0x2ec>
 801500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801500e:	4b40      	ldr	r3, [pc, #256]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015016:	ee07 3a90 	vmov	s15, r3
 801501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801501e:	ed97 6a02 	vldr	s12, [r7, #8]
 8015022:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8015120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015036:	ee67 7a27 	vmul.f32	s15, s14, s15
 801503a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801503e:	e043      	b.n	80150c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015040:	693b      	ldr	r3, [r7, #16]
 8015042:	ee07 3a90 	vmov	s15, r3
 8015046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801504a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801512c <HAL_RCC_GetSysClockFreq+0x2f0>
 801504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015052:	4b2f      	ldr	r3, [pc, #188]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801505a:	ee07 3a90 	vmov	s15, r3
 801505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015062:	ed97 6a02 	vldr	s12, [r7, #8]
 8015066:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8015120 <HAL_RCC_GetSysClockFreq+0x2e4>
 801506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801507e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015082:	e021      	b.n	80150c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	ee07 3a90 	vmov	s15, r3
 801508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801508e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8015128 <HAL_RCC_GetSysClockFreq+0x2ec>
 8015092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015096:	4b1e      	ldr	r3, [pc, #120]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801509e:	ee07 3a90 	vmov	s15, r3
 80150a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80150a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80150aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8015120 <HAL_RCC_GetSysClockFreq+0x2e4>
 80150ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80150b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80150b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80150c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80150c8:	4b11      	ldr	r3, [pc, #68]	; (8015110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80150ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150cc:	0a5b      	lsrs	r3, r3, #9
 80150ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150d2:	3301      	adds	r3, #1
 80150d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	ee07 3a90 	vmov	s15, r3
 80150dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80150e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80150e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80150ec:	ee17 3a90 	vmov	r3, s15
 80150f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80150f2:	e005      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80150f4:	2300      	movs	r3, #0
 80150f6:	61bb      	str	r3, [r7, #24]
    break;
 80150f8:	e002      	b.n	8015100 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80150fa:	4b07      	ldr	r3, [pc, #28]	; (8015118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80150fc:	61bb      	str	r3, [r7, #24]
    break;
 80150fe:	bf00      	nop
  }

  return sysclockfreq;
 8015100:	69bb      	ldr	r3, [r7, #24]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3724      	adds	r7, #36	; 0x24
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	58024400 	.word	0x58024400
 8015114:	03d09000 	.word	0x03d09000
 8015118:	003d0900 	.word	0x003d0900
 801511c:	017d7840 	.word	0x017d7840
 8015120:	46000000 	.word	0x46000000
 8015124:	4c742400 	.word	0x4c742400
 8015128:	4a742400 	.word	0x4a742400
 801512c:	4bbebc20 	.word	0x4bbebc20

08015130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015136:	f7ff fe81 	bl	8014e3c <HAL_RCC_GetSysClockFreq>
 801513a:	4602      	mov	r2, r0
 801513c:	4b10      	ldr	r3, [pc, #64]	; (8015180 <HAL_RCC_GetHCLKFreq+0x50>)
 801513e:	699b      	ldr	r3, [r3, #24]
 8015140:	0a1b      	lsrs	r3, r3, #8
 8015142:	f003 030f 	and.w	r3, r3, #15
 8015146:	490f      	ldr	r1, [pc, #60]	; (8015184 <HAL_RCC_GetHCLKFreq+0x54>)
 8015148:	5ccb      	ldrb	r3, [r1, r3]
 801514a:	f003 031f 	and.w	r3, r3, #31
 801514e:	fa22 f303 	lsr.w	r3, r2, r3
 8015152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015154:	4b0a      	ldr	r3, [pc, #40]	; (8015180 <HAL_RCC_GetHCLKFreq+0x50>)
 8015156:	699b      	ldr	r3, [r3, #24]
 8015158:	f003 030f 	and.w	r3, r3, #15
 801515c:	4a09      	ldr	r2, [pc, #36]	; (8015184 <HAL_RCC_GetHCLKFreq+0x54>)
 801515e:	5cd3      	ldrb	r3, [r2, r3]
 8015160:	f003 031f 	and.w	r3, r3, #31
 8015164:	687a      	ldr	r2, [r7, #4]
 8015166:	fa22 f303 	lsr.w	r3, r2, r3
 801516a:	4a07      	ldr	r2, [pc, #28]	; (8015188 <HAL_RCC_GetHCLKFreq+0x58>)
 801516c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801516e:	4a07      	ldr	r2, [pc, #28]	; (801518c <HAL_RCC_GetHCLKFreq+0x5c>)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015174:	4b04      	ldr	r3, [pc, #16]	; (8015188 <HAL_RCC_GetHCLKFreq+0x58>)
 8015176:	681b      	ldr	r3, [r3, #0]
}
 8015178:	4618      	mov	r0, r3
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	58024400 	.word	0x58024400
 8015184:	0802d21c 	.word	0x0802d21c
 8015188:	2400001c 	.word	0x2400001c
 801518c:	24000018 	.word	0x24000018

08015190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015194:	f7ff ffcc 	bl	8015130 <HAL_RCC_GetHCLKFreq>
 8015198:	4602      	mov	r2, r0
 801519a:	4b06      	ldr	r3, [pc, #24]	; (80151b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801519c:	69db      	ldr	r3, [r3, #28]
 801519e:	091b      	lsrs	r3, r3, #4
 80151a0:	f003 0307 	and.w	r3, r3, #7
 80151a4:	4904      	ldr	r1, [pc, #16]	; (80151b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80151a6:	5ccb      	ldrb	r3, [r1, r3]
 80151a8:	f003 031f 	and.w	r3, r3, #31
 80151ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	58024400 	.word	0x58024400
 80151b8:	0802d21c 	.word	0x0802d21c

080151bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80151c0:	f7ff ffb6 	bl	8015130 <HAL_RCC_GetHCLKFreq>
 80151c4:	4602      	mov	r2, r0
 80151c6:	4b06      	ldr	r3, [pc, #24]	; (80151e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80151c8:	69db      	ldr	r3, [r3, #28]
 80151ca:	0a1b      	lsrs	r3, r3, #8
 80151cc:	f003 0307 	and.w	r3, r3, #7
 80151d0:	4904      	ldr	r1, [pc, #16]	; (80151e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80151d2:	5ccb      	ldrb	r3, [r1, r3]
 80151d4:	f003 031f 	and.w	r3, r3, #31
 80151d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80151dc:	4618      	mov	r0, r3
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	58024400 	.word	0x58024400
 80151e4:	0802d21c 	.word	0x0802d21c

080151e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80151e8:	b480      	push	{r7}
 80151ea:	b083      	sub	sp, #12
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	223f      	movs	r2, #63	; 0x3f
 80151f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80151f8:	4b1a      	ldr	r3, [pc, #104]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 80151fa:	691b      	ldr	r3, [r3, #16]
 80151fc:	f003 0207 	and.w	r2, r3, #7
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8015204:	4b17      	ldr	r3, [pc, #92]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 8015206:	699b      	ldr	r3, [r3, #24]
 8015208:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8015210:	4b14      	ldr	r3, [pc, #80]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 8015212:	699b      	ldr	r3, [r3, #24]
 8015214:	f003 020f 	and.w	r2, r3, #15
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801521c:	4b11      	ldr	r3, [pc, #68]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 801521e:	699b      	ldr	r3, [r3, #24]
 8015220:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8015228:	4b0e      	ldr	r3, [pc, #56]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 801522a:	69db      	ldr	r3, [r3, #28]
 801522c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8015234:	4b0b      	ldr	r3, [pc, #44]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 8015236:	69db      	ldr	r3, [r3, #28]
 8015238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8015240:	4b08      	ldr	r3, [pc, #32]	; (8015264 <HAL_RCC_GetClockConfig+0x7c>)
 8015242:	6a1b      	ldr	r3, [r3, #32]
 8015244:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801524c:	4b06      	ldr	r3, [pc, #24]	; (8015268 <HAL_RCC_GetClockConfig+0x80>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	f003 020f 	and.w	r2, r3, #15
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	601a      	str	r2, [r3, #0]
}
 8015258:	bf00      	nop
 801525a:	370c      	adds	r7, #12
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	58024400 	.word	0x58024400
 8015268:	52002000 	.word	0x52002000

0801526c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015274:	2300      	movs	r3, #0
 8015276:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015278:	2300      	movs	r3, #0
 801527a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015284:	2b00      	cmp	r3, #0
 8015286:	d03f      	beq.n	8015308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801528c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015290:	d02a      	beq.n	80152e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8015292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015296:	d824      	bhi.n	80152e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015298:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801529c:	d018      	beq.n	80152d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801529e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80152a2:	d81e      	bhi.n	80152e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d003      	beq.n	80152b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80152a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80152ac:	d007      	beq.n	80152be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80152ae:	e018      	b.n	80152e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80152b0:	4ba3      	ldr	r3, [pc, #652]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80152b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152b4:	4aa2      	ldr	r2, [pc, #648]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80152b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80152ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80152bc:	e015      	b.n	80152ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	3304      	adds	r3, #4
 80152c2:	2102      	movs	r1, #2
 80152c4:	4618      	mov	r0, r3
 80152c6:	f000 ff17 	bl	80160f8 <RCCEx_PLL2_Config>
 80152ca:	4603      	mov	r3, r0
 80152cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80152ce:	e00c      	b.n	80152ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	3324      	adds	r3, #36	; 0x24
 80152d4:	2102      	movs	r1, #2
 80152d6:	4618      	mov	r0, r3
 80152d8:	f000 ffc0 	bl	801625c <RCCEx_PLL3_Config>
 80152dc:	4603      	mov	r3, r0
 80152de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80152e0:	e003      	b.n	80152ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80152e2:	2301      	movs	r3, #1
 80152e4:	75fb      	strb	r3, [r7, #23]
      break;
 80152e6:	e000      	b.n	80152ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80152e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80152ea:	7dfb      	ldrb	r3, [r7, #23]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d109      	bne.n	8015304 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80152f0:	4b93      	ldr	r3, [pc, #588]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80152f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80152fc:	4990      	ldr	r1, [pc, #576]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80152fe:	4313      	orrs	r3, r2
 8015300:	650b      	str	r3, [r1, #80]	; 0x50
 8015302:	e001      	b.n	8015308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015304:	7dfb      	ldrb	r3, [r7, #23]
 8015306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015310:	2b00      	cmp	r3, #0
 8015312:	d03d      	beq.n	8015390 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015318:	2b04      	cmp	r3, #4
 801531a:	d826      	bhi.n	801536a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801531c:	a201      	add	r2, pc, #4	; (adr r2, 8015324 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 801531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015322:	bf00      	nop
 8015324:	08015339 	.word	0x08015339
 8015328:	08015347 	.word	0x08015347
 801532c:	08015359 	.word	0x08015359
 8015330:	08015371 	.word	0x08015371
 8015334:	08015371 	.word	0x08015371
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015338:	4b81      	ldr	r3, [pc, #516]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801533c:	4a80      	ldr	r2, [pc, #512]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015344:	e015      	b.n	8015372 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	3304      	adds	r3, #4
 801534a:	2100      	movs	r1, #0
 801534c:	4618      	mov	r0, r3
 801534e:	f000 fed3 	bl	80160f8 <RCCEx_PLL2_Config>
 8015352:	4603      	mov	r3, r0
 8015354:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015356:	e00c      	b.n	8015372 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	3324      	adds	r3, #36	; 0x24
 801535c:	2100      	movs	r1, #0
 801535e:	4618      	mov	r0, r3
 8015360:	f000 ff7c 	bl	801625c <RCCEx_PLL3_Config>
 8015364:	4603      	mov	r3, r0
 8015366:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015368:	e003      	b.n	8015372 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801536a:	2301      	movs	r3, #1
 801536c:	75fb      	strb	r3, [r7, #23]
      break;
 801536e:	e000      	b.n	8015372 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8015370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015372:	7dfb      	ldrb	r3, [r7, #23]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d109      	bne.n	801538c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015378:	4b71      	ldr	r3, [pc, #452]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801537c:	f023 0207 	bic.w	r2, r3, #7
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015384:	496e      	ldr	r1, [pc, #440]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015386:	4313      	orrs	r3, r2
 8015388:	650b      	str	r3, [r1, #80]	; 0x50
 801538a:	e001      	b.n	8015390 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801538c:	7dfb      	ldrb	r3, [r7, #23]
 801538e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015398:	2b00      	cmp	r3, #0
 801539a:	d042      	beq.n	8015422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153a4:	d02b      	beq.n	80153fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80153a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153aa:	d825      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80153ac:	2bc0      	cmp	r3, #192	; 0xc0
 80153ae:	d028      	beq.n	8015402 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80153b0:	2bc0      	cmp	r3, #192	; 0xc0
 80153b2:	d821      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80153b4:	2b80      	cmp	r3, #128	; 0x80
 80153b6:	d016      	beq.n	80153e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80153b8:	2b80      	cmp	r3, #128	; 0x80
 80153ba:	d81d      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d002      	beq.n	80153c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80153c0:	2b40      	cmp	r3, #64	; 0x40
 80153c2:	d007      	beq.n	80153d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80153c4:	e018      	b.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80153c6:	4b5e      	ldr	r3, [pc, #376]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80153c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153ca:	4a5d      	ldr	r2, [pc, #372]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80153cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80153d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80153d2:	e017      	b.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	3304      	adds	r3, #4
 80153d8:	2100      	movs	r1, #0
 80153da:	4618      	mov	r0, r3
 80153dc:	f000 fe8c 	bl	80160f8 <RCCEx_PLL2_Config>
 80153e0:	4603      	mov	r3, r0
 80153e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80153e4:	e00e      	b.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	3324      	adds	r3, #36	; 0x24
 80153ea:	2100      	movs	r1, #0
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 ff35 	bl	801625c <RCCEx_PLL3_Config>
 80153f2:	4603      	mov	r3, r0
 80153f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80153f6:	e005      	b.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80153f8:	2301      	movs	r3, #1
 80153fa:	75fb      	strb	r3, [r7, #23]
      break;
 80153fc:	e002      	b.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80153fe:	bf00      	nop
 8015400:	e000      	b.n	8015404 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8015402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015404:	7dfb      	ldrb	r3, [r7, #23]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d109      	bne.n	801541e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801540a:	4b4d      	ldr	r3, [pc, #308]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801540e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015416:	494a      	ldr	r1, [pc, #296]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015418:	4313      	orrs	r3, r2
 801541a:	650b      	str	r3, [r1, #80]	; 0x50
 801541c:	e001      	b.n	8015422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801541e:	7dfb      	ldrb	r3, [r7, #23]
 8015420:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801542a:	2b00      	cmp	r3, #0
 801542c:	d049      	beq.n	80154c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015438:	d030      	beq.n	801549c <HAL_RCCEx_PeriphCLKConfig+0x230>
 801543a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801543e:	d82a      	bhi.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8015440:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015444:	d02c      	beq.n	80154a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8015446:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801544a:	d824      	bhi.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 801544c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015450:	d018      	beq.n	8015484 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8015452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015456:	d81e      	bhi.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8015458:	2b00      	cmp	r3, #0
 801545a:	d003      	beq.n	8015464 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 801545c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015460:	d007      	beq.n	8015472 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8015462:	e018      	b.n	8015496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015464:	4b36      	ldr	r3, [pc, #216]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015468:	4a35      	ldr	r2, [pc, #212]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801546a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801546e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015470:	e017      	b.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	3304      	adds	r3, #4
 8015476:	2100      	movs	r1, #0
 8015478:	4618      	mov	r0, r3
 801547a:	f000 fe3d 	bl	80160f8 <RCCEx_PLL2_Config>
 801547e:	4603      	mov	r3, r0
 8015480:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015482:	e00e      	b.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	3324      	adds	r3, #36	; 0x24
 8015488:	2100      	movs	r1, #0
 801548a:	4618      	mov	r0, r3
 801548c:	f000 fee6 	bl	801625c <RCCEx_PLL3_Config>
 8015490:	4603      	mov	r3, r0
 8015492:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015494:	e005      	b.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8015496:	2301      	movs	r3, #1
 8015498:	75fb      	strb	r3, [r7, #23]
      break;
 801549a:	e002      	b.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801549c:	bf00      	nop
 801549e:	e000      	b.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80154a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80154a2:	7dfb      	ldrb	r3, [r7, #23]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10a      	bne.n	80154be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80154a8:	4b25      	ldr	r3, [pc, #148]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80154aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80154ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80154b6:	4922      	ldr	r1, [pc, #136]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80154b8:	4313      	orrs	r3, r2
 80154ba:	658b      	str	r3, [r1, #88]	; 0x58
 80154bc:	e001      	b.n	80154c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154be:	7dfb      	ldrb	r3, [r7, #23]
 80154c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d04b      	beq.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80154d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80154d8:	d030      	beq.n	801553c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80154da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80154de:	d82a      	bhi.n	8015536 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80154e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80154e4:	d02e      	beq.n	8015544 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80154e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80154ea:	d824      	bhi.n	8015536 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80154ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80154f0:	d018      	beq.n	8015524 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80154f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80154f6:	d81e      	bhi.n	8015536 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d003      	beq.n	8015504 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80154fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015500:	d007      	beq.n	8015512 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8015502:	e018      	b.n	8015536 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015504:	4b0e      	ldr	r3, [pc, #56]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015508:	4a0d      	ldr	r2, [pc, #52]	; (8015540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801550a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801550e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015510:	e019      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	3304      	adds	r3, #4
 8015516:	2100      	movs	r1, #0
 8015518:	4618      	mov	r0, r3
 801551a:	f000 fded 	bl	80160f8 <RCCEx_PLL2_Config>
 801551e:	4603      	mov	r3, r0
 8015520:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015522:	e010      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	3324      	adds	r3, #36	; 0x24
 8015528:	2100      	movs	r1, #0
 801552a:	4618      	mov	r0, r3
 801552c:	f000 fe96 	bl	801625c <RCCEx_PLL3_Config>
 8015530:	4603      	mov	r3, r0
 8015532:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015534:	e007      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8015536:	2301      	movs	r3, #1
 8015538:	75fb      	strb	r3, [r7, #23]
      break;
 801553a:	e004      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 801553c:	bf00      	nop
 801553e:	e002      	b.n	8015546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8015540:	58024400 	.word	0x58024400
      break;
 8015544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015546:	7dfb      	ldrb	r3, [r7, #23]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d10a      	bne.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801554c:	4b99      	ldr	r3, [pc, #612]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015550:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801555a:	4996      	ldr	r1, [pc, #600]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801555c:	4313      	orrs	r3, r2
 801555e:	658b      	str	r3, [r1, #88]	; 0x58
 8015560:	e001      	b.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801556e:	2b00      	cmp	r3, #0
 8015570:	d032      	beq.n	80155d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015576:	2b30      	cmp	r3, #48	; 0x30
 8015578:	d01c      	beq.n	80155b4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 801557a:	2b30      	cmp	r3, #48	; 0x30
 801557c:	d817      	bhi.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 801557e:	2b20      	cmp	r3, #32
 8015580:	d00c      	beq.n	801559c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8015582:	2b20      	cmp	r3, #32
 8015584:	d813      	bhi.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8015586:	2b00      	cmp	r3, #0
 8015588:	d016      	beq.n	80155b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801558a:	2b10      	cmp	r3, #16
 801558c:	d10f      	bne.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801558e:	4b89      	ldr	r3, [pc, #548]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015592:	4a88      	ldr	r2, [pc, #544]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801559a:	e00e      	b.n	80155ba <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	3304      	adds	r3, #4
 80155a0:	2102      	movs	r1, #2
 80155a2:	4618      	mov	r0, r3
 80155a4:	f000 fda8 	bl	80160f8 <RCCEx_PLL2_Config>
 80155a8:	4603      	mov	r3, r0
 80155aa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80155ac:	e005      	b.n	80155ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80155ae:	2301      	movs	r3, #1
 80155b0:	75fb      	strb	r3, [r7, #23]
      break;
 80155b2:	e002      	b.n	80155ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80155b4:	bf00      	nop
 80155b6:	e000      	b.n	80155ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80155b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80155ba:	7dfb      	ldrb	r3, [r7, #23]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d109      	bne.n	80155d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80155c0:	4b7c      	ldr	r3, [pc, #496]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80155c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155cc:	4979      	ldr	r1, [pc, #484]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80155ce:	4313      	orrs	r3, r2
 80155d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80155d2:	e001      	b.n	80155d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155d4:	7dfb      	ldrb	r3, [r7, #23]
 80155d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d047      	beq.n	8015674 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80155ec:	d030      	beq.n	8015650 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80155ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80155f2:	d82a      	bhi.n	801564a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80155f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80155f8:	d02c      	beq.n	8015654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80155fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80155fe:	d824      	bhi.n	801564a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8015600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015604:	d018      	beq.n	8015638 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8015606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801560a:	d81e      	bhi.n	801564a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801560c:	2b00      	cmp	r3, #0
 801560e:	d003      	beq.n	8015618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8015610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015614:	d007      	beq.n	8015626 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8015616:	e018      	b.n	801564a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015618:	4b66      	ldr	r3, [pc, #408]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801561c:	4a65      	ldr	r2, [pc, #404]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801561e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015624:	e017      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	3304      	adds	r3, #4
 801562a:	2100      	movs	r1, #0
 801562c:	4618      	mov	r0, r3
 801562e:	f000 fd63 	bl	80160f8 <RCCEx_PLL2_Config>
 8015632:	4603      	mov	r3, r0
 8015634:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015636:	e00e      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3324      	adds	r3, #36	; 0x24
 801563c:	2100      	movs	r1, #0
 801563e:	4618      	mov	r0, r3
 8015640:	f000 fe0c 	bl	801625c <RCCEx_PLL3_Config>
 8015644:	4603      	mov	r3, r0
 8015646:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015648:	e005      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801564a:	2301      	movs	r3, #1
 801564c:	75fb      	strb	r3, [r7, #23]
      break;
 801564e:	e002      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8015650:	bf00      	nop
 8015652:	e000      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8015654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015656:	7dfb      	ldrb	r3, [r7, #23]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d109      	bne.n	8015670 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801565c:	4b55      	ldr	r3, [pc, #340]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801565e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015660:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015668:	4952      	ldr	r1, [pc, #328]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801566a:	4313      	orrs	r3, r2
 801566c:	650b      	str	r3, [r1, #80]	; 0x50
 801566e:	e001      	b.n	8015674 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015670:	7dfb      	ldrb	r3, [r7, #23]
 8015672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801567c:	2b00      	cmp	r3, #0
 801567e:	d049      	beq.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015688:	d02e      	beq.n	80156e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 801568a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801568e:	d828      	bhi.n	80156e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8015690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015694:	d02a      	beq.n	80156ec <HAL_RCCEx_PeriphCLKConfig+0x480>
 8015696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801569a:	d822      	bhi.n	80156e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801569c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80156a0:	d026      	beq.n	80156f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80156a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80156a6:	d81c      	bhi.n	80156e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80156a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80156ac:	d010      	beq.n	80156d0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80156ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80156b2:	d816      	bhi.n	80156e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d01d      	beq.n	80156f4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80156b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156bc:	d111      	bne.n	80156e2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	3304      	adds	r3, #4
 80156c2:	2101      	movs	r1, #1
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 fd17 	bl	80160f8 <RCCEx_PLL2_Config>
 80156ca:	4603      	mov	r3, r0
 80156cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80156ce:	e012      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3324      	adds	r3, #36	; 0x24
 80156d4:	2101      	movs	r1, #1
 80156d6:	4618      	mov	r0, r3
 80156d8:	f000 fdc0 	bl	801625c <RCCEx_PLL3_Config>
 80156dc:	4603      	mov	r3, r0
 80156de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80156e0:	e009      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80156e2:	2301      	movs	r3, #1
 80156e4:	75fb      	strb	r3, [r7, #23]
      break;
 80156e6:	e006      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80156e8:	bf00      	nop
 80156ea:	e004      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80156ec:	bf00      	nop
 80156ee:	e002      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80156f0:	bf00      	nop
 80156f2:	e000      	b.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80156f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80156f6:	7dfb      	ldrb	r3, [r7, #23]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d109      	bne.n	8015710 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80156fc:	4b2d      	ldr	r3, [pc, #180]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80156fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015700:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015708:	492a      	ldr	r1, [pc, #168]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801570a:	4313      	orrs	r3, r2
 801570c:	650b      	str	r3, [r1, #80]	; 0x50
 801570e:	e001      	b.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015710:	7dfb      	ldrb	r3, [r7, #23]
 8015712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801571c:	2b00      	cmp	r3, #0
 801571e:	d04d      	beq.n	80157bc <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801572a:	d02e      	beq.n	801578a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 801572c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015730:	d828      	bhi.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015736:	d02a      	beq.n	801578e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8015738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801573c:	d822      	bhi.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801573e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015742:	d026      	beq.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8015744:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015748:	d81c      	bhi.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801574a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801574e:	d010      	beq.n	8015772 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8015750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015754:	d816      	bhi.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015756:	2b00      	cmp	r3, #0
 8015758:	d01d      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 801575a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801575e:	d111      	bne.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	3304      	adds	r3, #4
 8015764:	2101      	movs	r1, #1
 8015766:	4618      	mov	r0, r3
 8015768:	f000 fcc6 	bl	80160f8 <RCCEx_PLL2_Config>
 801576c:	4603      	mov	r3, r0
 801576e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015770:	e012      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	3324      	adds	r3, #36	; 0x24
 8015776:	2101      	movs	r1, #1
 8015778:	4618      	mov	r0, r3
 801577a:	f000 fd6f 	bl	801625c <RCCEx_PLL3_Config>
 801577e:	4603      	mov	r3, r0
 8015780:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015782:	e009      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8015784:	2301      	movs	r3, #1
 8015786:	75fb      	strb	r3, [r7, #23]
      break;
 8015788:	e006      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801578a:	bf00      	nop
 801578c:	e004      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801578e:	bf00      	nop
 8015790:	e002      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015792:	bf00      	nop
 8015794:	e000      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015798:	7dfb      	ldrb	r3, [r7, #23]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d10c      	bne.n	80157b8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801579e:	4b05      	ldr	r3, [pc, #20]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80157a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80157ac:	4901      	ldr	r1, [pc, #4]	; (80157b4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80157ae:	4313      	orrs	r3, r2
 80157b0:	658b      	str	r3, [r1, #88]	; 0x58
 80157b2:	e003      	b.n	80157bc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80157b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157b8:	7dfb      	ldrb	r3, [r7, #23]
 80157ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d02f      	beq.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157d0:	d00e      	beq.n	80157f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80157d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157d6:	d814      	bhi.n	8015802 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d015      	beq.n	8015808 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80157dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80157e0:	d10f      	bne.n	8015802 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157e2:	4baf      	ldr	r3, [pc, #700]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80157e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157e6:	4aae      	ldr	r2, [pc, #696]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80157e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80157ee:	e00c      	b.n	801580a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	3304      	adds	r3, #4
 80157f4:	2101      	movs	r1, #1
 80157f6:	4618      	mov	r0, r3
 80157f8:	f000 fc7e 	bl	80160f8 <RCCEx_PLL2_Config>
 80157fc:	4603      	mov	r3, r0
 80157fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015800:	e003      	b.n	801580a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015802:	2301      	movs	r3, #1
 8015804:	75fb      	strb	r3, [r7, #23]
      break;
 8015806:	e000      	b.n	801580a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8015808:	bf00      	nop
    }

    if(ret == HAL_OK)
 801580a:	7dfb      	ldrb	r3, [r7, #23]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d109      	bne.n	8015824 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015810:	4ba3      	ldr	r3, [pc, #652]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015814:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801581c:	49a0      	ldr	r1, [pc, #640]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801581e:	4313      	orrs	r3, r2
 8015820:	650b      	str	r3, [r1, #80]	; 0x50
 8015822:	e001      	b.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015824:	7dfb      	ldrb	r3, [r7, #23]
 8015826:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015830:	2b00      	cmp	r3, #0
 8015832:	d032      	beq.n	801589a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015838:	2b03      	cmp	r3, #3
 801583a:	d81b      	bhi.n	8015874 <HAL_RCCEx_PeriphCLKConfig+0x608>
 801583c:	a201      	add	r2, pc, #4	; (adr r2, 8015844 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 801583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015842:	bf00      	nop
 8015844:	0801587b 	.word	0x0801587b
 8015848:	08015855 	.word	0x08015855
 801584c:	08015863 	.word	0x08015863
 8015850:	0801587b 	.word	0x0801587b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015854:	4b92      	ldr	r3, [pc, #584]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015858:	4a91      	ldr	r2, [pc, #580]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801585a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801585e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015860:	e00c      	b.n	801587c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	3304      	adds	r3, #4
 8015866:	2102      	movs	r1, #2
 8015868:	4618      	mov	r0, r3
 801586a:	f000 fc45 	bl	80160f8 <RCCEx_PLL2_Config>
 801586e:	4603      	mov	r3, r0
 8015870:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015872:	e003      	b.n	801587c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015874:	2301      	movs	r3, #1
 8015876:	75fb      	strb	r3, [r7, #23]
      break;
 8015878:	e000      	b.n	801587c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 801587a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801587c:	7dfb      	ldrb	r3, [r7, #23]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d109      	bne.n	8015896 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015882:	4b87      	ldr	r3, [pc, #540]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015886:	f023 0203 	bic.w	r2, r3, #3
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801588e:	4984      	ldr	r1, [pc, #528]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015890:	4313      	orrs	r3, r2
 8015892:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015894:	e001      	b.n	801589a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015896:	7dfb      	ldrb	r3, [r7, #23]
 8015898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f000 8086 	beq.w	80159b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80158a8:	4b7e      	ldr	r3, [pc, #504]	; (8015aa4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	4a7d      	ldr	r2, [pc, #500]	; (8015aa4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80158ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80158b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80158b4:	f7fb fac4 	bl	8010e40 <HAL_GetTick>
 80158b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80158ba:	e009      	b.n	80158d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80158bc:	f7fb fac0 	bl	8010e40 <HAL_GetTick>
 80158c0:	4602      	mov	r2, r0
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	1ad3      	subs	r3, r2, r3
 80158c6:	2b64      	cmp	r3, #100	; 0x64
 80158c8:	d902      	bls.n	80158d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80158ca:	2303      	movs	r3, #3
 80158cc:	75fb      	strb	r3, [r7, #23]
        break;
 80158ce:	e005      	b.n	80158dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80158d0:	4b74      	ldr	r3, [pc, #464]	; (8015aa4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d0ef      	beq.n	80158bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80158dc:	7dfb      	ldrb	r3, [r7, #23]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d166      	bne.n	80159b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80158e2:	4b6f      	ldr	r3, [pc, #444]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80158e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80158ec:	4053      	eors	r3, r2
 80158ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d013      	beq.n	801591e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80158f6:	4b6a      	ldr	r3, [pc, #424]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80158f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80158fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015900:	4b67      	ldr	r3, [pc, #412]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015904:	4a66      	ldr	r2, [pc, #408]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801590a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801590c:	4b64      	ldr	r3, [pc, #400]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015910:	4a63      	ldr	r2, [pc, #396]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015916:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015918:	4a61      	ldr	r2, [pc, #388]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015928:	d115      	bne.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801592a:	f7fb fa89 	bl	8010e40 <HAL_GetTick>
 801592e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015930:	e00b      	b.n	801594a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015932:	f7fb fa85 	bl	8010e40 <HAL_GetTick>
 8015936:	4602      	mov	r2, r0
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	1ad3      	subs	r3, r2, r3
 801593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015940:	4293      	cmp	r3, r2
 8015942:	d902      	bls.n	801594a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8015944:	2303      	movs	r3, #3
 8015946:	75fb      	strb	r3, [r7, #23]
            break;
 8015948:	e005      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801594a:	4b55      	ldr	r3, [pc, #340]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801594e:	f003 0302 	and.w	r3, r3, #2
 8015952:	2b00      	cmp	r3, #0
 8015954:	d0ed      	beq.n	8015932 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8015956:	7dfb      	ldrb	r3, [r7, #23]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d126      	bne.n	80159aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801596a:	d10d      	bne.n	8015988 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 801596c:	4b4c      	ldr	r3, [pc, #304]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801596e:	691b      	ldr	r3, [r3, #16]
 8015970:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801597a:	0919      	lsrs	r1, r3, #4
 801597c:	4b4a      	ldr	r3, [pc, #296]	; (8015aa8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 801597e:	400b      	ands	r3, r1
 8015980:	4947      	ldr	r1, [pc, #284]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015982:	4313      	orrs	r3, r2
 8015984:	610b      	str	r3, [r1, #16]
 8015986:	e005      	b.n	8015994 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8015988:	4b45      	ldr	r3, [pc, #276]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801598a:	691b      	ldr	r3, [r3, #16]
 801598c:	4a44      	ldr	r2, [pc, #272]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801598e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015992:	6113      	str	r3, [r2, #16]
 8015994:	4b42      	ldr	r3, [pc, #264]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801599e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80159a2:	493f      	ldr	r1, [pc, #252]	; (8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80159a4:	4313      	orrs	r3, r2
 80159a6:	670b      	str	r3, [r1, #112]	; 0x70
 80159a8:	e004      	b.n	80159b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80159aa:	7dfb      	ldrb	r3, [r7, #23]
 80159ac:	75bb      	strb	r3, [r7, #22]
 80159ae:	e001      	b.n	80159b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159b0:	7dfb      	ldrb	r3, [r7, #23]
 80159b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f003 0301 	and.w	r3, r3, #1
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f000 8085 	beq.w	8015acc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c6:	2b28      	cmp	r3, #40	; 0x28
 80159c8:	d866      	bhi.n	8015a98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80159ca:	a201      	add	r2, pc, #4	; (adr r2, 80159d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80159cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159d0:	08015aad 	.word	0x08015aad
 80159d4:	08015a99 	.word	0x08015a99
 80159d8:	08015a99 	.word	0x08015a99
 80159dc:	08015a99 	.word	0x08015a99
 80159e0:	08015a99 	.word	0x08015a99
 80159e4:	08015a99 	.word	0x08015a99
 80159e8:	08015a99 	.word	0x08015a99
 80159ec:	08015a99 	.word	0x08015a99
 80159f0:	08015a75 	.word	0x08015a75
 80159f4:	08015a99 	.word	0x08015a99
 80159f8:	08015a99 	.word	0x08015a99
 80159fc:	08015a99 	.word	0x08015a99
 8015a00:	08015a99 	.word	0x08015a99
 8015a04:	08015a99 	.word	0x08015a99
 8015a08:	08015a99 	.word	0x08015a99
 8015a0c:	08015a99 	.word	0x08015a99
 8015a10:	08015a87 	.word	0x08015a87
 8015a14:	08015a99 	.word	0x08015a99
 8015a18:	08015a99 	.word	0x08015a99
 8015a1c:	08015a99 	.word	0x08015a99
 8015a20:	08015a99 	.word	0x08015a99
 8015a24:	08015a99 	.word	0x08015a99
 8015a28:	08015a99 	.word	0x08015a99
 8015a2c:	08015a99 	.word	0x08015a99
 8015a30:	08015aad 	.word	0x08015aad
 8015a34:	08015a99 	.word	0x08015a99
 8015a38:	08015a99 	.word	0x08015a99
 8015a3c:	08015a99 	.word	0x08015a99
 8015a40:	08015a99 	.word	0x08015a99
 8015a44:	08015a99 	.word	0x08015a99
 8015a48:	08015a99 	.word	0x08015a99
 8015a4c:	08015a99 	.word	0x08015a99
 8015a50:	08015aad 	.word	0x08015aad
 8015a54:	08015a99 	.word	0x08015a99
 8015a58:	08015a99 	.word	0x08015a99
 8015a5c:	08015a99 	.word	0x08015a99
 8015a60:	08015a99 	.word	0x08015a99
 8015a64:	08015a99 	.word	0x08015a99
 8015a68:	08015a99 	.word	0x08015a99
 8015a6c:	08015a99 	.word	0x08015a99
 8015a70:	08015aad 	.word	0x08015aad
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3304      	adds	r3, #4
 8015a78:	2101      	movs	r1, #1
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 fb3c 	bl	80160f8 <RCCEx_PLL2_Config>
 8015a80:	4603      	mov	r3, r0
 8015a82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015a84:	e013      	b.n	8015aae <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	3324      	adds	r3, #36	; 0x24
 8015a8a:	2101      	movs	r1, #1
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f000 fbe5 	bl	801625c <RCCEx_PLL3_Config>
 8015a92:	4603      	mov	r3, r0
 8015a94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015a96:	e00a      	b.n	8015aae <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8015a9c:	e007      	b.n	8015aae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8015a9e:	bf00      	nop
 8015aa0:	58024400 	.word	0x58024400
 8015aa4:	58024800 	.word	0x58024800
 8015aa8:	00ffffcf 	.word	0x00ffffcf
      break;
 8015aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015aae:	7dfb      	ldrb	r3, [r7, #23]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d109      	bne.n	8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015ab4:	4b96      	ldr	r3, [pc, #600]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ab8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ac0:	4993      	ldr	r1, [pc, #588]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015ac2:	4313      	orrs	r3, r2
 8015ac4:	654b      	str	r3, [r1, #84]	; 0x54
 8015ac6:	e001      	b.n	8015acc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ac8:	7dfb      	ldrb	r3, [r7, #23]
 8015aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	f003 0302 	and.w	r3, r3, #2
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d038      	beq.n	8015b4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015adc:	2b05      	cmp	r3, #5
 8015ade:	d821      	bhi.n	8015b24 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8015ae0:	a201      	add	r2, pc, #4	; (adr r2, 8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8015ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ae6:	bf00      	nop
 8015ae8:	08015b2b 	.word	0x08015b2b
 8015aec:	08015b01 	.word	0x08015b01
 8015af0:	08015b13 	.word	0x08015b13
 8015af4:	08015b2b 	.word	0x08015b2b
 8015af8:	08015b2b 	.word	0x08015b2b
 8015afc:	08015b2b 	.word	0x08015b2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	3304      	adds	r3, #4
 8015b04:	2101      	movs	r1, #1
 8015b06:	4618      	mov	r0, r3
 8015b08:	f000 faf6 	bl	80160f8 <RCCEx_PLL2_Config>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015b10:	e00c      	b.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	3324      	adds	r3, #36	; 0x24
 8015b16:	2101      	movs	r1, #1
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f000 fb9f 	bl	801625c <RCCEx_PLL3_Config>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015b22:	e003      	b.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b24:	2301      	movs	r3, #1
 8015b26:	75fb      	strb	r3, [r7, #23]
      break;
 8015b28:	e000      	b.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8015b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b2c:	7dfb      	ldrb	r3, [r7, #23]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d109      	bne.n	8015b46 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015b32:	4b77      	ldr	r3, [pc, #476]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b36:	f023 0207 	bic.w	r2, r3, #7
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b3e:	4974      	ldr	r1, [pc, #464]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015b40:	4313      	orrs	r3, r2
 8015b42:	654b      	str	r3, [r1, #84]	; 0x54
 8015b44:	e001      	b.n	8015b4a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b46:	7dfb      	ldrb	r3, [r7, #23]
 8015b48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	f003 0304 	and.w	r3, r3, #4
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d03a      	beq.n	8015bcc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b5c:	2b05      	cmp	r3, #5
 8015b5e:	d821      	bhi.n	8015ba4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8015b60:	a201      	add	r2, pc, #4	; (adr r2, 8015b68 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8015b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b66:	bf00      	nop
 8015b68:	08015bab 	.word	0x08015bab
 8015b6c:	08015b81 	.word	0x08015b81
 8015b70:	08015b93 	.word	0x08015b93
 8015b74:	08015bab 	.word	0x08015bab
 8015b78:	08015bab 	.word	0x08015bab
 8015b7c:	08015bab 	.word	0x08015bab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	3304      	adds	r3, #4
 8015b84:	2101      	movs	r1, #1
 8015b86:	4618      	mov	r0, r3
 8015b88:	f000 fab6 	bl	80160f8 <RCCEx_PLL2_Config>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8015b90:	e00c      	b.n	8015bac <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	3324      	adds	r3, #36	; 0x24
 8015b96:	2101      	movs	r1, #1
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f000 fb5f 	bl	801625c <RCCEx_PLL3_Config>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8015ba2:	e003      	b.n	8015bac <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8015ba8:	e000      	b.n	8015bac <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8015baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d10a      	bne.n	8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015bb2:	4b57      	ldr	r3, [pc, #348]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bb6:	f023 0207 	bic.w	r2, r3, #7
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bc0:	4953      	ldr	r1, [pc, #332]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015bc2:	4313      	orrs	r3, r2
 8015bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8015bc6:	e001      	b.n	8015bcc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015bc8:	7dfb      	ldrb	r3, [r7, #23]
 8015bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	f003 0320 	and.w	r3, r3, #32
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d04b      	beq.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015be2:	d02e      	beq.n	8015c42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8015be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015be8:	d828      	bhi.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8015bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bee:	d02a      	beq.n	8015c46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8015bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bf4:	d822      	bhi.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8015bf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015bfa:	d026      	beq.n	8015c4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8015bfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015c00:	d81c      	bhi.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8015c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c06:	d010      	beq.n	8015c2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8015c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c0c:	d816      	bhi.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d01d      	beq.n	8015c4e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8015c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015c16:	d111      	bne.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	3304      	adds	r3, #4
 8015c1c:	2100      	movs	r1, #0
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f000 fa6a 	bl	80160f8 <RCCEx_PLL2_Config>
 8015c24:	4603      	mov	r3, r0
 8015c26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015c28:	e012      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	3324      	adds	r3, #36	; 0x24
 8015c2e:	2102      	movs	r1, #2
 8015c30:	4618      	mov	r0, r3
 8015c32:	f000 fb13 	bl	801625c <RCCEx_PLL3_Config>
 8015c36:	4603      	mov	r3, r0
 8015c38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015c3a:	e009      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8015c40:	e006      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8015c42:	bf00      	nop
 8015c44:	e004      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8015c46:	bf00      	nop
 8015c48:	e002      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8015c4a:	bf00      	nop
 8015c4c:	e000      	b.n	8015c50 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8015c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c50:	7dfb      	ldrb	r3, [r7, #23]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10a      	bne.n	8015c6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015c56:	4b2e      	ldr	r3, [pc, #184]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015c64:	492a      	ldr	r1, [pc, #168]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015c66:	4313      	orrs	r3, r2
 8015c68:	654b      	str	r3, [r1, #84]	; 0x54
 8015c6a:	e001      	b.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c6c:	7dfb      	ldrb	r3, [r7, #23]
 8015c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d04d      	beq.n	8015d18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015c82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015c86:	d02e      	beq.n	8015ce6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8015c88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015c8c:	d828      	bhi.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8015c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c92:	d02a      	beq.n	8015cea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8015c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c98:	d822      	bhi.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8015c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015c9e:	d026      	beq.n	8015cee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8015ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015ca4:	d81c      	bhi.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8015ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015caa:	d010      	beq.n	8015cce <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8015cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015cb0:	d816      	bhi.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d01d      	beq.n	8015cf2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8015cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015cba:	d111      	bne.n	8015ce0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f000 fa18 	bl	80160f8 <RCCEx_PLL2_Config>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8015ccc:	e012      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	3324      	adds	r3, #36	; 0x24
 8015cd2:	2102      	movs	r1, #2
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f000 fac1 	bl	801625c <RCCEx_PLL3_Config>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8015cde:	e009      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8015ce4:	e006      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8015ce6:	bf00      	nop
 8015ce8:	e004      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8015cea:	bf00      	nop
 8015cec:	e002      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8015cee:	bf00      	nop
 8015cf0:	e000      	b.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8015cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015cf4:	7dfb      	ldrb	r3, [r7, #23]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d10c      	bne.n	8015d14 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015cfa:	4b05      	ldr	r3, [pc, #20]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015d08:	4901      	ldr	r1, [pc, #4]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015d0a:	4313      	orrs	r3, r2
 8015d0c:	658b      	str	r3, [r1, #88]	; 0x58
 8015d0e:	e003      	b.n	8015d18 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8015d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d14:	7dfb      	ldrb	r3, [r7, #23]
 8015d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d04b      	beq.n	8015dbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015d2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8015d2e:	d02e      	beq.n	8015d8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8015d30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8015d34:	d828      	bhi.n	8015d88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8015d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015d3a:	d02a      	beq.n	8015d92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8015d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015d40:	d822      	bhi.n	8015d88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8015d42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8015d46:	d026      	beq.n	8015d96 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8015d48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8015d4c:	d81c      	bhi.n	8015d88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8015d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015d52:	d010      	beq.n	8015d76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8015d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015d58:	d816      	bhi.n	8015d88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d01d      	beq.n	8015d9a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8015d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015d62:	d111      	bne.n	8015d88 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	3304      	adds	r3, #4
 8015d68:	2100      	movs	r1, #0
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f000 f9c4 	bl	80160f8 <RCCEx_PLL2_Config>
 8015d70:	4603      	mov	r3, r0
 8015d72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8015d74:	e012      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	3324      	adds	r3, #36	; 0x24
 8015d7a:	2102      	movs	r1, #2
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f000 fa6d 	bl	801625c <RCCEx_PLL3_Config>
 8015d82:	4603      	mov	r3, r0
 8015d84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8015d86:	e009      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015d88:	2301      	movs	r3, #1
 8015d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8015d8c:	e006      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8015d8e:	bf00      	nop
 8015d90:	e004      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8015d92:	bf00      	nop
 8015d94:	e002      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8015d96:	bf00      	nop
 8015d98:	e000      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8015d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015d9c:	7dfb      	ldrb	r3, [r7, #23]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d10a      	bne.n	8015db8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8015da2:	4b9d      	ldr	r3, [pc, #628]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015da6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015db0:	4999      	ldr	r1, [pc, #612]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015db2:	4313      	orrs	r3, r2
 8015db4:	658b      	str	r3, [r1, #88]	; 0x58
 8015db6:	e001      	b.n	8015dbc <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015db8:	7dfb      	ldrb	r3, [r7, #23]
 8015dba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f003 0308 	and.w	r3, r3, #8
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d01a      	beq.n	8015dfe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015dd2:	d10a      	bne.n	8015dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	3324      	adds	r3, #36	; 0x24
 8015dd8:	2102      	movs	r1, #2
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 fa3e 	bl	801625c <RCCEx_PLL3_Config>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d001      	beq.n	8015dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8015de6:	2301      	movs	r3, #1
 8015de8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8015dea:	4b8b      	ldr	r3, [pc, #556]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015dee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015df8:	4987      	ldr	r1, [pc, #540]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015dfa:	4313      	orrs	r3, r2
 8015dfc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	f003 0310 	and.w	r3, r3, #16
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d01a      	beq.n	8015e40 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e14:	d10a      	bne.n	8015e2c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	3324      	adds	r3, #36	; 0x24
 8015e1a:	2102      	movs	r1, #2
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f000 fa1d 	bl	801625c <RCCEx_PLL3_Config>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d001      	beq.n	8015e2c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8015e2c:	4b7a      	ldr	r3, [pc, #488]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015e3a:	4977      	ldr	r1, [pc, #476]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015e3c:	4313      	orrs	r3, r2
 8015e3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d034      	beq.n	8015eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015e56:	d01d      	beq.n	8015e94 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8015e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015e5c:	d817      	bhi.n	8015e8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d003      	beq.n	8015e6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8015e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e66:	d009      	beq.n	8015e7c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8015e68:	e011      	b.n	8015e8e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	3304      	adds	r3, #4
 8015e6e:	2100      	movs	r1, #0
 8015e70:	4618      	mov	r0, r3
 8015e72:	f000 f941 	bl	80160f8 <RCCEx_PLL2_Config>
 8015e76:	4603      	mov	r3, r0
 8015e78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8015e7a:	e00c      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	3324      	adds	r3, #36	; 0x24
 8015e80:	2102      	movs	r1, #2
 8015e82:	4618      	mov	r0, r3
 8015e84:	f000 f9ea 	bl	801625c <RCCEx_PLL3_Config>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8015e8c:	e003      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	75fb      	strb	r3, [r7, #23]
      break;
 8015e92:	e000      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8015e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e96:	7dfb      	ldrb	r3, [r7, #23]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d10a      	bne.n	8015eb2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015e9c:	4b5e      	ldr	r3, [pc, #376]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ea0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015eaa:	495b      	ldr	r1, [pc, #364]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015eac:	4313      	orrs	r3, r2
 8015eae:	658b      	str	r3, [r1, #88]	; 0x58
 8015eb0:	e001      	b.n	8015eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015eb2:	7dfb      	ldrb	r3, [r7, #23]
 8015eb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d033      	beq.n	8015f2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015ecc:	d01c      	beq.n	8015f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8015ece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015ed2:	d816      	bhi.n	8015f02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8015ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ed8:	d003      	beq.n	8015ee2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8015eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015ede:	d007      	beq.n	8015ef0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8015ee0:	e00f      	b.n	8015f02 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ee2:	4b4d      	ldr	r3, [pc, #308]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ee6:	4a4c      	ldr	r2, [pc, #304]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8015eee:	e00c      	b.n	8015f0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	3324      	adds	r3, #36	; 0x24
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f000 f9b0 	bl	801625c <RCCEx_PLL3_Config>
 8015efc:	4603      	mov	r3, r0
 8015efe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8015f00:	e003      	b.n	8015f0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f02:	2301      	movs	r3, #1
 8015f04:	75fb      	strb	r3, [r7, #23]
      break;
 8015f06:	e000      	b.n	8015f0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8015f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f0a:	7dfb      	ldrb	r3, [r7, #23]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d10a      	bne.n	8015f26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015f10:	4b41      	ldr	r3, [pc, #260]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f1e:	493e      	ldr	r1, [pc, #248]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f20:	4313      	orrs	r3, r2
 8015f22:	654b      	str	r3, [r1, #84]	; 0x54
 8015f24:	e001      	b.n	8015f2a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d029      	beq.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d003      	beq.n	8015f46 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8015f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f42:	d007      	beq.n	8015f54 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8015f44:	e00f      	b.n	8015f66 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015f46:	4b34      	ldr	r3, [pc, #208]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f4a:	4a33      	ldr	r2, [pc, #204]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8015f52:	e00b      	b.n	8015f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	3304      	adds	r3, #4
 8015f58:	2102      	movs	r1, #2
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f000 f8cc 	bl	80160f8 <RCCEx_PLL2_Config>
 8015f60:	4603      	mov	r3, r0
 8015f62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8015f64:	e002      	b.n	8015f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8015f66:	2301      	movs	r3, #1
 8015f68:	75fb      	strb	r3, [r7, #23]
      break;
 8015f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f6c:	7dfb      	ldrb	r3, [r7, #23]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d109      	bne.n	8015f86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8015f72:	4b29      	ldr	r3, [pc, #164]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f7e:	4926      	ldr	r1, [pc, #152]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015f80:	4313      	orrs	r3, r2
 8015f82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015f84:	e001      	b.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f86:	7dfb      	ldrb	r3, [r7, #23]
 8015f88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00a      	beq.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	3324      	adds	r3, #36	; 0x24
 8015f9a:	2102      	movs	r1, #2
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f000 f95d 	bl	801625c <RCCEx_PLL3_Config>
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d033      	beq.n	8016020 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015fc0:	d017      	beq.n	8015ff2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8015fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015fc6:	d811      	bhi.n	8015fec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8015fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fcc:	d013      	beq.n	8015ff6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8015fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fd2:	d80b      	bhi.n	8015fec <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d010      	beq.n	8015ffa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8015fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fdc:	d106      	bne.n	8015fec <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015fde:	4b0e      	ldr	r3, [pc, #56]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fe2:	4a0d      	ldr	r2, [pc, #52]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8015fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8015fea:	e007      	b.n	8015ffc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015fec:	2301      	movs	r3, #1
 8015fee:	75fb      	strb	r3, [r7, #23]
      break;
 8015ff0:	e004      	b.n	8015ffc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8015ff2:	bf00      	nop
 8015ff4:	e002      	b.n	8015ffc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8015ff6:	bf00      	nop
 8015ff8:	e000      	b.n	8015ffc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8015ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ffc:	7dfb      	ldrb	r3, [r7, #23]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d10c      	bne.n	801601c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016002:	4b05      	ldr	r3, [pc, #20]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801600e:	4902      	ldr	r1, [pc, #8]	; (8016018 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016010:	4313      	orrs	r3, r2
 8016012:	654b      	str	r3, [r1, #84]	; 0x54
 8016014:	e004      	b.n	8016020 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8016016:	bf00      	nop
 8016018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801601c:	7dfb      	ldrb	r3, [r7, #23]
 801601e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016028:	2b00      	cmp	r3, #0
 801602a:	d008      	beq.n	801603e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801602c:	4b31      	ldr	r3, [pc, #196]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801602e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016038:	492e      	ldr	r1, [pc, #184]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801603a:	4313      	orrs	r3, r2
 801603c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016046:	2b00      	cmp	r3, #0
 8016048:	d009      	beq.n	801605e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801604a:	4b2a      	ldr	r3, [pc, #168]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016058:	4926      	ldr	r1, [pc, #152]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801605a:	4313      	orrs	r3, r2
 801605c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016066:	2b00      	cmp	r3, #0
 8016068:	d008      	beq.n	801607c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801606a:	4b22      	ldr	r3, [pc, #136]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801606e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016076:	491f      	ldr	r1, [pc, #124]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8016078:	4313      	orrs	r3, r2
 801607a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016084:	2b00      	cmp	r3, #0
 8016086:	d00d      	beq.n	80160a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016088:	4b1a      	ldr	r3, [pc, #104]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801608a:	691b      	ldr	r3, [r3, #16]
 801608c:	4a19      	ldr	r2, [pc, #100]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801608e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016092:	6113      	str	r3, [r2, #16]
 8016094:	4b17      	ldr	r3, [pc, #92]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8016096:	691a      	ldr	r2, [r3, #16]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801609e:	4915      	ldr	r1, [pc, #84]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80160a0:	4313      	orrs	r3, r2
 80160a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	da08      	bge.n	80160be <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80160ac:	4b11      	ldr	r3, [pc, #68]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80160ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80160b8:	490e      	ldr	r1, [pc, #56]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80160ba:	4313      	orrs	r3, r2
 80160bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d009      	beq.n	80160de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80160ca:	4b0a      	ldr	r3, [pc, #40]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80160cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80160d8:	4906      	ldr	r1, [pc, #24]	; (80160f4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80160da:	4313      	orrs	r3, r2
 80160dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80160de:	7dbb      	ldrb	r3, [r7, #22]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d101      	bne.n	80160e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80160e4:	2300      	movs	r3, #0
 80160e6:	e000      	b.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80160e8:	2301      	movs	r3, #1
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3718      	adds	r7, #24
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	58024400 	.word	0x58024400

080160f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016102:	2300      	movs	r3, #0
 8016104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016106:	4b53      	ldr	r3, [pc, #332]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801610a:	f003 0303 	and.w	r3, r3, #3
 801610e:	2b03      	cmp	r3, #3
 8016110:	d101      	bne.n	8016116 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016112:	2301      	movs	r3, #1
 8016114:	e099      	b.n	801624a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016116:	4b4f      	ldr	r3, [pc, #316]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4a4e      	ldr	r2, [pc, #312]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016122:	f7fa fe8d 	bl	8010e40 <HAL_GetTick>
 8016126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016128:	e008      	b.n	801613c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801612a:	f7fa fe89 	bl	8010e40 <HAL_GetTick>
 801612e:	4602      	mov	r2, r0
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	2b02      	cmp	r3, #2
 8016136:	d901      	bls.n	801613c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016138:	2303      	movs	r3, #3
 801613a:	e086      	b.n	801624a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801613c:	4b45      	ldr	r3, [pc, #276]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016144:	2b00      	cmp	r3, #0
 8016146:	d1f0      	bne.n	801612a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016148:	4b42      	ldr	r3, [pc, #264]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801614c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	031b      	lsls	r3, r3, #12
 8016156:	493f      	ldr	r1, [pc, #252]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016158:	4313      	orrs	r3, r2
 801615a:	628b      	str	r3, [r1, #40]	; 0x28
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	3b01      	subs	r3, #1
 8016162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	689b      	ldr	r3, [r3, #8]
 801616a:	3b01      	subs	r3, #1
 801616c:	025b      	lsls	r3, r3, #9
 801616e:	b29b      	uxth	r3, r3
 8016170:	431a      	orrs	r2, r3
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	3b01      	subs	r3, #1
 8016178:	041b      	lsls	r3, r3, #16
 801617a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801617e:	431a      	orrs	r2, r3
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	691b      	ldr	r3, [r3, #16]
 8016184:	3b01      	subs	r3, #1
 8016186:	061b      	lsls	r3, r3, #24
 8016188:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801618c:	4931      	ldr	r1, [pc, #196]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801618e:	4313      	orrs	r3, r2
 8016190:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016192:	4b30      	ldr	r3, [pc, #192]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	695b      	ldr	r3, [r3, #20]
 801619e:	492d      	ldr	r1, [pc, #180]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161a0:	4313      	orrs	r3, r2
 80161a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80161a4:	4b2b      	ldr	r3, [pc, #172]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161a8:	f023 0220 	bic.w	r2, r3, #32
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	4928      	ldr	r1, [pc, #160]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161b2:	4313      	orrs	r3, r2
 80161b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80161b6:	4b27      	ldr	r3, [pc, #156]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ba:	4a26      	ldr	r2, [pc, #152]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161bc:	f023 0310 	bic.w	r3, r3, #16
 80161c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80161c2:	4b24      	ldr	r3, [pc, #144]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80161c6:	4b24      	ldr	r3, [pc, #144]	; (8016258 <RCCEx_PLL2_Config+0x160>)
 80161c8:	4013      	ands	r3, r2
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	69d2      	ldr	r2, [r2, #28]
 80161ce:	00d2      	lsls	r2, r2, #3
 80161d0:	4920      	ldr	r1, [pc, #128]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161d2:	4313      	orrs	r3, r2
 80161d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80161d6:	4b1f      	ldr	r3, [pc, #124]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161da:	4a1e      	ldr	r2, [pc, #120]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161dc:	f043 0310 	orr.w	r3, r3, #16
 80161e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d106      	bne.n	80161f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80161e8:	4b1a      	ldr	r3, [pc, #104]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161ec:	4a19      	ldr	r2, [pc, #100]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80161f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80161f4:	e00f      	b.n	8016216 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d106      	bne.n	801620a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80161fc:	4b15      	ldr	r3, [pc, #84]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 80161fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016200:	4a14      	ldr	r2, [pc, #80]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016206:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016208:	e005      	b.n	8016216 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801620a:	4b12      	ldr	r3, [pc, #72]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801620e:	4a11      	ldr	r2, [pc, #68]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016214:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016216:	4b0f      	ldr	r3, [pc, #60]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	4a0e      	ldr	r2, [pc, #56]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801621c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016222:	f7fa fe0d 	bl	8010e40 <HAL_GetTick>
 8016226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016228:	e008      	b.n	801623c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801622a:	f7fa fe09 	bl	8010e40 <HAL_GetTick>
 801622e:	4602      	mov	r2, r0
 8016230:	68bb      	ldr	r3, [r7, #8]
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	2b02      	cmp	r3, #2
 8016236:	d901      	bls.n	801623c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016238:	2303      	movs	r3, #3
 801623a:	e006      	b.n	801624a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801623c:	4b05      	ldr	r3, [pc, #20]	; (8016254 <RCCEx_PLL2_Config+0x15c>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016244:	2b00      	cmp	r3, #0
 8016246:	d0f0      	beq.n	801622a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016248:	7bfb      	ldrb	r3, [r7, #15]
}
 801624a:	4618      	mov	r0, r3
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	58024400 	.word	0x58024400
 8016258:	ffff0007 	.word	0xffff0007

0801625c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016266:	2300      	movs	r3, #0
 8016268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801626a:	4b53      	ldr	r3, [pc, #332]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801626e:	f003 0303 	and.w	r3, r3, #3
 8016272:	2b03      	cmp	r3, #3
 8016274:	d101      	bne.n	801627a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016276:	2301      	movs	r3, #1
 8016278:	e099      	b.n	80163ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801627a:	4b4f      	ldr	r3, [pc, #316]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	4a4e      	ldr	r2, [pc, #312]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016286:	f7fa fddb 	bl	8010e40 <HAL_GetTick>
 801628a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801628c:	e008      	b.n	80162a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801628e:	f7fa fdd7 	bl	8010e40 <HAL_GetTick>
 8016292:	4602      	mov	r2, r0
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	1ad3      	subs	r3, r2, r3
 8016298:	2b02      	cmp	r3, #2
 801629a:	d901      	bls.n	80162a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801629c:	2303      	movs	r3, #3
 801629e:	e086      	b.n	80163ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80162a0:	4b45      	ldr	r3, [pc, #276]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d1f0      	bne.n	801628e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80162ac:	4b42      	ldr	r3, [pc, #264]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80162ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	051b      	lsls	r3, r3, #20
 80162ba:	493f      	ldr	r1, [pc, #252]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80162bc:	4313      	orrs	r3, r2
 80162be:	628b      	str	r3, [r1, #40]	; 0x28
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	685b      	ldr	r3, [r3, #4]
 80162c4:	3b01      	subs	r3, #1
 80162c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	689b      	ldr	r3, [r3, #8]
 80162ce:	3b01      	subs	r3, #1
 80162d0:	025b      	lsls	r3, r3, #9
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	431a      	orrs	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	3b01      	subs	r3, #1
 80162dc:	041b      	lsls	r3, r3, #16
 80162de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80162e2:	431a      	orrs	r2, r3
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	691b      	ldr	r3, [r3, #16]
 80162e8:	3b01      	subs	r3, #1
 80162ea:	061b      	lsls	r3, r3, #24
 80162ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80162f0:	4931      	ldr	r1, [pc, #196]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80162f2:	4313      	orrs	r3, r2
 80162f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80162f6:	4b30      	ldr	r3, [pc, #192]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80162f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	492d      	ldr	r1, [pc, #180]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016304:	4313      	orrs	r3, r2
 8016306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016308:	4b2b      	ldr	r3, [pc, #172]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801630c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	699b      	ldr	r3, [r3, #24]
 8016314:	4928      	ldr	r1, [pc, #160]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016316:	4313      	orrs	r3, r2
 8016318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801631a:	4b27      	ldr	r3, [pc, #156]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631e:	4a26      	ldr	r2, [pc, #152]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016326:	4b24      	ldr	r3, [pc, #144]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016328:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801632a:	4b24      	ldr	r3, [pc, #144]	; (80163bc <RCCEx_PLL3_Config+0x160>)
 801632c:	4013      	ands	r3, r2
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	69d2      	ldr	r2, [r2, #28]
 8016332:	00d2      	lsls	r2, r2, #3
 8016334:	4920      	ldr	r1, [pc, #128]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016336:	4313      	orrs	r3, r2
 8016338:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801633a:	4b1f      	ldr	r3, [pc, #124]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801633e:	4a1e      	ldr	r2, [pc, #120]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d106      	bne.n	801635a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801634c:	4b1a      	ldr	r3, [pc, #104]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016350:	4a19      	ldr	r2, [pc, #100]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016358:	e00f      	b.n	801637a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	2b01      	cmp	r3, #1
 801635e:	d106      	bne.n	801636e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016360:	4b15      	ldr	r3, [pc, #84]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016364:	4a14      	ldr	r2, [pc, #80]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801636a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801636c:	e005      	b.n	801637a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801636e:	4b12      	ldr	r3, [pc, #72]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016372:	4a11      	ldr	r2, [pc, #68]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801637a:	4b0f      	ldr	r3, [pc, #60]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	4a0e      	ldr	r2, [pc, #56]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 8016380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016386:	f7fa fd5b 	bl	8010e40 <HAL_GetTick>
 801638a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801638c:	e008      	b.n	80163a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801638e:	f7fa fd57 	bl	8010e40 <HAL_GetTick>
 8016392:	4602      	mov	r2, r0
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	1ad3      	subs	r3, r2, r3
 8016398:	2b02      	cmp	r3, #2
 801639a:	d901      	bls.n	80163a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801639c:	2303      	movs	r3, #3
 801639e:	e006      	b.n	80163ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80163a0:	4b05      	ldr	r3, [pc, #20]	; (80163b8 <RCCEx_PLL3_Config+0x15c>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d0f0      	beq.n	801638e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80163ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3710      	adds	r7, #16
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	58024400 	.word	0x58024400
 80163bc:	ffff0007 	.word	0xffff0007

080163c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d101      	bne.n	80163d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80163d0:	2301      	movs	r3, #1
 80163d2:	e02b      	b.n	801642c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d106      	bne.n	80163ee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2200      	movs	r2, #0
 80163e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f7eb f88f 	bl	800150c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2202      	movs	r2, #2
 80163f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681a      	ldr	r2, [r3, #0]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	3304      	adds	r3, #4
 80163fe:	4619      	mov	r1, r3
 8016400:	4610      	mov	r0, r2
 8016402:	f000 fd9b 	bl	8016f3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6818      	ldr	r0, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	461a      	mov	r2, r3
 8016410:	6839      	ldr	r1, [r7, #0]
 8016412:	f000 fdef 	bl	8016ff4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8016416:	4b07      	ldr	r3, [pc, #28]	; (8016434 <HAL_SDRAM_Init+0x74>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	4a06      	ldr	r2, [pc, #24]	; (8016434 <HAL_SDRAM_Init+0x74>)
 801641c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016420:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2201      	movs	r2, #1
 8016426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801642a:	2300      	movs	r3, #0
}
 801642c:	4618      	mov	r0, r3
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}
 8016434:	52004000 	.word	0x52004000

08016438 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f7eb f8a7 	bl	8001594 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681a      	ldr	r2, [r3, #0]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	4619      	mov	r1, r3
 8016450:	4610      	mov	r0, r2
 8016452:	f000 fe39 	bl	80170c8 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2200      	movs	r2, #0
 801645a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2200      	movs	r2, #0
 8016462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 8016466:	2300      	movs	r3, #0
}
 8016468:	4618      	mov	r0, r3
 801646a:	3708      	adds	r7, #8
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}

08016470 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016482:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016484:	7dfb      	ldrb	r3, [r7, #23]
 8016486:	2b02      	cmp	r3, #2
 8016488:	d101      	bne.n	801648e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801648a:	2302      	movs	r3, #2
 801648c:	e021      	b.n	80164d2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801648e:	7dfb      	ldrb	r3, [r7, #23]
 8016490:	2b01      	cmp	r3, #1
 8016492:	d002      	beq.n	801649a <HAL_SDRAM_SendCommand+0x2a>
 8016494:	7dfb      	ldrb	r3, [r7, #23]
 8016496:	2b05      	cmp	r3, #5
 8016498:	d118      	bne.n	80164cc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	2202      	movs	r2, #2
 801649e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	68b9      	ldr	r1, [r7, #8]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f000 fe2e 	bl	801710c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2b02      	cmp	r3, #2
 80164b6:	d104      	bne.n	80164c2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	2205      	movs	r2, #5
 80164bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80164c0:	e006      	b.n	80164d0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	2201      	movs	r2, #1
 80164c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80164ca:	e001      	b.n	80164d0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80164cc:	2301      	movs	r3, #1
 80164ce:	e000      	b.n	80164d2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b082      	sub	sp, #8
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164ea:	b2db      	uxtb	r3, r3
 80164ec:	2b02      	cmp	r3, #2
 80164ee:	d101      	bne.n	80164f4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80164f0:	2302      	movs	r3, #2
 80164f2:	e016      	b.n	8016522 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d10f      	bne.n	8016520 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2202      	movs	r2, #2
 8016504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	6839      	ldr	r1, [r7, #0]
 801650e:	4618      	mov	r0, r3
 8016510:	f000 fe20 	bl	8017154 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2201      	movs	r2, #1
 8016518:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	e000      	b.n	8016522 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8016520:	2301      	movs	r3, #1
}
 8016522:	4618      	mov	r0, r3
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801652a:	b580      	push	{r7, lr}
 801652c:	b082      	sub	sp, #8
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d101      	bne.n	801653c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016538:	2301      	movs	r3, #1
 801653a:	e049      	b.n	80165d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016542:	b2db      	uxtb	r3, r3
 8016544:	2b00      	cmp	r3, #0
 8016546:	d106      	bne.n	8016556 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2200      	movs	r2, #0
 801654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7ea fed9 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2202      	movs	r2, #2
 801655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	3304      	adds	r3, #4
 8016566:	4619      	mov	r1, r3
 8016568:	4610      	mov	r0, r2
 801656a:	f000 fa37 	bl	80169dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2201      	movs	r2, #1
 8016572:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2201      	movs	r2, #1
 801657a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	2201      	movs	r2, #1
 8016582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2201      	movs	r2, #1
 801658a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2201      	movs	r2, #1
 8016592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2201      	movs	r2, #1
 801659a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	2201      	movs	r2, #1
 80165a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2201      	movs	r2, #1
 80165aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2201      	movs	r2, #1
 80165b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2201      	movs	r2, #1
 80165ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2201      	movs	r2, #1
 80165c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	2201      	movs	r2, #1
 80165ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80165ce:	2300      	movs	r3, #0
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3708      	adds	r7, #8
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80165d8:	b480      	push	{r7}
 80165da:	b085      	sub	sp, #20
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	2b01      	cmp	r3, #1
 80165ea:	d001      	beq.n	80165f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80165ec:	2301      	movs	r3, #1
 80165ee:	e054      	b.n	801669a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	2202      	movs	r2, #2
 80165f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	68da      	ldr	r2, [r3, #12]
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	f042 0201 	orr.w	r2, r2, #1
 8016606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	4a26      	ldr	r2, [pc, #152]	; (80166a8 <HAL_TIM_Base_Start_IT+0xd0>)
 801660e:	4293      	cmp	r3, r2
 8016610:	d022      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801661a:	d01d      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	4a22      	ldr	r2, [pc, #136]	; (80166ac <HAL_TIM_Base_Start_IT+0xd4>)
 8016622:	4293      	cmp	r3, r2
 8016624:	d018      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	4a21      	ldr	r2, [pc, #132]	; (80166b0 <HAL_TIM_Base_Start_IT+0xd8>)
 801662c:	4293      	cmp	r3, r2
 801662e:	d013      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	4a1f      	ldr	r2, [pc, #124]	; (80166b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8016636:	4293      	cmp	r3, r2
 8016638:	d00e      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	4a1e      	ldr	r2, [pc, #120]	; (80166b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8016640:	4293      	cmp	r3, r2
 8016642:	d009      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	4a1c      	ldr	r2, [pc, #112]	; (80166bc <HAL_TIM_Base_Start_IT+0xe4>)
 801664a:	4293      	cmp	r3, r2
 801664c:	d004      	beq.n	8016658 <HAL_TIM_Base_Start_IT+0x80>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	4a1b      	ldr	r2, [pc, #108]	; (80166c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8016654:	4293      	cmp	r3, r2
 8016656:	d115      	bne.n	8016684 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	689a      	ldr	r2, [r3, #8]
 801665e:	4b19      	ldr	r3, [pc, #100]	; (80166c4 <HAL_TIM_Base_Start_IT+0xec>)
 8016660:	4013      	ands	r3, r2
 8016662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	2b06      	cmp	r3, #6
 8016668:	d015      	beq.n	8016696 <HAL_TIM_Base_Start_IT+0xbe>
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016670:	d011      	beq.n	8016696 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	681a      	ldr	r2, [r3, #0]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	f042 0201 	orr.w	r2, r2, #1
 8016680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016682:	e008      	b.n	8016696 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	681a      	ldr	r2, [r3, #0]
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	f042 0201 	orr.w	r2, r2, #1
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	e000      	b.n	8016698 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3714      	adds	r7, #20
 801669e:	46bd      	mov	sp, r7
 80166a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a4:	4770      	bx	lr
 80166a6:	bf00      	nop
 80166a8:	40010000 	.word	0x40010000
 80166ac:	40000400 	.word	0x40000400
 80166b0:	40000800 	.word	0x40000800
 80166b4:	40000c00 	.word	0x40000c00
 80166b8:	40010400 	.word	0x40010400
 80166bc:	40001800 	.word	0x40001800
 80166c0:	40014000 	.word	0x40014000
 80166c4:	00010007 	.word	0x00010007

080166c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	691b      	ldr	r3, [r3, #16]
 80166d6:	f003 0302 	and.w	r3, r3, #2
 80166da:	2b02      	cmp	r3, #2
 80166dc:	d122      	bne.n	8016724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	f003 0302 	and.w	r3, r3, #2
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d11b      	bne.n	8016724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	f06f 0202 	mvn.w	r2, #2
 80166f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2201      	movs	r2, #1
 80166fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	699b      	ldr	r3, [r3, #24]
 8016702:	f003 0303 	and.w	r3, r3, #3
 8016706:	2b00      	cmp	r3, #0
 8016708:	d003      	beq.n	8016712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 f947 	bl	801699e <HAL_TIM_IC_CaptureCallback>
 8016710:	e005      	b.n	801671e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f000 f939 	bl	801698a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f000 f94a 	bl	80169b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2200      	movs	r2, #0
 8016722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	691b      	ldr	r3, [r3, #16]
 801672a:	f003 0304 	and.w	r3, r3, #4
 801672e:	2b04      	cmp	r3, #4
 8016730:	d122      	bne.n	8016778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	68db      	ldr	r3, [r3, #12]
 8016738:	f003 0304 	and.w	r3, r3, #4
 801673c:	2b04      	cmp	r3, #4
 801673e:	d11b      	bne.n	8016778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f06f 0204 	mvn.w	r2, #4
 8016748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2202      	movs	r2, #2
 801674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	699b      	ldr	r3, [r3, #24]
 8016756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801675a:	2b00      	cmp	r3, #0
 801675c:	d003      	beq.n	8016766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f91d 	bl	801699e <HAL_TIM_IC_CaptureCallback>
 8016764:	e005      	b.n	8016772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016766:	6878      	ldr	r0, [r7, #4]
 8016768:	f000 f90f 	bl	801698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 f920 	bl	80169b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2200      	movs	r2, #0
 8016776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	691b      	ldr	r3, [r3, #16]
 801677e:	f003 0308 	and.w	r3, r3, #8
 8016782:	2b08      	cmp	r3, #8
 8016784:	d122      	bne.n	80167cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	f003 0308 	and.w	r3, r3, #8
 8016790:	2b08      	cmp	r3, #8
 8016792:	d11b      	bne.n	80167cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	f06f 0208 	mvn.w	r2, #8
 801679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2204      	movs	r2, #4
 80167a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	69db      	ldr	r3, [r3, #28]
 80167aa:	f003 0303 	and.w	r3, r3, #3
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d003      	beq.n	80167ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f000 f8f3 	bl	801699e <HAL_TIM_IC_CaptureCallback>
 80167b8:	e005      	b.n	80167c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f000 f8e5 	bl	801698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f000 f8f6 	bl	80169b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2200      	movs	r2, #0
 80167ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	691b      	ldr	r3, [r3, #16]
 80167d2:	f003 0310 	and.w	r3, r3, #16
 80167d6:	2b10      	cmp	r3, #16
 80167d8:	d122      	bne.n	8016820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	f003 0310 	and.w	r3, r3, #16
 80167e4:	2b10      	cmp	r3, #16
 80167e6:	d11b      	bne.n	8016820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	f06f 0210 	mvn.w	r2, #16
 80167f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2208      	movs	r2, #8
 80167f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	69db      	ldr	r3, [r3, #28]
 80167fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016802:	2b00      	cmp	r3, #0
 8016804:	d003      	beq.n	801680e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f000 f8c9 	bl	801699e <HAL_TIM_IC_CaptureCallback>
 801680c:	e005      	b.n	801681a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f000 f8bb 	bl	801698a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f000 f8cc 	bl	80169b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2200      	movs	r2, #0
 801681e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	691b      	ldr	r3, [r3, #16]
 8016826:	f003 0301 	and.w	r3, r3, #1
 801682a:	2b01      	cmp	r3, #1
 801682c:	d10e      	bne.n	801684c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	68db      	ldr	r3, [r3, #12]
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	2b01      	cmp	r3, #1
 801683a:	d107      	bne.n	801684c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	f06f 0201 	mvn.w	r2, #1
 8016844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f7ea fa36 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	691b      	ldr	r3, [r3, #16]
 8016852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016856:	2b80      	cmp	r3, #128	; 0x80
 8016858:	d10e      	bne.n	8016878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016864:	2b80      	cmp	r3, #128	; 0x80
 8016866:	d107      	bne.n	8016878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	f000 fb4e 	bl	8016f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	691b      	ldr	r3, [r3, #16]
 801687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016886:	d10e      	bne.n	80168a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016892:	2b80      	cmp	r3, #128	; 0x80
 8016894:	d107      	bne.n	80168a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 fb41 	bl	8016f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	691b      	ldr	r3, [r3, #16]
 80168ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168b0:	2b40      	cmp	r3, #64	; 0x40
 80168b2:	d10e      	bne.n	80168d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80168be:	2b40      	cmp	r3, #64	; 0x40
 80168c0:	d107      	bne.n	80168d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80168ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f000 f87a 	bl	80169c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	691b      	ldr	r3, [r3, #16]
 80168d8:	f003 0320 	and.w	r3, r3, #32
 80168dc:	2b20      	cmp	r3, #32
 80168de:	d10e      	bne.n	80168fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	68db      	ldr	r3, [r3, #12]
 80168e6:	f003 0320 	and.w	r3, r3, #32
 80168ea:	2b20      	cmp	r3, #32
 80168ec:	d107      	bne.n	80168fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	f06f 0220 	mvn.w	r2, #32
 80168f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f000 fb01 	bl	8016f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80168fe:	bf00      	nop
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}

08016906 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016906:	b580      	push	{r7, lr}
 8016908:	b082      	sub	sp, #8
 801690a:	af00      	add	r7, sp, #0
 801690c:	6078      	str	r0, [r7, #4]
 801690e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016916:	2b01      	cmp	r3, #1
 8016918:	d101      	bne.n	801691e <HAL_TIM_SlaveConfigSynchro+0x18>
 801691a:	2302      	movs	r3, #2
 801691c:	e031      	b.n	8016982 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2201      	movs	r2, #1
 8016922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	2202      	movs	r2, #2
 801692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801692e:	6839      	ldr	r1, [r7, #0]
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f000 f8ed 	bl	8016b10 <TIM_SlaveTimer_SetConfig>
 8016936:	4603      	mov	r3, r0
 8016938:	2b00      	cmp	r3, #0
 801693a:	d009      	beq.n	8016950 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2201      	movs	r2, #1
 8016940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2200      	movs	r2, #0
 8016948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801694c:	2301      	movs	r3, #1
 801694e:	e018      	b.n	8016982 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	68da      	ldr	r2, [r3, #12]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801695e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	68da      	ldr	r2, [r3, #12]
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801696e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2201      	movs	r2, #1
 8016974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2200      	movs	r2, #0
 801697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016980:	2300      	movs	r3, #0
}
 8016982:	4618      	mov	r0, r3
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}

0801698a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801698a:	b480      	push	{r7}
 801698c:	b083      	sub	sp, #12
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016992:	bf00      	nop
 8016994:	370c      	adds	r7, #12
 8016996:	46bd      	mov	sp, r7
 8016998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801699c:	4770      	bx	lr

0801699e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801699e:	b480      	push	{r7}
 80169a0:	b083      	sub	sp, #12
 80169a2:	af00      	add	r7, sp, #0
 80169a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80169a6:	bf00      	nop
 80169a8:	370c      	adds	r7, #12
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr

080169b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80169b2:	b480      	push	{r7}
 80169b4:	b083      	sub	sp, #12
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80169ba:	bf00      	nop
 80169bc:	370c      	adds	r7, #12
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr

080169c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80169c6:	b480      	push	{r7}
 80169c8:	b083      	sub	sp, #12
 80169ca:	af00      	add	r7, sp, #0
 80169cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80169ce:	bf00      	nop
 80169d0:	370c      	adds	r7, #12
 80169d2:	46bd      	mov	sp, r7
 80169d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d8:	4770      	bx	lr
	...

080169dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80169dc:	b480      	push	{r7}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	4a40      	ldr	r2, [pc, #256]	; (8016af0 <TIM_Base_SetConfig+0x114>)
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d013      	beq.n	8016a1c <TIM_Base_SetConfig+0x40>
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80169fa:	d00f      	beq.n	8016a1c <TIM_Base_SetConfig+0x40>
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	4a3d      	ldr	r2, [pc, #244]	; (8016af4 <TIM_Base_SetConfig+0x118>)
 8016a00:	4293      	cmp	r3, r2
 8016a02:	d00b      	beq.n	8016a1c <TIM_Base_SetConfig+0x40>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	4a3c      	ldr	r2, [pc, #240]	; (8016af8 <TIM_Base_SetConfig+0x11c>)
 8016a08:	4293      	cmp	r3, r2
 8016a0a:	d007      	beq.n	8016a1c <TIM_Base_SetConfig+0x40>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	4a3b      	ldr	r2, [pc, #236]	; (8016afc <TIM_Base_SetConfig+0x120>)
 8016a10:	4293      	cmp	r3, r2
 8016a12:	d003      	beq.n	8016a1c <TIM_Base_SetConfig+0x40>
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	4a3a      	ldr	r2, [pc, #232]	; (8016b00 <TIM_Base_SetConfig+0x124>)
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	d108      	bne.n	8016a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	68fa      	ldr	r2, [r7, #12]
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	4a2f      	ldr	r2, [pc, #188]	; (8016af0 <TIM_Base_SetConfig+0x114>)
 8016a32:	4293      	cmp	r3, r2
 8016a34:	d01f      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016a3c:	d01b      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	4a2c      	ldr	r2, [pc, #176]	; (8016af4 <TIM_Base_SetConfig+0x118>)
 8016a42:	4293      	cmp	r3, r2
 8016a44:	d017      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	4a2b      	ldr	r2, [pc, #172]	; (8016af8 <TIM_Base_SetConfig+0x11c>)
 8016a4a:	4293      	cmp	r3, r2
 8016a4c:	d013      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	4a2a      	ldr	r2, [pc, #168]	; (8016afc <TIM_Base_SetConfig+0x120>)
 8016a52:	4293      	cmp	r3, r2
 8016a54:	d00f      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	4a29      	ldr	r2, [pc, #164]	; (8016b00 <TIM_Base_SetConfig+0x124>)
 8016a5a:	4293      	cmp	r3, r2
 8016a5c:	d00b      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	4a28      	ldr	r2, [pc, #160]	; (8016b04 <TIM_Base_SetConfig+0x128>)
 8016a62:	4293      	cmp	r3, r2
 8016a64:	d007      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	4a27      	ldr	r2, [pc, #156]	; (8016b08 <TIM_Base_SetConfig+0x12c>)
 8016a6a:	4293      	cmp	r3, r2
 8016a6c:	d003      	beq.n	8016a76 <TIM_Base_SetConfig+0x9a>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4a26      	ldr	r2, [pc, #152]	; (8016b0c <TIM_Base_SetConfig+0x130>)
 8016a72:	4293      	cmp	r3, r2
 8016a74:	d108      	bne.n	8016a88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	68db      	ldr	r3, [r3, #12]
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	4313      	orrs	r3, r2
 8016a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	695b      	ldr	r3, [r3, #20]
 8016a92:	4313      	orrs	r3, r2
 8016a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	68fa      	ldr	r2, [r7, #12]
 8016a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	689a      	ldr	r2, [r3, #8]
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	4a10      	ldr	r2, [pc, #64]	; (8016af0 <TIM_Base_SetConfig+0x114>)
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	d00f      	beq.n	8016ad4 <TIM_Base_SetConfig+0xf8>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	4a12      	ldr	r2, [pc, #72]	; (8016b00 <TIM_Base_SetConfig+0x124>)
 8016ab8:	4293      	cmp	r3, r2
 8016aba:	d00b      	beq.n	8016ad4 <TIM_Base_SetConfig+0xf8>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	4a11      	ldr	r2, [pc, #68]	; (8016b04 <TIM_Base_SetConfig+0x128>)
 8016ac0:	4293      	cmp	r3, r2
 8016ac2:	d007      	beq.n	8016ad4 <TIM_Base_SetConfig+0xf8>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	4a10      	ldr	r2, [pc, #64]	; (8016b08 <TIM_Base_SetConfig+0x12c>)
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	d003      	beq.n	8016ad4 <TIM_Base_SetConfig+0xf8>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	4a0f      	ldr	r2, [pc, #60]	; (8016b0c <TIM_Base_SetConfig+0x130>)
 8016ad0:	4293      	cmp	r3, r2
 8016ad2:	d103      	bne.n	8016adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	691a      	ldr	r2, [r3, #16]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2201      	movs	r2, #1
 8016ae0:	615a      	str	r2, [r3, #20]
}
 8016ae2:	bf00      	nop
 8016ae4:	3714      	adds	r7, #20
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr
 8016aee:	bf00      	nop
 8016af0:	40010000 	.word	0x40010000
 8016af4:	40000400 	.word	0x40000400
 8016af8:	40000800 	.word	0x40000800
 8016afc:	40000c00 	.word	0x40000c00
 8016b00:	40010400 	.word	0x40010400
 8016b04:	40014000 	.word	0x40014000
 8016b08:	40014400 	.word	0x40014400
 8016b0c:	40014800 	.word	0x40014800

08016b10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b086      	sub	sp, #24
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	689b      	ldr	r3, [r3, #8]
 8016b24:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016b26:	693a      	ldr	r2, [r7, #16]
 8016b28:	4b65      	ldr	r3, [pc, #404]	; (8016cc0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8016b2a:	4013      	ands	r3, r2
 8016b2c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	685b      	ldr	r3, [r3, #4]
 8016b32:	693a      	ldr	r2, [r7, #16]
 8016b34:	4313      	orrs	r3, r2
 8016b36:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8016b38:	693a      	ldr	r2, [r7, #16]
 8016b3a:	4b62      	ldr	r3, [pc, #392]	; (8016cc4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8016b3c:	4013      	ands	r3, r2
 8016b3e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	693a      	ldr	r2, [r7, #16]
 8016b46:	4313      	orrs	r3, r2
 8016b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	693a      	ldr	r2, [r7, #16]
 8016b50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	4a5c      	ldr	r2, [pc, #368]	; (8016cc8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016b58:	4293      	cmp	r3, r2
 8016b5a:	f000 80ab 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016b5e:	4a5a      	ldr	r2, [pc, #360]	; (8016cc8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016b60:	4293      	cmp	r3, r2
 8016b62:	f200 80a4 	bhi.w	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016b6a:	f000 80a3 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016b72:	f200 809c 	bhi.w	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016b76:	4a55      	ldr	r2, [pc, #340]	; (8016ccc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	f000 809b 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016b7e:	4a53      	ldr	r2, [pc, #332]	; (8016ccc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8016b80:	4293      	cmp	r3, r2
 8016b82:	f200 8094 	bhi.w	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016b86:	4a52      	ldr	r2, [pc, #328]	; (8016cd0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8016b88:	4293      	cmp	r3, r2
 8016b8a:	f000 8093 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016b8e:	4a50      	ldr	r2, [pc, #320]	; (8016cd0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	f200 808c 	bhi.w	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016b96:	4a4f      	ldr	r2, [pc, #316]	; (8016cd4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8016b98:	4293      	cmp	r3, r2
 8016b9a:	f000 808b 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016b9e:	4a4d      	ldr	r2, [pc, #308]	; (8016cd4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8016ba0:	4293      	cmp	r3, r2
 8016ba2:	f200 8084 	bhi.w	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016ba6:	4a4c      	ldr	r2, [pc, #304]	; (8016cd8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8016ba8:	4293      	cmp	r3, r2
 8016baa:	f000 8083 	beq.w	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016bae:	4a4a      	ldr	r2, [pc, #296]	; (8016cd8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	d87c      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bb4:	4a49      	ldr	r2, [pc, #292]	; (8016cdc <TIM_SlaveTimer_SetConfig+0x1cc>)
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d07c      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016bba:	4a48      	ldr	r2, [pc, #288]	; (8016cdc <TIM_SlaveTimer_SetConfig+0x1cc>)
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	d876      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bc0:	4a47      	ldr	r2, [pc, #284]	; (8016ce0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d076      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016bc6:	4a46      	ldr	r2, [pc, #280]	; (8016ce0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8016bc8:	4293      	cmp	r3, r2
 8016bca:	d870      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8016bd0:	d070      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016bd2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8016bd6:	d86a      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016bdc:	d06a      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016be2:	d864      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016be4:	2b70      	cmp	r3, #112	; 0x70
 8016be6:	d01a      	beq.n	8016c1e <TIM_SlaveTimer_SetConfig+0x10e>
 8016be8:	2b70      	cmp	r3, #112	; 0x70
 8016bea:	d860      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bec:	2b60      	cmp	r3, #96	; 0x60
 8016bee:	d054      	beq.n	8016c9a <TIM_SlaveTimer_SetConfig+0x18a>
 8016bf0:	2b60      	cmp	r3, #96	; 0x60
 8016bf2:	d85c      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bf4:	2b50      	cmp	r3, #80	; 0x50
 8016bf6:	d046      	beq.n	8016c86 <TIM_SlaveTimer_SetConfig+0x176>
 8016bf8:	2b50      	cmp	r3, #80	; 0x50
 8016bfa:	d858      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016bfc:	2b40      	cmp	r3, #64	; 0x40
 8016bfe:	d019      	beq.n	8016c34 <TIM_SlaveTimer_SetConfig+0x124>
 8016c00:	2b40      	cmp	r3, #64	; 0x40
 8016c02:	d854      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016c04:	2b30      	cmp	r3, #48	; 0x30
 8016c06:	d055      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016c08:	2b30      	cmp	r3, #48	; 0x30
 8016c0a:	d850      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016c0c:	2b20      	cmp	r3, #32
 8016c0e:	d051      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016c10:	2b20      	cmp	r3, #32
 8016c12:	d84c      	bhi.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d04d      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016c18:	2b10      	cmp	r3, #16
 8016c1a:	d04b      	beq.n	8016cb4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016c1c:	e047      	b.n	8016cae <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6818      	ldr	r0, [r3, #0]
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	68d9      	ldr	r1, [r3, #12]
 8016c26:	683b      	ldr	r3, [r7, #0]
 8016c28:	689a      	ldr	r2, [r3, #8]
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	691b      	ldr	r3, [r3, #16]
 8016c2e:	f000 f8b8 	bl	8016da2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8016c32:	e040      	b.n	8016cb6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8016c34:	683b      	ldr	r3, [r7, #0]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	2b05      	cmp	r3, #5
 8016c3a:	d101      	bne.n	8016c40 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	e03b      	b.n	8016cb8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	6a1b      	ldr	r3, [r3, #32]
 8016c46:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	6a1a      	ldr	r2, [r3, #32]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	f022 0201 	bic.w	r2, r2, #1
 8016c56:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	699b      	ldr	r3, [r3, #24]
 8016c5e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016c66:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	691b      	ldr	r3, [r3, #16]
 8016c6c:	011b      	lsls	r3, r3, #4
 8016c6e:	68ba      	ldr	r2, [r7, #8]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	68ba      	ldr	r2, [r7, #8]
 8016c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	621a      	str	r2, [r3, #32]
      break;
 8016c84:	e017      	b.n	8016cb6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6818      	ldr	r0, [r3, #0]
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	6899      	ldr	r1, [r3, #8]
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	691b      	ldr	r3, [r3, #16]
 8016c92:	461a      	mov	r2, r3
 8016c94:	f000 f826 	bl	8016ce4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8016c98:	e00d      	b.n	8016cb6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	6818      	ldr	r0, [r3, #0]
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	6899      	ldr	r1, [r3, #8]
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f000 f84b 	bl	8016d42 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8016cac:	e003      	b.n	8016cb6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8016cae:	2301      	movs	r3, #1
 8016cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8016cb2:	e000      	b.n	8016cb6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8016cb4:	bf00      	nop
  }

  return status;
 8016cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3718      	adds	r7, #24
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	ffcfff8f 	.word	0xffcfff8f
 8016cc4:	fffefff8 	.word	0xfffefff8
 8016cc8:	00200010 	.word	0x00200010
 8016ccc:	00100070 	.word	0x00100070
 8016cd0:	00100060 	.word	0x00100060
 8016cd4:	00100050 	.word	0x00100050
 8016cd8:	00100040 	.word	0x00100040
 8016cdc:	00100030 	.word	0x00100030
 8016ce0:	00100020 	.word	0x00100020

08016ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b087      	sub	sp, #28
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	60f8      	str	r0, [r7, #12]
 8016cec:	60b9      	str	r1, [r7, #8]
 8016cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	6a1b      	ldr	r3, [r3, #32]
 8016cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	6a1b      	ldr	r3, [r3, #32]
 8016cfa:	f023 0201 	bic.w	r2, r3, #1
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	699b      	ldr	r3, [r3, #24]
 8016d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016d08:	693b      	ldr	r3, [r7, #16]
 8016d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	011b      	lsls	r3, r3, #4
 8016d14:	693a      	ldr	r2, [r7, #16]
 8016d16:	4313      	orrs	r3, r2
 8016d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	f023 030a 	bic.w	r3, r3, #10
 8016d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016d22:	697a      	ldr	r2, [r7, #20]
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	4313      	orrs	r3, r2
 8016d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	693a      	ldr	r2, [r7, #16]
 8016d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	697a      	ldr	r2, [r7, #20]
 8016d34:	621a      	str	r2, [r3, #32]
}
 8016d36:	bf00      	nop
 8016d38:	371c      	adds	r7, #28
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d40:	4770      	bx	lr

08016d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016d42:	b480      	push	{r7}
 8016d44:	b087      	sub	sp, #28
 8016d46:	af00      	add	r7, sp, #0
 8016d48:	60f8      	str	r0, [r7, #12]
 8016d4a:	60b9      	str	r1, [r7, #8]
 8016d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	6a1b      	ldr	r3, [r3, #32]
 8016d52:	f023 0210 	bic.w	r2, r3, #16
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	699b      	ldr	r3, [r3, #24]
 8016d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	6a1b      	ldr	r3, [r3, #32]
 8016d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	031b      	lsls	r3, r3, #12
 8016d72:	697a      	ldr	r2, [r7, #20]
 8016d74:	4313      	orrs	r3, r2
 8016d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	011b      	lsls	r3, r3, #4
 8016d84:	693a      	ldr	r2, [r7, #16]
 8016d86:	4313      	orrs	r3, r2
 8016d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	697a      	ldr	r2, [r7, #20]
 8016d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	693a      	ldr	r2, [r7, #16]
 8016d94:	621a      	str	r2, [r3, #32]
}
 8016d96:	bf00      	nop
 8016d98:	371c      	adds	r7, #28
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr

08016da2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8016da2:	b480      	push	{r7}
 8016da4:	b087      	sub	sp, #28
 8016da6:	af00      	add	r7, sp, #0
 8016da8:	60f8      	str	r0, [r7, #12]
 8016daa:	60b9      	str	r1, [r7, #8]
 8016dac:	607a      	str	r2, [r7, #4]
 8016dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016dbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016dbe:	683b      	ldr	r3, [r7, #0]
 8016dc0:	021a      	lsls	r2, r3, #8
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	431a      	orrs	r2, r3
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	4313      	orrs	r3, r2
 8016dca:	697a      	ldr	r2, [r7, #20]
 8016dcc:	4313      	orrs	r3, r2
 8016dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	697a      	ldr	r2, [r7, #20]
 8016dd4:	609a      	str	r2, [r3, #8]
}
 8016dd6:	bf00      	nop
 8016dd8:	371c      	adds	r7, #28
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr
	...

08016de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016de4:	b480      	push	{r7}
 8016de6:	b085      	sub	sp, #20
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	d101      	bne.n	8016dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016df8:	2302      	movs	r3, #2
 8016dfa:	e06d      	b.n	8016ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	2201      	movs	r2, #1
 8016e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2202      	movs	r2, #2
 8016e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	689b      	ldr	r3, [r3, #8]
 8016e1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4a30      	ldr	r2, [pc, #192]	; (8016ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d004      	beq.n	8016e30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	4a2f      	ldr	r2, [pc, #188]	; (8016ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d108      	bne.n	8016e42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8016e36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	68fa      	ldr	r2, [r7, #12]
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016e48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	68fa      	ldr	r2, [r7, #12]
 8016e50:	4313      	orrs	r3, r2
 8016e52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4a20      	ldr	r2, [pc, #128]	; (8016ee4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8016e62:	4293      	cmp	r3, r2
 8016e64:	d022      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e6e:	d01d      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	4a1d      	ldr	r2, [pc, #116]	; (8016eec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d018      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	4a1c      	ldr	r2, [pc, #112]	; (8016ef0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8016e80:	4293      	cmp	r3, r2
 8016e82:	d013      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	4a1a      	ldr	r2, [pc, #104]	; (8016ef4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	d00e      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	4a15      	ldr	r2, [pc, #84]	; (8016ee8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016e94:	4293      	cmp	r3, r2
 8016e96:	d009      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	4a16      	ldr	r2, [pc, #88]	; (8016ef8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8016e9e:	4293      	cmp	r3, r2
 8016ea0:	d004      	beq.n	8016eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	4a15      	ldr	r2, [pc, #84]	; (8016efc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8016ea8:	4293      	cmp	r3, r2
 8016eaa:	d10c      	bne.n	8016ec6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016eac:	68bb      	ldr	r3, [r7, #8]
 8016eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	689b      	ldr	r3, [r3, #8]
 8016eb8:	68ba      	ldr	r2, [r7, #8]
 8016eba:	4313      	orrs	r3, r2
 8016ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	68ba      	ldr	r2, [r7, #8]
 8016ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016ed6:	2300      	movs	r3, #0
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3714      	adds	r7, #20
 8016edc:	46bd      	mov	sp, r7
 8016ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee2:	4770      	bx	lr
 8016ee4:	40010000 	.word	0x40010000
 8016ee8:	40010400 	.word	0x40010400
 8016eec:	40000400 	.word	0x40000400
 8016ef0:	40000800 	.word	0x40000800
 8016ef4:	40000c00 	.word	0x40000c00
 8016ef8:	40001800 	.word	0x40001800
 8016efc:	40014000 	.word	0x40014000

08016f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016f00:	b480      	push	{r7}
 8016f02:	b083      	sub	sp, #12
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016f08:	bf00      	nop
 8016f0a:	370c      	adds	r7, #12
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr

08016f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016f14:	b480      	push	{r7}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8016f1c:	bf00      	nop
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8016f30:	bf00      	nop
 8016f32:	370c      	adds	r7, #12
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
 8016f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d121      	bne.n	8016f92 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681a      	ldr	r2, [r3, #0]
 8016f52:	4b27      	ldr	r3, [pc, #156]	; (8016ff0 <FMC_SDRAM_Init+0xb4>)
 8016f54:	4013      	ands	r3, r2
 8016f56:	683a      	ldr	r2, [r7, #0]
 8016f58:	6851      	ldr	r1, [r2, #4]
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	6892      	ldr	r2, [r2, #8]
 8016f5e:	4311      	orrs	r1, r2
 8016f60:	683a      	ldr	r2, [r7, #0]
 8016f62:	68d2      	ldr	r2, [r2, #12]
 8016f64:	4311      	orrs	r1, r2
 8016f66:	683a      	ldr	r2, [r7, #0]
 8016f68:	6912      	ldr	r2, [r2, #16]
 8016f6a:	4311      	orrs	r1, r2
 8016f6c:	683a      	ldr	r2, [r7, #0]
 8016f6e:	6952      	ldr	r2, [r2, #20]
 8016f70:	4311      	orrs	r1, r2
 8016f72:	683a      	ldr	r2, [r7, #0]
 8016f74:	6992      	ldr	r2, [r2, #24]
 8016f76:	4311      	orrs	r1, r2
 8016f78:	683a      	ldr	r2, [r7, #0]
 8016f7a:	69d2      	ldr	r2, [r2, #28]
 8016f7c:	4311      	orrs	r1, r2
 8016f7e:	683a      	ldr	r2, [r7, #0]
 8016f80:	6a12      	ldr	r2, [r2, #32]
 8016f82:	4311      	orrs	r1, r2
 8016f84:	683a      	ldr	r2, [r7, #0]
 8016f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016f88:	430a      	orrs	r2, r1
 8016f8a:	431a      	orrs	r2, r3
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	601a      	str	r2, [r3, #0]
 8016f90:	e026      	b.n	8016fe0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	69d9      	ldr	r1, [r3, #28]
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	6a1b      	ldr	r3, [r3, #32]
 8016fa2:	4319      	orrs	r1, r3
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa8:	430b      	orrs	r3, r1
 8016faa:	431a      	orrs	r2, r3
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	685a      	ldr	r2, [r3, #4]
 8016fb4:	4b0e      	ldr	r3, [pc, #56]	; (8016ff0 <FMC_SDRAM_Init+0xb4>)
 8016fb6:	4013      	ands	r3, r2
 8016fb8:	683a      	ldr	r2, [r7, #0]
 8016fba:	6851      	ldr	r1, [r2, #4]
 8016fbc:	683a      	ldr	r2, [r7, #0]
 8016fbe:	6892      	ldr	r2, [r2, #8]
 8016fc0:	4311      	orrs	r1, r2
 8016fc2:	683a      	ldr	r2, [r7, #0]
 8016fc4:	68d2      	ldr	r2, [r2, #12]
 8016fc6:	4311      	orrs	r1, r2
 8016fc8:	683a      	ldr	r2, [r7, #0]
 8016fca:	6912      	ldr	r2, [r2, #16]
 8016fcc:	4311      	orrs	r1, r2
 8016fce:	683a      	ldr	r2, [r7, #0]
 8016fd0:	6952      	ldr	r2, [r2, #20]
 8016fd2:	4311      	orrs	r1, r2
 8016fd4:	683a      	ldr	r2, [r7, #0]
 8016fd6:	6992      	ldr	r2, [r2, #24]
 8016fd8:	430a      	orrs	r2, r1
 8016fda:	431a      	orrs	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8016fe0:	2300      	movs	r3, #0
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	370c      	adds	r7, #12
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fec:	4770      	bx	lr
 8016fee:	bf00      	nop
 8016ff0:	ffff8000 	.word	0xffff8000

08016ff4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b085      	sub	sp, #20
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d128      	bne.n	8017058 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	689b      	ldr	r3, [r3, #8]
 801700a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	1e59      	subs	r1, r3, #1
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	3b01      	subs	r3, #1
 801701a:	011b      	lsls	r3, r3, #4
 801701c:	4319      	orrs	r1, r3
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	689b      	ldr	r3, [r3, #8]
 8017022:	3b01      	subs	r3, #1
 8017024:	021b      	lsls	r3, r3, #8
 8017026:	4319      	orrs	r1, r3
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	68db      	ldr	r3, [r3, #12]
 801702c:	3b01      	subs	r3, #1
 801702e:	031b      	lsls	r3, r3, #12
 8017030:	4319      	orrs	r1, r3
 8017032:	68bb      	ldr	r3, [r7, #8]
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	3b01      	subs	r3, #1
 8017038:	041b      	lsls	r3, r3, #16
 801703a:	4319      	orrs	r1, r3
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	695b      	ldr	r3, [r3, #20]
 8017040:	3b01      	subs	r3, #1
 8017042:	051b      	lsls	r3, r3, #20
 8017044:	4319      	orrs	r1, r3
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	699b      	ldr	r3, [r3, #24]
 801704a:	3b01      	subs	r3, #1
 801704c:	061b      	lsls	r3, r3, #24
 801704e:	430b      	orrs	r3, r1
 8017050:	431a      	orrs	r2, r3
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	609a      	str	r2, [r3, #8]
 8017056:	e02d      	b.n	80170b4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	689a      	ldr	r2, [r3, #8]
 801705c:	4b19      	ldr	r3, [pc, #100]	; (80170c4 <FMC_SDRAM_Timing_Init+0xd0>)
 801705e:	4013      	ands	r3, r2
 8017060:	68ba      	ldr	r2, [r7, #8]
 8017062:	68d2      	ldr	r2, [r2, #12]
 8017064:	3a01      	subs	r2, #1
 8017066:	0311      	lsls	r1, r2, #12
 8017068:	68ba      	ldr	r2, [r7, #8]
 801706a:	6952      	ldr	r2, [r2, #20]
 801706c:	3a01      	subs	r2, #1
 801706e:	0512      	lsls	r2, r2, #20
 8017070:	430a      	orrs	r2, r1
 8017072:	431a      	orrs	r2, r3
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	68db      	ldr	r3, [r3, #12]
 801707c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	1e59      	subs	r1, r3, #1
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	3b01      	subs	r3, #1
 801708c:	011b      	lsls	r3, r3, #4
 801708e:	4319      	orrs	r1, r3
 8017090:	68bb      	ldr	r3, [r7, #8]
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	3b01      	subs	r3, #1
 8017096:	021b      	lsls	r3, r3, #8
 8017098:	4319      	orrs	r1, r3
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	691b      	ldr	r3, [r3, #16]
 801709e:	3b01      	subs	r3, #1
 80170a0:	041b      	lsls	r3, r3, #16
 80170a2:	4319      	orrs	r1, r3
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	699b      	ldr	r3, [r3, #24]
 80170a8:	3b01      	subs	r3, #1
 80170aa:	061b      	lsls	r3, r3, #24
 80170ac:	430b      	orrs	r3, r1
 80170ae:	431a      	orrs	r2, r3
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	3714      	adds	r7, #20
 80170ba:	46bd      	mov	sp, r7
 80170bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c0:	4770      	bx	lr
 80170c2:	bf00      	nop
 80170c4:	ff0f0fff 	.word	0xff0f0fff

080170c8 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 80170c8:	b480      	push	{r7}
 80170ca:	b083      	sub	sp, #12
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	683a      	ldr	r2, [r7, #0]
 80170d6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80170da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	683a      	ldr	r2, [r7, #0]
 80170e2:	3202      	adds	r2, #2
 80170e4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80170e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2200      	movs	r2, #0
 80170f0:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2200      	movs	r2, #0
 80170f6:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2200      	movs	r2, #0
 80170fc:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80170fe:	2300      	movs	r3, #0
}
 8017100:	4618      	mov	r0, r3
 8017102:	370c      	adds	r7, #12
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801710c:	b480      	push	{r7}
 801710e:	b085      	sub	sp, #20
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	691a      	ldr	r2, [r3, #16]
 801711c:	4b0c      	ldr	r3, [pc, #48]	; (8017150 <FMC_SDRAM_SendCommand+0x44>)
 801711e:	4013      	ands	r3, r2
 8017120:	68ba      	ldr	r2, [r7, #8]
 8017122:	6811      	ldr	r1, [r2, #0]
 8017124:	68ba      	ldr	r2, [r7, #8]
 8017126:	6852      	ldr	r2, [r2, #4]
 8017128:	4311      	orrs	r1, r2
 801712a:	68ba      	ldr	r2, [r7, #8]
 801712c:	6892      	ldr	r2, [r2, #8]
 801712e:	3a01      	subs	r2, #1
 8017130:	0152      	lsls	r2, r2, #5
 8017132:	4311      	orrs	r1, r2
 8017134:	68ba      	ldr	r2, [r7, #8]
 8017136:	68d2      	ldr	r2, [r2, #12]
 8017138:	0252      	lsls	r2, r2, #9
 801713a:	430a      	orrs	r2, r1
 801713c:	431a      	orrs	r2, r3
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3714      	adds	r7, #20
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr
 8017150:	ffc00000 	.word	0xffc00000

08017154 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	695a      	ldr	r2, [r3, #20]
 8017162:	4b07      	ldr	r3, [pc, #28]	; (8017180 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8017164:	4013      	ands	r3, r2
 8017166:	683a      	ldr	r2, [r7, #0]
 8017168:	0052      	lsls	r2, r2, #1
 801716a:	431a      	orrs	r2, r3
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8017170:	2300      	movs	r3, #0
}
 8017172:	4618      	mov	r0, r3
 8017174:	370c      	adds	r7, #12
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop
 8017180:	ffffc001 	.word	0xffffc001

08017184 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017184:	8880      	ldrh	r0, [r0, #4]
 8017186:	4770      	bx	lr

08017188 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017188:	2300      	movs	r3, #0
 801718a:	8083      	strh	r3, [r0, #4]
 801718c:	4770      	bx	lr
	...

08017190 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017192:	6803      	ldr	r3, [r0, #0]
 8017194:	460e      	mov	r6, r1
 8017196:	2100      	movs	r1, #0
 8017198:	4605      	mov	r5, r0
 801719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801719c:	4798      	blx	r3
 801719e:	4604      	mov	r4, r0
 80171a0:	682b      	ldr	r3, [r5, #0]
 80171a2:	4628      	mov	r0, r5
 80171a4:	1b34      	subs	r4, r6, r4
 80171a6:	6a1b      	ldr	r3, [r3, #32]
 80171a8:	b2a4      	uxth	r4, r4
 80171aa:	4798      	blx	r3
 80171ac:	88ab      	ldrh	r3, [r5, #4]
 80171ae:	fbb4 f4f0 	udiv	r4, r4, r0
 80171b2:	42a3      	cmp	r3, r4
 80171b4:	d805      	bhi.n	80171c2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80171b6:	4b0e      	ldr	r3, [pc, #56]	; (80171f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80171b8:	211e      	movs	r1, #30
 80171ba:	4a0e      	ldr	r2, [pc, #56]	; (80171f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80171bc:	480e      	ldr	r0, [pc, #56]	; (80171f8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80171be:	f013 fb89 	bl	802a8d4 <__assert_func>
 80171c2:	682b      	ldr	r3, [r5, #0]
 80171c4:	2100      	movs	r1, #0
 80171c6:	4628      	mov	r0, r5
 80171c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ca:	4798      	blx	r3
 80171cc:	682b      	ldr	r3, [r5, #0]
 80171ce:	4607      	mov	r7, r0
 80171d0:	4628      	mov	r0, r5
 80171d2:	6a1b      	ldr	r3, [r3, #32]
 80171d4:	4798      	blx	r3
 80171d6:	1bf3      	subs	r3, r6, r7
 80171d8:	b29b      	uxth	r3, r3
 80171da:	fbb3 f2f0 	udiv	r2, r3, r0
 80171de:	fb02 3010 	mls	r0, r2, r0, r3
 80171e2:	b118      	cbz	r0, 80171ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80171e4:	4b05      	ldr	r3, [pc, #20]	; (80171fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80171e6:	211f      	movs	r1, #31
 80171e8:	4a02      	ldr	r2, [pc, #8]	; (80171f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80171ea:	e7e7      	b.n	80171bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80171ec:	4620      	mov	r0, r4
 80171ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f0:	0802d2b8 	.word	0x0802d2b8
 80171f4:	0802d426 	.word	0x0802d426
 80171f8:	0802d2cd 	.word	0x0802d2cd
 80171fc:	0802d2fb 	.word	0x0802d2fb

08017200 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017200:	b538      	push	{r3, r4, r5, lr}
 8017202:	6803      	ldr	r3, [r0, #0]
 8017204:	460d      	mov	r5, r1
 8017206:	4604      	mov	r4, r0
 8017208:	6a1b      	ldr	r3, [r3, #32]
 801720a:	4798      	blx	r3
 801720c:	4285      	cmp	r5, r0
 801720e:	d905      	bls.n	801721c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017210:	4b0c      	ldr	r3, [pc, #48]	; (8017244 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017212:	2130      	movs	r1, #48	; 0x30
 8017214:	4a0c      	ldr	r2, [pc, #48]	; (8017248 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017216:	480d      	ldr	r0, [pc, #52]	; (801724c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017218:	f013 fb5c 	bl	802a8d4 <__assert_func>
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	4620      	mov	r0, r4
 8017220:	88a5      	ldrh	r5, [r4, #4]
 8017222:	69db      	ldr	r3, [r3, #28]
 8017224:	4798      	blx	r3
 8017226:	4285      	cmp	r5, r0
 8017228:	d303      	bcc.n	8017232 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801722a:	4b09      	ldr	r3, [pc, #36]	; (8017250 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801722c:	2131      	movs	r1, #49	; 0x31
 801722e:	4a06      	ldr	r2, [pc, #24]	; (8017248 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017230:	e7f1      	b.n	8017216 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017232:	6823      	ldr	r3, [r4, #0]
 8017234:	4620      	mov	r0, r4
 8017236:	88a1      	ldrh	r1, [r4, #4]
 8017238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801723a:	4798      	blx	r3
 801723c:	88a3      	ldrh	r3, [r4, #4]
 801723e:	3301      	adds	r3, #1
 8017240:	80a3      	strh	r3, [r4, #4]
 8017242:	bd38      	pop	{r3, r4, r5, pc}
 8017244:	0802d375 	.word	0x0802d375
 8017248:	0802d469 	.word	0x0802d469
 801724c:	0802d2cd 	.word	0x0802d2cd
 8017250:	0802d38c 	.word	0x0802d38c

08017254 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	6803      	ldr	r3, [r0, #0]
 8017258:	4616      	mov	r6, r2
 801725a:	4604      	mov	r4, r0
 801725c:	460d      	mov	r5, r1
 801725e:	6a1b      	ldr	r3, [r3, #32]
 8017260:	4798      	blx	r3
 8017262:	4286      	cmp	r6, r0
 8017264:	d905      	bls.n	8017272 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017266:	4b06      	ldr	r3, [pc, #24]	; (8017280 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017268:	213a      	movs	r1, #58	; 0x3a
 801726a:	4a06      	ldr	r2, [pc, #24]	; (8017284 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801726c:	4806      	ldr	r0, [pc, #24]	; (8017288 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801726e:	f013 fb31 	bl	802a8d4 <__assert_func>
 8017272:	6823      	ldr	r3, [r4, #0]
 8017274:	4629      	mov	r1, r5
 8017276:	4620      	mov	r0, r4
 8017278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801727a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801727e:	4718      	bx	r3
 8017280:	0802d375 	.word	0x0802d375
 8017284:	0802d3dc 	.word	0x0802d3dc
 8017288:	0802d2cd 	.word	0x0802d2cd

0801728c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801728c:	4770      	bx	lr
	...

08017290 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017290:	4a02      	ldr	r2, [pc, #8]	; (801729c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017292:	6002      	str	r2, [r0, #0]
 8017294:	2200      	movs	r2, #0
 8017296:	8082      	strh	r2, [r0, #4]
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	0802d3b0 	.word	0x0802d3b0

080172a0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80172a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80172a2:	4770      	bx	lr

080172a4 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 80172a4:	4a02      	ldr	r2, [pc, #8]	; (80172b0 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 80172a6:	6002      	str	r2, [r0, #0]
 80172a8:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	; 0xe0
 80172ac:	8082      	strh	r2, [r0, #4]
 80172ae:	4770      	bx	lr
 80172b0:	0802cd54 	.word	0x0802cd54

080172b4 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 80172b4:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 80172b8:	4770      	bx	lr

080172ba <_ZNK8touchgfx12TextProgress8getColorEv>:
 80172ba:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 80172be:	4770      	bx	lr

080172c0 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 80172c0:	2902      	cmp	r1, #2
 80172c2:	b570      	push	{r4, r5, r6, lr}
 80172c4:	bf28      	it	cs
 80172c6:	2102      	movcs	r1, #2
 80172c8:	6803      	ldr	r3, [r0, #0]
 80172ca:	4604      	mov	r4, r0
 80172cc:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
 80172d0:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80172d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80172d8:	4798      	blx	r3
 80172da:	462b      	mov	r3, r5
 80172dc:	4601      	mov	r1, r0
 80172de:	4620      	mov	r0, r4
 80172e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172e4:	4718      	bx	r3

080172e6 <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 80172e6:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 80172ea:	4770      	bx	lr

080172ec <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 80172ec:	30b4      	adds	r0, #180	; 0xb4
 80172ee:	f002 b9fa 	b.w	80196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

080172f2 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 80172f2:	b538      	push	{r3, r4, r5, lr}
 80172f4:	4604      	mov	r4, r0
 80172f6:	460d      	mov	r5, r1
 80172f8:	f000 f8e7 	bl	80174ca <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80172fc:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 8017300:	bd38      	pop	{r3, r4, r5, pc}
	...

08017304 <_ZN8touchgfx12TextProgress8setValueEi>:
 8017304:	b530      	push	{r4, r5, lr}
 8017306:	b087      	sub	sp, #28
 8017308:	4604      	mov	r4, r0
 801730a:	f000 f927 	bl	801755c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801730e:	4b1d      	ldr	r3, [pc, #116]	; (8017384 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 8017310:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 8017314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017318:	ab06      	add	r3, sp, #24
 801731a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 801731e:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 8017322:	aa06      	add	r2, sp, #24
 8017324:	4620      	mov	r0, r4
 8017326:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801732a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801732e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017332:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017336:	0089      	lsls	r1, r1, #2
 8017338:	b289      	uxth	r1, r1
 801733a:	f000 f9a2 	bl	8017682 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801733e:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 8017342:	b1c1      	cbz	r1, 8017376 <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 8017344:	ab06      	add	r3, sp, #24
 8017346:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801734a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 801734e:	fb90 f3f2 	sdiv	r3, r0, r2
 8017352:	fb02 0213 	mls	r2, r2, r3, r0
 8017356:	4628      	mov	r0, r5
 8017358:	e9cd 1200 	strd	r1, r2, [sp]
 801735c:	4a0a      	ldr	r2, [pc, #40]	; (8017388 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 801735e:	2108      	movs	r1, #8
 8017360:	f007 f966 	bl	801e630 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017364:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8017368:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 801736c:	b007      	add	sp, #28
 801736e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017372:	f005 b90b 	b.w	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
 8017376:	4603      	mov	r3, r0
 8017378:	4a04      	ldr	r2, [pc, #16]	; (801738c <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 801737a:	2108      	movs	r1, #8
 801737c:	4628      	mov	r0, r5
 801737e:	f007 f957 	bl	801e630 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017382:	e7ef      	b.n	8017364 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 8017384:	0802c73c 	.word	0x0802c73c
 8017388:	0802d4a7 	.word	0x0802d4a7
 801738c:	0802d4af 	.word	0x0802d4af

08017390 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8017390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017394:	461d      	mov	r5, r3
 8017396:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 801739a:	2300      	movs	r3, #0
 801739c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80173a0:	4691      	mov	r9, r2
 80173a2:	4604      	mov	r4, r0
 80173a4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 80173a8:	4688      	mov	r8, r1
 80173aa:	4638      	mov	r0, r7
 80173ac:	4629      	mov	r1, r5
 80173ae:	f7ec fe75 	bl	800409c <_ZN8touchgfx8Drawable8setWidthEs>
 80173b2:	4631      	mov	r1, r6
 80173b4:	4638      	mov	r0, r7
 80173b6:	f7ec fe80 	bl	80040ba <_ZN8touchgfx8Drawable9setHeightEs>
 80173ba:	9608      	str	r6, [sp, #32]
 80173bc:	462b      	mov	r3, r5
 80173be:	464a      	mov	r2, r9
 80173c0:	4641      	mov	r1, r8
 80173c2:	4620      	mov	r0, r4
 80173c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173c8:	f000 b978 	b.w	80176bc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

080173cc <_ZN8touchgfx12TextProgressC1Ev>:
 80173cc:	b510      	push	{r4, lr}
 80173ce:	4604      	mov	r4, r0
 80173d0:	f000 f9a0 	bl	8017714 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80173d4:	2201      	movs	r2, #1
 80173d6:	4b20      	ldr	r3, [pc, #128]	; (8017458 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 80173d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80173dc:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 80173e0:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 80173e4:	4a1d      	ldr	r2, [pc, #116]	; (801745c <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 80173e6:	6023      	str	r3, [r4, #0]
 80173e8:	2300      	movs	r3, #0
 80173ea:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 80173ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173f2:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 80173f6:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 80173fa:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80173fe:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 8017402:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 8017406:	4a16      	ldr	r2, [pc, #88]	; (8017460 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8017408:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 801740c:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 8017410:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 8017414:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8017418:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 801741c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8017420:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8017424:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 8017428:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 801742c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 8017430:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8017434:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8017438:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 801743c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8017440:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8017444:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8017448:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
 801744c:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 8017450:	f000 fa1e 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017454:	4620      	mov	r0, r4
 8017456:	bd10      	pop	{r4, pc}
 8017458:	0802d4bc 	.word	0x0802d4bc
 801745c:	0802cd54 	.word	0x0802cd54
 8017460:	0802e9f4 	.word	0x0802e9f4

08017464 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017464:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017468:	4770      	bx	lr

0801746a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801746a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801746e:	4770      	bx	lr

08017470 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017470:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017474:	4770      	bx	lr

08017476 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017476:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801747a:	4770      	bx	lr

0801747c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 801747c:	b510      	push	{r4, lr}
 801747e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017482:	600c      	str	r4, [r1, #0]
 8017484:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017488:	6011      	str	r1, [r2, #0]
 801748a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 801748e:	801a      	strh	r2, [r3, #0]
 8017490:	9b02      	ldr	r3, [sp, #8]
 8017492:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8017496:	801a      	strh	r2, [r3, #0]
 8017498:	bd10      	pop	{r4, pc}

0801749a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 801749a:	b510      	push	{r4, lr}
 801749c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80174a0:	600c      	str	r4, [r1, #0]
 80174a2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80174a6:	6011      	str	r1, [r2, #0]
 80174a8:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80174ac:	801a      	strh	r2, [r3, #0]
 80174ae:	bd10      	pop	{r4, pc}

080174b0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80174b0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80174b4:	600b      	str	r3, [r1, #0]
 80174b6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80174ba:	6013      	str	r3, [r2, #0]
 80174bc:	4770      	bx	lr

080174be <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80174be:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 80174c2:	4770      	bx	lr

080174c4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80174c4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80174c8:	4770      	bx	lr

080174ca <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80174ca:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80174ce:	4770      	bx	lr

080174d0 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80174d0:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 80174d4:	4770      	bx	lr

080174d6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80174d6:	b570      	push	{r4, r5, r6, lr}
 80174d8:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80174dc:	4604      	mov	r4, r0
 80174de:	4616      	mov	r6, r2
 80174e0:	428d      	cmp	r5, r1
 80174e2:	bfb8      	it	lt
 80174e4:	460d      	movlt	r5, r1
 80174e6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80174ea:	428d      	cmp	r5, r1
 80174ec:	bfa8      	it	ge
 80174ee:	460d      	movge	r5, r1
 80174f0:	b99a      	cbnz	r2, 801751a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 80174f2:	6803      	ldr	r3, [r0, #0]
 80174f4:	4629      	mov	r1, r5
 80174f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80174fa:	4798      	blx	r3
 80174fc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017500:	b358      	cbz	r0, 801755a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017502:	6803      	ldr	r3, [r0, #0]
 8017504:	68db      	ldr	r3, [r3, #12]
 8017506:	4798      	blx	r3
 8017508:	b338      	cbz	r0, 801755a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 801750a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 801750e:	4621      	mov	r1, r4
 8017510:	6803      	ldr	r3, [r0, #0]
 8017512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	4718      	bx	r3
 801751a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801751e:	2b00      	cmp	r3, #0
 8017520:	dd07      	ble.n	8017532 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017522:	f004 f869 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8017526:	4621      	mov	r1, r4
 8017528:	f004 f89e 	bl	801b668 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801752c:	2300      	movs	r3, #0
 801752e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017532:	6823      	ldr	r3, [r4, #0]
 8017534:	4620      	mov	r0, r4
 8017536:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801753a:	4798      	blx	r3
 801753c:	2300      	movs	r3, #0
 801753e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8017542:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8017546:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 801754a:	f004 f855 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 801754e:	4621      	mov	r1, r4
 8017550:	f004 f858 	bl	801b604 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017554:	2301      	movs	r3, #1
 8017556:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 801755a:	bd70      	pop	{r4, r5, r6, pc}

0801755c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801755c:	b510      	push	{r4, lr}
 801755e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017562:	4604      	mov	r4, r0
 8017564:	4299      	cmp	r1, r3
 8017566:	bfb8      	it	lt
 8017568:	4619      	movlt	r1, r3
 801756a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801756e:	4299      	cmp	r1, r3
 8017570:	bfa8      	it	ge
 8017572:	4619      	movge	r1, r3
 8017574:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8017578:	428b      	cmp	r3, r1
 801757a:	d010      	beq.n	801759e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801757c:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017580:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8017584:	b158      	cbz	r0, 801759e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017586:	6803      	ldr	r3, [r0, #0]
 8017588:	68db      	ldr	r3, [r3, #12]
 801758a:	4798      	blx	r3
 801758c:	b138      	cbz	r0, 801759e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 801758e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8017592:	4621      	mov	r1, r4
 8017594:	6803      	ldr	r3, [r0, #0]
 8017596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801759a:	689b      	ldr	r3, [r3, #8]
 801759c:	4718      	bx	r3
 801759e:	bd10      	pop	{r4, pc}

080175a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 80175a0:	4291      	cmp	r1, r2
 80175a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175a6:	4604      	mov	r4, r0
 80175a8:	460e      	mov	r6, r1
 80175aa:	4615      	mov	r5, r2
 80175ac:	4698      	mov	r8, r3
 80175ae:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80175b2:	db05      	blt.n	80175c0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 80175b4:	4b11      	ldr	r3, [pc, #68]	; (80175fc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 80175b6:	214b      	movs	r1, #75	; 0x4b
 80175b8:	4a11      	ldr	r2, [pc, #68]	; (8017600 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80175ba:	4812      	ldr	r0, [pc, #72]	; (8017604 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 80175bc:	f013 f98a 	bl	802a8d4 <__assert_func>
 80175c0:	6803      	ldr	r3, [r0, #0]
 80175c2:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 80175c6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80175ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80175ce:	4798      	blx	r3
 80175d0:	f1b8 0f00 	cmp.w	r8, #0
 80175d4:	d10c      	bne.n	80175f0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 80175d6:	1bad      	subs	r5, r5, r6
 80175d8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 80175dc:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 80175e0:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 80175e4:	42bb      	cmp	r3, r7
 80175e6:	d806      	bhi.n	80175f6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 80175e8:	4b07      	ldr	r3, [pc, #28]	; (8017608 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 80175ea:	2158      	movs	r1, #88	; 0x58
 80175ec:	4a04      	ldr	r2, [pc, #16]	; (8017600 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 80175ee:	e7e4      	b.n	80175ba <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 80175f0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 80175f4:	e7f2      	b.n	80175dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 80175f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175fa:	bf00      	nop
 80175fc:	0802d59c 	.word	0x0802d59c
 8017600:	0802d6e8 	.word	0x0802d6e8
 8017604:	0802d5a6 	.word	0x0802d5a6
 8017608:	0802d5fd 	.word	0x0802d5fd

0801760c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 801760c:	b570      	push	{r4, r5, r6, lr}
 801760e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8017612:	4604      	mov	r4, r0
 8017614:	b3a3      	cbz	r3, 8017680 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017616:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 801761a:	2100      	movs	r1, #0
 801761c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017620:	3001      	adds	r0, #1
 8017622:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017626:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 801762a:	b280      	uxth	r0, r0
 801762c:	1ad2      	subs	r2, r2, r3
 801762e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017632:	b212      	sxth	r2, r2
 8017634:	47a8      	blx	r5
 8017636:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801763a:	6823      	ldr	r3, [r4, #0]
 801763c:	4401      	add	r1, r0
 801763e:	4620      	mov	r0, r4
 8017640:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017644:	4798      	blx	r3
 8017646:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801764a:	429a      	cmp	r2, r3
 801764c:	db18      	blt.n	8017680 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 801764e:	2500      	movs	r5, #0
 8017650:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017654:	f003 ffd0 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8017658:	4621      	mov	r1, r4
 801765a:	f004 f805 	bl	801b668 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801765e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017662:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017666:	b158      	cbz	r0, 8017680 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017668:	6803      	ldr	r3, [r0, #0]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	4798      	blx	r3
 801766e:	b138      	cbz	r0, 8017680 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017670:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017674:	4621      	mov	r1, r4
 8017676:	6803      	ldr	r3, [r0, #0]
 8017678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801767c:	689b      	ldr	r3, [r3, #8]
 801767e:	4718      	bx	r3
 8017680:	bd70      	pop	{r4, r5, r6, pc}

08017682 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017684:	4604      	mov	r4, r0
 8017686:	460d      	mov	r5, r1
 8017688:	b1a9      	cbz	r1, 80176b6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 801768a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 801768e:	ab01      	add	r3, sp, #4
 8017690:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8017694:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8017698:	1b89      	subs	r1, r1, r6
 801769a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 801769e:	1a12      	subs	r2, r2, r0
 80176a0:	1a38      	subs	r0, r7, r0
 80176a2:	f005 f912 	bl	801c8ca <_ZN8touchgfx6muldivElllRl>
 80176a6:	4629      	mov	r1, r5
 80176a8:	ab01      	add	r3, sp, #4
 80176aa:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80176ae:	4430      	add	r0, r6
 80176b0:	f005 f90b 	bl	801c8ca <_ZN8touchgfx6muldivElllRl>
 80176b4:	b285      	uxth	r5, r0
 80176b6:	4628      	mov	r0, r5
 80176b8:	b003      	add	sp, #12
 80176ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176bc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 80176bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176c0:	4604      	mov	r4, r0
 80176c2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 80176c6:	4698      	mov	r8, r3
 80176c8:	460e      	mov	r6, r1
 80176ca:	4615      	mov	r5, r2
 80176cc:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 80176d0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80176d4:	4619      	mov	r1, r3
 80176d6:	463a      	mov	r2, r7
 80176d8:	3058      	adds	r0, #88	; 0x58
 80176da:	f7ec fd1d 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80176de:	4446      	add	r6, r8
 80176e0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80176e4:	443d      	add	r5, r7
 80176e6:	42b3      	cmp	r3, r6
 80176e8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80176ec:	bfb8      	it	lt
 80176ee:	8126      	strhlt	r6, [r4, #8]
 80176f0:	42ab      	cmp	r3, r5
 80176f2:	bfb8      	it	lt
 80176f4:	8165      	strhlt	r5, [r4, #10]
 80176f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176fa <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 80176fa:	b510      	push	{r4, lr}
 80176fc:	4604      	mov	r4, r0
 80176fe:	302c      	adds	r0, #44	; 0x2c
 8017700:	f002 fa6b 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017704:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017708:	4620      	mov	r0, r4
 801770a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 801770e:	f7ec fd03 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017712:	bd10      	pop	{r4, pc}

08017714 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017716:	4604      	mov	r4, r0
 8017718:	2500      	movs	r5, #0
 801771a:	f7ec fbe1 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 801771e:	4b24      	ldr	r3, [pc, #144]	; (80177b0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017720:	4626      	mov	r6, r4
 8017722:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017726:	2226      	movs	r2, #38	; 0x26
 8017728:	4629      	mov	r1, r5
 801772a:	62a5      	str	r5, [r4, #40]	; 0x28
 801772c:	f846 3b2c 	str.w	r3, [r6], #44
 8017730:	4630      	mov	r0, r6
 8017732:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017736:	f013 fad2 	bl	802acde <memset>
 801773a:	4630      	mov	r0, r6
 801773c:	f7ec fbd0 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 8017740:	a902      	add	r1, sp, #8
 8017742:	4b1c      	ldr	r3, [pc, #112]	; (80177b4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017744:	4630      	mov	r0, r6
 8017746:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 801774a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801774e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017750:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017754:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017758:	f002 fa3f 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801775c:	4638      	mov	r0, r7
 801775e:	f7ec fbbf 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 8017762:	4b15      	ldr	r3, [pc, #84]	; (80177b8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017764:	4629      	mov	r1, r5
 8017766:	4630      	mov	r0, r6
 8017768:	65a3      	str	r3, [r4, #88]	; 0x58
 801776a:	2364      	movs	r3, #100	; 0x64
 801776c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017770:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017774:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017778:	4b10      	ldr	r3, [pc, #64]	; (80177bc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 801777a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 801777e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017782:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017786:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801778a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 801778e:	f7ec fc49 	bl	8004024 <_ZN8touchgfx8Drawable4setXEs>
 8017792:	4629      	mov	r1, r5
 8017794:	4630      	mov	r0, r6
 8017796:	f7ec fc54 	bl	8004042 <_ZN8touchgfx8Drawable4setYEs>
 801779a:	4631      	mov	r1, r6
 801779c:	4620      	mov	r0, r4
 801779e:	f000 f877 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80177a2:	4620      	mov	r0, r4
 80177a4:	4639      	mov	r1, r7
 80177a6:	f000 f873 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80177aa:	4620      	mov	r0, r4
 80177ac:	b003      	add	sp, #12
 80177ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177b0:	0802d620 	.word	0x0802d620
 80177b4:	0802eb00 	.word	0x0802eb00
 80177b8:	0802d814 	.word	0x0802d814
 80177bc:	0801cf93 	.word	0x0801cf93

080177c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80177c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80177c2:	2000      	movs	r0, #0
 80177c4:	b12b      	cbz	r3, 80177d2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80177c6:	b920      	cbnz	r0, 80177d2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80177c8:	1a5a      	subs	r2, r3, r1
 80177ca:	699b      	ldr	r3, [r3, #24]
 80177cc:	4250      	negs	r0, r2
 80177ce:	4150      	adcs	r0, r2
 80177d0:	e7f8      	b.n	80177c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80177d2:	4770      	bx	lr

080177d4 <_ZN8touchgfx9Container9removeAllEv>:
 80177d4:	2200      	movs	r2, #0
 80177d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80177d8:	b123      	cbz	r3, 80177e4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80177da:	6999      	ldr	r1, [r3, #24]
 80177dc:	6281      	str	r1, [r0, #40]	; 0x28
 80177de:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80177e2:	e7f8      	b.n	80177d6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80177e4:	4770      	bx	lr

080177e6 <_ZN8touchgfx9Container6unlinkEv>:
 80177e6:	2300      	movs	r3, #0
 80177e8:	6283      	str	r3, [r0, #40]	; 0x28
 80177ea:	4770      	bx	lr

080177ec <_ZNK8touchgfx9Container12getSolidRectEv>:
 80177ec:	2200      	movs	r2, #0
 80177ee:	8002      	strh	r2, [r0, #0]
 80177f0:	8042      	strh	r2, [r0, #2]
 80177f2:	8082      	strh	r2, [r0, #4]
 80177f4:	80c2      	strh	r2, [r0, #6]
 80177f6:	4770      	bx	lr

080177f8 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80177f8:	b570      	push	{r4, r5, r6, lr}
 80177fa:	460d      	mov	r5, r1
 80177fc:	4616      	mov	r6, r2
 80177fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017800:	b13c      	cbz	r4, 8017812 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017802:	6823      	ldr	r3, [r4, #0]
 8017804:	4620      	mov	r0, r4
 8017806:	4632      	mov	r2, r6
 8017808:	4629      	mov	r1, r5
 801780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801780c:	4798      	blx	r3
 801780e:	69a4      	ldr	r4, [r4, #24]
 8017810:	e7f6      	b.n	8017800 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017812:	bd70      	pop	{r4, r5, r6, pc}

08017814 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017814:	b538      	push	{r3, r4, r5, lr}
 8017816:	460d      	mov	r5, r1
 8017818:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801781a:	b134      	cbz	r4, 801782a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801781c:	682b      	ldr	r3, [r5, #0]
 801781e:	4621      	mov	r1, r4
 8017820:	4628      	mov	r0, r5
 8017822:	689b      	ldr	r3, [r3, #8]
 8017824:	4798      	blx	r3
 8017826:	69a4      	ldr	r4, [r4, #24]
 8017828:	e7f7      	b.n	801781a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801782a:	bd38      	pop	{r3, r4, r5, pc}

0801782c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801782c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801782e:	b19b      	cbz	r3, 8017858 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017830:	428b      	cmp	r3, r1
 8017832:	d109      	bne.n	8017848 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017834:	699a      	ldr	r2, [r3, #24]
 8017836:	2100      	movs	r1, #0
 8017838:	6159      	str	r1, [r3, #20]
 801783a:	6282      	str	r2, [r0, #40]	; 0x28
 801783c:	b902      	cbnz	r2, 8017840 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801783e:	4770      	bx	lr
 8017840:	6199      	str	r1, [r3, #24]
 8017842:	4770      	bx	lr
 8017844:	4613      	mov	r3, r2
 8017846:	b13a      	cbz	r2, 8017858 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017848:	699a      	ldr	r2, [r3, #24]
 801784a:	428a      	cmp	r2, r1
 801784c:	d1fa      	bne.n	8017844 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801784e:	698a      	ldr	r2, [r1, #24]
 8017850:	619a      	str	r2, [r3, #24]
 8017852:	2300      	movs	r3, #0
 8017854:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017858:	4770      	bx	lr

0801785a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801785a:	b410      	push	{r4}
 801785c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801785e:	4604      	mov	r4, r0
 8017860:	b92b      	cbnz	r3, 801786e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017862:	6803      	ldr	r3, [r0, #0]
 8017864:	4611      	mov	r1, r2
 8017866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801786a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801786c:	4718      	bx	r3
 801786e:	b941      	cbnz	r1, 8017882 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017870:	6193      	str	r3, [r2, #24]
 8017872:	6282      	str	r2, [r0, #40]	; 0x28
 8017874:	6154      	str	r4, [r2, #20]
 8017876:	f85d 4b04 	ldr.w	r4, [sp], #4
 801787a:	4770      	bx	lr
 801787c:	4603      	mov	r3, r0
 801787e:	2800      	cmp	r0, #0
 8017880:	d0f9      	beq.n	8017876 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017882:	4299      	cmp	r1, r3
 8017884:	6998      	ldr	r0, [r3, #24]
 8017886:	d1f9      	bne.n	801787c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017888:	6190      	str	r0, [r2, #24]
 801788a:	618a      	str	r2, [r1, #24]
 801788c:	e7f2      	b.n	8017874 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017890:	4288      	cmp	r0, r1
 8017892:	b508      	push	{r3, lr}
 8017894:	d105      	bne.n	80178a2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017896:	4b11      	ldr	r3, [pc, #68]	; (80178dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017898:	2123      	movs	r1, #35	; 0x23
 801789a:	4a11      	ldr	r2, [pc, #68]	; (80178e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801789c:	4811      	ldr	r0, [pc, #68]	; (80178e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801789e:	f013 f819 	bl	802a8d4 <__assert_func>
 80178a2:	694b      	ldr	r3, [r1, #20]
 80178a4:	b11b      	cbz	r3, 80178ae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80178a6:	4b10      	ldr	r3, [pc, #64]	; (80178e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80178a8:	2124      	movs	r1, #36	; 0x24
 80178aa:	4a0d      	ldr	r2, [pc, #52]	; (80178e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80178ac:	e7f6      	b.n	801789c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80178ae:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80178b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80178b4:	b913      	cbnz	r3, 80178bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 80178b6:	6281      	str	r1, [r0, #40]	; 0x28
 80178b8:	bd08      	pop	{r3, pc}
 80178ba:	4613      	mov	r3, r2
 80178bc:	699a      	ldr	r2, [r3, #24]
 80178be:	b12a      	cbz	r2, 80178cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 80178c0:	428b      	cmp	r3, r1
 80178c2:	d1fa      	bne.n	80178ba <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 80178c4:	4b09      	ldr	r3, [pc, #36]	; (80178ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80178c6:	2135      	movs	r1, #53	; 0x35
 80178c8:	4a05      	ldr	r2, [pc, #20]	; (80178e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80178ca:	e7e7      	b.n	801789c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80178cc:	428b      	cmp	r3, r1
 80178ce:	d103      	bne.n	80178d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80178d0:	4b06      	ldr	r3, [pc, #24]	; (80178ec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80178d2:	2138      	movs	r1, #56	; 0x38
 80178d4:	4a02      	ldr	r2, [pc, #8]	; (80178e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80178d6:	e7e1      	b.n	801789c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80178d8:	6199      	str	r1, [r3, #24]
 80178da:	e7ed      	b.n	80178b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80178dc:	0802d741 	.word	0x0802d741
 80178e0:	0802d898 	.word	0x0802d898
 80178e4:	0802d76d 	.word	0x0802d76d
 80178e8:	0802d7a0 	.word	0x0802d7a0
 80178ec:	0802d7d6 	.word	0x0802d7d6

080178f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80178f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178f4:	461f      	mov	r7, r3
 80178f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80178fa:	460d      	mov	r5, r1
 80178fc:	4616      	mov	r6, r2
 80178fe:	b103      	cbz	r3, 8017902 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017900:	6038      	str	r0, [r7, #0]
 8017902:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017904:	b314      	cbz	r4, 801794c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017906:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801790a:	b1eb      	cbz	r3, 8017948 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801790c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017910:	428d      	cmp	r5, r1
 8017912:	db19      	blt.n	8017948 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017914:	b289      	uxth	r1, r1
 8017916:	8923      	ldrh	r3, [r4, #8]
 8017918:	440b      	add	r3, r1
 801791a:	b21b      	sxth	r3, r3
 801791c:	429d      	cmp	r5, r3
 801791e:	da13      	bge.n	8017948 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017920:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017924:	4296      	cmp	r6, r2
 8017926:	db0f      	blt.n	8017948 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017928:	b292      	uxth	r2, r2
 801792a:	8963      	ldrh	r3, [r4, #10]
 801792c:	4413      	add	r3, r2
 801792e:	b21b      	sxth	r3, r3
 8017930:	429e      	cmp	r6, r3
 8017932:	da09      	bge.n	8017948 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017934:	6823      	ldr	r3, [r4, #0]
 8017936:	1ab2      	subs	r2, r6, r2
 8017938:	1a69      	subs	r1, r5, r1
 801793a:	4620      	mov	r0, r4
 801793c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017940:	b212      	sxth	r2, r2
 8017942:	463b      	mov	r3, r7
 8017944:	b209      	sxth	r1, r1
 8017946:	47c0      	blx	r8
 8017948:	69a4      	ldr	r4, [r4, #24]
 801794a:	e7db      	b.n	8017904 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017950 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017954:	4c6d      	ldr	r4, [pc, #436]	; (8017b0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017956:	b0a1      	sub	sp, #132	; 0x84
 8017958:	4606      	mov	r6, r0
 801795a:	6824      	ldr	r4, [r4, #0]
 801795c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801795e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017962:	2400      	movs	r4, #0
 8017964:	9303      	str	r3, [sp, #12]
 8017966:	802c      	strh	r4, [r5, #0]
 8017968:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801796a:	802c      	strh	r4, [r5, #0]
 801796c:	601c      	str	r4, [r3, #0]
 801796e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017972:	f7ff ffbd 	bl	80178f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017976:	f1b9 0f03 	cmp.w	r9, #3
 801797a:	f340 80c1 	ble.w	8017b00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801797e:	4631      	mov	r1, r6
 8017980:	a80c      	add	r0, sp, #48	; 0x30
 8017982:	f004 fe9b 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017986:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801798a:	9306      	str	r3, [sp, #24]
 801798c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017990:	9307      	str	r3, [sp, #28]
 8017992:	9b03      	ldr	r3, [sp, #12]
 8017994:	f8d3 a000 	ldr.w	sl, [r3]
 8017998:	f1ba 0f00 	cmp.w	sl, #0
 801799c:	f000 80b3 	beq.w	8017b06 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80179a0:	4651      	mov	r1, sl
 80179a2:	a810      	add	r0, sp, #64	; 0x40
 80179a4:	f004 fe8a 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80179a8:	2002      	movs	r0, #2
 80179aa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80179ae:	9b01      	ldr	r3, [sp, #4]
 80179b0:	9a06      	ldr	r2, [sp, #24]
 80179b2:	fb91 f1f0 	sdiv	r1, r1, r0
 80179b6:	189d      	adds	r5, r3, r2
 80179b8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80179bc:	9a07      	ldr	r2, [sp, #28]
 80179be:	4419      	add	r1, r3
 80179c0:	9b02      	ldr	r3, [sp, #8]
 80179c2:	4413      	add	r3, r2
 80179c4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80179c8:	1a6d      	subs	r5, r5, r1
 80179ca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80179ce:	fb92 f2f0 	sdiv	r2, r2, r0
 80179d2:	440a      	add	r2, r1
 80179d4:	1a9b      	subs	r3, r3, r2
 80179d6:	435b      	muls	r3, r3
 80179d8:	fb05 3505 	mla	r5, r5, r5, r3
 80179dc:	4f4c      	ldr	r7, [pc, #304]	; (8017b10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80179de:	ac10      	add	r4, sp, #64	; 0x40
 80179e0:	f1b9 0f0c 	cmp.w	r9, #12
 80179e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80179e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80179ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80179ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179f0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80179f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80179f8:	f04f 0303 	mov.w	r3, #3
 80179fc:	bfd8      	it	le
 80179fe:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017a02:	f04f 0400 	mov.w	r4, #0
 8017a06:	f8cd 9000 	str.w	r9, [sp]
 8017a0a:	bfcc      	ite	gt
 8017a0c:	4698      	movgt	r8, r3
 8017a0e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017a12:	1c63      	adds	r3, r4, #1
 8017a14:	aa10      	add	r2, sp, #64	; 0x40
 8017a16:	f004 0401 	and.w	r4, r4, #1
 8017a1a:	f04f 0b00 	mov.w	fp, #0
 8017a1e:	9308      	str	r3, [sp, #32]
 8017a20:	9b00      	ldr	r3, [sp, #0]
 8017a22:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017a26:	fb93 f3f8 	sdiv	r3, r3, r8
 8017a2a:	3404      	adds	r4, #4
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	9304      	str	r3, [sp, #16]
 8017a30:	9a04      	ldr	r2, [sp, #16]
 8017a32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017a36:	fb13 f302 	smulbb	r3, r3, r2
 8017a3a:	9a01      	ldr	r2, [sp, #4]
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	1899      	adds	r1, r3, r2
 8017a40:	9305      	str	r3, [sp, #20]
 8017a42:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017a46:	b209      	sxth	r1, r1
 8017a48:	4299      	cmp	r1, r3
 8017a4a:	db4d      	blt.n	8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a4c:	8932      	ldrh	r2, [r6, #8]
 8017a4e:	4413      	add	r3, r2
 8017a50:	b21b      	sxth	r3, r3
 8017a52:	4299      	cmp	r1, r3
 8017a54:	da48      	bge.n	8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a56:	9b04      	ldr	r3, [sp, #16]
 8017a58:	6827      	ldr	r7, [r4, #0]
 8017a5a:	fb17 f703 	smulbb	r7, r7, r3
 8017a5e:	9b02      	ldr	r3, [sp, #8]
 8017a60:	b2bf      	uxth	r7, r7
 8017a62:	18fa      	adds	r2, r7, r3
 8017a64:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017a68:	b212      	sxth	r2, r2
 8017a6a:	429a      	cmp	r2, r3
 8017a6c:	db3c      	blt.n	8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a6e:	8970      	ldrh	r0, [r6, #10]
 8017a70:	4403      	add	r3, r0
 8017a72:	b21b      	sxth	r3, r3
 8017a74:	429a      	cmp	r2, r3
 8017a76:	da37      	bge.n	8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a78:	2300      	movs	r3, #0
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017a80:	f7ff ff36 	bl	80178f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a86:	b37a      	cbz	r2, 8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a88:	4552      	cmp	r2, sl
 8017a8a:	d02d      	beq.n	8017ae8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017a8c:	4611      	mov	r1, r2
 8017a8e:	a80e      	add	r0, sp, #56	; 0x38
 8017a90:	9209      	str	r2, [sp, #36]	; 0x24
 8017a92:	f004 fe13 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a96:	f04f 0e02 	mov.w	lr, #2
 8017a9a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017a9e:	9a06      	ldr	r2, [sp, #24]
 8017aa0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017aa4:	9b01      	ldr	r3, [sp, #4]
 8017aa6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017aaa:	4413      	add	r3, r2
 8017aac:	9a07      	ldr	r2, [sp, #28]
 8017aae:	fb91 f1fe 	sdiv	r1, r1, lr
 8017ab2:	fb9c fcfe 	sdiv	ip, ip, lr
 8017ab6:	4401      	add	r1, r0
 8017ab8:	1a58      	subs	r0, r3, r1
 8017aba:	9b02      	ldr	r3, [sp, #8]
 8017abc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017ac0:	4413      	add	r3, r2
 8017ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ac4:	448c      	add	ip, r1
 8017ac6:	eba3 030c 	sub.w	r3, r3, ip
 8017aca:	435b      	muls	r3, r3
 8017acc:	fb00 3300 	mla	r3, r0, r0, r3
 8017ad0:	42ab      	cmp	r3, r5
 8017ad2:	d208      	bcs.n	8017ae6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ad6:	461d      	mov	r5, r3
 8017ad8:	9803      	ldr	r0, [sp, #12]
 8017ada:	6001      	str	r1, [r0, #0]
 8017adc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017ade:	9805      	ldr	r0, [sp, #20]
 8017ae0:	8008      	strh	r0, [r1, #0]
 8017ae2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017ae4:	800f      	strh	r7, [r1, #0]
 8017ae6:	4692      	mov	sl, r2
 8017ae8:	f10b 0b01 	add.w	fp, fp, #1
 8017aec:	3408      	adds	r4, #8
 8017aee:	f1bb 0f04 	cmp.w	fp, #4
 8017af2:	d19d      	bne.n	8017a30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017af4:	9b00      	ldr	r3, [sp, #0]
 8017af6:	9c08      	ldr	r4, [sp, #32]
 8017af8:	444b      	add	r3, r9
 8017afa:	4544      	cmp	r4, r8
 8017afc:	9300      	str	r3, [sp, #0]
 8017afe:	d188      	bne.n	8017a12 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017b00:	b021      	add	sp, #132	; 0x84
 8017b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b06:	f04f 35ff 	mov.w	r5, #4294967295
 8017b0a:	e767      	b.n	80179dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017b0c:	2400b8c4 	.word	0x2400b8c4
 8017b10:	0802c748 	.word	0x0802c748

08017b14 <_ZN8touchgfx4RectaNERKS0_>:
 8017b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b18:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017b1c:	888c      	ldrh	r4, [r1, #4]
 8017b1e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017b22:	443c      	add	r4, r7
 8017b24:	b2a4      	uxth	r4, r4
 8017b26:	fa0f f884 	sxth.w	r8, r4
 8017b2a:	45c1      	cmp	r9, r8
 8017b2c:	da2f      	bge.n	8017b8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b2e:	8882      	ldrh	r2, [r0, #4]
 8017b30:	444a      	add	r2, r9
 8017b32:	b292      	uxth	r2, r2
 8017b34:	fa0f fe82 	sxth.w	lr, r2
 8017b38:	4577      	cmp	r7, lr
 8017b3a:	da28      	bge.n	8017b8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b3c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017b40:	88cb      	ldrh	r3, [r1, #6]
 8017b42:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017b46:	442b      	add	r3, r5
 8017b48:	b21b      	sxth	r3, r3
 8017b4a:	429e      	cmp	r6, r3
 8017b4c:	da1f      	bge.n	8017b8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b4e:	88c3      	ldrh	r3, [r0, #6]
 8017b50:	4433      	add	r3, r6
 8017b52:	b29b      	uxth	r3, r3
 8017b54:	fa0f fc83 	sxth.w	ip, r3
 8017b58:	4565      	cmp	r5, ip
 8017b5a:	da18      	bge.n	8017b8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017b5c:	454f      	cmp	r7, r9
 8017b5e:	bfb8      	it	lt
 8017b60:	464f      	movlt	r7, r9
 8017b62:	42b5      	cmp	r5, r6
 8017b64:	bfb8      	it	lt
 8017b66:	4635      	movlt	r5, r6
 8017b68:	45f0      	cmp	r8, lr
 8017b6a:	bfd8      	it	le
 8017b6c:	4622      	movle	r2, r4
 8017b6e:	1bd2      	subs	r2, r2, r7
 8017b70:	8082      	strh	r2, [r0, #4]
 8017b72:	884a      	ldrh	r2, [r1, #2]
 8017b74:	88c9      	ldrh	r1, [r1, #6]
 8017b76:	8007      	strh	r7, [r0, #0]
 8017b78:	440a      	add	r2, r1
 8017b7a:	8045      	strh	r5, [r0, #2]
 8017b7c:	b292      	uxth	r2, r2
 8017b7e:	b211      	sxth	r1, r2
 8017b80:	458c      	cmp	ip, r1
 8017b82:	bfa8      	it	ge
 8017b84:	4613      	movge	r3, r2
 8017b86:	1b5b      	subs	r3, r3, r5
 8017b88:	80c3      	strh	r3, [r0, #6]
 8017b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b8e:	2300      	movs	r3, #0
 8017b90:	8003      	strh	r3, [r0, #0]
 8017b92:	8043      	strh	r3, [r0, #2]
 8017b94:	8083      	strh	r3, [r0, #4]
 8017b96:	80c3      	strh	r3, [r0, #6]
 8017b98:	e7f7      	b.n	8017b8a <_ZN8touchgfx4RectaNERKS0_+0x76>

08017b9a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017b9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	dd06      	ble.n	8017bb0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017ba2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	bfcc      	ite	gt
 8017baa:	2000      	movgt	r0, #0
 8017bac:	2001      	movle	r0, #1
 8017bae:	4770      	bx	lr
 8017bb0:	2001      	movs	r0, #1
 8017bb2:	4770      	bx	lr

08017bb4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb8:	2300      	movs	r3, #0
 8017bba:	4604      	mov	r4, r0
 8017bbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017bbe:	8003      	strh	r3, [r0, #0]
 8017bc0:	8043      	strh	r3, [r0, #2]
 8017bc2:	8083      	strh	r3, [r0, #4]
 8017bc4:	80c3      	strh	r3, [r0, #6]
 8017bc6:	2d00      	cmp	r5, #0
 8017bc8:	d040      	beq.n	8017c4c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017bca:	1d28      	adds	r0, r5, #4
 8017bcc:	f7ff ffe5 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bd0:	b988      	cbnz	r0, 8017bf6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	f7ff ffe1 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017bd8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017bdc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017be0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017be4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017be8:	b138      	cbz	r0, 8017bfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017bea:	8022      	strh	r2, [r4, #0]
 8017bec:	8063      	strh	r3, [r4, #2]
 8017bee:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017bf2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017bf6:	69ad      	ldr	r5, [r5, #24]
 8017bf8:	e7e5      	b.n	8017bc6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017bfa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017bfe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017c02:	4290      	cmp	r0, r2
 8017c04:	4607      	mov	r7, r0
 8017c06:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017c0a:	460e      	mov	r6, r1
 8017c0c:	bfa8      	it	ge
 8017c0e:	4617      	movge	r7, r2
 8017c10:	4299      	cmp	r1, r3
 8017c12:	4472      	add	r2, lr
 8017c14:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017c18:	bfa8      	it	ge
 8017c1a:	461e      	movge	r6, r3
 8017c1c:	4440      	add	r0, r8
 8017c1e:	4471      	add	r1, lr
 8017c20:	4463      	add	r3, ip
 8017c22:	b200      	sxth	r0, r0
 8017c24:	8027      	strh	r7, [r4, #0]
 8017c26:	b212      	sxth	r2, r2
 8017c28:	8066      	strh	r6, [r4, #2]
 8017c2a:	b209      	sxth	r1, r1
 8017c2c:	b21b      	sxth	r3, r3
 8017c2e:	4290      	cmp	r0, r2
 8017c30:	bfac      	ite	ge
 8017c32:	ebc7 0200 	rsbge	r2, r7, r0
 8017c36:	ebc7 0202 	rsblt	r2, r7, r2
 8017c3a:	4299      	cmp	r1, r3
 8017c3c:	bfac      	ite	ge
 8017c3e:	ebc6 0301 	rsbge	r3, r6, r1
 8017c42:	ebc6 0303 	rsblt	r3, r6, r3
 8017c46:	80a2      	strh	r2, [r4, #4]
 8017c48:	80e3      	strh	r3, [r4, #6]
 8017c4a:	e7d4      	b.n	8017bf6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017c4c:	4620      	mov	r0, r4
 8017c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017c52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017c56:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017c5a:	b383      	cbz	r3, 8017cbe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017c5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017c5e:	b374      	cbz	r4, 8017cbe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017c60:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017c64:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017c68:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017c6c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017c70:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017c74:	b303      	cbz	r3, 8017cb8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017c76:	4668      	mov	r0, sp
 8017c78:	1d21      	adds	r1, r4, #4
 8017c7a:	f8ad 5000 	strh.w	r5, [sp]
 8017c7e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017c82:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017c86:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017c8a:	f7ff ff43 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8017c8e:	4668      	mov	r0, sp
 8017c90:	f7ff ff83 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c94:	b980      	cbnz	r0, 8017cb8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017c96:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c9a:	4669      	mov	r1, sp
 8017c9c:	88a2      	ldrh	r2, [r4, #4]
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	1a9b      	subs	r3, r3, r2
 8017ca2:	88e2      	ldrh	r2, [r4, #6]
 8017ca4:	f8ad 3000 	strh.w	r3, [sp]
 8017ca8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017cac:	1a9b      	subs	r3, r3, r2
 8017cae:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017cb2:	6823      	ldr	r3, [r4, #0]
 8017cb4:	689b      	ldr	r3, [r3, #8]
 8017cb6:	4798      	blx	r3
 8017cb8:	69a4      	ldr	r4, [r4, #24]
 8017cba:	2c00      	cmp	r4, #0
 8017cbc:	d1d8      	bne.n	8017c70 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017cbe:	b002      	add	sp, #8
 8017cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cc4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017cc6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017cca:	460d      	mov	r5, r1
 8017ccc:	4616      	mov	r6, r2
 8017cce:	b323      	cbz	r3, 8017d1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017cd0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017cd2:	b314      	cbz	r4, 8017d1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017cd4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017cd8:	b1eb      	cbz	r3, 8017d16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017cda:	6828      	ldr	r0, [r5, #0]
 8017cdc:	466b      	mov	r3, sp
 8017cde:	6869      	ldr	r1, [r5, #4]
 8017ce0:	c303      	stmia	r3!, {r0, r1}
 8017ce2:	4668      	mov	r0, sp
 8017ce4:	1d21      	adds	r1, r4, #4
 8017ce6:	f7ff ff15 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8017cea:	4668      	mov	r0, sp
 8017cec:	f7ff ff55 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017cf0:	b988      	cbnz	r0, 8017d16 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017cf2:	f8bd 3000 	ldrh.w	r3, [sp]
 8017cf6:	4669      	mov	r1, sp
 8017cf8:	88a2      	ldrh	r2, [r4, #4]
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	1a9b      	subs	r3, r3, r2
 8017cfe:	88e2      	ldrh	r2, [r4, #6]
 8017d00:	f8ad 3000 	strh.w	r3, [sp]
 8017d04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017d08:	1a9b      	subs	r3, r3, r2
 8017d0a:	4632      	mov	r2, r6
 8017d0c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017d10:	6823      	ldr	r3, [r4, #0]
 8017d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d14:	4798      	blx	r3
 8017d16:	69a4      	ldr	r4, [r4, #24]
 8017d18:	e7db      	b.n	8017cd2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8017d1a:	b002      	add	sp, #8
 8017d1c:	bd70      	pop	{r4, r5, r6, pc}

08017d1e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8017d1e:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 8017d22:	4770      	bx	lr

08017d24 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8017d24:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8017d28:	4770      	bx	lr

08017d2a <_ZNK8touchgfx6Slider11getMinValueEv>:
 8017d2a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8017d2c:	4770      	bx	lr

08017d2e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8017d2e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8017d30:	4770      	bx	lr

08017d32 <_ZN8touchgfx6Slider8setValueEi>:
 8017d32:	b570      	push	{r4, r5, r6, lr}
 8017d34:	6803      	ldr	r3, [r0, #0]
 8017d36:	4604      	mov	r4, r0
 8017d38:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 8017d3c:	4798      	blx	r3
 8017d3e:	4601      	mov	r1, r0
 8017d40:	462b      	mov	r3, r5
 8017d42:	4620      	mov	r0, r4
 8017d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d48:	4718      	bx	r3

08017d4a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8017d4a:	b538      	push	{r3, r4, r5, lr}
 8017d4c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8017d50:	4605      	mov	r5, r0
 8017d52:	428c      	cmp	r4, r1
 8017d54:	bfa8      	it	ge
 8017d56:	460c      	movge	r4, r1
 8017d58:	429c      	cmp	r4, r3
 8017d5a:	bfac      	ite	ge
 8017d5c:	ebc3 0404 	rsbge	r4, r3, r4
 8017d60:	ebc3 0403 	rsblt	r4, r3, r3
 8017d64:	6803      	ldr	r3, [r0, #0]
 8017d66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017d6a:	4798      	blx	r3
 8017d6c:	682b      	ldr	r3, [r5, #0]
 8017d6e:	fb00 4404 	mla	r4, r0, r4, r4
 8017d72:	4628      	mov	r0, r5
 8017d74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017d78:	4798      	blx	r3
 8017d7a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8017d7e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 8017d82:	2a01      	cmp	r2, #1
 8017d84:	fb94 f0f0 	sdiv	r0, r4, r0
 8017d88:	bf08      	it	eq
 8017d8a:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 8017d8e:	4418      	add	r0, r3
 8017d90:	bf04      	itt	eq
 8017d92:	1a10      	subeq	r0, r2, r0
 8017d94:	18c0      	addeq	r0, r0, r3
 8017d96:	b200      	sxth	r0, r0
 8017d98:	bd38      	pop	{r3, r4, r5, pc}

08017d9a <_ZNK8touchgfx6Slider15positionToValueEs>:
 8017d9a:	b570      	push	{r4, r5, r6, lr}
 8017d9c:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 8017da0:	4605      	mov	r5, r0
 8017da2:	460c      	mov	r4, r1
 8017da4:	428b      	cmp	r3, r1
 8017da6:	d109      	bne.n	8017dbc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8017da8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017daa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8017dae:	2b01      	cmp	r3, #1
 8017db0:	bf01      	itttt	eq
 8017db2:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8017db4:	1a18      	subeq	r0, r3, r0
 8017db6:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8017db8:	18c0      	addeq	r0, r0, r3
 8017dba:	bd70      	pop	{r4, r5, r6, pc}
 8017dbc:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8017dc0:	428b      	cmp	r3, r1
 8017dc2:	d101      	bne.n	8017dc8 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8017dc4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017dc6:	e7f0      	b.n	8017daa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8017dc8:	6803      	ldr	r3, [r0, #0]
 8017dca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017dce:	4798      	blx	r3
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8017dd6:	4606      	mov	r6, r0
 8017dd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017ddc:	4628      	mov	r0, r5
 8017dde:	1a64      	subs	r4, r4, r1
 8017de0:	4798      	blx	r3
 8017de2:	2102      	movs	r1, #2
 8017de4:	682b      	ldr	r3, [r5, #0]
 8017de6:	fb96 f6f1 	sdiv	r6, r6, r1
 8017dea:	fb00 6404 	mla	r4, r0, r4, r6
 8017dee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017df2:	4628      	mov	r0, r5
 8017df4:	4798      	blx	r3
 8017df6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017df8:	fb94 f0f0 	sdiv	r0, r4, r0
 8017dfc:	4418      	add	r0, r3
 8017dfe:	e7d4      	b.n	8017daa <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08017e00 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8017e00:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8017e04:	2302      	movs	r3, #2
 8017e06:	b92a      	cbnz	r2, 8017e14 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8017e08:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 8017e0c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017e10:	b280      	uxth	r0, r0
 8017e12:	4770      	bx	lr
 8017e14:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8017e18:	e7f8      	b.n	8017e0c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

08017e1a <_ZN8touchgfx6Slider13setValueRangeEii>:
 8017e1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e1c:	428b      	cmp	r3, r1
 8017e1e:	b410      	push	{r4}
 8017e20:	db09      	blt.n	8017e36 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8017e22:	4293      	cmp	r3, r2
 8017e24:	bfa8      	it	ge
 8017e26:	4613      	movge	r3, r2
 8017e28:	6804      	ldr	r4, [r0, #0]
 8017e2a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 8017e2e:	46a4      	mov	ip, r4
 8017e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e34:	4760      	bx	ip
 8017e36:	460b      	mov	r3, r1
 8017e38:	e7f6      	b.n	8017e28 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

08017e3a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8017e3a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 8017e3e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8017e42:	1a10      	subs	r0, r2, r0
 8017e44:	4770      	bx	lr

08017e46 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8017e46:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 8017e4a:	1a10      	subs	r0, r2, r0
 8017e4c:	4770      	bx	lr
	...

08017e50 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8017e50:	4291      	cmp	r1, r2
 8017e52:	b510      	push	{r4, lr}
 8017e54:	db06      	blt.n	8017e64 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8017e56:	4b08      	ldr	r3, [pc, #32]	; (8017e78 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8017e58:	f240 110d 	movw	r1, #269	; 0x10d
 8017e5c:	4a07      	ldr	r2, [pc, #28]	; (8017e7c <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8017e5e:	4808      	ldr	r0, [pc, #32]	; (8017e80 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8017e60:	f012 fd38 	bl	802a8d4 <__assert_func>
 8017e64:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8017e68:	6802      	ldr	r2, [r0, #0]
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8017e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e74:	4710      	bx	r2
 8017e76:	bf00      	nop
 8017e78:	0802d9b2 	.word	0x0802d9b2
 8017e7c:	0802dc55 	.word	0x0802dc55
 8017e80:	0802da0a 	.word	0x0802da0a

08017e84 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8017e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e88:	790b      	ldrb	r3, [r1, #4]
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	460d      	mov	r5, r1
 8017e8e:	b323      	cbz	r3, 8017eda <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d135      	bne.n	8017f00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017e94:	6823      	ldr	r3, [r4, #0]
 8017e96:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8017e9a:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8017e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017ea2:	2a00      	cmp	r2, #0
 8017ea4:	d12a      	bne.n	8017efc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8017ea6:	88ee      	ldrh	r6, [r5, #6]
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	4798      	blx	r3
 8017eac:	1a31      	subs	r1, r6, r0
 8017eae:	4620      	mov	r0, r4
 8017eb0:	b209      	sxth	r1, r1
 8017eb2:	47b8      	blx	r7
 8017eb4:	792b      	ldrb	r3, [r5, #4]
 8017eb6:	2b01      	cmp	r3, #1
 8017eb8:	d122      	bne.n	8017f00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017eba:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8017ebe:	b1f8      	cbz	r0, 8017f00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017ec0:	6803      	ldr	r3, [r0, #0]
 8017ec2:	68db      	ldr	r3, [r3, #12]
 8017ec4:	4798      	blx	r3
 8017ec6:	b1d8      	cbz	r0, 8017f00 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8017ec8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8017ecc:	4621      	mov	r1, r4
 8017ece:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017ed0:	6803      	ldr	r3, [r0, #0]
 8017ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed6:	689b      	ldr	r3, [r3, #8]
 8017ed8:	4718      	bx	r3
 8017eda:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d0d8      	beq.n	8017e94 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017ee2:	6803      	ldr	r3, [r0, #0]
 8017ee4:	68db      	ldr	r3, [r3, #12]
 8017ee6:	4798      	blx	r3
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	d0d3      	beq.n	8017e94 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017eec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8017ef0:	4621      	mov	r1, r4
 8017ef2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017ef4:	6803      	ldr	r3, [r0, #0]
 8017ef6:	689b      	ldr	r3, [r3, #8]
 8017ef8:	4798      	blx	r3
 8017efa:	e7cb      	b.n	8017e94 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8017efc:	892e      	ldrh	r6, [r5, #8]
 8017efe:	e7d3      	b.n	8017ea8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8017f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f04 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8017f04:	b570      	push	{r4, r5, r6, lr}
 8017f06:	6803      	ldr	r3, [r0, #0]
 8017f08:	4604      	mov	r4, r0
 8017f0a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8017f0e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8017f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017f16:	b942      	cbnz	r2, 8017f2a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8017f18:	894d      	ldrh	r5, [r1, #10]
 8017f1a:	4798      	blx	r3
 8017f1c:	1a29      	subs	r1, r5, r0
 8017f1e:	4633      	mov	r3, r6
 8017f20:	4620      	mov	r0, r4
 8017f22:	b209      	sxth	r1, r1
 8017f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f28:	4718      	bx	r3
 8017f2a:	898d      	ldrh	r5, [r1, #12]
 8017f2c:	e7f5      	b.n	8017f1a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08017f30 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8017f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f34:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8017f38:	4604      	mov	r4, r0
 8017f3a:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8017f3e:	4689      	mov	r9, r1
 8017f40:	4690      	mov	r8, r2
 8017f42:	461d      	mov	r5, r3
 8017f44:	42b7      	cmp	r7, r6
 8017f46:	d305      	bcc.n	8017f54 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8017f48:	4b26      	ldr	r3, [pc, #152]	; (8017fe4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 8017f4a:	2149      	movs	r1, #73	; 0x49
 8017f4c:	4a26      	ldr	r2, [pc, #152]	; (8017fe8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 8017f4e:	4827      	ldr	r0, [pc, #156]	; (8017fec <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8017f50:	f012 fcc0 	bl	802a8d4 <__assert_func>
 8017f54:	f04f 0a00 	mov.w	sl, #0
 8017f58:	b213      	sxth	r3, r2
 8017f5a:	fa0f fb81 	sxth.w	fp, r1
 8017f5e:	303c      	adds	r0, #60	; 0x3c
 8017f60:	f800 ac10 	strb.w	sl, [r0, #-16]
 8017f64:	461a      	mov	r2, r3
 8017f66:	4659      	mov	r1, fp
 8017f68:	9301      	str	r3, [sp, #4]
 8017f6a:	f7ec f879 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 8017f6e:	9b01      	ldr	r3, [sp, #4]
 8017f70:	4659      	mov	r1, fp
 8017f72:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8017f76:	461a      	mov	r2, r3
 8017f78:	f7ec f872 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 8017f7c:	4652      	mov	r2, sl
 8017f7e:	4651      	mov	r1, sl
 8017f80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017f84:	f7ec f86c 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 8017f88:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8017f8c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8017f90:	4620      	mov	r0, r4
 8017f92:	4489      	add	r9, r1
 8017f94:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8017f98:	4490      	add	r8, r2
 8017f9a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8017f9e:	4431      	add	r1, r6
 8017fa0:	fa1f f989 	uxth.w	r9, r9
 8017fa4:	442a      	add	r2, r5
 8017fa6:	fa1f f888 	uxth.w	r8, r8
 8017faa:	b289      	uxth	r1, r1
 8017fac:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8017fb0:	b292      	uxth	r2, r2
 8017fb2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8017fb6:	4589      	cmp	r9, r1
 8017fb8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 8017fbc:	bf8c      	ite	hi
 8017fbe:	fa0f f189 	sxthhi.w	r1, r9
 8017fc2:	b209      	sxthls	r1, r1
 8017fc4:	4590      	cmp	r8, r2
 8017fc6:	bf8c      	ite	hi
 8017fc8:	fa0f f288 	sxthhi.w	r2, r8
 8017fcc:	b212      	sxthls	r2, r2
 8017fce:	f7ec f8a3 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017fd2:	6823      	ldr	r3, [r4, #0]
 8017fd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8017fdc:	b003      	add	sp, #12
 8017fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe2:	4718      	bx	r3
 8017fe4:	0802daac 	.word	0x0802daac
 8017fe8:	0802dcf6 	.word	0x0802dcf6
 8017fec:	0802da0a 	.word	0x0802da0a

08017ff0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8017ff0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ff4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8017ffe:	4689      	mov	r9, r1
 8018000:	4690      	mov	r8, r2
 8018002:	461d      	mov	r5, r3
 8018004:	42b7      	cmp	r7, r6
 8018006:	d305      	bcc.n	8018014 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8018008:	4b22      	ldr	r3, [pc, #136]	; (8018094 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801800a:	2164      	movs	r1, #100	; 0x64
 801800c:	4a22      	ldr	r2, [pc, #136]	; (8018098 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 801800e:	4823      	ldr	r0, [pc, #140]	; (801809c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8018010:	f012 fc60 	bl	802a8d4 <__assert_func>
 8018014:	2301      	movs	r3, #1
 8018016:	fa0f fa81 	sxth.w	sl, r1
 801801a:	fa0f fb82 	sxth.w	fp, r2
 801801e:	303c      	adds	r0, #60	; 0x3c
 8018020:	f800 3c10 	strb.w	r3, [r0, #-16]
 8018024:	4651      	mov	r1, sl
 8018026:	465a      	mov	r2, fp
 8018028:	f7ec f81a 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 801802c:	465a      	mov	r2, fp
 801802e:	4651      	mov	r1, sl
 8018030:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8018034:	f7ec f814 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 8018038:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801803c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8018040:	4620      	mov	r0, r4
 8018042:	4489      	add	r9, r1
 8018044:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8018048:	4490      	add	r8, r2
 801804a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801804e:	4429      	add	r1, r5
 8018050:	fa1f f989 	uxth.w	r9, r9
 8018054:	4432      	add	r2, r6
 8018056:	fa1f f888 	uxth.w	r8, r8
 801805a:	b289      	uxth	r1, r1
 801805c:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8018060:	b292      	uxth	r2, r2
 8018062:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8018066:	4589      	cmp	r9, r1
 8018068:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801806c:	bf8c      	ite	hi
 801806e:	fa0f f189 	sxthhi.w	r1, r9
 8018072:	b209      	sxthls	r1, r1
 8018074:	4590      	cmp	r8, r2
 8018076:	bf8c      	ite	hi
 8018078:	fa0f f288 	sxthhi.w	r2, r8
 801807c:	b212      	sxthls	r2, r2
 801807e:	f7ec f84b 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018082:	6823      	ldr	r3, [r4, #0]
 8018084:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018086:	4620      	mov	r0, r4
 8018088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801808c:	b001      	add	sp, #4
 801808e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018092:	4718      	bx	r3
 8018094:	0802da3a 	.word	0x0802da3a
 8018098:	0802dc91 	.word	0x0802dc91
 801809c:	0802da0a 	.word	0x0802da0a

080180a0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80180a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180a4:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 80180a8:	4604      	mov	r4, r0
 80180aa:	3094      	adds	r0, #148	; 0x94
 80180ac:	4588      	cmp	r8, r1
 80180ae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80180b2:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80180b6:	bfb8      	it	lt
 80180b8:	4688      	movlt	r8, r1
 80180ba:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 80180be:	4588      	cmp	r8, r1
 80180c0:	bfa8      	it	ge
 80180c2:	4688      	movge	r8, r1
 80180c4:	fa1f f788 	uxth.w	r7, r8
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d12f      	bne.n	801812c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 80180cc:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80180d0:	4641      	mov	r1, r8
 80180d2:	f7ec f86e 	bl	80041b2 <_ZN8touchgfx8Drawable6moveToEss>
 80180d6:	4630      	mov	r0, r6
 80180d8:	f004 fa58 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
 80180dc:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80180e0:	6823      	ldr	r3, [r4, #0]
 80180e2:	4620      	mov	r0, r4
 80180e4:	1abf      	subs	r7, r7, r2
 80180e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80180ea:	b2bf      	uxth	r7, r7
 80180ec:	4798      	blx	r3
 80180ee:	4407      	add	r7, r0
 80180f0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 80180f4:	4630      	mov	r0, r6
 80180f6:	f004 fa49 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
 80180fa:	6823      	ldr	r3, [r4, #0]
 80180fc:	4641      	mov	r1, r8
 80180fe:	4620      	mov	r0, r4
 8018100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018104:	4798      	blx	r3
 8018106:	6320      	str	r0, [r4, #48]	; 0x30
 8018108:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801810c:	2800      	cmp	r0, #0
 801810e:	d03d      	beq.n	801818c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8018110:	6803      	ldr	r3, [r0, #0]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	4798      	blx	r3
 8018116:	2800      	cmp	r0, #0
 8018118:	d038      	beq.n	801818c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801811a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801811e:	4621      	mov	r1, r4
 8018120:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018122:	6803      	ldr	r3, [r0, #0]
 8018124:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018128:	689b      	ldr	r3, [r3, #8]
 801812a:	4718      	bx	r3
 801812c:	4642      	mov	r2, r8
 801812e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8018132:	f7ec f83e 	bl	80041b2 <_ZN8touchgfx8Drawable6moveToEss>
 8018136:	4630      	mov	r0, r6
 8018138:	f004 fa28 	bl	801c58c <_ZNK8touchgfx8Drawable10invalidateEv>
 801813c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8018140:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8018144:	6823      	ldr	r3, [r4, #0]
 8018146:	4405      	add	r5, r0
 8018148:	4620      	mov	r0, r4
 801814a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801814e:	b2ad      	uxth	r5, r5
 8018150:	4798      	blx	r3
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	1bed      	subs	r5, r5, r7
 8018156:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 801815a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801815e:	1a2d      	subs	r5, r5, r0
 8018160:	4620      	mov	r0, r4
 8018162:	4798      	blx	r3
 8018164:	4438      	add	r0, r7
 8018166:	b2ad      	uxth	r5, r5
 8018168:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 801816c:	b202      	sxth	r2, r0
 801816e:	4651      	mov	r1, sl
 8018170:	4630      	mov	r0, r6
 8018172:	f7eb ff75 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 8018176:	4630      	mov	r0, r6
 8018178:	b22a      	sxth	r2, r5
 801817a:	4649      	mov	r1, r9
 801817c:	f7eb ffcc 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018180:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8018184:	1a2d      	subs	r5, r5, r0
 8018186:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801818a:	e7b3      	b.n	80180f4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 801818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018190 <_ZN8touchgfx6SliderC1Ev>:
 8018190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	4604      	mov	r4, r0
 8018196:	2500      	movs	r5, #0
 8018198:	f7eb fea2 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 801819c:	ae02      	add	r6, sp, #8
 801819e:	4b28      	ldr	r3, [pc, #160]	; (8018240 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 80181a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80181a4:	f04f 0b01 	mov.w	fp, #1
 80181a8:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80181ac:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 80181b0:	6023      	str	r3, [r4, #0]
 80181b2:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80181b6:	4648      	mov	r0, r9
 80181b8:	4631      	mov	r1, r6
 80181ba:	62a5      	str	r5, [r4, #40]	; 0x28
 80181bc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80181c0:	f104 0894 	add.w	r8, r4, #148	; 0x94
 80181c4:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 80181c8:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80181cc:	f7ed fc26 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80181d0:	4631      	mov	r1, r6
 80181d2:	4650      	mov	r0, sl
 80181d4:	f8ad 7004 	strh.w	r7, [sp, #4]
 80181d8:	f7ed fc20 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80181dc:	4631      	mov	r1, r6
 80181de:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80181e2:	4640      	mov	r0, r8
 80181e4:	f8ad 7004 	strh.w	r7, [sp, #4]
 80181e8:	f7ed fc18 	bl	8005a1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80181ec:	4630      	mov	r0, r6
 80181ee:	f7eb fe77 	bl	8003ee0 <_ZN8touchgfx8DrawableC1Ev>
 80181f2:	4b14      	ldr	r3, [pc, #80]	; (8018244 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 80181f4:	4651      	mov	r1, sl
 80181f6:	4630      	mov	r0, r6
 80181f8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80181fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8018200:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 8018204:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8018208:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801820c:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8018210:	f7ff fb3e 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018214:	4649      	mov	r1, r9
 8018216:	4620      	mov	r0, r4
 8018218:	f7ff fb3a 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801821c:	4631      	mov	r1, r6
 801821e:	4620      	mov	r0, r4
 8018220:	f7ff fb36 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018224:	4641      	mov	r1, r8
 8018226:	4620      	mov	r0, r4
 8018228:	f7ff fb32 	bl	8017890 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801822c:	4620      	mov	r0, r4
 801822e:	2264      	movs	r2, #100	; 0x64
 8018230:	4629      	mov	r1, r5
 8018232:	f7ff fdf2 	bl	8017e1a <_ZN8touchgfx6Slider13setValueRangeEii>
 8018236:	4620      	mov	r0, r4
 8018238:	b003      	add	sp, #12
 801823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823e:	bf00      	nop
 8018240:	0802db28 	.word	0x0802db28
 8018244:	0802d814 	.word	0x0802d814

08018248 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8018248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801824c:	4615      	mov	r5, r2
 801824e:	4604      	mov	r4, r0
 8018250:	4608      	mov	r0, r1
 8018252:	460e      	mov	r6, r1
 8018254:	461f      	mov	r7, r3
 8018256:	f006 facb 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801825a:	4680      	mov	r8, r0
 801825c:	4628      	mov	r0, r5
 801825e:	f006 fac7 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018262:	4580      	cmp	r8, r0
 8018264:	d005      	beq.n	8018272 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8018266:	4b14      	ldr	r3, [pc, #80]	; (80182b8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8018268:	213a      	movs	r1, #58	; 0x3a
 801826a:	4a14      	ldr	r2, [pc, #80]	; (80182bc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801826c:	4814      	ldr	r0, [pc, #80]	; (80182c0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801826e:	f012 fb31 	bl	802a8d4 <__assert_func>
 8018272:	4630      	mov	r0, r6
 8018274:	f006 faf6 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018278:	4680      	mov	r8, r0
 801827a:	4628      	mov	r0, r5
 801827c:	f006 faf2 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018280:	4580      	cmp	r8, r0
 8018282:	d1f0      	bne.n	8018266 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8018284:	4631      	mov	r1, r6
 8018286:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801828a:	f001 fca6 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801828e:	4629      	mov	r1, r5
 8018290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018294:	f001 fca1 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018298:	4639      	mov	r1, r7
 801829a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801829e:	f001 fc9c 	bl	8019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80182a2:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 80182a6:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 80182aa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80182ae:	f7eb ff33 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80182b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182b6:	bf00      	nop
 80182b8:	0802d8d3 	.word	0x0802d8d3
 80182bc:	0802dbe8 	.word	0x0802dbe8
 80182c0:	0802da0a 	.word	0x0802da0a

080182c4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80182c4:	4770      	bx	lr

080182c6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80182c6:	4770      	bx	lr

080182c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80182c8:	6803      	ldr	r3, [r0, #0]
 80182ca:	b513      	push	{r0, r1, r4, lr}
 80182cc:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80182d0:	2300      	movs	r3, #0
 80182d2:	e9cd 3300 	strd	r3, r3, [sp]
 80182d6:	466b      	mov	r3, sp
 80182d8:	47a0      	blx	r4
 80182da:	b002      	add	sp, #8
 80182dc:	bd10      	pop	{r4, pc}

080182de <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80182de:	2301      	movs	r3, #1
 80182e0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80182e4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80182e8:	4770      	bx	lr

080182ea <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80182ea:	2301      	movs	r3, #1
 80182ec:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80182f0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80182f4:	4770      	bx	lr

080182f6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80182f6:	6843      	ldr	r3, [r0, #4]
 80182f8:	2201      	movs	r2, #1
 80182fa:	725a      	strb	r2, [r3, #9]
 80182fc:	6840      	ldr	r0, [r0, #4]
 80182fe:	6803      	ldr	r3, [r0, #0]
 8018300:	691b      	ldr	r3, [r3, #16]
 8018302:	4718      	bx	r3

08018304 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018304:	6840      	ldr	r0, [r0, #4]
 8018306:	6803      	ldr	r3, [r0, #0]
 8018308:	689b      	ldr	r3, [r3, #8]
 801830a:	4718      	bx	r3

0801830c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801830c:	b530      	push	{r4, r5, lr}
 801830e:	b08b      	sub	sp, #44	; 0x2c
 8018310:	6804      	ldr	r4, [r0, #0]
 8018312:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8018316:	9509      	str	r5, [sp, #36]	; 0x24
 8018318:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801831c:	9508      	str	r5, [sp, #32]
 801831e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018322:	9507      	str	r5, [sp, #28]
 8018324:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8018328:	9506      	str	r5, [sp, #24]
 801832a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801832e:	9505      	str	r5, [sp, #20]
 8018330:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8018334:	9504      	str	r5, [sp, #16]
 8018336:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801833a:	9503      	str	r5, [sp, #12]
 801833c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018340:	9502      	str	r5, [sp, #8]
 8018342:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018346:	e9cd 3500 	strd	r3, r5, [sp]
 801834a:	4613      	mov	r3, r2
 801834c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801834e:	2200      	movs	r2, #0
 8018350:	47a0      	blx	r4
 8018352:	b00b      	add	sp, #44	; 0x2c
 8018354:	bd30      	pop	{r4, r5, pc}
	...

08018358 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018358:	4b04      	ldr	r3, [pc, #16]	; (801836c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	b123      	cbz	r3, 8018368 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801835e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018362:	f080 0001 	eor.w	r0, r0, #1
 8018366:	4770      	bx	lr
 8018368:	2001      	movs	r0, #1
 801836a:	4770      	bx	lr
 801836c:	2400b8c2 	.word	0x2400b8c2

08018370 <_ZN8touchgfx3HAL8endFrameEv>:
 8018370:	b510      	push	{r4, lr}
 8018372:	4604      	mov	r4, r0
 8018374:	6840      	ldr	r0, [r0, #4]
 8018376:	6803      	ldr	r3, [r0, #0]
 8018378:	689b      	ldr	r3, [r3, #8]
 801837a:	4798      	blx	r3
 801837c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018380:	b113      	cbz	r3, 8018388 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018382:	2301      	movs	r3, #1
 8018384:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018388:	bd10      	pop	{r4, pc}

0801838a <_ZN8touchgfx3HAL10initializeEv>:
 801838a:	b510      	push	{r4, lr}
 801838c:	4604      	mov	r4, r0
 801838e:	f7e9 fdd3 	bl	8001f38 <_ZN8touchgfx10OSWrappers10initializeEv>
 8018392:	6860      	ldr	r0, [r4, #4]
 8018394:	6803      	ldr	r3, [r0, #0]
 8018396:	68db      	ldr	r3, [r3, #12]
 8018398:	4798      	blx	r3
 801839a:	68e0      	ldr	r0, [r4, #12]
 801839c:	6803      	ldr	r3, [r0, #0]
 801839e:	689b      	ldr	r3, [r3, #8]
 80183a0:	4798      	blx	r3
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	4620      	mov	r0, r4
 80183a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183ac:	4718      	bx	r3

080183ae <_ZN8touchgfx3HAL9taskEntryEv>:
 80183ae:	b508      	push	{r3, lr}
 80183b0:	6803      	ldr	r3, [r0, #0]
 80183b2:	4604      	mov	r4, r0
 80183b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80183b6:	4798      	blx	r3
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183bc:	4620      	mov	r0, r4
 80183be:	4798      	blx	r3
 80183c0:	f7e9 fe30 	bl	8002024 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80183c4:	6823      	ldr	r3, [r4, #0]
 80183c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183c8:	e7f8      	b.n	80183bc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080183cc <_ZN8touchgfx3HAL4tickEv>:
 80183cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80183ce:	6803      	ldr	r3, [r0, #0]
 80183d0:	4604      	mov	r4, r0
 80183d2:	4d5c      	ldr	r5, [pc, #368]	; (8018544 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80183d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80183d8:	4798      	blx	r3
 80183da:	2800      	cmp	r0, #0
 80183dc:	f000 8097 	beq.w	801850e <_ZN8touchgfx3HAL4tickEv+0x142>
 80183e0:	2001      	movs	r0, #1
 80183e2:	2600      	movs	r6, #0
 80183e4:	f7e9 fae6 	bl	80019b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80183e8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80183ec:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80183f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80183f4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80183f8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80183fc:	b133      	cbz	r3, 801840c <_ZN8touchgfx3HAL4tickEv+0x40>
 80183fe:	6823      	ldr	r3, [r4, #0]
 8018400:	4620      	mov	r0, r4
 8018402:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018406:	4798      	blx	r3
 8018408:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801840c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018410:	2601      	movs	r6, #1
 8018412:	6862      	ldr	r2, [r4, #4]
 8018414:	f083 0301 	eor.w	r3, r3, #1
 8018418:	702e      	strb	r6, [r5, #0]
 801841a:	7253      	strb	r3, [r2, #9]
 801841c:	f003 f8ec 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8018420:	6803      	ldr	r3, [r0, #0]
 8018422:	4631      	mov	r1, r6
 8018424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018426:	4798      	blx	r3
 8018428:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801842c:	b90b      	cbnz	r3, 8018432 <_ZN8touchgfx3HAL4tickEv+0x66>
 801842e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018432:	f003 f8e1 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8018436:	6803      	ldr	r3, [r0, #0]
 8018438:	695b      	ldr	r3, [r3, #20]
 801843a:	4798      	blx	r3
 801843c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801843e:	6803      	ldr	r3, [r0, #0]
 8018440:	691b      	ldr	r3, [r3, #16]
 8018442:	4798      	blx	r3
 8018444:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018448:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801844c:	3b01      	subs	r3, #1
 801844e:	b2db      	uxtb	r3, r3
 8018450:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018454:	b10a      	cbz	r2, 801845a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018456:	2b00      	cmp	r3, #0
 8018458:	d1eb      	bne.n	8018432 <_ZN8touchgfx3HAL4tickEv+0x66>
 801845a:	4a3b      	ldr	r2, [pc, #236]	; (8018548 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801845c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018460:	7813      	ldrb	r3, [r2, #0]
 8018462:	3301      	adds	r3, #1
 8018464:	b25b      	sxtb	r3, r3
 8018466:	4299      	cmp	r1, r3
 8018468:	7013      	strb	r3, [r2, #0]
 801846a:	dc10      	bgt.n	801848e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801846c:	2300      	movs	r3, #0
 801846e:	68e0      	ldr	r0, [r4, #12]
 8018470:	a902      	add	r1, sp, #8
 8018472:	7013      	strb	r3, [r2, #0]
 8018474:	aa03      	add	r2, sp, #12
 8018476:	6803      	ldr	r3, [r0, #0]
 8018478:	68db      	ldr	r3, [r3, #12]
 801847a:	4798      	blx	r3
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	2800      	cmp	r0, #0
 8018480:	d051      	beq.n	8018526 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018482:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018486:	4620      	mov	r0, r4
 8018488:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801848c:	4798      	blx	r3
 801848e:	2300      	movs	r3, #0
 8018490:	6960      	ldr	r0, [r4, #20]
 8018492:	f88d 3007 	strb.w	r3, [sp, #7]
 8018496:	b158      	cbz	r0, 80184b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018498:	6803      	ldr	r3, [r0, #0]
 801849a:	f10d 0107 	add.w	r1, sp, #7
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	4798      	blx	r3
 80184a2:	b128      	cbz	r0, 80184b0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80184a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80184aa:	6803      	ldr	r3, [r0, #0]
 80184ac:	68db      	ldr	r3, [r3, #12]
 80184ae:	4798      	blx	r3
 80184b0:	f104 001c 	add.w	r0, r4, #28
 80184b4:	f012 f926 	bl	802a704 <_ZN8touchgfx8Gestures4tickEv>
 80184b8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80184bc:	b30b      	cbz	r3, 8018502 <_ZN8touchgfx3HAL4tickEv+0x136>
 80184be:	6920      	ldr	r0, [r4, #16]
 80184c0:	6803      	ldr	r3, [r0, #0]
 80184c2:	691b      	ldr	r3, [r3, #16]
 80184c4:	4798      	blx	r3
 80184c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80184c8:	4606      	mov	r6, r0
 80184ca:	b903      	cbnz	r3, 80184ce <_ZN8touchgfx3HAL4tickEv+0x102>
 80184cc:	6720      	str	r0, [r4, #112]	; 0x70
 80184ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80184d0:	4a1e      	ldr	r2, [pc, #120]	; (801854c <_ZN8touchgfx3HAL4tickEv+0x180>)
 80184d2:	1af3      	subs	r3, r6, r3
 80184d4:	4293      	cmp	r3, r2
 80184d6:	d914      	bls.n	8018502 <_ZN8touchgfx3HAL4tickEv+0x136>
 80184d8:	6920      	ldr	r0, [r4, #16]
 80184da:	6803      	ldr	r3, [r0, #0]
 80184dc:	699b      	ldr	r3, [r3, #24]
 80184de:	4798      	blx	r3
 80184e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80184e2:	2264      	movs	r2, #100	; 0x64
 80184e4:	1af3      	subs	r3, r6, r3
 80184e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80184ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80184ee:	2800      	cmp	r0, #0
 80184f0:	dc1e      	bgt.n	8018530 <_ZN8touchgfx3HAL4tickEv+0x164>
 80184f2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80184f6:	6920      	ldr	r0, [r4, #16]
 80184f8:	2100      	movs	r1, #0
 80184fa:	6803      	ldr	r3, [r0, #0]
 80184fc:	69db      	ldr	r3, [r3, #28]
 80184fe:	4798      	blx	r3
 8018500:	6726      	str	r6, [r4, #112]	; 0x70
 8018502:	f003 f879 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 8018506:	6803      	ldr	r3, [r0, #0]
 8018508:	2100      	movs	r1, #0
 801850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801850c:	4798      	blx	r3
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	4620      	mov	r0, r4
 8018512:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018516:	4798      	blx	r3
 8018518:	2001      	movs	r0, #1
 801851a:	f7e9 fa67 	bl	80019ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801851e:	2300      	movs	r3, #0
 8018520:	702b      	strb	r3, [r5, #0]
 8018522:	b004      	add	sp, #16
 8018524:	bd70      	pop	{r4, r5, r6, pc}
 8018526:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801852a:	4620      	mov	r0, r4
 801852c:	4798      	blx	r3
 801852e:	e7ae      	b.n	801848e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018530:	2863      	cmp	r0, #99	; 0x63
 8018532:	bfcb      	itete	gt
 8018534:	2300      	movgt	r3, #0
 8018536:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801853a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801853e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018542:	e7d8      	b.n	80184f6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018544:	2400b8c8 	.word	0x2400b8c8
 8018548:	2400b8c9 	.word	0x2400b8c9
 801854c:	05f5e100 	.word	0x05f5e100

08018550 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018550:	f7e9 bd34 	b.w	8001fbc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018554 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018554:	6581      	str	r1, [r0, #88]	; 0x58
 8018556:	301c      	adds	r0, #28
 8018558:	f012 b8d2 	b.w	802a700 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801855c <_ZN8touchgfx3HAL5touchEll>:
 801855c:	b530      	push	{r4, r5, lr}
 801855e:	b087      	sub	sp, #28
 8018560:	4604      	mov	r4, r0
 8018562:	a804      	add	r0, sp, #16
 8018564:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018568:	f002 fe06 	bl	801b178 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801856c:	9b04      	ldr	r3, [sp, #16]
 801856e:	a906      	add	r1, sp, #24
 8018570:	a803      	add	r0, sp, #12
 8018572:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018576:	9b05      	ldr	r3, [sp, #20]
 8018578:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801857c:	f002 fe4e 	bl	801b21c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018580:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018584:	f104 001c 	add.w	r0, r4, #28
 8018588:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801858c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018590:	b189      	cbz	r1, 80185b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018592:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018596:	9300      	str	r3, [sp, #0]
 8018598:	4613      	mov	r3, r2
 801859a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801859e:	462a      	mov	r2, r5
 80185a0:	f012 f8be 	bl	802a720 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80185a4:	b128      	cbz	r0, 80185b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80185a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80185aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80185ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80185b0:	6623      	str	r3, [r4, #96]	; 0x60
 80185b2:	b007      	add	sp, #28
 80185b4:	bd30      	pop	{r4, r5, pc}
 80185b6:	f012 f8f7 	bl	802a7a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80185ba:	2301      	movs	r3, #1
 80185bc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80185c0:	e7f1      	b.n	80185a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080185c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80185c2:	b510      	push	{r4, lr}
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d046      	beq.n	8018656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80185c8:	ea81 0002 	eor.w	r0, r1, r2
 80185cc:	07c4      	lsls	r4, r0, #31
 80185ce:	d508      	bpl.n	80185e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80185d0:	440b      	add	r3, r1
 80185d2:	3a01      	subs	r2, #1
 80185d4:	428b      	cmp	r3, r1
 80185d6:	d93e      	bls.n	8018656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80185d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80185dc:	f801 0b01 	strb.w	r0, [r1], #1
 80185e0:	e7f8      	b.n	80185d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80185e2:	07d0      	lsls	r0, r2, #31
 80185e4:	bf42      	ittt	mi
 80185e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80185ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80185ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 80185f2:	2b01      	cmp	r3, #1
 80185f4:	d911      	bls.n	801861a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80185f6:	ea81 0402 	eor.w	r4, r1, r2
 80185fa:	4610      	mov	r0, r2
 80185fc:	07a4      	lsls	r4, r4, #30
 80185fe:	d022      	beq.n	8018646 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018600:	f023 0401 	bic.w	r4, r3, #1
 8018604:	440c      	add	r4, r1
 8018606:	428c      	cmp	r4, r1
 8018608:	4602      	mov	r2, r0
 801860a:	d904      	bls.n	8018616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801860c:	8812      	ldrh	r2, [r2, #0]
 801860e:	3002      	adds	r0, #2
 8018610:	f821 2b02 	strh.w	r2, [r1], #2
 8018614:	e7f7      	b.n	8018606 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018616:	f003 0301 	and.w	r3, r3, #1
 801861a:	f023 0003 	bic.w	r0, r3, #3
 801861e:	4408      	add	r0, r1
 8018620:	4288      	cmp	r0, r1
 8018622:	4614      	mov	r4, r2
 8018624:	d904      	bls.n	8018630 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018626:	6824      	ldr	r4, [r4, #0]
 8018628:	3204      	adds	r2, #4
 801862a:	f841 4b04 	str.w	r4, [r1], #4
 801862e:	e7f7      	b.n	8018620 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018630:	f003 0303 	and.w	r3, r3, #3
 8018634:	3a01      	subs	r2, #1
 8018636:	440b      	add	r3, r1
 8018638:	428b      	cmp	r3, r1
 801863a:	d90c      	bls.n	8018656 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801863c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018640:	f801 0b01 	strb.w	r0, [r1], #1
 8018644:	e7f8      	b.n	8018638 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018646:	0790      	lsls	r0, r2, #30
 8018648:	d0e7      	beq.n	801861a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801864a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801864e:	3b02      	subs	r3, #2
 8018650:	f821 0b02 	strh.w	r0, [r1], #2
 8018654:	e7e1      	b.n	801861a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018656:	2001      	movs	r0, #1
 8018658:	bd10      	pop	{r4, pc}

0801865a <_ZN8touchgfx3HAL7noTouchEv>:
 801865a:	b510      	push	{r4, lr}
 801865c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018660:	4604      	mov	r4, r0
 8018662:	b153      	cbz	r3, 801867a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018664:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018668:	2101      	movs	r1, #1
 801866a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801866e:	301c      	adds	r0, #28
 8018670:	f012 f89a 	bl	802a7a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018674:	2300      	movs	r3, #0
 8018676:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801867a:	bd10      	pop	{r4, pc}

0801867c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801867c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018680:	4604      	mov	r4, r0
 8018682:	6980      	ldr	r0, [r0, #24]
 8018684:	b085      	sub	sp, #20
 8018686:	460f      	mov	r7, r1
 8018688:	4690      	mov	r8, r2
 801868a:	4699      	mov	r9, r3
 801868c:	b930      	cbnz	r0, 801869c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801868e:	4b1c      	ldr	r3, [pc, #112]	; (8018700 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018690:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8018694:	4a1b      	ldr	r2, [pc, #108]	; (8018704 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018696:	481c      	ldr	r0, [pc, #112]	; (8018708 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018698:	f012 f91c 	bl	802a8d4 <__assert_func>
 801869c:	ad04      	add	r5, sp, #16
 801869e:	2600      	movs	r6, #0
 80186a0:	f845 6d04 	str.w	r6, [r5, #-4]!
 80186a4:	6806      	ldr	r6, [r0, #0]
 80186a6:	9501      	str	r5, [sp, #4]
 80186a8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80186ac:	9500      	str	r5, [sp, #0]
 80186ae:	6835      	ldr	r5, [r6, #0]
 80186b0:	47a8      	blx	r5
 80186b2:	4d16      	ldr	r5, [pc, #88]	; (801870c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80186b4:	4606      	mov	r6, r0
 80186b6:	f8a5 9000 	strh.w	r9, [r5]
 80186ba:	f7eb fdc7 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 80186be:	6803      	ldr	r3, [r0, #0]
 80186c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c2:	4798      	blx	r3
 80186c4:	2801      	cmp	r0, #1
 80186c6:	d012      	beq.n	80186ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80186c8:	d306      	bcc.n	80186d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80186ca:	280d      	cmp	r0, #13
 80186cc:	d80b      	bhi.n	80186e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80186ce:	4b10      	ldr	r3, [pc, #64]	; (8018710 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80186d0:	f240 1167 	movw	r1, #359	; 0x167
 80186d4:	4a0b      	ldr	r2, [pc, #44]	; (8018704 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80186d6:	e7de      	b.n	8018696 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80186d8:	882b      	ldrh	r3, [r5, #0]
 80186da:	fb08 7203 	mla	r2, r8, r3, r7
 80186de:	9b03      	ldr	r3, [sp, #12]
 80186e0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80186e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80186e6:	4630      	mov	r0, r6
 80186e8:	b005      	add	sp, #20
 80186ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ee:	882a      	ldrh	r2, [r5, #0]
 80186f0:	9b03      	ldr	r3, [sp, #12]
 80186f2:	fb08 7202 	mla	r2, r8, r2, r7
 80186f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80186fa:	1a9a      	subs	r2, r3, r2
 80186fc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80186fe:	e7f2      	b.n	80186e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018700:	0802deca 	.word	0x0802deca
 8018704:	0802e25b 	.word	0x0802e25b
 8018708:	0802df0f 	.word	0x0802df0f
 801870c:	2400b8be 	.word	0x2400b8be
 8018710:	0802df35 	.word	0x0802df35

08018714 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018716:	b08b      	sub	sp, #44	; 0x2c
 8018718:	4617      	mov	r7, r2
 801871a:	4604      	mov	r4, r0
 801871c:	460e      	mov	r6, r1
 801871e:	461d      	mov	r5, r3
 8018720:	f7eb fd94 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8018724:	6803      	ldr	r3, [r0, #0]
 8018726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018728:	4798      	blx	r3
 801872a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801872e:	9007      	str	r0, [sp, #28]
 8018730:	4631      	mov	r1, r6
 8018732:	6822      	ldr	r2, [r4, #0]
 8018734:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018738:	4b0c      	ldr	r3, [pc, #48]	; (801876c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801873a:	4620      	mov	r0, r4
 801873c:	881b      	ldrh	r3, [r3, #0]
 801873e:	9306      	str	r3, [sp, #24]
 8018740:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018744:	9305      	str	r3, [sp, #20]
 8018746:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801874a:	9304      	str	r3, [sp, #16]
 801874c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018750:	9303      	str	r3, [sp, #12]
 8018752:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018756:	9302      	str	r3, [sp, #8]
 8018758:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801875c:	e9cd 5300 	strd	r5, r3, [sp]
 8018760:	463b      	mov	r3, r7
 8018762:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018764:	2200      	movs	r2, #0
 8018766:	47a8      	blx	r5
 8018768:	b00b      	add	sp, #44	; 0x2c
 801876a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801876c:	2400b8be 	.word	0x2400b8be

08018770 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018774:	4698      	mov	r8, r3
 8018776:	6803      	ldr	r3, [r0, #0]
 8018778:	b08b      	sub	sp, #44	; 0x2c
 801877a:	4617      	mov	r7, r2
 801877c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801877e:	460e      	mov	r6, r1
 8018780:	4b13      	ldr	r3, [pc, #76]	; (80187d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018782:	4604      	mov	r4, r0
 8018784:	f8b3 9000 	ldrh.w	r9, [r3]
 8018788:	f7eb fd60 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 801878c:	6803      	ldr	r3, [r0, #0]
 801878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018790:	4798      	blx	r3
 8018792:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018796:	2200      	movs	r2, #0
 8018798:	4631      	mov	r1, r6
 801879a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801879e:	2302      	movs	r3, #2
 80187a0:	4620      	mov	r0, r4
 80187a2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80187a6:	2301      	movs	r3, #1
 80187a8:	9305      	str	r3, [sp, #20]
 80187aa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80187ae:	9304      	str	r3, [sp, #16]
 80187b0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80187b4:	9303      	str	r3, [sp, #12]
 80187b6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80187ba:	9302      	str	r3, [sp, #8]
 80187bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80187c0:	e9cd 8300 	strd	r8, r3, [sp]
 80187c4:	463b      	mov	r3, r7
 80187c6:	47a8      	blx	r5
 80187c8:	b00b      	add	sp, #44	; 0x2c
 80187ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187ce:	bf00      	nop
 80187d0:	2400b8be 	.word	0x2400b8be

080187d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80187d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187d8:	4698      	mov	r8, r3
 80187da:	6803      	ldr	r3, [r0, #0]
 80187dc:	b087      	sub	sp, #28
 80187de:	460e      	mov	r6, r1
 80187e0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80187e2:	4617      	mov	r7, r2
 80187e4:	4b0f      	ldr	r3, [pc, #60]	; (8018824 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80187e6:	4604      	mov	r4, r0
 80187e8:	f8b3 9000 	ldrh.w	r9, [r3]
 80187ec:	f7eb fd2e 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 80187f0:	6803      	ldr	r3, [r0, #0]
 80187f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f4:	4798      	blx	r3
 80187f6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80187fa:	463a      	mov	r2, r7
 80187fc:	4631      	mov	r1, r6
 80187fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8018802:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018806:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801880a:	4620      	mov	r0, r4
 801880c:	9302      	str	r3, [sp, #8]
 801880e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018812:	9301      	str	r3, [sp, #4]
 8018814:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018818:	9300      	str	r3, [sp, #0]
 801881a:	4643      	mov	r3, r8
 801881c:	47a8      	blx	r5
 801881e:	b007      	add	sp, #28
 8018820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018824:	2400b8be 	.word	0x2400b8be

08018828 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	4604      	mov	r4, r0
 801882e:	b08f      	sub	sp, #60	; 0x3c
 8018830:	4610      	mov	r0, r2
 8018832:	460d      	mov	r5, r1
 8018834:	4691      	mov	r9, r2
 8018836:	461e      	mov	r6, r3
 8018838:	f005 ff20 	bl	801e67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801883c:	2800      	cmp	r0, #0
 801883e:	f000 809c 	beq.w	801897a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018842:	6823      	ldr	r3, [r4, #0]
 8018844:	4620      	mov	r0, r4
 8018846:	f8df b194 	ldr.w	fp, [pc, #404]	; 80189dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 801884a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018850:	4798      	blx	r3
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	4620      	mov	r0, r4
 8018856:	f8df a188 	ldr.w	sl, [pc, #392]	; 80189e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801885c:	4798      	blx	r3
 801885e:	f8bb 3000 	ldrh.w	r3, [fp]
 8018862:	4f5b      	ldr	r7, [pc, #364]	; (80189d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018864:	9301      	str	r3, [sp, #4]
 8018866:	f8ba 3000 	ldrh.w	r3, [sl]
 801886a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801886e:	4640      	mov	r0, r8
 8018870:	9302      	str	r3, [sp, #8]
 8018872:	883b      	ldrh	r3, [r7, #0]
 8018874:	9303      	str	r3, [sp, #12]
 8018876:	4b57      	ldr	r3, [pc, #348]	; (80189d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018878:	881a      	ldrh	r2, [r3, #0]
 801887a:	9305      	str	r3, [sp, #20]
 801887c:	9204      	str	r2, [sp, #16]
 801887e:	f005 ffb7 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018882:	8038      	strh	r0, [r7, #0]
 8018884:	4640      	mov	r0, r8
 8018886:	f005 ffed 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801888a:	9b05      	ldr	r3, [sp, #20]
 801888c:	8018      	strh	r0, [r3, #0]
 801888e:	4b52      	ldr	r3, [pc, #328]	; (80189d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018890:	781b      	ldrb	r3, [r3, #0]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d174      	bne.n	8018980 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018896:	883b      	ldrh	r3, [r7, #0]
 8018898:	f8aa 0000 	strh.w	r0, [sl]
 801889c:	f8ab 3000 	strh.w	r3, [fp]
 80188a0:	4648      	mov	r0, r9
 80188a2:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80188a6:	f005 fee9 	bl	801e67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80188aa:	2200      	movs	r2, #0
 80188ac:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80188b0:	4611      	mov	r1, r2
 80188b2:	4628      	mov	r0, r5
 80188b4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80188b8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80188bc:	f7eb fbd0 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 80188c0:	2301      	movs	r3, #1
 80188c2:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80188c6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80188ca:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	dd5c      	ble.n	801898c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80188d2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	dd58      	ble.n	801898c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80188da:	462a      	mov	r2, r5
 80188dc:	ab0a      	add	r3, sp, #40	; 0x28
 80188de:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80188e2:	6851      	ldr	r1, [r2, #4]
 80188e4:	c303      	stmia	r3!, {r0, r1}
 80188e6:	4631      	mov	r1, r6
 80188e8:	a80a      	add	r0, sp, #40	; 0x28
 80188ea:	f7ff f913 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 80188ee:	4b38      	ldr	r3, [pc, #224]	; (80189d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80188f0:	2100      	movs	r1, #0
 80188f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80188f6:	4b37      	ldr	r3, [pc, #220]	; (80189d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80188f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80188fc:	aa0a      	add	r2, sp, #40	; 0x28
 80188fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018902:	910c      	str	r1, [sp, #48]	; 0x30
 8018904:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018908:	ab08      	add	r3, sp, #32
 801890a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801890e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018912:	4618      	mov	r0, r3
 8018914:	a90c      	add	r1, sp, #48	; 0x30
 8018916:	f7ff f8fd 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801891a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801891c:	2b00      	cmp	r3, #0
 801891e:	d13c      	bne.n	801899a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018920:	2000      	movs	r0, #0
 8018922:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018926:	2600      	movs	r6, #0
 8018928:	696b      	ldr	r3, [r5, #20]
 801892a:	a908      	add	r1, sp, #32
 801892c:	682a      	ldr	r2, [r5, #0]
 801892e:	4628      	mov	r0, r5
 8018930:	9305      	str	r3, [sp, #20]
 8018932:	616e      	str	r6, [r5, #20]
 8018934:	6892      	ldr	r2, [r2, #8]
 8018936:	4790      	blx	r2
 8018938:	9b05      	ldr	r3, [sp, #20]
 801893a:	4652      	mov	r2, sl
 801893c:	4649      	mov	r1, r9
 801893e:	616b      	str	r3, [r5, #20]
 8018940:	4628      	mov	r0, r5
 8018942:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018946:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801894a:	f7eb fb89 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 801894e:	9a01      	ldr	r2, [sp, #4]
 8018950:	4b22      	ldr	r3, [pc, #136]	; (80189dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018952:	4620      	mov	r0, r4
 8018954:	801a      	strh	r2, [r3, #0]
 8018956:	9a02      	ldr	r2, [sp, #8]
 8018958:	4b21      	ldr	r3, [pc, #132]	; (80189e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801895a:	801a      	strh	r2, [r3, #0]
 801895c:	9a03      	ldr	r2, [sp, #12]
 801895e:	4b1c      	ldr	r3, [pc, #112]	; (80189d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018960:	801a      	strh	r2, [r3, #0]
 8018962:	4b1c      	ldr	r3, [pc, #112]	; (80189d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018964:	9a04      	ldr	r2, [sp, #16]
 8018966:	801a      	strh	r2, [r3, #0]
 8018968:	6823      	ldr	r3, [r4, #0]
 801896a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801896e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018970:	4798      	blx	r3
 8018972:	6823      	ldr	r3, [r4, #0]
 8018974:	4620      	mov	r0, r4
 8018976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018978:	4798      	blx	r3
 801897a:	b00f      	add	sp, #60	; 0x3c
 801897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018980:	883b      	ldrh	r3, [r7, #0]
 8018982:	f8ab 0000 	strh.w	r0, [fp]
 8018986:	f8aa 3000 	strh.w	r3, [sl]
 801898a:	e789      	b.n	80188a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 801898c:	462a      	mov	r2, r5
 801898e:	ab0a      	add	r3, sp, #40	; 0x28
 8018990:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018994:	6851      	ldr	r1, [r2, #4]
 8018996:	c303      	stmia	r3!, {r0, r1}
 8018998:	e7a9      	b.n	80188ee <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 801899a:	a807      	add	r0, sp, #28
 801899c:	f006 f8ba 	bl	801eb14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80189a0:	4606      	mov	r6, r0
 80189a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80189a4:	6803      	ldr	r3, [r0, #0]
 80189a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189a8:	4798      	blx	r3
 80189aa:	4286      	cmp	r6, r0
 80189ac:	d1b8      	bne.n	8018920 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 80189ae:	f7eb fc4d 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 80189b2:	6803      	ldr	r3, [r0, #0]
 80189b4:	4606      	mov	r6, r0
 80189b6:	a807      	add	r0, sp, #28
 80189b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ba:	9305      	str	r3, [sp, #20]
 80189bc:	f006 f8aa 	bl	801eb14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80189c0:	9b05      	ldr	r3, [sp, #20]
 80189c2:	4601      	mov	r1, r0
 80189c4:	4630      	mov	r0, r6
 80189c6:	4798      	blx	r3
 80189c8:	f080 0001 	eor.w	r0, r0, #1
 80189cc:	b2c0      	uxtb	r0, r0
 80189ce:	e7a8      	b.n	8018922 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80189d0:	2400b8b8 	.word	0x2400b8b8
 80189d4:	2400b8ba 	.word	0x2400b8ba
 80189d8:	2400b8bc 	.word	0x2400b8bc
 80189dc:	2400b8be 	.word	0x2400b8be
 80189e0:	2400b8c0 	.word	0x2400b8c0

080189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80189e4:	4b07      	ldr	r3, [pc, #28]	; (8018a04 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80189e6:	b510      	push	{r4, lr}
 80189e8:	781b      	ldrb	r3, [r3, #0]
 80189ea:	4604      	mov	r4, r0
 80189ec:	b13b      	cbz	r3, 80189fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80189ee:	6803      	ldr	r3, [r0, #0]
 80189f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189f2:	4798      	blx	r3
 80189f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80189f6:	4283      	cmp	r3, r0
 80189f8:	d101      	bne.n	80189fe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80189fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80189fc:	bd10      	pop	{r4, pc}
 80189fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018a00:	e7fc      	b.n	80189fc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018a02:	bf00      	nop
 8018a04:	2400b8c2 	.word	0x2400b8c2

08018a08 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a0c:	b088      	sub	sp, #32
 8018a0e:	4692      	mov	sl, r2
 8018a10:	461d      	mov	r5, r3
 8018a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a16:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8018a1a:	2400      	movs	r4, #0
 8018a1c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8018a20:	4606      	mov	r6, r0
 8018a22:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8018a26:	fb09 a505 	mla	r5, r9, r5, sl
 8018a2a:	9403      	str	r4, [sp, #12]
 8018a2c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018a30:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018a34:	f88d 401c 	strb.w	r4, [sp, #28]
 8018a38:	e9cd 3100 	strd	r3, r1, [sp]
 8018a3c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018a44:	f7ff ffce 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018a48:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018a4c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018a50:	f88d 401e 	strb.w	r4, [sp, #30]
 8018a54:	9504      	str	r5, [sp, #16]
 8018a56:	f88d 401d 	strb.w	r4, [sp, #29]
 8018a5a:	f88d 401f 	strb.w	r4, [sp, #31]
 8018a5e:	f1b8 0f00 	cmp.w	r8, #0
 8018a62:	d000      	beq.n	8018a66 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018a64:	b937      	cbnz	r7, 8018a74 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018a66:	4b0d      	ldr	r3, [pc, #52]	; (8018a9c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018a68:	f240 210b 	movw	r1, #523	; 0x20b
 8018a6c:	4a0c      	ldr	r2, [pc, #48]	; (8018aa0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018a6e:	480d      	ldr	r0, [pc, #52]	; (8018aa4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018a70:	f011 ff30 	bl	802a8d4 <__assert_func>
 8018a74:	6833      	ldr	r3, [r6, #0]
 8018a76:	4630      	mov	r0, r6
 8018a78:	9c00      	ldr	r4, [sp, #0]
 8018a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a7c:	4798      	blx	r3
 8018a7e:	4220      	tst	r0, r4
 8018a80:	d104      	bne.n	8018a8c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018a82:	4b09      	ldr	r3, [pc, #36]	; (8018aa8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018a84:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018a88:	4a05      	ldr	r2, [pc, #20]	; (8018aa0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018a8a:	e7f0      	b.n	8018a6e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018a8c:	6870      	ldr	r0, [r6, #4]
 8018a8e:	4669      	mov	r1, sp
 8018a90:	6803      	ldr	r3, [r0, #0]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	4798      	blx	r3
 8018a96:	b008      	add	sp, #32
 8018a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a9c:	0802dd5d 	.word	0x0802dd5d
 8018aa0:	0802e090 	.word	0x0802e090
 8018aa4:	0802df0f 	.word	0x0802df0f
 8018aa8:	0802dd95 	.word	0x0802dd95

08018aac <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ab0:	b089      	sub	sp, #36	; 0x24
 8018ab2:	4693      	mov	fp, r2
 8018ab4:	461d      	mov	r5, r3
 8018ab6:	2400      	movs	r4, #0
 8018ab8:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8018abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018ac0:	468a      	mov	sl, r1
 8018ac2:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018ac6:	fb09 b505 	mla	r5, r9, r5, fp
 8018aca:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018ace:	4606      	mov	r6, r0
 8018ad0:	9403      	str	r4, [sp, #12]
 8018ad2:	e9cd 3400 	strd	r3, r4, [sp]
 8018ad6:	f7ff ff85 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ada:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018ade:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018ae2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018ae6:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018aea:	9504      	str	r5, [sp, #16]
 8018aec:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018af0:	f8cd a00c 	str.w	sl, [sp, #12]
 8018af4:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018af8:	f88d 401e 	strb.w	r4, [sp, #30]
 8018afc:	f88d 401f 	strb.w	r4, [sp, #31]
 8018b00:	f1b8 0f00 	cmp.w	r8, #0
 8018b04:	d000      	beq.n	8018b08 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018b06:	b937      	cbnz	r7, 8018b16 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018b08:	4b0d      	ldr	r3, [pc, #52]	; (8018b40 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018b0a:	f240 2121 	movw	r1, #545	; 0x221
 8018b0e:	4a0d      	ldr	r2, [pc, #52]	; (8018b44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b10:	480d      	ldr	r0, [pc, #52]	; (8018b48 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018b12:	f011 fedf 	bl	802a8d4 <__assert_func>
 8018b16:	6833      	ldr	r3, [r6, #0]
 8018b18:	4630      	mov	r0, r6
 8018b1a:	9c00      	ldr	r4, [sp, #0]
 8018b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b1e:	4798      	blx	r3
 8018b20:	4220      	tst	r0, r4
 8018b22:	d104      	bne.n	8018b2e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018b24:	4b09      	ldr	r3, [pc, #36]	; (8018b4c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018b26:	f240 2122 	movw	r1, #546	; 0x222
 8018b2a:	4a06      	ldr	r2, [pc, #24]	; (8018b44 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018b2c:	e7f0      	b.n	8018b10 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018b2e:	6870      	ldr	r0, [r6, #4]
 8018b30:	4669      	mov	r1, sp
 8018b32:	6803      	ldr	r3, [r0, #0]
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	4798      	blx	r3
 8018b38:	b009      	add	sp, #36	; 0x24
 8018b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b3e:	bf00      	nop
 8018b40:	0802ddda 	.word	0x0802ddda
 8018b44:	0802e106 	.word	0x0802e106
 8018b48:	0802df0f 	.word	0x0802df0f
 8018b4c:	0802de12 	.word	0x0802de12

08018b50 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018b50:	b508      	push	{r3, lr}
 8018b52:	290d      	cmp	r1, #13
 8018b54:	d817      	bhi.n	8018b86 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018b56:	e8df f001 	tbb	[pc, r1]
 8018b5a:	090b      	.short	0x090b
 8018b5c:	0d0d0d07 	.word	0x0d0d0d07
 8018b60:	1414140d 	.word	0x1414140d
 8018b64:	0d0d1414 	.word	0x0d0d1414
 8018b68:	2020      	movs	r0, #32
 8018b6a:	bd08      	pop	{r3, pc}
 8018b6c:	2018      	movs	r0, #24
 8018b6e:	e7fc      	b.n	8018b6a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018b70:	2010      	movs	r0, #16
 8018b72:	e7fa      	b.n	8018b6a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018b74:	4b05      	ldr	r3, [pc, #20]	; (8018b8c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018b76:	f240 2182 	movw	r1, #642	; 0x282
 8018b7a:	4a05      	ldr	r2, [pc, #20]	; (8018b90 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018b7c:	4805      	ldr	r0, [pc, #20]	; (8018b94 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018b7e:	f011 fea9 	bl	802a8d4 <__assert_func>
 8018b82:	2008      	movs	r0, #8
 8018b84:	e7f1      	b.n	8018b6a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018b86:	2000      	movs	r0, #0
 8018b88:	e7ef      	b.n	8018b6a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018b8a:	bf00      	nop
 8018b8c:	0802df8b 	.word	0x0802df8b
 8018b90:	0802e431 	.word	0x0802e431
 8018b94:	0802df0f 	.word	0x0802df0f

08018b98 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018b98:	b570      	push	{r4, r5, r6, lr}
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018ba0:	4616      	mov	r6, r2
 8018ba2:	461c      	mov	r4, r3
 8018ba4:	f7ff ffd4 	bl	8018b50 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018ba8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018bac:	10c0      	asrs	r0, r0, #3
 8018bae:	fb06 5101 	mla	r1, r6, r1, r5
 8018bb2:	fb00 4001 	mla	r0, r0, r1, r4
 8018bb6:	bd70      	pop	{r4, r5, r6, pc}

08018bb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bbc:	b08a      	sub	sp, #40	; 0x28
 8018bbe:	f04f 0c00 	mov.w	ip, #0
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	469a      	mov	sl, r3
 8018bc6:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018bca:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018bce:	2d0b      	cmp	r5, #11
 8018bd0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018bd4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018bd8:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018bdc:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018be0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018be4:	f8cd c014 	str.w	ip, [sp, #20]
 8018be8:	d12d      	bne.n	8018c46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018bea:	2080      	movs	r0, #128	; 0x80
 8018bec:	9204      	str	r2, [sp, #16]
 8018bee:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018bf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018bf6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018bfa:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018bfe:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c06:	4620      	mov	r0, r4
 8018c08:	f7ff feec 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c0c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018c10:	4603      	mov	r3, r0
 8018c12:	4651      	mov	r1, sl
 8018c14:	4620      	mov	r0, r4
 8018c16:	e9cd 9800 	strd	r9, r8, [sp]
 8018c1a:	f7ff ffbd 	bl	8018b98 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018c1e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018c22:	9006      	str	r0, [sp, #24]
 8018c24:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018c28:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018c2c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018c30:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018c34:	b107      	cbz	r7, 8018c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018c36:	b9d6      	cbnz	r6, 8018c6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018c38:	4b17      	ldr	r3, [pc, #92]	; (8018c98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018c3a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8018c3e:	4a17      	ldr	r2, [pc, #92]	; (8018c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018c40:	4817      	ldr	r0, [pc, #92]	; (8018ca0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018c42:	f011 fe47 	bl	802a8d4 <__assert_func>
 8018c46:	2d02      	cmp	r5, #2
 8018c48:	d108      	bne.n	8018c5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018c4a:	2bff      	cmp	r3, #255	; 0xff
 8018c4c:	d104      	bne.n	8018c58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018c4e:	2800      	cmp	r0, #0
 8018c50:	bf14      	ite	ne
 8018c52:	2040      	movne	r0, #64	; 0x40
 8018c54:	2020      	moveq	r0, #32
 8018c56:	e7c9      	b.n	8018bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018c58:	2040      	movs	r0, #64	; 0x40
 8018c5a:	e7c7      	b.n	8018bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018c5c:	2bff      	cmp	r3, #255	; 0xff
 8018c5e:	d104      	bne.n	8018c6a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	bf14      	ite	ne
 8018c64:	2004      	movne	r0, #4
 8018c66:	2001      	moveq	r0, #1
 8018c68:	e7c0      	b.n	8018bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018c6a:	2004      	movs	r0, #4
 8018c6c:	e7be      	b.n	8018bec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018c6e:	6823      	ldr	r3, [r4, #0]
 8018c70:	4620      	mov	r0, r4
 8018c72:	9d02      	ldr	r5, [sp, #8]
 8018c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c76:	4798      	blx	r3
 8018c78:	4228      	tst	r0, r5
 8018c7a:	d104      	bne.n	8018c86 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018c7c:	4b09      	ldr	r3, [pc, #36]	; (8018ca4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018c7e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018c82:	4a06      	ldr	r2, [pc, #24]	; (8018c9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018c84:	e7dc      	b.n	8018c40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018c86:	6860      	ldr	r0, [r4, #4]
 8018c88:	a902      	add	r1, sp, #8
 8018c8a:	6803      	ldr	r3, [r0, #0]
 8018c8c:	685b      	ldr	r3, [r3, #4]
 8018c8e:	4798      	blx	r3
 8018c90:	b00a      	add	sp, #40	; 0x28
 8018c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c96:	bf00      	nop
 8018c98:	0802dd5d 	.word	0x0802dd5d
 8018c9c:	0802e2bf 	.word	0x0802e2bf
 8018ca0:	0802df0f 	.word	0x0802df0f
 8018ca4:	0802dd95 	.word	0x0802dd95

08018ca8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cac:	b08b      	sub	sp, #44	; 0x2c
 8018cae:	469b      	mov	fp, r3
 8018cb0:	4604      	mov	r4, r0
 8018cb2:	4692      	mov	sl, r2
 8018cb4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018cb8:	2600      	movs	r6, #0
 8018cba:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018cbe:	4689      	mov	r9, r1
 8018cc0:	2fff      	cmp	r7, #255	; 0xff
 8018cc2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018cc6:	9605      	str	r6, [sp, #20]
 8018cc8:	bf14      	ite	ne
 8018cca:	2308      	movne	r3, #8
 8018ccc:	2302      	moveq	r3, #2
 8018cce:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018cd2:	f7ff fe87 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018cd6:	465a      	mov	r2, fp
 8018cd8:	4603      	mov	r3, r0
 8018cda:	4651      	mov	r1, sl
 8018cdc:	4620      	mov	r0, r4
 8018cde:	e9cd 8500 	strd	r8, r5, [sp]
 8018ce2:	f7ff ff59 	bl	8018b98 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018ce6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018cea:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018cee:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018cf2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018cf6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018cfa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018cfe:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018d02:	9d02      	ldr	r5, [sp, #8]
 8018d04:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018d08:	6823      	ldr	r3, [r4, #0]
 8018d0a:	9006      	str	r0, [sp, #24]
 8018d0c:	4620      	mov	r0, r4
 8018d0e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018d12:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018d16:	f8cd 9014 	str.w	r9, [sp, #20]
 8018d1a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d20:	4798      	blx	r3
 8018d22:	4228      	tst	r0, r5
 8018d24:	d106      	bne.n	8018d34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018d26:	4b07      	ldr	r3, [pc, #28]	; (8018d44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018d28:	f240 2137 	movw	r1, #567	; 0x237
 8018d2c:	4a06      	ldr	r2, [pc, #24]	; (8018d48 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018d2e:	4807      	ldr	r0, [pc, #28]	; (8018d4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018d30:	f011 fdd0 	bl	802a8d4 <__assert_func>
 8018d34:	6860      	ldr	r0, [r4, #4]
 8018d36:	a902      	add	r1, sp, #8
 8018d38:	6803      	ldr	r3, [r0, #0]
 8018d3a:	685b      	ldr	r3, [r3, #4]
 8018d3c:	4798      	blx	r3
 8018d3e:	b00b      	add	sp, #44	; 0x2c
 8018d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d44:	0802dd95 	.word	0x0802dd95
 8018d48:	0802e396 	.word	0x0802e396
 8018d4c:	0802df0f 	.word	0x0802df0f

08018d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018d54:	461f      	mov	r7, r3
 8018d56:	4b0b      	ldr	r3, [pc, #44]	; (8018d84 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018d58:	460d      	mov	r5, r1
 8018d5a:	4616      	mov	r6, r2
 8018d5c:	f8b3 8000 	ldrh.w	r8, [r3]
 8018d60:	4604      	mov	r4, r0
 8018d62:	f7eb fa73 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8018d66:	6803      	ldr	r3, [r0, #0]
 8018d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d6a:	4798      	blx	r3
 8018d6c:	463b      	mov	r3, r7
 8018d6e:	4632      	mov	r2, r6
 8018d70:	4629      	mov	r1, r5
 8018d72:	e9cd 8000 	strd	r8, r0, [sp]
 8018d76:	4620      	mov	r0, r4
 8018d78:	f7ff ff0e 	bl	8018b98 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018d7c:	b002      	add	sp, #8
 8018d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d82:	bf00      	nop
 8018d84:	2400b8be 	.word	0x2400b8be

08018d88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d8c:	4698      	mov	r8, r3
 8018d8e:	b088      	sub	sp, #32
 8018d90:	2300      	movs	r3, #0
 8018d92:	4617      	mov	r7, r2
 8018d94:	4604      	mov	r4, r0
 8018d96:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018d9a:	9303      	str	r3, [sp, #12]
 8018d9c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018da0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018da4:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018da8:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018dac:	e9cd 3100 	strd	r3, r1, [sp]
 8018db0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018db4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018db8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018dbc:	f88d 301c 	strb.w	r3, [sp, #28]
 8018dc0:	f7ff fe10 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018dc4:	4642      	mov	r2, r8
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	4639      	mov	r1, r7
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f7ff ffc0 	bl	8018d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018dd0:	4b18      	ldr	r3, [pc, #96]	; (8018e34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018dd2:	9004      	str	r0, [sp, #16]
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018dda:	f7eb fa37 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8018dde:	6803      	ldr	r3, [r0, #0]
 8018de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de2:	4798      	blx	r3
 8018de4:	f88d 001e 	strb.w	r0, [sp, #30]
 8018de8:	f88d 001d 	strb.w	r0, [sp, #29]
 8018dec:	b106      	cbz	r6, 8018df0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018dee:	b935      	cbnz	r5, 8018dfe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018df0:	4b11      	ldr	r3, [pc, #68]	; (8018e38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018df2:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018df6:	4a11      	ldr	r2, [pc, #68]	; (8018e3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018df8:	4811      	ldr	r0, [pc, #68]	; (8018e40 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018dfa:	f011 fd6b 	bl	802a8d4 <__assert_func>
 8018dfe:	6823      	ldr	r3, [r4, #0]
 8018e00:	4620      	mov	r0, r4
 8018e02:	9d00      	ldr	r5, [sp, #0]
 8018e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e06:	4798      	blx	r3
 8018e08:	4228      	tst	r0, r5
 8018e0a:	d104      	bne.n	8018e16 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018e0c:	4b0d      	ldr	r3, [pc, #52]	; (8018e44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8018e0e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018e12:	4a0a      	ldr	r2, [pc, #40]	; (8018e3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018e14:	e7f0      	b.n	8018df8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018e18:	4669      	mov	r1, sp
 8018e1a:	6860      	ldr	r0, [r4, #4]
 8018e1c:	9303      	str	r3, [sp, #12]
 8018e1e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018e22:	f88d 301f 	strb.w	r3, [sp, #31]
 8018e26:	6803      	ldr	r3, [r0, #0]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	4798      	blx	r3
 8018e2c:	b008      	add	sp, #32
 8018e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e32:	bf00      	nop
 8018e34:	2400b8be 	.word	0x2400b8be
 8018e38:	0802dd5d 	.word	0x0802dd5d
 8018e3c:	0802e16b 	.word	0x0802e16b
 8018e40:	0802df0f 	.word	0x0802df0f
 8018e44:	0802dd95 	.word	0x0802dd95

08018e48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e4a:	b08b      	sub	sp, #44	; 0x2c
 8018e4c:	4604      	mov	r4, r0
 8018e4e:	466b      	mov	r3, sp
 8018e50:	e883 0006 	stmia.w	r3, {r1, r2}
 8018e54:	4b20      	ldr	r3, [pc, #128]	; (8018ed8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	b933      	cbnz	r3, 8018e68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8018e5a:	4b20      	ldr	r3, [pc, #128]	; (8018edc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8018e5c:	f44f 7112 	mov.w	r1, #584	; 0x248
 8018e60:	4a1f      	ldr	r2, [pc, #124]	; (8018ee0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018e62:	4820      	ldr	r0, [pc, #128]	; (8018ee4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018e64:	f011 fd36 	bl	802a8d4 <__assert_func>
 8018e68:	2301      	movs	r3, #1
 8018e6a:	2500      	movs	r5, #0
 8018e6c:	f8bd 6000 	ldrh.w	r6, [sp]
 8018e70:	9302      	str	r3, [sp, #8]
 8018e72:	6803      	ldr	r3, [r0, #0]
 8018e74:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018e78:	9505      	str	r5, [sp, #20]
 8018e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e7c:	4798      	blx	r3
 8018e7e:	463a      	mov	r2, r7
 8018e80:	4631      	mov	r1, r6
 8018e82:	4603      	mov	r3, r0
 8018e84:	4620      	mov	r0, r4
 8018e86:	f7ff ff63 	bl	8018d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018e8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018e8c:	9003      	str	r0, [sp, #12]
 8018e8e:	9306      	str	r3, [sp, #24]
 8018e90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018e94:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018e98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018ea0:	4b11      	ldr	r3, [pc, #68]	; (8018ee8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8018ea2:	881b      	ldrh	r3, [r3, #0]
 8018ea4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ea8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018eac:	f7eb f9ce 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8018eb0:	6803      	ldr	r3, [r0, #0]
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	4798      	blx	r3
 8018eb6:	23ff      	movs	r3, #255	; 0xff
 8018eb8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018ebc:	a902      	add	r1, sp, #8
 8018ebe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018ec2:	6860      	ldr	r0, [r4, #4]
 8018ec4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018ec8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8018ecc:	6803      	ldr	r3, [r0, #0]
 8018ece:	685b      	ldr	r3, [r3, #4]
 8018ed0:	4798      	blx	r3
 8018ed2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018ed4:	b00b      	add	sp, #44	; 0x2c
 8018ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ed8:	2400b8c3 	.word	0x2400b8c3
 8018edc:	0802de5c 	.word	0x0802de5c
 8018ee0:	0802e215 	.word	0x0802e215
 8018ee4:	0802df0f 	.word	0x0802df0f
 8018ee8:	2400b8be 	.word	0x2400b8be

08018eec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ef0:	b08a      	sub	sp, #40	; 0x28
 8018ef2:	2600      	movs	r6, #0
 8018ef4:	4604      	mov	r4, r0
 8018ef6:	466d      	mov	r5, sp
 8018ef8:	9605      	str	r6, [sp, #20]
 8018efa:	e885 0006 	stmia.w	r5, {r1, r2}
 8018efe:	461d      	mov	r5, r3
 8018f00:	2301      	movs	r3, #1
 8018f02:	f8bd 7000 	ldrh.w	r7, [sp]
 8018f06:	9302      	str	r3, [sp, #8]
 8018f08:	6803      	ldr	r3, [r0, #0]
 8018f0a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f10:	4798      	blx	r3
 8018f12:	4642      	mov	r2, r8
 8018f14:	4639      	mov	r1, r7
 8018f16:	4603      	mov	r3, r0
 8018f18:	4620      	mov	r0, r4
 8018f1a:	f7ff ff19 	bl	8018d50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018f22:	9003      	str	r0, [sp, #12]
 8018f24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018f2c:	9506      	str	r5, [sp, #24]
 8018f2e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f32:	4b0f      	ldr	r3, [pc, #60]	; (8018f70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8018f34:	881b      	ldrh	r3, [r3, #0]
 8018f36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018f3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f3c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018f40:	f7eb f984 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8018f44:	6803      	ldr	r3, [r0, #0]
 8018f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f48:	4798      	blx	r3
 8018f4a:	23ff      	movs	r3, #255	; 0xff
 8018f4c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018f50:	a902      	add	r1, sp, #8
 8018f52:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018f56:	6860      	ldr	r0, [r4, #4]
 8018f58:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018f5c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8018f60:	6803      	ldr	r3, [r0, #0]
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	4798      	blx	r3
 8018f66:	4628      	mov	r0, r5
 8018f68:	b00a      	add	sp, #40	; 0x28
 8018f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f6e:	bf00      	nop
 8018f70:	2400b8be 	.word	0x2400b8be

08018f74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018f74:	b570      	push	{r4, r5, r6, lr}
 8018f76:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018f7a:	4604      	mov	r4, r0
 8018f7c:	b19b      	cbz	r3, 8018fa6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8018f7e:	2002      	movs	r0, #2
 8018f80:	f7e8 fd50 	bl	8001a24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018f84:	2300      	movs	r3, #0
 8018f86:	4620      	mov	r0, r4
 8018f88:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018f8c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8018f90:	6823      	ldr	r3, [r4, #0]
 8018f92:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8018f96:	f7ff fd25 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f9a:	4601      	mov	r1, r0
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	462b      	mov	r3, r5
 8018fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fa4:	4718      	bx	r3
 8018fa6:	bd70      	pop	{r4, r5, r6, pc}

08018fa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018fa8:	b538      	push	{r3, r4, r5, lr}
 8018faa:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8018fae:	4604      	mov	r4, r0
 8018fb0:	460d      	mov	r5, r1
 8018fb2:	428a      	cmp	r2, r1
 8018fb4:	d008      	beq.n	8018fc8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8018fb6:	2a01      	cmp	r2, #1
 8018fb8:	6803      	ldr	r3, [r0, #0]
 8018fba:	d106      	bne.n	8018fca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8018fbc:	b929      	cbnz	r1, 8018fca <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8018fbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018fc2:	4798      	blx	r3
 8018fc4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8018fc8:	bd38      	pop	{r3, r4, r5, pc}
 8018fca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8018fce:	4620      	mov	r0, r4
 8018fd0:	e7f7      	b.n	8018fc2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08018fd4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018fd4:	4b0d      	ldr	r3, [pc, #52]	; (801900c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018fd6:	b510      	push	{r4, lr}
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	4604      	mov	r4, r0
 8018fdc:	b95b      	cbnz	r3, 8018ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018fde:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018fe2:	2b02      	cmp	r3, #2
 8018fe4:	d007      	beq.n	8018ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018fe6:	6840      	ldr	r0, [r0, #4]
 8018fe8:	f000 f936 	bl	8019258 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8018fec:	b118      	cbz	r0, 8018ff6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018fee:	6862      	ldr	r2, [r4, #4]
 8018ff0:	7a53      	ldrb	r3, [r2, #9]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d0fc      	beq.n	8018ff0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018ff6:	f7e8 ffd3 	bl	8001fa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	2100      	movs	r1, #0
 8018ffe:	f7ff ffd3 	bl	8018fa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019002:	4620      	mov	r0, r4
 8019004:	f7ff fcee 	bl	80189e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019008:	bd10      	pop	{r4, pc}
 801900a:	bf00      	nop
 801900c:	2400b8c2 	.word	0x2400b8c2

08019010 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019010:	4770      	bx	lr

08019012 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019012:	2000      	movs	r0, #0
 8019014:	4770      	bx	lr

08019016 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019016:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801901a:	1a13      	subs	r3, r2, r0
 801901c:	4258      	negs	r0, r3
 801901e:	4158      	adcs	r0, r3
 8019020:	4770      	bx	lr

08019022 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019022:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019026:	1a9b      	subs	r3, r3, r2
 8019028:	2b00      	cmp	r3, #0
 801902a:	bfdc      	itt	le
 801902c:	6882      	ldrle	r2, [r0, #8]
 801902e:	189b      	addle	r3, r3, r2
 8019030:	2b01      	cmp	r3, #1
 8019032:	bfcc      	ite	gt
 8019034:	2000      	movgt	r0, #0
 8019036:	2001      	movle	r0, #1
 8019038:	4770      	bx	lr

0801903a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801903a:	6902      	ldr	r2, [r0, #16]
 801903c:	6840      	ldr	r0, [r0, #4]
 801903e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019042:	4770      	bx	lr

08019044 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019044:	6803      	ldr	r3, [r0, #0]
 8019046:	691b      	ldr	r3, [r3, #16]
 8019048:	4718      	bx	r3

0801904a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801904a:	4770      	bx	lr

0801904c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801904c:	4770      	bx	lr
	...

08019050 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019050:	2301      	movs	r3, #1
 8019052:	b570      	push	{r4, r5, r6, lr}
 8019054:	7203      	strb	r3, [r0, #8]
 8019056:	4604      	mov	r4, r0
 8019058:	6840      	ldr	r0, [r0, #4]
 801905a:	6803      	ldr	r3, [r0, #0]
 801905c:	699b      	ldr	r3, [r3, #24]
 801905e:	4798      	blx	r3
 8019060:	6803      	ldr	r3, [r0, #0]
 8019062:	4605      	mov	r5, r0
 8019064:	2b40      	cmp	r3, #64	; 0x40
 8019066:	d039      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019068:	d815      	bhi.n	8019096 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801906a:	2b04      	cmp	r3, #4
 801906c:	d022      	beq.n	80190b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801906e:	d808      	bhi.n	8019082 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019070:	2b01      	cmp	r3, #1
 8019072:	d033      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019074:	2b02      	cmp	r3, #2
 8019076:	d108      	bne.n	801908a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8019078:	6823      	ldr	r3, [r4, #0]
 801907a:	4620      	mov	r0, r4
 801907c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801907e:	4798      	blx	r3
 8019080:	e025      	b.n	80190ce <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8019082:	2b08      	cmp	r3, #8
 8019084:	d01e      	beq.n	80190c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8019086:	2b20      	cmp	r3, #32
 8019088:	d028      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801908a:	4b17      	ldr	r3, [pc, #92]	; (80190e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801908c:	218b      	movs	r1, #139	; 0x8b
 801908e:	4a17      	ldr	r2, [pc, #92]	; (80190ec <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8019090:	4817      	ldr	r0, [pc, #92]	; (80190f0 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8019092:	f011 fc1f 	bl	802a8d4 <__assert_func>
 8019096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801909a:	d01f      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801909c:	d804      	bhi.n	80190a8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801909e:	2b80      	cmp	r3, #128	; 0x80
 80190a0:	d01c      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190a6:	e7ef      	b.n	8019088 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80190a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80190ac:	d016      	beq.n	80190dc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80190ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80190b2:	e7e0      	b.n	8019076 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80190b4:	6823      	ldr	r3, [r4, #0]
 80190b6:	7f01      	ldrb	r1, [r0, #28]
 80190b8:	4620      	mov	r0, r4
 80190ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190bc:	4798      	blx	r3
 80190be:	6823      	ldr	r3, [r4, #0]
 80190c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190c2:	e006      	b.n	80190d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	7f01      	ldrb	r1, [r0, #28]
 80190c8:	4620      	mov	r0, r4
 80190ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190cc:	4798      	blx	r3
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80190d2:	4629      	mov	r1, r5
 80190d4:	4620      	mov	r0, r4
 80190d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190da:	4718      	bx	r3
 80190dc:	6823      	ldr	r3, [r4, #0]
 80190de:	4620      	mov	r0, r4
 80190e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190e2:	4798      	blx	r3
 80190e4:	e7eb      	b.n	80190be <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80190e6:	bf00      	nop
 80190e8:	0802e47a 	.word	0x0802e47a
 80190ec:	0802e58c 	.word	0x0802e58c
 80190f0:	0802e49f 	.word	0x0802e49f

080190f4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80190f4:	b570      	push	{r4, r5, r6, lr}
 80190f6:	4604      	mov	r4, r0
 80190f8:	460e      	mov	r6, r1
 80190fa:	6860      	ldr	r0, [r4, #4]
 80190fc:	6803      	ldr	r3, [r0, #0]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	4798      	blx	r3
 8019102:	2800      	cmp	r0, #0
 8019104:	d1f9      	bne.n	80190fa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019106:	4d0d      	ldr	r5, [pc, #52]	; (801913c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019108:	6828      	ldr	r0, [r5, #0]
 801910a:	6803      	ldr	r3, [r0, #0]
 801910c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801910e:	4798      	blx	r3
 8019110:	f7e8 ff60 	bl	8001fd4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019114:	6828      	ldr	r0, [r5, #0]
 8019116:	2101      	movs	r1, #1
 8019118:	f7ff ff46 	bl	8018fa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801911c:	6860      	ldr	r0, [r4, #4]
 801911e:	4631      	mov	r1, r6
 8019120:	6803      	ldr	r3, [r0, #0]
 8019122:	689b      	ldr	r3, [r3, #8]
 8019124:	4798      	blx	r3
 8019126:	6823      	ldr	r3, [r4, #0]
 8019128:	4620      	mov	r0, r4
 801912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801912c:	4798      	blx	r3
 801912e:	6828      	ldr	r0, [r5, #0]
 8019130:	6803      	ldr	r3, [r0, #0]
 8019132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019138:	4718      	bx	r3
 801913a:	bf00      	nop
 801913c:	2400b8c4 	.word	0x2400b8c4

08019140 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019140:	b508      	push	{r3, lr}
 8019142:	f7e8 ff2d 	bl	8001fa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801914a:	f7e8 bf37 	b.w	8001fbc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801914e <_ZN8touchgfx13DMA_Interface5startEv>:
 801914e:	b510      	push	{r4, lr}
 8019150:	4604      	mov	r4, r0
 8019152:	6840      	ldr	r0, [r0, #4]
 8019154:	6803      	ldr	r3, [r0, #0]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	4798      	blx	r3
 801915a:	b948      	cbnz	r0, 8019170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801915c:	7a63      	ldrb	r3, [r4, #9]
 801915e:	b13b      	cbz	r3, 8019170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019160:	7a23      	ldrb	r3, [r4, #8]
 8019162:	b92b      	cbnz	r3, 8019170 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019164:	6823      	ldr	r3, [r4, #0]
 8019166:	4620      	mov	r0, r4
 8019168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801916e:	4718      	bx	r3
 8019170:	bd10      	pop	{r4, pc}
	...

08019174 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019174:	b570      	push	{r4, r5, r6, lr}
 8019176:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801917a:	4606      	mov	r6, r0
 801917c:	1a9b      	subs	r3, r3, r2
 801917e:	2b00      	cmp	r3, #0
 8019180:	bfdc      	itt	le
 8019182:	6880      	ldrle	r0, [r0, #8]
 8019184:	181b      	addle	r3, r3, r0
 8019186:	2b01      	cmp	r3, #1
 8019188:	dd13      	ble.n	80191b2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801918a:	6874      	ldr	r4, [r6, #4]
 801918c:	460d      	mov	r5, r1
 801918e:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8019192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019196:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801919a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801919e:	68f3      	ldr	r3, [r6, #12]
 80191a0:	68b2      	ldr	r2, [r6, #8]
 80191a2:	f3bf 8f5b 	dmb	ish
 80191a6:	3301      	adds	r3, #1
 80191a8:	429a      	cmp	r2, r3
 80191aa:	bfd8      	it	le
 80191ac:	1a9b      	suble	r3, r3, r2
 80191ae:	60f3      	str	r3, [r6, #12]
 80191b0:	bd70      	pop	{r4, r5, r6, pc}
 80191b2:	4b03      	ldr	r3, [pc, #12]	; (80191c0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80191b4:	2139      	movs	r1, #57	; 0x39
 80191b6:	4a03      	ldr	r2, [pc, #12]	; (80191c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80191b8:	4803      	ldr	r0, [pc, #12]	; (80191c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80191ba:	f011 fb8b 	bl	802a8d4 <__assert_func>
 80191be:	bf00      	nop
 80191c0:	0802e4c5 	.word	0x0802e4c5
 80191c4:	0802e5bc 	.word	0x0802e5bc
 80191c8:	0802e49f 	.word	0x0802e49f

080191cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80191cc:	b510      	push	{r4, lr}
 80191ce:	6803      	ldr	r3, [r0, #0]
 80191d0:	4604      	mov	r4, r0
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	4798      	blx	r3
 80191d6:	b128      	cbz	r0, 80191e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80191d8:	4b07      	ldr	r3, [pc, #28]	; (80191f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80191da:	213f      	movs	r1, #63	; 0x3f
 80191dc:	4a07      	ldr	r2, [pc, #28]	; (80191fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80191de:	4808      	ldr	r0, [pc, #32]	; (8019200 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80191e0:	f011 fb78 	bl	802a8d4 <__assert_func>
 80191e4:	6923      	ldr	r3, [r4, #16]
 80191e6:	68a2      	ldr	r2, [r4, #8]
 80191e8:	f3bf 8f5b 	dmb	ish
 80191ec:	3301      	adds	r3, #1
 80191ee:	429a      	cmp	r2, r3
 80191f0:	bfd8      	it	le
 80191f2:	1a9b      	suble	r3, r3, r2
 80191f4:	6123      	str	r3, [r4, #16]
 80191f6:	bd10      	pop	{r4, pc}
 80191f8:	0802e4e8 	.word	0x0802e4e8
 80191fc:	0802e60a 	.word	0x0802e60a
 8019200:	0802e49f 	.word	0x0802e49f

08019204 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019204:	b570      	push	{r4, r5, r6, lr}
 8019206:	4604      	mov	r4, r0
 8019208:	6840      	ldr	r0, [r0, #4]
 801920a:	6803      	ldr	r3, [r0, #0]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4798      	blx	r3
 8019210:	4605      	mov	r5, r0
 8019212:	b930      	cbnz	r0, 8019222 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019214:	7a23      	ldrb	r3, [r4, #8]
 8019216:	b123      	cbz	r3, 8019222 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019218:	6860      	ldr	r0, [r4, #4]
 801921a:	6803      	ldr	r3, [r0, #0]
 801921c:	695b      	ldr	r3, [r3, #20]
 801921e:	4798      	blx	r3
 8019220:	7225      	strb	r5, [r4, #8]
 8019222:	6860      	ldr	r0, [r4, #4]
 8019224:	6803      	ldr	r3, [r0, #0]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	4798      	blx	r3
 801922a:	b928      	cbnz	r0, 8019238 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	4620      	mov	r0, r4
 8019230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019236:	4718      	bx	r3
 8019238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801923c:	f7e8 bed6 	b.w	8001fec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019240 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019240:	b510      	push	{r4, lr}
 8019242:	6082      	str	r2, [r0, #8]
 8019244:	2200      	movs	r2, #0
 8019246:	4c03      	ldr	r4, [pc, #12]	; (8019254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019248:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801924c:	e9c0 4100 	strd	r4, r1, [r0]
 8019250:	bd10      	pop	{r4, pc}
 8019252:	bf00      	nop
 8019254:	0802e570 	.word	0x0802e570

08019258 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019258:	6840      	ldr	r0, [r0, #4]
 801925a:	6803      	ldr	r3, [r0, #0]
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	4718      	bx	r3

08019260 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8019260:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8019264:	4770      	bx	lr

08019266 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8019266:	b510      	push	{r4, lr}
 8019268:	4604      	mov	r4, r0
 801926a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801926c:	b150      	cbz	r0, 8019284 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801926e:	6803      	ldr	r3, [r0, #0]
 8019270:	68db      	ldr	r3, [r3, #12]
 8019272:	4798      	blx	r3
 8019274:	b130      	cbz	r0, 8019284 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019276:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019278:	4621      	mov	r1, r4
 801927a:	6803      	ldr	r3, [r0, #0]
 801927c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019280:	689b      	ldr	r3, [r3, #8]
 8019282:	4718      	bx	r3
 8019284:	bd10      	pop	{r4, pc}

08019286 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8019286:	790b      	ldrb	r3, [r1, #4]
 8019288:	2b00      	cmp	r3, #0
 801928a:	bf0c      	ite	eq
 801928c:	2301      	moveq	r3, #1
 801928e:	2300      	movne	r3, #0
 8019290:	b570      	push	{r4, r5, r6, lr}
 8019292:	4604      	mov	r4, r0
 8019294:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019298:	460e      	mov	r6, r1
 801929a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801929e:	d109      	bne.n	80192b4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80192a0:	b14d      	cbz	r5, 80192b6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80192a2:	7933      	ldrb	r3, [r6, #4]
 80192a4:	2b01      	cmp	r3, #1
 80192a6:	d10c      	bne.n	80192c2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80192a8:	6823      	ldr	r3, [r4, #0]
 80192aa:	4620      	mov	r0, r4
 80192ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192b2:	4718      	bx	r3
 80192b4:	b12d      	cbz	r5, 80192c2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80192b6:	6823      	ldr	r3, [r4, #0]
 80192b8:	4620      	mov	r0, r4
 80192ba:	695b      	ldr	r3, [r3, #20]
 80192bc:	4798      	blx	r3
 80192be:	2d00      	cmp	r5, #0
 80192c0:	d1ef      	bne.n	80192a2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80192c2:	bd70      	pop	{r4, r5, r6, pc}

080192c4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80192c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80192c8:	b133      	cbz	r3, 80192d8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80192ca:	790b      	ldrb	r3, [r1, #4]
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	bf01      	itttt	eq
 80192d0:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 80192d2:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80192d4:	8603      	strheq	r3, [r0, #48]	; 0x30
 80192d6:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80192d8:	f7ff bfd5 	b.w	8019286 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080192dc <_ZN8touchgfx12ToggleButton10forceStateEb>:
 80192dc:	b570      	push	{r4, r5, r6, lr}
 80192de:	4604      	mov	r4, r0
 80192e0:	f100 0534 	add.w	r5, r0, #52	; 0x34
 80192e4:	b169      	cbz	r1, 8019302 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 80192e6:	302e      	adds	r0, #46	; 0x2e
 80192e8:	f7f1 f90c 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 80192ec:	4606      	mov	r6, r0
 80192ee:	4628      	mov	r0, r5
 80192f0:	f7f1 f908 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 80192f4:	4286      	cmp	r6, r0
 80192f6:	d003      	beq.n	8019300 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 80192f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80192fa:	8623      	strh	r3, [r4, #48]	; 0x30
 80192fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80192fe:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8019300:	bd70      	pop	{r4, r5, r6, pc}
 8019302:	3030      	adds	r0, #48	; 0x30
 8019304:	f7f1 f8fe 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019308:	4606      	mov	r6, r0
 801930a:	4628      	mov	r0, r5
 801930c:	f7f1 f8fa 	bl	800a504 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019310:	4286      	cmp	r6, r0
 8019312:	bf1f      	itttt	ne
 8019314:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 8019316:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 8019318:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 801931a:	8623      	strhne	r3, [r4, #48]	; 0x30
 801931c:	e7f0      	b.n	8019300 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

0801931e <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801931e:	2200      	movs	r2, #0
 8019320:	8002      	strh	r2, [r0, #0]
 8019322:	8042      	strh	r2, [r0, #2]
 8019324:	8082      	strh	r2, [r0, #4]
 8019326:	80c2      	strh	r2, [r0, #6]
 8019328:	4770      	bx	lr

0801932a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801932a:	b570      	push	{r4, r5, r6, lr}
 801932c:	6803      	ldr	r3, [r0, #0]
 801932e:	4604      	mov	r4, r0
 8019330:	4615      	mov	r5, r2
 8019332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019334:	4798      	blx	r3
 8019336:	6823      	ldr	r3, [r4, #0]
 8019338:	4629      	mov	r1, r5
 801933a:	4620      	mov	r0, r4
 801933c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801933e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019342:	4718      	bx	r3

08019344 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019344:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801934a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801934c:	4299      	cmp	r1, r3
 801934e:	d029      	beq.n	80193a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019350:	4b15      	ldr	r3, [pc, #84]	; (80193a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	b92b      	cbnz	r3, 8019362 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8019356:	4b15      	ldr	r3, [pc, #84]	; (80193ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8019358:	21ae      	movs	r1, #174	; 0xae
 801935a:	4a15      	ldr	r2, [pc, #84]	; (80193b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801935c:	4815      	ldr	r0, [pc, #84]	; (80193b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801935e:	f011 fab9 	bl	802a8d4 <__assert_func>
 8019362:	4a15      	ldr	r2, [pc, #84]	; (80193b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019364:	8812      	ldrh	r2, [r2, #0]
 8019366:	428a      	cmp	r2, r1
 8019368:	d803      	bhi.n	8019372 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801936a:	4b14      	ldr	r3, [pc, #80]	; (80193bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801936c:	21af      	movs	r1, #175	; 0xaf
 801936e:	4a10      	ldr	r2, [pc, #64]	; (80193b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019370:	e7f4      	b.n	801935c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019372:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019376:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801937a:	4b11      	ldr	r3, [pc, #68]	; (80193c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801937c:	7854      	ldrb	r4, [r2, #1]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019384:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019388:	682b      	ldr	r3, [r5, #0]
 801938a:	69de      	ldr	r6, [r3, #28]
 801938c:	4b0d      	ldr	r3, [pc, #52]	; (80193c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801938e:	6818      	ldr	r0, [r3, #0]
 8019390:	f7f0 feac 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 8019394:	2300      	movs	r3, #0
 8019396:	4602      	mov	r2, r0
 8019398:	4621      	mov	r1, r4
 801939a:	9300      	str	r3, [sp, #0]
 801939c:	4628      	mov	r0, r5
 801939e:	47b0      	blx	r6
 80193a0:	b002      	add	sp, #8
 80193a2:	bd70      	pop	{r4, r5, r6, pc}
 80193a4:	2000      	movs	r0, #0
 80193a6:	e7fb      	b.n	80193a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80193a8:	2400b914 	.word	0x2400b914
 80193ac:	0802e718 	.word	0x0802e718
 80193b0:	0802e850 	.word	0x0802e850
 80193b4:	0802e75a 	.word	0x0802e75a
 80193b8:	2400b918 	.word	0x2400b918
 80193bc:	0802e783 	.word	0x0802e783
 80193c0:	2400b91c 	.word	0x2400b91c
 80193c4:	2400b920 	.word	0x2400b920

080193c8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80193c8:	b570      	push	{r4, r5, r6, lr}
 80193ca:	6803      	ldr	r3, [r0, #0]
 80193cc:	4604      	mov	r4, r0
 80193ce:	b28d      	uxth	r5, r1
 80193d0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80193d2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80193d4:	4b10      	ldr	r3, [pc, #64]	; (8019418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	b92b      	cbnz	r3, 80193e6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80193da:	4b10      	ldr	r3, [pc, #64]	; (801941c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80193dc:	21ae      	movs	r1, #174	; 0xae
 80193de:	4a10      	ldr	r2, [pc, #64]	; (8019420 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80193e0:	4810      	ldr	r0, [pc, #64]	; (8019424 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80193e2:	f011 fa77 	bl	802a8d4 <__assert_func>
 80193e6:	4910      	ldr	r1, [pc, #64]	; (8019428 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80193e8:	8809      	ldrh	r1, [r1, #0]
 80193ea:	4291      	cmp	r1, r2
 80193ec:	d803      	bhi.n	80193f6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80193ee:	4b0f      	ldr	r3, [pc, #60]	; (801942c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80193f0:	21af      	movs	r1, #175	; 0xaf
 80193f2:	4a0b      	ldr	r2, [pc, #44]	; (8019420 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80193f4:	e7f4      	b.n	80193e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80193f6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80193fa:	4b0d      	ldr	r3, [pc, #52]	; (8019430 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019402:	6803      	ldr	r3, [r0, #0]
 8019404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019406:	4798      	blx	r3
 8019408:	1a29      	subs	r1, r5, r0
 801940a:	4633      	mov	r3, r6
 801940c:	4620      	mov	r0, r4
 801940e:	b209      	sxth	r1, r1
 8019410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019414:	4718      	bx	r3
 8019416:	bf00      	nop
 8019418:	2400b914 	.word	0x2400b914
 801941c:	0802e718 	.word	0x0802e718
 8019420:	0802e850 	.word	0x0802e850
 8019424:	0802e75a 	.word	0x0802e75a
 8019428:	2400b918 	.word	0x2400b918
 801942c:	0802e783 	.word	0x0802e783
 8019430:	2400b91c 	.word	0x2400b91c

08019434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801943c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801943e:	b08c      	sub	sp, #48	; 0x30
 8019440:	4604      	mov	r4, r0
 8019442:	4293      	cmp	r3, r2
 8019444:	4688      	mov	r8, r1
 8019446:	d05f      	beq.n	8019508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019448:	4e31      	ldr	r6, [pc, #196]	; (8019510 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801944a:	6832      	ldr	r2, [r6, #0]
 801944c:	b92a      	cbnz	r2, 801945a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801944e:	4b31      	ldr	r3, [pc, #196]	; (8019514 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019450:	21ae      	movs	r1, #174	; 0xae
 8019452:	4a31      	ldr	r2, [pc, #196]	; (8019518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019454:	4831      	ldr	r0, [pc, #196]	; (801951c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019456:	f011 fa3d 	bl	802a8d4 <__assert_func>
 801945a:	4d31      	ldr	r5, [pc, #196]	; (8019520 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801945c:	8829      	ldrh	r1, [r5, #0]
 801945e:	4299      	cmp	r1, r3
 8019460:	d803      	bhi.n	801946a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019462:	4b30      	ldr	r3, [pc, #192]	; (8019524 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019464:	21af      	movs	r1, #175	; 0xaf
 8019466:	4a2c      	ldr	r2, [pc, #176]	; (8019518 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019468:	e7f4      	b.n	8019454 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801946a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801946e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019472:	4b2d      	ldr	r3, [pc, #180]	; (8019528 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801947a:	2a00      	cmp	r2, #0
 801947c:	d044      	beq.n	8019508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801947e:	784b      	ldrb	r3, [r1, #1]
 8019480:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019484:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801948c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019490:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019494:	4b25      	ldr	r3, [pc, #148]	; (801952c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019496:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80194a0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80194a4:	9207      	str	r2, [sp, #28]
 80194a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80194a8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80194ac:	f88d a020 	strb.w	sl, [sp, #32]
 80194b0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80194b4:	9009      	str	r0, [sp, #36]	; 0x24
 80194b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80194ba:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80194be:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80194c2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80194c6:	b10a      	cbz	r2, 80194cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80194c8:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80194ca:	b907      	cbnz	r7, 80194ce <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80194cc:	689f      	ldr	r7, [r3, #8]
 80194ce:	f10d 0914 	add.w	r9, sp, #20
 80194d2:	4621      	mov	r1, r4
 80194d4:	4648      	mov	r0, r9
 80194d6:	f003 f8f1 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80194da:	6833      	ldr	r3, [r6, #0]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d0b6      	beq.n	801944e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80194e0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80194e2:	882b      	ldrh	r3, [r5, #0]
 80194e4:	428b      	cmp	r3, r1
 80194e6:	d9bc      	bls.n	8019462 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80194e8:	4b11      	ldr	r3, [pc, #68]	; (8019530 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80194ea:	6818      	ldr	r0, [r3, #0]
 80194ec:	f7f0 fdfe 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 80194f0:	2300      	movs	r3, #0
 80194f2:	9001      	str	r0, [sp, #4]
 80194f4:	4638      	mov	r0, r7
 80194f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80194fa:	ab07      	add	r3, sp, #28
 80194fc:	9300      	str	r3, [sp, #0]
 80194fe:	4643      	mov	r3, r8
 8019500:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019504:	f7f0 fd83 	bl	800a00e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019508:	b00c      	add	sp, #48	; 0x30
 801950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801950e:	bf00      	nop
 8019510:	2400b914 	.word	0x2400b914
 8019514:	0802e718 	.word	0x0802e718
 8019518:	0802e850 	.word	0x0802e850
 801951c:	0802e75a 	.word	0x0802e75a
 8019520:	2400b918 	.word	0x2400b918
 8019524:	0802e783 	.word	0x0802e783
 8019528:	2400b91c 	.word	0x2400b91c
 801952c:	2400b8c4 	.word	0x2400b8c4
 8019530:	2400b920 	.word	0x2400b920

08019534 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019534:	b40e      	push	{r1, r2, r3}
 8019536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801953a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801953e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019540:	b09c      	sub	sp, #112	; 0x70
 8019542:	4604      	mov	r4, r0
 8019544:	4293      	cmp	r3, r2
 8019546:	d06b      	beq.n	8019620 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019548:	aa26      	add	r2, sp, #152	; 0x98
 801954a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019634 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801954e:	9202      	str	r2, [sp, #8]
 8019550:	f8da 2000 	ldr.w	r2, [sl]
 8019554:	b92a      	cbnz	r2, 8019562 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019556:	4b33      	ldr	r3, [pc, #204]	; (8019624 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019558:	21ae      	movs	r1, #174	; 0xae
 801955a:	4a33      	ldr	r2, [pc, #204]	; (8019628 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801955c:	4833      	ldr	r0, [pc, #204]	; (801962c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801955e:	f011 f9b9 	bl	802a8d4 <__assert_func>
 8019562:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8019638 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019566:	f8b8 1000 	ldrh.w	r1, [r8]
 801956a:	4299      	cmp	r1, r3
 801956c:	d803      	bhi.n	8019576 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801956e:	4b30      	ldr	r3, [pc, #192]	; (8019630 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019570:	21af      	movs	r1, #175	; 0xaf
 8019572:	4a2d      	ldr	r2, [pc, #180]	; (8019628 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019574:	e7f2      	b.n	801955c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019576:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801963c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801957a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801957e:	f8d9 3000 	ldr.w	r3, [r9]
 8019582:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019586:	682b      	ldr	r3, [r5, #0]
 8019588:	4628      	mov	r0, r5
 801958a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801958c:	4798      	blx	r3
 801958e:	4606      	mov	r6, r0
 8019590:	b207      	sxth	r7, r0
 8019592:	a803      	add	r0, sp, #12
 8019594:	f003 fd2a 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 8019598:	682b      	ldr	r3, [r5, #0]
 801959a:	4628      	mov	r0, r5
 801959c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801959e:	4798      	blx	r3
 80195a0:	682b      	ldr	r3, [r5, #0]
 80195a2:	4683      	mov	fp, r0
 80195a4:	4628      	mov	r0, r5
 80195a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80195a8:	4798      	blx	r3
 80195aa:	465b      	mov	r3, fp
 80195ac:	9000      	str	r0, [sp, #0]
 80195ae:	a803      	add	r0, sp, #12
 80195b0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80195b2:	9a02      	ldr	r2, [sp, #8]
 80195b4:	f003 fd6d 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80195b8:	f8da 3000 	ldr.w	r3, [sl]
 80195bc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d0c8      	beq.n	8019556 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 80195c4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80195c6:	f8b8 0000 	ldrh.w	r0, [r8]
 80195ca:	4290      	cmp	r0, r2
 80195cc:	d9cf      	bls.n	801956e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 80195ce:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 80195d2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80195d6:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80195da:	786a      	ldrb	r2, [r5, #1]
 80195dc:	8925      	ldrh	r5, [r4, #8]
 80195de:	f8d9 3000 	ldr.w	r3, [r9]
 80195e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80195e6:	eba5 050c 	sub.w	r5, r5, ip
 80195ea:	b22d      	sxth	r5, r5
 80195ec:	9500      	str	r5, [sp, #0]
 80195ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80195f2:	a803      	add	r0, sp, #12
 80195f4:	f001 fb5b 	bl	801acae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80195f8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80195fc:	b203      	sxth	r3, r0
 80195fe:	18b9      	adds	r1, r7, r2
 8019600:	2900      	cmp	r1, #0
 8019602:	dd0b      	ble.n	801961c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019604:	3b01      	subs	r3, #1
 8019606:	fb13 f302 	smulbb	r3, r3, r2
 801960a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801960e:	b21f      	sxth	r7, r3
 8019610:	4638      	mov	r0, r7
 8019612:	b01c      	add	sp, #112	; 0x70
 8019614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019618:	b003      	add	sp, #12
 801961a:	4770      	bx	lr
 801961c:	2b00      	cmp	r3, #0
 801961e:	dcf7      	bgt.n	8019610 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019620:	2700      	movs	r7, #0
 8019622:	e7f5      	b.n	8019610 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019624:	0802e718 	.word	0x0802e718
 8019628:	0802e850 	.word	0x0802e850
 801962c:	0802e75a 	.word	0x0802e75a
 8019630:	0802e783 	.word	0x0802e783
 8019634:	2400b914 	.word	0x2400b914
 8019638:	2400b918 	.word	0x2400b918
 801963c:	2400b91c 	.word	0x2400b91c

08019640 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019640:	b570      	push	{r4, r5, r6, lr}
 8019642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019646:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019648:	4604      	mov	r4, r0
 801964a:	4299      	cmp	r1, r3
 801964c:	d01e      	beq.n	801968c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801964e:	6803      	ldr	r3, [r0, #0]
 8019650:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019652:	4b0f      	ldr	r3, [pc, #60]	; (8019690 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	b92b      	cbnz	r3, 8019664 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019658:	4b0e      	ldr	r3, [pc, #56]	; (8019694 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801965a:	21ae      	movs	r1, #174	; 0xae
 801965c:	4a0e      	ldr	r2, [pc, #56]	; (8019698 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801965e:	480f      	ldr	r0, [pc, #60]	; (801969c <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019660:	f011 f938 	bl	802a8d4 <__assert_func>
 8019664:	4b0e      	ldr	r3, [pc, #56]	; (80196a0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019666:	881b      	ldrh	r3, [r3, #0]
 8019668:	428b      	cmp	r3, r1
 801966a:	d803      	bhi.n	8019674 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801966c:	4b0d      	ldr	r3, [pc, #52]	; (80196a4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801966e:	21af      	movs	r1, #175	; 0xaf
 8019670:	4a09      	ldr	r2, [pc, #36]	; (8019698 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019672:	e7f4      	b.n	801965e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019674:	4b0c      	ldr	r3, [pc, #48]	; (80196a8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019676:	6818      	ldr	r0, [r3, #0]
 8019678:	f7f0 fd38 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 801967c:	2300      	movs	r3, #0
 801967e:	4601      	mov	r1, r0
 8019680:	46ac      	mov	ip, r5
 8019682:	4620      	mov	r0, r4
 8019684:	461a      	mov	r2, r3
 8019686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801968a:	4760      	bx	ip
 801968c:	2000      	movs	r0, #0
 801968e:	bd70      	pop	{r4, r5, r6, pc}
 8019690:	2400b914 	.word	0x2400b914
 8019694:	0802e718 	.word	0x0802e718
 8019698:	0802e850 	.word	0x0802e850
 801969c:	0802e75a 	.word	0x0802e75a
 80196a0:	2400b918 	.word	0x2400b918
 80196a4:	0802e783 	.word	0x0802e783
 80196a8:	2400b920 	.word	0x2400b920

080196ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80196ac:	b538      	push	{r3, r4, r5, lr}
 80196ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80196b4:	4604      	mov	r4, r0
 80196b6:	429a      	cmp	r2, r3
 80196b8:	d014      	beq.n	80196e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80196ba:	6803      	ldr	r3, [r0, #0]
 80196bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80196be:	4798      	blx	r3
 80196c0:	6823      	ldr	r3, [r4, #0]
 80196c2:	4605      	mov	r5, r0
 80196c4:	4620      	mov	r0, r4
 80196c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80196c8:	4798      	blx	r3
 80196ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80196ce:	b22d      	sxth	r5, r5
 80196d0:	4601      	mov	r1, r0
 80196d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80196d6:	bf06      	itte	eq
 80196d8:	4602      	moveq	r2, r0
 80196da:	4629      	moveq	r1, r5
 80196dc:	462a      	movne	r2, r5
 80196de:	4620      	mov	r0, r4
 80196e0:	f7ea fd1a 	bl	8004118 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80196e4:	bd38      	pop	{r3, r4, r5, pc}

080196e6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80196e6:	888a      	ldrh	r2, [r1, #4]
 80196e8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80196ea:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80196ee:	b922      	cbnz	r2, 80196fa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80196f0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80196f4:	b90b      	cbnz	r3, 80196fa <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 80196f6:	f7ff bfd9 	b.w	80196ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80196fa:	4770      	bx	lr

080196fc <_ZNK8touchgfx3Box12getSolidRectEv>:
 80196fc:	2300      	movs	r3, #0
 80196fe:	8083      	strh	r3, [r0, #4]
 8019700:	80c3      	strh	r3, [r0, #6]
 8019702:	8003      	strh	r3, [r0, #0]
 8019704:	8043      	strh	r3, [r0, #2]
 8019706:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801970a:	2bff      	cmp	r3, #255	; 0xff
 801970c:	bf01      	itttt	eq
 801970e:	890b      	ldrheq	r3, [r1, #8]
 8019710:	8083      	strheq	r3, [r0, #4]
 8019712:	894b      	ldrheq	r3, [r1, #10]
 8019714:	80c3      	strheq	r3, [r0, #6]
 8019716:	4770      	bx	lr

08019718 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801971a:	4604      	mov	r4, r0
 801971c:	466b      	mov	r3, sp
 801971e:	6808      	ldr	r0, [r1, #0]
 8019720:	6849      	ldr	r1, [r1, #4]
 8019722:	c303      	stmia	r3!, {r0, r1}
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	4669      	mov	r1, sp
 8019728:	4620      	mov	r0, r4
 801972a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801972c:	4798      	blx	r3
 801972e:	4b08      	ldr	r3, [pc, #32]	; (8019750 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019736:	b10a      	cbz	r2, 801973c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019738:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801973a:	b900      	cbnz	r0, 801973e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801973c:	6898      	ldr	r0, [r3, #8]
 801973e:	6803      	ldr	r3, [r0, #0]
 8019740:	4669      	mov	r1, sp
 8019742:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019744:	699d      	ldr	r5, [r3, #24]
 8019746:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801974a:	47a8      	blx	r5
 801974c:	b003      	add	sp, #12
 801974e:	bd30      	pop	{r4, r5, pc}
 8019750:	2400b8c4 	.word	0x2400b8c4

08019754 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019754:	b570      	push	{r4, r5, r6, lr}
 8019756:	880b      	ldrh	r3, [r1, #0]
 8019758:	4605      	mov	r5, r0
 801975a:	4604      	mov	r4, r0
 801975c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801975e:	8813      	ldrh	r3, [r2, #0]
 8019760:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019764:	4628      	mov	r0, r5
 8019766:	f005 f843 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801976a:	4606      	mov	r6, r0
 801976c:	4628      	mov	r0, r5
 801976e:	f005 f879 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019772:	6823      	ldr	r3, [r4, #0]
 8019774:	4605      	mov	r5, r0
 8019776:	b231      	sxth	r1, r6
 8019778:	4620      	mov	r0, r4
 801977a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801977c:	4798      	blx	r3
 801977e:	6823      	ldr	r3, [r4, #0]
 8019780:	b229      	sxth	r1, r5
 8019782:	4620      	mov	r0, r4
 8019784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801978a:	4718      	bx	r3

0801978c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801978c:	b510      	push	{r4, lr}
 801978e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019792:	4604      	mov	r4, r0
 8019794:	2bff      	cmp	r3, #255	; 0xff
 8019796:	d006      	beq.n	80197a6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019798:	2300      	movs	r3, #0
 801979a:	8003      	strh	r3, [r0, #0]
 801979c:	8043      	strh	r3, [r0, #2]
 801979e:	8083      	strh	r3, [r0, #4]
 80197a0:	80c3      	strh	r3, [r0, #6]
 80197a2:	4620      	mov	r0, r4
 80197a4:	bd10      	pop	{r4, pc}
 80197a6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80197aa:	b11b      	cbz	r3, 80197b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80197ac:	3130      	adds	r1, #48	; 0x30
 80197ae:	f005 f893 	bl	801e8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80197b2:	e7f6      	b.n	80197a2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80197b4:	312e      	adds	r1, #46	; 0x2e
 80197b6:	e7fa      	b.n	80197ae <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080197b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80197b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80197c0:	b08a      	sub	sp, #40	; 0x28
 80197c2:	4604      	mov	r4, r0
 80197c4:	4688      	mov	r8, r1
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d044      	beq.n	8019854 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 80197ca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80197cc:	a805      	add	r0, sp, #20
 80197ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80197d2:	f005 f80d 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80197d6:	4605      	mov	r5, r0
 80197d8:	b206      	sxth	r6, r0
 80197da:	a805      	add	r0, sp, #20
 80197dc:	f005 f842 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80197e0:	f9b8 2000 	ldrsh.w	r2, [r8]
 80197e4:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 80197e8:	2300      	movs	r3, #0
 80197ea:	fa0f fc80 	sxth.w	ip, r0
 80197ee:	4417      	add	r7, r2
 80197f0:	9306      	str	r3, [sp, #24]
 80197f2:	b2bf      	uxth	r7, r7
 80197f4:	fa0f fe87 	sxth.w	lr, r7
 80197f8:	459e      	cmp	lr, r3
 80197fa:	dd2d      	ble.n	8019858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 80197fc:	4296      	cmp	r6, r2
 80197fe:	dd2b      	ble.n	8019858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019800:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019804:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019808:	4419      	add	r1, r3
 801980a:	b289      	uxth	r1, r1
 801980c:	fa0f f881 	sxth.w	r8, r1
 8019810:	f1b8 0f00 	cmp.w	r8, #0
 8019814:	dd20      	ble.n	8019858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019816:	459c      	cmp	ip, r3
 8019818:	dd1e      	ble.n	8019858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801981a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801981e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019822:	4576      	cmp	r6, lr
 8019824:	bfa8      	it	ge
 8019826:	463d      	movge	r5, r7
 8019828:	45c4      	cmp	ip, r8
 801982a:	bfa8      	it	ge
 801982c:	4608      	movge	r0, r1
 801982e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019832:	1aad      	subs	r5, r5, r2
 8019834:	1ac0      	subs	r0, r0, r3
 8019836:	f8ad 301a 	strh.w	r3, [sp, #26]
 801983a:	f8ad 501c 	strh.w	r5, [sp, #28]
 801983e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019842:	4b1f      	ldr	r3, [pc, #124]	; (80198c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	b953      	cbnz	r3, 801985e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8019848:	4b1e      	ldr	r3, [pc, #120]	; (80198c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801984a:	2187      	movs	r1, #135	; 0x87
 801984c:	4a1e      	ldr	r2, [pc, #120]	; (80198c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801984e:	481f      	ldr	r0, [pc, #124]	; (80198cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8019850:	f011 f840 	bl	802a8d4 <__assert_func>
 8019854:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019856:	e7b9      	b.n	80197cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019858:	2300      	movs	r3, #0
 801985a:	9307      	str	r3, [sp, #28]
 801985c:	e7f1      	b.n	8019842 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801985e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019866:	429a      	cmp	r2, r3
 8019868:	d026      	beq.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801986a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801986e:	2b00      	cmp	r3, #0
 8019870:	dd22      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019872:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019876:	2b00      	cmp	r3, #0
 8019878:	dd1e      	ble.n	80198b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801987a:	2300      	movs	r3, #0
 801987c:	a908      	add	r1, sp, #32
 801987e:	4620      	mov	r0, r4
 8019880:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019884:	6823      	ldr	r3, [r4, #0]
 8019886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019888:	4798      	blx	r3
 801988a:	4b11      	ldr	r3, [pc, #68]	; (80198d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019892:	b10a      	cbz	r2, 8019898 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019894:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019896:	b900      	cbnz	r0, 801989a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019898:	6898      	ldr	r0, [r3, #8]
 801989a:	2501      	movs	r5, #1
 801989c:	6801      	ldr	r1, [r0, #0]
 801989e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80198a2:	9502      	str	r5, [sp, #8]
 80198a4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80198a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80198ac:	9401      	str	r4, [sp, #4]
 80198ae:	ac06      	add	r4, sp, #24
 80198b0:	9400      	str	r4, [sp, #0]
 80198b2:	688c      	ldr	r4, [r1, #8]
 80198b4:	a905      	add	r1, sp, #20
 80198b6:	47a0      	blx	r4
 80198b8:	b00a      	add	sp, #40	; 0x28
 80198ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198be:	bf00      	nop
 80198c0:	2400b94c 	.word	0x2400b94c
 80198c4:	0802e8e4 	.word	0x0802e8e4
 80198c8:	0802e9b8 	.word	0x0802e9b8
 80198cc:	0802e920 	.word	0x0802e920
 80198d0:	2400b8c4 	.word	0x2400b8c4

080198d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 80198d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80198da:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80198dc:	4606      	mov	r6, r0
 80198de:	4299      	cmp	r1, r3
 80198e0:	d02a      	beq.n	8019938 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 80198e2:	4b16      	ldr	r3, [pc, #88]	; (801993c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	b92b      	cbnz	r3, 80198f4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 80198e8:	4b15      	ldr	r3, [pc, #84]	; (8019940 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 80198ea:	21ae      	movs	r1, #174	; 0xae
 80198ec:	4a15      	ldr	r2, [pc, #84]	; (8019944 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 80198ee:	4816      	ldr	r0, [pc, #88]	; (8019948 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 80198f0:	f010 fff0 	bl	802a8d4 <__assert_func>
 80198f4:	4a15      	ldr	r2, [pc, #84]	; (801994c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 80198f6:	8812      	ldrh	r2, [r2, #0]
 80198f8:	428a      	cmp	r2, r1
 80198fa:	d803      	bhi.n	8019904 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 80198fc:	4b14      	ldr	r3, [pc, #80]	; (8019950 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 80198fe:	21af      	movs	r1, #175	; 0xaf
 8019900:	4a10      	ldr	r2, [pc, #64]	; (8019944 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019902:	e7f4      	b.n	80198ee <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019904:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019908:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801990c:	4b11      	ldr	r3, [pc, #68]	; (8019954 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801990e:	7854      	ldrb	r4, [r2, #1]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019916:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801991a:	682b      	ldr	r3, [r5, #0]
 801991c:	69df      	ldr	r7, [r3, #28]
 801991e:	4b0e      	ldr	r3, [pc, #56]	; (8019958 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019920:	6818      	ldr	r0, [r3, #0]
 8019922:	f7f0 fbe3 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 8019926:	2300      	movs	r3, #0
 8019928:	4602      	mov	r2, r0
 801992a:	4621      	mov	r1, r4
 801992c:	9300      	str	r3, [sp, #0]
 801992e:	4628      	mov	r0, r5
 8019930:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8019932:	47b8      	blx	r7
 8019934:	b003      	add	sp, #12
 8019936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019938:	2000      	movs	r0, #0
 801993a:	e7fb      	b.n	8019934 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801993c:	2400b914 	.word	0x2400b914
 8019940:	0802e718 	.word	0x0802e718
 8019944:	0802ea64 	.word	0x0802ea64
 8019948:	0802e75a 	.word	0x0802e75a
 801994c:	2400b918 	.word	0x2400b918
 8019950:	0802e783 	.word	0x0802e783
 8019954:	2400b91c 	.word	0x2400b91c
 8019958:	2400b920 	.word	0x2400b920

0801995c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801995c:	b570      	push	{r4, r5, r6, lr}
 801995e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019962:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019964:	4604      	mov	r4, r0
 8019966:	4299      	cmp	r1, r3
 8019968:	d01e      	beq.n	80199a8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801996a:	6803      	ldr	r3, [r0, #0]
 801996c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801996e:	4b0f      	ldr	r3, [pc, #60]	; (80199ac <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	b92b      	cbnz	r3, 8019980 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8019974:	4b0e      	ldr	r3, [pc, #56]	; (80199b0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8019976:	21ae      	movs	r1, #174	; 0xae
 8019978:	4a0e      	ldr	r2, [pc, #56]	; (80199b4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801997a:	480f      	ldr	r0, [pc, #60]	; (80199b8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801997c:	f010 ffaa 	bl	802a8d4 <__assert_func>
 8019980:	4b0e      	ldr	r3, [pc, #56]	; (80199bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8019982:	881b      	ldrh	r3, [r3, #0]
 8019984:	428b      	cmp	r3, r1
 8019986:	d803      	bhi.n	8019990 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019988:	4b0d      	ldr	r3, [pc, #52]	; (80199c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801998a:	21af      	movs	r1, #175	; 0xaf
 801998c:	4a09      	ldr	r2, [pc, #36]	; (80199b4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801998e:	e7f4      	b.n	801997a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8019990:	4b0c      	ldr	r3, [pc, #48]	; (80199c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8019992:	6818      	ldr	r0, [r3, #0]
 8019994:	f7f0 fbaa 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 8019998:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801999a:	4601      	mov	r1, r0
 801999c:	46ac      	mov	ip, r5
 801999e:	4620      	mov	r0, r4
 80199a0:	2300      	movs	r3, #0
 80199a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199a6:	4760      	bx	ip
 80199a8:	2000      	movs	r0, #0
 80199aa:	bd70      	pop	{r4, r5, r6, pc}
 80199ac:	2400b914 	.word	0x2400b914
 80199b0:	0802e718 	.word	0x0802e718
 80199b4:	0802ea64 	.word	0x0802ea64
 80199b8:	0802e75a 	.word	0x0802e75a
 80199bc:	2400b918 	.word	0x2400b918
 80199c0:	0802e783 	.word	0x0802e783
 80199c4:	2400b920 	.word	0x2400b920

080199c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80199c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199d0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80199d2:	b08c      	sub	sp, #48	; 0x30
 80199d4:	4604      	mov	r4, r0
 80199d6:	4293      	cmp	r3, r2
 80199d8:	460e      	mov	r6, r1
 80199da:	d05d      	beq.n	8019a98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80199dc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8019abc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80199e0:	f8d8 2000 	ldr.w	r2, [r8]
 80199e4:	b92a      	cbnz	r2, 80199f2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80199e6:	4b2e      	ldr	r3, [pc, #184]	; (8019aa0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80199e8:	21ae      	movs	r1, #174	; 0xae
 80199ea:	4a2e      	ldr	r2, [pc, #184]	; (8019aa4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80199ec:	482e      	ldr	r0, [pc, #184]	; (8019aa8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80199ee:	f010 ff71 	bl	802a8d4 <__assert_func>
 80199f2:	4f2e      	ldr	r7, [pc, #184]	; (8019aac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 80199f4:	8839      	ldrh	r1, [r7, #0]
 80199f6:	4299      	cmp	r1, r3
 80199f8:	d803      	bhi.n	8019a02 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 80199fa:	4b2d      	ldr	r3, [pc, #180]	; (8019ab0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 80199fc:	21af      	movs	r1, #175	; 0xaf
 80199fe:	4a29      	ldr	r2, [pc, #164]	; (8019aa4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019a00:	e7f4      	b.n	80199ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8019a02:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019a06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019a0a:	4b2a      	ldr	r3, [pc, #168]	; (8019ab4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019a12:	2a00      	cmp	r2, #0
 8019a14:	d040      	beq.n	8019a98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019a16:	784b      	ldrb	r3, [r1, #1]
 8019a18:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8019a1c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019a20:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019a24:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019a28:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019a2c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019a30:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019a34:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019a38:	ad05      	add	r5, sp, #20
 8019a3a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019a3c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019a40:	9207      	str	r2, [sp, #28]
 8019a42:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019a46:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019a4a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019a4e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019a52:	f88d a020 	strb.w	sl, [sp, #32]
 8019a56:	9009      	str	r0, [sp, #36]	; 0x24
 8019a58:	f7ea fbf8 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8019a5c:	4621      	mov	r1, r4
 8019a5e:	4681      	mov	r9, r0
 8019a60:	4628      	mov	r0, r5
 8019a62:	f002 fe2b 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a66:	f8d8 3000 	ldr.w	r3, [r8]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d0bb      	beq.n	80199e6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8019a6e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019a70:	883b      	ldrh	r3, [r7, #0]
 8019a72:	428b      	cmp	r3, r1
 8019a74:	d9c1      	bls.n	80199fa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019a76:	4b10      	ldr	r3, [pc, #64]	; (8019ab8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019a78:	6818      	ldr	r0, [r3, #0]
 8019a7a:	f7f0 fb37 	bl	800a0ec <_ZNK8touchgfx5Texts7getTextEt>
 8019a7e:	2300      	movs	r3, #0
 8019a80:	9303      	str	r3, [sp, #12]
 8019a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019a84:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019a88:	ab07      	add	r3, sp, #28
 8019a8a:	4648      	mov	r0, r9
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	4633      	mov	r3, r6
 8019a90:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019a94:	f7f0 fabb 	bl	800a00e <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019a98:	b00c      	add	sp, #48	; 0x30
 8019a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a9e:	bf00      	nop
 8019aa0:	0802e718 	.word	0x0802e718
 8019aa4:	0802ea64 	.word	0x0802ea64
 8019aa8:	0802e75a 	.word	0x0802e75a
 8019aac:	2400b918 	.word	0x2400b918
 8019ab0:	0802e783 	.word	0x0802e783
 8019ab4:	2400b91c 	.word	0x2400b91c
 8019ab8:	2400b920 	.word	0x2400b920
 8019abc:	2400b914 	.word	0x2400b914

08019ac0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8019ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019ac6:	4604      	mov	r4, r0
 8019ac8:	460e      	mov	r6, r1
 8019aca:	b08e      	sub	sp, #56	; 0x38
 8019acc:	b218      	sxth	r0, r3
 8019ace:	8921      	ldrh	r1, [r4, #8]
 8019ad0:	005b      	lsls	r3, r3, #1
 8019ad2:	8962      	ldrh	r2, [r4, #10]
 8019ad4:	f8ad 0000 	strh.w	r0, [sp]
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	f8ad 0002 	strh.w	r0, [sp, #2]
 8019ade:	1ac9      	subs	r1, r1, r3
 8019ae0:	1ad3      	subs	r3, r2, r3
 8019ae2:	b209      	sxth	r1, r1
 8019ae4:	b21b      	sxth	r3, r3
 8019ae6:	2900      	cmp	r1, #0
 8019ae8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019aec:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019af0:	dd5e      	ble.n	8019bb0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	dd5c      	ble.n	8019bb0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019af6:	6830      	ldr	r0, [r6, #0]
 8019af8:	ab02      	add	r3, sp, #8
 8019afa:	6871      	ldr	r1, [r6, #4]
 8019afc:	c303      	stmia	r3!, {r0, r1}
 8019afe:	4669      	mov	r1, sp
 8019b00:	a802      	add	r0, sp, #8
 8019b02:	f7fe f807 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8019b06:	4620      	mov	r0, r4
 8019b08:	a902      	add	r1, sp, #8
 8019b0a:	f7ff fe05 	bl	8019718 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019b0e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019b10:	2800      	cmp	r0, #0
 8019b12:	d05f      	beq.n	8019bd4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019b14:	8963      	ldrh	r3, [r4, #10]
 8019b16:	b202      	sxth	r2, r0
 8019b18:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019b1c:	2500      	movs	r5, #0
 8019b1e:	1a1f      	subs	r7, r3, r0
 8019b20:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019b24:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019b28:	b21b      	sxth	r3, r3
 8019b2a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019b2e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019b32:	af04      	add	r7, sp, #16
 8019b34:	1a09      	subs	r1, r1, r0
 8019b36:	9506      	str	r5, [sp, #24]
 8019b38:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019b3c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019b40:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019b44:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8019b48:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019b4c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019b50:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019b54:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8019b58:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019b5c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019b60:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019b64:	ab06      	add	r3, sp, #24
 8019b66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019b6e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019b72:	4631      	mov	r1, r6
 8019b74:	4638      	mov	r0, r7
 8019b76:	f7fd ffcd 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8019b7a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	dd12      	ble.n	8019ba8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019b82:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	dd0e      	ble.n	8019ba8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019b8a:	6823      	ldr	r3, [r4, #0]
 8019b8c:	4639      	mov	r1, r7
 8019b8e:	4620      	mov	r0, r4
 8019b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b92:	4798      	blx	r3
 8019b94:	f7ea fb5a 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8019b98:	6803      	ldr	r3, [r0, #0]
 8019b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019b9c:	4639      	mov	r1, r7
 8019b9e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019ba2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019ba6:	47c0      	blx	r8
 8019ba8:	3501      	adds	r5, #1
 8019baa:	2d04      	cmp	r5, #4
 8019bac:	d1da      	bne.n	8019b64 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8019bae:	e011      	b.n	8019bd4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019bb0:	6830      	ldr	r0, [r6, #0]
 8019bb2:	ab06      	add	r3, sp, #24
 8019bb4:	6871      	ldr	r1, [r6, #4]
 8019bb6:	c303      	stmia	r3!, {r0, r1}
 8019bb8:	6823      	ldr	r3, [r4, #0]
 8019bba:	a906      	add	r1, sp, #24
 8019bbc:	4620      	mov	r0, r4
 8019bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bc0:	4798      	blx	r3
 8019bc2:	f7ea fb43 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 8019bc6:	6803      	ldr	r3, [r0, #0]
 8019bc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019bca:	a906      	add	r1, sp, #24
 8019bcc:	699d      	ldr	r5, [r3, #24]
 8019bce:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019bd2:	47a8      	blx	r5
 8019bd4:	b00e      	add	sp, #56	; 0x38
 8019bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019bda <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019bda:	b570      	push	{r4, r5, r6, lr}
 8019bdc:	880b      	ldrh	r3, [r1, #0]
 8019bde:	460d      	mov	r5, r1
 8019be0:	4604      	mov	r4, r0
 8019be2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019be4:	4608      	mov	r0, r1
 8019be6:	f004 fe03 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019bea:	4606      	mov	r6, r0
 8019bec:	4628      	mov	r0, r5
 8019bee:	f004 fe39 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019bf2:	6823      	ldr	r3, [r4, #0]
 8019bf4:	4605      	mov	r5, r0
 8019bf6:	b231      	sxth	r1, r6
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bfc:	4798      	blx	r3
 8019bfe:	6823      	ldr	r3, [r4, #0]
 8019c00:	b229      	sxth	r1, r5
 8019c02:	4620      	mov	r0, r4
 8019c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c0a:	4718      	bx	r3

08019c0c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019c0c:	b510      	push	{r4, lr}
 8019c0e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019c12:	4604      	mov	r4, r0
 8019c14:	2bff      	cmp	r3, #255	; 0xff
 8019c16:	d006      	beq.n	8019c26 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019c18:	2300      	movs	r3, #0
 8019c1a:	8003      	strh	r3, [r0, #0]
 8019c1c:	8043      	strh	r3, [r0, #2]
 8019c1e:	8083      	strh	r3, [r0, #4]
 8019c20:	80c3      	strh	r3, [r0, #6]
 8019c22:	4620      	mov	r0, r4
 8019c24:	bd10      	pop	{r4, pc}
 8019c26:	3126      	adds	r1, #38	; 0x26
 8019c28:	f004 fe56 	bl	801e8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019c2c:	e7f9      	b.n	8019c22 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019c30 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c34:	4604      	mov	r4, r0
 8019c36:	b088      	sub	sp, #32
 8019c38:	2500      	movs	r5, #0
 8019c3a:	460f      	mov	r7, r1
 8019c3c:	f854 3b26 	ldr.w	r3, [r4], #38
 8019c40:	a904      	add	r1, sp, #16
 8019c42:	4606      	mov	r6, r0
 8019c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019c4a:	4798      	blx	r3
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	f004 fdcf 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c52:	4680      	mov	r8, r0
 8019c54:	4620      	mov	r0, r4
 8019c56:	f004 fe05 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c5a:	9506      	str	r5, [sp, #24]
 8019c5c:	ad06      	add	r5, sp, #24
 8019c5e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019c62:	4639      	mov	r1, r7
 8019c64:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019c68:	4628      	mov	r0, r5
 8019c6a:	f7fd ff53 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8019c6e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	dd19      	ble.n	8019caa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019c76:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	dd15      	ble.n	8019caa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019c7e:	4b0c      	ldr	r3, [pc, #48]	; (8019cb0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019c86:	b10a      	cbz	r2, 8019c8c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019c88:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019c8a:	b900      	cbnz	r0, 8019c8e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019c8c:	6898      	ldr	r0, [r3, #8]
 8019c8e:	2701      	movs	r7, #1
 8019c90:	6801      	ldr	r1, [r0, #0]
 8019c92:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c96:	9702      	str	r7, [sp, #8]
 8019c98:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019c9c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019ca0:	e9cd 5600 	strd	r5, r6, [sp]
 8019ca4:	688d      	ldr	r5, [r1, #8]
 8019ca6:	4621      	mov	r1, r4
 8019ca8:	47a8      	blx	r5
 8019caa:	b008      	add	sp, #32
 8019cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cb0:	2400b8c4 	.word	0x2400b8c4

08019cb4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019cb4:	b510      	push	{r4, lr}
 8019cb6:	6803      	ldr	r3, [r0, #0]
 8019cb8:	460c      	mov	r4, r1
 8019cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cbc:	4798      	blx	r3
 8019cbe:	1b03      	subs	r3, r0, r4
 8019cc0:	4258      	negs	r0, r3
 8019cc2:	4158      	adcs	r0, r3
 8019cc4:	bd10      	pop	{r4, pc}
	...

08019cc8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019cc8:	4b01      	ldr	r3, [pc, #4]	; (8019cd0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019cca:	6019      	str	r1, [r3, #0]
 8019ccc:	4770      	bx	lr
 8019cce:	bf00      	nop
 8019cd0:	2400b8cc 	.word	0x2400b8cc

08019cd4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cd8:	4696      	mov	lr, r2
 8019cda:	b097      	sub	sp, #92	; 0x5c
 8019cdc:	4605      	mov	r5, r0
 8019cde:	4614      	mov	r4, r2
 8019ce0:	460e      	mov	r6, r1
 8019ce2:	461f      	mov	r7, r3
 8019ce4:	f10d 0c1c 	add.w	ip, sp, #28
 8019ce8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019cec:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019cf0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019cf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019cf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019cfc:	f8de 3000 	ldr.w	r3, [lr]
 8019d00:	f104 0e14 	add.w	lr, r4, #20
 8019d04:	f8cc 3000 	str.w	r3, [ip]
 8019d08:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019d0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d14:	f8de 3000 	ldr.w	r3, [lr]
 8019d18:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019d1c:	f8cc 3000 	str.w	r3, [ip]
 8019d20:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019d24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d2c:	f8de 3000 	ldr.w	r3, [lr]
 8019d30:	4631      	mov	r1, r6
 8019d32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019d34:	4628      	mov	r0, r5
 8019d36:	f8cc 3000 	str.w	r3, [ip]
 8019d3a:	682b      	ldr	r3, [r5, #0]
 8019d3c:	9201      	str	r2, [sp, #4]
 8019d3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019d40:	f8cd 8008 	str.w	r8, [sp, #8]
 8019d44:	9200      	str	r2, [sp, #0]
 8019d46:	aa07      	add	r2, sp, #28
 8019d48:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019d4c:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8019d50:	463b      	mov	r3, r7
 8019d52:	47d8      	blx	fp
 8019d54:	46a6      	mov	lr, r4
 8019d56:	f10d 0c1c 	add.w	ip, sp, #28
 8019d5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d62:	f8de 3000 	ldr.w	r3, [lr]
 8019d66:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019d6a:	343c      	adds	r4, #60	; 0x3c
 8019d6c:	f8cc 3000 	str.w	r3, [ip]
 8019d70:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019d74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d7c:	f8de 3000 	ldr.w	r3, [lr]
 8019d80:	f8cc 3000 	str.w	r3, [ip]
 8019d84:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019d8e:	6823      	ldr	r3, [r4, #0]
 8019d90:	4631      	mov	r1, r6
 8019d92:	4628      	mov	r0, r5
 8019d94:	f8cc 3000 	str.w	r3, [ip]
 8019d98:	682b      	ldr	r3, [r5, #0]
 8019d9a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019d9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019da0:	f8cd 8008 	str.w	r8, [sp, #8]
 8019da4:	9201      	str	r2, [sp, #4]
 8019da6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019da8:	9200      	str	r2, [sp, #0]
 8019daa:	aa07      	add	r2, sp, #28
 8019dac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8019dae:	463b      	mov	r3, r7
 8019db0:	47a0      	blx	r4
 8019db2:	b017      	add	sp, #92	; 0x5c
 8019db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019db8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019db8:	2000      	movs	r0, #0
 8019dba:	4770      	bx	lr

08019dbc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc0:	b08d      	sub	sp, #52	; 0x34
 8019dc2:	4688      	mov	r8, r1
 8019dc4:	f8d3 c000 	ldr.w	ip, [r3]
 8019dc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019dca:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019dce:	680f      	ldr	r7, [r1, #0]
 8019dd0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019dd4:	eba7 070c 	sub.w	r7, r7, ip
 8019dd8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019ddc:	edd3 6a07 	vldr	s13, [r3, #28]
 8019de0:	42bc      	cmp	r4, r7
 8019de2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019de4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019de8:	bfa8      	it	ge
 8019dea:	463c      	movge	r4, r7
 8019dec:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019df0:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019df4:	ee07 4a90 	vmov	s15, r4
 8019df8:	eb09 0e0c 	add.w	lr, r9, ip
 8019dfc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019e00:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019e04:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019e08:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019e0c:	4571      	cmp	r1, lr
 8019e0e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019e12:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019e16:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019e1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019e1e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019e22:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019e26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019e2a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019e2e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019e32:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019e36:	f340 808c 	ble.w	8019f52 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019e3a:	eba1 060e 	sub.w	r6, r1, lr
 8019e3e:	fb96 f5f4 	sdiv	r5, r6, r4
 8019e42:	ee07 5a10 	vmov	s14, r5
 8019e46:	2d00      	cmp	r5, #0
 8019e48:	fb04 6615 	mls	r6, r4, r5, r6
 8019e4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e50:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019e54:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019e58:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019e5c:	dd12      	ble.n	8019e84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019e5e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019e62:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019e66:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019e6a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e72:	bf14      	ite	ne
 8019e74:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019e78:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019e7c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019e80:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019e84:	fb05 f204 	mul.w	r2, r5, r4
 8019e88:	1abf      	subs	r7, r7, r2
 8019e8a:	4494      	add	ip, r2
 8019e8c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019e90:	4411      	add	r1, r2
 8019e92:	eb09 020c 	add.w	r2, r9, ip
 8019e96:	b209      	sxth	r1, r1
 8019e98:	443a      	add	r2, r7
 8019e9a:	428a      	cmp	r2, r1
 8019e9c:	bfc4      	itt	gt
 8019e9e:	eba1 0209 	subgt.w	r2, r1, r9
 8019ea2:	eba2 070c 	subgt.w	r7, r2, ip
 8019ea6:	2f00      	cmp	r7, #0
 8019ea8:	dd50      	ble.n	8019f4c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019eaa:	fb97 f1f4 	sdiv	r1, r7, r4
 8019eae:	fb04 7211 	mls	r2, r4, r1, r7
 8019eb2:	b90a      	cbnz	r2, 8019eb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8019eb4:	3901      	subs	r1, #1
 8019eb6:	4622      	mov	r2, r4
 8019eb8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019ebc:	6840      	ldr	r0, [r0, #4]
 8019ebe:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019ec2:	44b6      	add	lr, r6
 8019ec4:	f8d0 a000 	ldr.w	sl, [r0]
 8019ec8:	2900      	cmp	r1, #0
 8019eca:	bfcc      	ite	gt
 8019ecc:	46a1      	movgt	r9, r4
 8019ece:	4691      	movle	r9, r2
 8019ed0:	900b      	str	r0, [sp, #44]	; 0x2c
 8019ed2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019ed4:	fb04 e505 	mla	r5, r4, r5, lr
 8019ed8:	eef0 6a42 	vmov.f32	s13, s4
 8019edc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019ee0:	9008      	str	r0, [sp, #32]
 8019ee2:	eeb0 7a61 	vmov.f32	s14, s3
 8019ee6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019ee8:	695b      	ldr	r3, [r3, #20]
 8019eea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019eee:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019ef2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019ef6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019ef8:	445b      	add	r3, fp
 8019efa:	9307      	str	r3, [sp, #28]
 8019efc:	ee16 3a90 	vmov	r3, s13
 8019f00:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019f04:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019f08:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019f0c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019f10:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019f14:	ee17 7a90 	vmov	r7, s15
 8019f18:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019f1c:	fb97 f7f4 	sdiv	r7, r7, r4
 8019f20:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019f24:	ee17 ca90 	vmov	ip, s15
 8019f28:	fb9c fcf4 	sdiv	ip, ip, r4
 8019f2c:	fb0c 3306 	mla	r3, ip, r6, r3
 8019f30:	9302      	str	r3, [sp, #8]
 8019f32:	ee17 3a10 	vmov	r3, s14
 8019f36:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019f3a:	fb07 3706 	mla	r7, r7, r6, r3
 8019f3e:	eba9 0306 	sub.w	r3, r9, r6
 8019f42:	e9cd 4700 	strd	r4, r7, [sp]
 8019f46:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019f4a:	47a0      	blx	r4
 8019f4c:	b00d      	add	sp, #52	; 0x34
 8019f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f52:	2500      	movs	r5, #0
 8019f54:	462e      	mov	r6, r5
 8019f56:	e799      	b.n	8019e8c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f5c:	b0db      	sub	sp, #364	; 0x16c
 8019f5e:	461d      	mov	r5, r3
 8019f60:	4614      	mov	r4, r2
 8019f62:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019f66:	910f      	str	r1, [sp, #60]	; 0x3c
 8019f68:	4629      	mov	r1, r5
 8019f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f6c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019f70:	9009      	str	r0, [sp, #36]	; 0x24
 8019f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f74:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019f78:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019f7c:	9310      	str	r3, [sp, #64]	; 0x40
 8019f7e:	6803      	ldr	r3, [r0, #0]
 8019f80:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8019f82:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019f86:	47b8      	blx	r7
 8019f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f8a:	6058      	str	r0, [r3, #4]
 8019f8c:	2800      	cmp	r0, #0
 8019f8e:	f000 83a1 	beq.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019f92:	682b      	ldr	r3, [r5, #0]
 8019f94:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019f98:	ed94 7a02 	vldr	s14, [r4, #8]
 8019f9c:	9314      	str	r3, [sp, #80]	; 0x50
 8019f9e:	686b      	ldr	r3, [r5, #4]
 8019fa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019fa4:	9315      	str	r3, [sp, #84]	; 0x54
 8019fa6:	4bc1      	ldr	r3, [pc, #772]	; (801a2ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019fa8:	7819      	ldrb	r1, [r3, #0]
 8019faa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019fae:	2900      	cmp	r1, #0
 8019fb0:	bf16      	itet	ne
 8019fb2:	4619      	movne	r1, r3
 8019fb4:	4611      	moveq	r1, r2
 8019fb6:	4613      	movne	r3, r2
 8019fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fbc:	9116      	str	r1, [sp, #88]	; 0x58
 8019fbe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019fc2:	f240 8387 	bls.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019fc6:	ed94 7a07 	vldr	s14, [r4, #28]
 8019fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fd2:	f240 837f 	bls.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019fd6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fe2:	f240 8377 	bls.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019fe6:	6822      	ldr	r2, [r4, #0]
 8019fe8:	4bb1      	ldr	r3, [pc, #708]	; (801a2b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019fea:	429a      	cmp	r2, r3
 8019fec:	f2c0 8372 	blt.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ff0:	49b0      	ldr	r1, [pc, #704]	; (801a2b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019ff2:	6963      	ldr	r3, [r4, #20]
 8019ff4:	428a      	cmp	r2, r1
 8019ff6:	f300 836d 	bgt.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019ffa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019ffe:	48ae      	ldr	r0, [pc, #696]	; (801a2b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a000:	33ff      	adds	r3, #255	; 0xff
 801a002:	4283      	cmp	r3, r0
 801a004:	f200 8366 	bhi.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a008:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a00a:	4dac      	ldr	r5, [pc, #688]	; (801a2bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a00c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a010:	33ff      	adds	r3, #255	; 0xff
 801a012:	42ab      	cmp	r3, r5
 801a014:	f200 835e 	bhi.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a018:	6862      	ldr	r2, [r4, #4]
 801a01a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a01e:	33ff      	adds	r3, #255	; 0xff
 801a020:	4283      	cmp	r3, r0
 801a022:	f200 8357 	bhi.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a026:	69a1      	ldr	r1, [r4, #24]
 801a028:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a02c:	33ff      	adds	r3, #255	; 0xff
 801a02e:	4283      	cmp	r3, r0
 801a030:	f200 8350 	bhi.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a036:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a03a:	30ff      	adds	r0, #255	; 0xff
 801a03c:	42a8      	cmp	r0, r5
 801a03e:	f200 8349 	bhi.w	801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a042:	428a      	cmp	r2, r1
 801a044:	f280 8110 	bge.w	801a268 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a048:	429a      	cmp	r2, r3
 801a04a:	f300 8119 	bgt.w	801a280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a04e:	4299      	cmp	r1, r3
 801a050:	f280 811d 	bge.w	801a28e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a054:	2502      	movs	r5, #2
 801a056:	2701      	movs	r7, #1
 801a058:	46a9      	mov	r9, r5
 801a05a:	46b8      	mov	r8, r7
 801a05c:	f04f 0a00 	mov.w	sl, #0
 801a060:	4621      	mov	r1, r4
 801a062:	a849      	add	r0, sp, #292	; 0x124
 801a064:	f003 fd92 	bl	801db8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a068:	4622      	mov	r2, r4
 801a06a:	4653      	mov	r3, sl
 801a06c:	a949      	add	r1, sp, #292	; 0x124
 801a06e:	f8cd 9000 	str.w	r9, [sp]
 801a072:	a819      	add	r0, sp, #100	; 0x64
 801a074:	f003 feba 	bl	801ddec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a078:	4622      	mov	r2, r4
 801a07a:	4653      	mov	r3, sl
 801a07c:	a949      	add	r1, sp, #292	; 0x124
 801a07e:	f8cd 8000 	str.w	r8, [sp]
 801a082:	a829      	add	r0, sp, #164	; 0xa4
 801a084:	f003 feb2 	bl	801ddec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a088:	4643      	mov	r3, r8
 801a08a:	4622      	mov	r2, r4
 801a08c:	a949      	add	r1, sp, #292	; 0x124
 801a08e:	f8cd 9000 	str.w	r9, [sp]
 801a092:	a839      	add	r0, sp, #228	; 0xe4
 801a094:	f003 feaa 	bl	801ddec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a098:	42af      	cmp	r7, r5
 801a09a:	af12      	add	r7, sp, #72	; 0x48
 801a09c:	bfb7      	itett	lt
 801a09e:	2300      	movlt	r3, #0
 801a0a0:	2301      	movge	r3, #1
 801a0a2:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a0a4:	ac19      	addlt	r4, sp, #100	; 0x64
 801a0a6:	bfb1      	iteee	lt
 801a0a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a0aa:	ad19      	addge	r5, sp, #100	; 0x64
 801a0ac:	930e      	strge	r3, [sp, #56]	; 0x38
 801a0ae:	ac29      	addge	r4, sp, #164	; 0xa4
 801a0b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a0b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a0b6:	e887 0003 	stmia.w	r7, {r0, r1}
 801a0ba:	b928      	cbnz	r0, 801a0c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a0bc:	4b80      	ldr	r3, [pc, #512]	; (801a2c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a0be:	6818      	ldr	r0, [r3, #0]
 801a0c0:	6803      	ldr	r3, [r0, #0]
 801a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0c4:	4798      	blx	r3
 801a0c6:	6038      	str	r0, [r7, #0]
 801a0c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a0ca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a0ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a0d2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a0d4:	930c      	str	r3, [sp, #48]	; 0x30
 801a0d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a0d8:	6963      	ldr	r3, [r4, #20]
 801a0da:	440b      	add	r3, r1
 801a0dc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a0e0:	4408      	add	r0, r1
 801a0e2:	b200      	sxth	r0, r0
 801a0e4:	4283      	cmp	r3, r0
 801a0e6:	900d      	str	r0, [sp, #52]	; 0x34
 801a0e8:	f280 80dd 	bge.w	801a2a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a0ec:	428b      	cmp	r3, r1
 801a0ee:	da08      	bge.n	801a102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a0f0:	2a00      	cmp	r2, #0
 801a0f2:	dd06      	ble.n	801a102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a0f4:	1acb      	subs	r3, r1, r3
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	f2c0 80e4 	blt.w	801a2c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	f300 80e2 	bgt.w	801a2c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a102:	6967      	ldr	r7, [r4, #20]
 801a104:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a10a:	443b      	add	r3, r7
 801a10c:	461f      	mov	r7, r3
 801a10e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a110:	1bdf      	subs	r7, r3, r7
 801a112:	4297      	cmp	r7, r2
 801a114:	bfa8      	it	ge
 801a116:	4617      	movge	r7, r2
 801a118:	2f00      	cmp	r7, #0
 801a11a:	f340 8166 	ble.w	801a3ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a11e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a120:	6829      	ldr	r1, [r5, #0]
 801a122:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a126:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a12a:	4411      	add	r1, r2
 801a12c:	6820      	ldr	r0, [r4, #0]
 801a12e:	4299      	cmp	r1, r3
 801a130:	dd1a      	ble.n	801a168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a132:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a136:	4402      	add	r2, r0
 801a138:	440b      	add	r3, r1
 801a13a:	b21b      	sxth	r3, r3
 801a13c:	429a      	cmp	r2, r3
 801a13e:	dc13      	bgt.n	801a168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a140:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a142:	a912      	add	r1, sp, #72	; 0x48
 801a144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a146:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	9206      	str	r2, [sp, #24]
 801a14c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a14e:	9500      	str	r5, [sp, #0]
 801a150:	9205      	str	r2, [sp, #20]
 801a152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a154:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a158:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a15a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a15e:	aa49      	add	r2, sp, #292	; 0x124
 801a160:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801a164:	4623      	mov	r3, r4
 801a166:	47c8      	blx	r9
 801a168:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a16c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a170:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a174:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a178:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a17c:	68a1      	ldr	r1, [r4, #8]
 801a17e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a182:	ed94 6a08 	vldr	s12, [r4, #32]
 801a186:	edd4 6a07 	vldr	s13, [r4, #28]
 801a18a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a18e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a192:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a196:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a19a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a19e:	441a      	add	r2, r3
 801a1a0:	6963      	ldr	r3, [r4, #20]
 801a1a2:	3301      	adds	r3, #1
 801a1a4:	6022      	str	r2, [r4, #0]
 801a1a6:	6163      	str	r3, [r4, #20]
 801a1a8:	69a3      	ldr	r3, [r4, #24]
 801a1aa:	3b01      	subs	r3, #1
 801a1ac:	61a3      	str	r3, [r4, #24]
 801a1ae:	6923      	ldr	r3, [r4, #16]
 801a1b0:	440b      	add	r3, r1
 801a1b2:	68e1      	ldr	r1, [r4, #12]
 801a1b4:	428b      	cmp	r3, r1
 801a1b6:	6123      	str	r3, [r4, #16]
 801a1b8:	db15      	blt.n	801a1e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a1ba:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a1be:	3201      	adds	r2, #1
 801a1c0:	1a5b      	subs	r3, r3, r1
 801a1c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a1c6:	6022      	str	r2, [r4, #0]
 801a1c8:	6123      	str	r3, [r4, #16]
 801a1ca:	edc4 6a07 	vstr	s13, [r4, #28]
 801a1ce:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a1d2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a1d6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a1da:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a1e2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a1e6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a1ea:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a1ee:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a1f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1f6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a1fa:	68a9      	ldr	r1, [r5, #8]
 801a1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a200:	ed95 6a08 	vldr	s12, [r5, #32]
 801a204:	edd5 6a07 	vldr	s13, [r5, #28]
 801a208:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a20c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a210:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a214:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a218:	edc5 6a07 	vstr	s13, [r5, #28]
 801a21c:	441a      	add	r2, r3
 801a21e:	696b      	ldr	r3, [r5, #20]
 801a220:	3301      	adds	r3, #1
 801a222:	602a      	str	r2, [r5, #0]
 801a224:	616b      	str	r3, [r5, #20]
 801a226:	69ab      	ldr	r3, [r5, #24]
 801a228:	3b01      	subs	r3, #1
 801a22a:	61ab      	str	r3, [r5, #24]
 801a22c:	692b      	ldr	r3, [r5, #16]
 801a22e:	440b      	add	r3, r1
 801a230:	68e9      	ldr	r1, [r5, #12]
 801a232:	428b      	cmp	r3, r1
 801a234:	612b      	str	r3, [r5, #16]
 801a236:	db15      	blt.n	801a264 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a238:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a23c:	3201      	adds	r2, #1
 801a23e:	1a5b      	subs	r3, r3, r1
 801a240:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a244:	602a      	str	r2, [r5, #0]
 801a246:	612b      	str	r3, [r5, #16]
 801a248:	edc5 6a07 	vstr	s13, [r5, #28]
 801a24c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a250:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a254:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a258:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a25c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a260:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a264:	3f01      	subs	r7, #1
 801a266:	e757      	b.n	801a118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a268:	4299      	cmp	r1, r3
 801a26a:	dc13      	bgt.n	801a294 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a26c:	429a      	cmp	r2, r3
 801a26e:	da14      	bge.n	801a29a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a270:	2502      	movs	r5, #2
 801a272:	2703      	movs	r7, #3
 801a274:	f04f 0800 	mov.w	r8, #0
 801a278:	46a9      	mov	r9, r5
 801a27a:	f04f 0a01 	mov.w	sl, #1
 801a27e:	e6ef      	b.n	801a060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a280:	2501      	movs	r5, #1
 801a282:	2700      	movs	r7, #0
 801a284:	46a9      	mov	r9, r5
 801a286:	46b8      	mov	r8, r7
 801a288:	f04f 0a02 	mov.w	sl, #2
 801a28c:	e6e8      	b.n	801a060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a28e:	2501      	movs	r5, #1
 801a290:	2702      	movs	r7, #2
 801a292:	e6e1      	b.n	801a058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a294:	2500      	movs	r5, #0
 801a296:	2701      	movs	r7, #1
 801a298:	e7f4      	b.n	801a284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a29a:	2702      	movs	r7, #2
 801a29c:	2503      	movs	r5, #3
 801a29e:	f04f 0900 	mov.w	r9, #0
 801a2a2:	46b8      	mov	r8, r7
 801a2a4:	e7e9      	b.n	801a27a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a2a6:	4613      	mov	r3, r2
 801a2a8:	e728      	b.n	801a0fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a2aa:	bf00      	nop
 801a2ac:	2400b8bc 	.word	0x2400b8bc
 801a2b0:	fffd8f01 	.word	0xfffd8f01
 801a2b4:	00027100 	.word	0x00027100
 801a2b8:	0004e1ff 	.word	0x0004e1ff
 801a2bc:	0004e1fe 	.word	0x0004e1fe
 801a2c0:	2400b8c4 	.word	0x2400b8c4
 801a2c4:	4613      	mov	r3, r2
 801a2c6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a2c8:	469e      	mov	lr, r3
 801a2ca:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a2cc:	469c      	mov	ip, r3
 801a2ce:	9111      	str	r1, [sp, #68]	; 0x44
 801a2d0:	f04f 0900 	mov.w	r9, #0
 801a2d4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a2d8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a2dc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a2e0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a2e4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a2e8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a2ec:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a2f0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a2f4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a2f8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a2fc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a300:	f1bc 0f00 	cmp.w	ip, #0
 801a304:	d147      	bne.n	801a396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a306:	eb03 0c07 	add.w	ip, r3, r7
 801a30a:	1ad7      	subs	r7, r2, r3
 801a30c:	f1b9 0f00 	cmp.w	r9, #0
 801a310:	d009      	beq.n	801a326 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a312:	9029      	str	r0, [sp, #164]	; 0xa4
 801a314:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a318:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a31c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a320:	912d      	str	r1, [sp, #180]	; 0xb4
 801a322:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a328:	f04f 0800 	mov.w	r8, #0
 801a32c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a330:	9111      	str	r1, [sp, #68]	; 0x44
 801a332:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a336:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a33a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a33e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a342:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a346:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a34a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a34e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a352:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a356:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a35a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a35e:	f1be 0f00 	cmp.w	lr, #0
 801a362:	d031      	beq.n	801a3c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a364:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a366:	4450      	add	r0, sl
 801a368:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a36c:	4431      	add	r1, r6
 801a36e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a372:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a376:	4549      	cmp	r1, r9
 801a378:	db08      	blt.n	801a38c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a37a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a37e:	3001      	adds	r0, #1
 801a380:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a384:	eba1 0109 	sub.w	r1, r1, r9
 801a388:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a38c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a390:	f04f 0801 	mov.w	r8, #1
 801a394:	e7e3      	b.n	801a35e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a396:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a398:	4450      	add	r0, sl
 801a39a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a39e:	4431      	add	r1, r6
 801a3a0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a3a4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a3a8:	4541      	cmp	r1, r8
 801a3aa:	db08      	blt.n	801a3be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a3ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a3b0:	3001      	adds	r0, #1
 801a3b2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a3b6:	eba1 0108 	sub.w	r1, r1, r8
 801a3ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a3be:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a3c2:	f04f 0901 	mov.w	r9, #1
 801a3c6:	e79b      	b.n	801a300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a3c8:	449c      	add	ip, r3
 801a3ca:	1aff      	subs	r7, r7, r3
 801a3cc:	f1b8 0f00 	cmp.w	r8, #0
 801a3d0:	d009      	beq.n	801a3e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a3d2:	9019      	str	r0, [sp, #100]	; 0x64
 801a3d4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a3d8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a3dc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a3e0:	911d      	str	r1, [sp, #116]	; 0x74
 801a3e2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a3e6:	1ad2      	subs	r2, r2, r3
 801a3e8:	e68b      	b.n	801a102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3ec:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	f000 80d1 	beq.w	801a596 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a3f4:	ad19      	add	r5, sp, #100	; 0x64
 801a3f6:	ac39      	add	r4, sp, #228	; 0xe4
 801a3f8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a3fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a3fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a402:	930c      	str	r3, [sp, #48]	; 0x30
 801a404:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a406:	6963      	ldr	r3, [r4, #20]
 801a408:	440b      	add	r3, r1
 801a40a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a40e:	4408      	add	r0, r1
 801a410:	b200      	sxth	r0, r0
 801a412:	4283      	cmp	r3, r0
 801a414:	900d      	str	r0, [sp, #52]	; 0x34
 801a416:	f280 80c1 	bge.w	801a59c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a41a:	428b      	cmp	r3, r1
 801a41c:	da08      	bge.n	801a430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a41e:	2a00      	cmp	r2, #0
 801a420:	dd06      	ble.n	801a430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a422:	1acb      	subs	r3, r1, r3
 801a424:	429a      	cmp	r2, r3
 801a426:	f2c0 80bb 	blt.w	801a5a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	f300 80b9 	bgt.w	801a5a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a430:	6967      	ldr	r7, [r4, #20]
 801a432:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a438:	443b      	add	r3, r7
 801a43a:	461f      	mov	r7, r3
 801a43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a43e:	1bdf      	subs	r7, r3, r7
 801a440:	4297      	cmp	r7, r2
 801a442:	bfa8      	it	ge
 801a444:	4617      	movge	r7, r2
 801a446:	2f00      	cmp	r7, #0
 801a448:	f340 813c 	ble.w	801a6c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a44c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a44e:	6829      	ldr	r1, [r5, #0]
 801a450:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a454:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a458:	4411      	add	r1, r2
 801a45a:	6820      	ldr	r0, [r4, #0]
 801a45c:	4299      	cmp	r1, r3
 801a45e:	dd1a      	ble.n	801a496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a460:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a464:	4402      	add	r2, r0
 801a466:	440b      	add	r3, r1
 801a468:	b21b      	sxth	r3, r3
 801a46a:	429a      	cmp	r2, r3
 801a46c:	dc13      	bgt.n	801a496 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a46e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a470:	a912      	add	r1, sp, #72	; 0x48
 801a472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a474:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	9206      	str	r2, [sp, #24]
 801a47a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a47c:	9500      	str	r5, [sp, #0]
 801a47e:	9205      	str	r2, [sp, #20]
 801a480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a482:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a486:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a488:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a48c:	aa49      	add	r2, sp, #292	; 0x124
 801a48e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801a492:	4623      	mov	r3, r4
 801a494:	47c8      	blx	r9
 801a496:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a49a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a49e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a4a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4a6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a4aa:	68a1      	ldr	r1, [r4, #8]
 801a4ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4b0:	ed94 6a08 	vldr	s12, [r4, #32]
 801a4b4:	edd4 6a07 	vldr	s13, [r4, #28]
 801a4b8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a4bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a4c0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a4c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a4c8:	edc4 6a07 	vstr	s13, [r4, #28]
 801a4cc:	441a      	add	r2, r3
 801a4ce:	6963      	ldr	r3, [r4, #20]
 801a4d0:	3301      	adds	r3, #1
 801a4d2:	6022      	str	r2, [r4, #0]
 801a4d4:	6163      	str	r3, [r4, #20]
 801a4d6:	69a3      	ldr	r3, [r4, #24]
 801a4d8:	3b01      	subs	r3, #1
 801a4da:	61a3      	str	r3, [r4, #24]
 801a4dc:	6923      	ldr	r3, [r4, #16]
 801a4de:	440b      	add	r3, r1
 801a4e0:	68e1      	ldr	r1, [r4, #12]
 801a4e2:	428b      	cmp	r3, r1
 801a4e4:	6123      	str	r3, [r4, #16]
 801a4e6:	db15      	blt.n	801a514 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a4e8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a4ec:	3201      	adds	r2, #1
 801a4ee:	1a5b      	subs	r3, r3, r1
 801a4f0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a4f4:	6022      	str	r2, [r4, #0]
 801a4f6:	6123      	str	r3, [r4, #16]
 801a4f8:	edc4 6a07 	vstr	s13, [r4, #28]
 801a4fc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a500:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a504:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a508:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a50c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a510:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a514:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a518:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a51c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a520:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a524:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a528:	68a9      	ldr	r1, [r5, #8]
 801a52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a52e:	ed95 6a08 	vldr	s12, [r5, #32]
 801a532:	edd5 6a07 	vldr	s13, [r5, #28]
 801a536:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a53a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a53e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a542:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a546:	edc5 6a07 	vstr	s13, [r5, #28]
 801a54a:	441a      	add	r2, r3
 801a54c:	696b      	ldr	r3, [r5, #20]
 801a54e:	3301      	adds	r3, #1
 801a550:	602a      	str	r2, [r5, #0]
 801a552:	616b      	str	r3, [r5, #20]
 801a554:	69ab      	ldr	r3, [r5, #24]
 801a556:	3b01      	subs	r3, #1
 801a558:	61ab      	str	r3, [r5, #24]
 801a55a:	692b      	ldr	r3, [r5, #16]
 801a55c:	440b      	add	r3, r1
 801a55e:	68e9      	ldr	r1, [r5, #12]
 801a560:	428b      	cmp	r3, r1
 801a562:	612b      	str	r3, [r5, #16]
 801a564:	db15      	blt.n	801a592 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a566:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a56a:	3201      	adds	r2, #1
 801a56c:	1a5b      	subs	r3, r3, r1
 801a56e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a572:	602a      	str	r2, [r5, #0]
 801a574:	612b      	str	r3, [r5, #16]
 801a576:	edc5 6a07 	vstr	s13, [r5, #28]
 801a57a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a57e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a582:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a586:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a58e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a592:	3f01      	subs	r7, #1
 801a594:	e757      	b.n	801a446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a596:	ad39      	add	r5, sp, #228	; 0xe4
 801a598:	ac19      	add	r4, sp, #100	; 0x64
 801a59a:	e72d      	b.n	801a3f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a59c:	4613      	mov	r3, r2
 801a59e:	e744      	b.n	801a42a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a5a0:	4613      	mov	r3, r2
 801a5a2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a5a4:	469e      	mov	lr, r3
 801a5a6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a5aa:	461f      	mov	r7, r3
 801a5ac:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a5b0:	f04f 0900 	mov.w	r9, #0
 801a5b4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a5b8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a5bc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a5c0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a5c4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a5c8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a5ca:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a5ce:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a5d2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a5d6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a5da:	960e      	str	r6, [sp, #56]	; 0x38
 801a5dc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a5e0:	2f00      	cmp	r7, #0
 801a5e2:	d146      	bne.n	801a672 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a5e4:	449c      	add	ip, r3
 801a5e6:	1ad7      	subs	r7, r2, r3
 801a5e8:	f1b9 0f00 	cmp.w	r9, #0
 801a5ec:	d009      	beq.n	801a602 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a5ee:	9039      	str	r0, [sp, #228]	; 0xe4
 801a5f0:	913d      	str	r1, [sp, #244]	; 0xf4
 801a5f2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a5f6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a5fa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a5fe:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a602:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a604:	f04f 0800 	mov.w	r8, #0
 801a608:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a60c:	910e      	str	r1, [sp, #56]	; 0x38
 801a60e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a612:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a616:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a61a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a61e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a622:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a626:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a62a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a62e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a632:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a636:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a63a:	f1be 0f00 	cmp.w	lr, #0
 801a63e:	d030      	beq.n	801a6a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a640:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a642:	4450      	add	r0, sl
 801a644:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a648:	4431      	add	r1, r6
 801a64a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a64e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a652:	4549      	cmp	r1, r9
 801a654:	db08      	blt.n	801a668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a656:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a65a:	3001      	adds	r0, #1
 801a65c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a660:	eba1 0109 	sub.w	r1, r1, r9
 801a664:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a668:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a66c:	f04f 0801 	mov.w	r8, #1
 801a670:	e7e3      	b.n	801a63a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a672:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a674:	4450      	add	r0, sl
 801a676:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a67a:	4431      	add	r1, r6
 801a67c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a680:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a684:	4541      	cmp	r1, r8
 801a686:	db08      	blt.n	801a69a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a688:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a68c:	3001      	adds	r0, #1
 801a68e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a692:	eba1 0108 	sub.w	r1, r1, r8
 801a696:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a69a:	3f01      	subs	r7, #1
 801a69c:	f04f 0901 	mov.w	r9, #1
 801a6a0:	e79e      	b.n	801a5e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a6a2:	449c      	add	ip, r3
 801a6a4:	1aff      	subs	r7, r7, r3
 801a6a6:	f1b8 0f00 	cmp.w	r8, #0
 801a6aa:	d009      	beq.n	801a6c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a6ac:	9019      	str	r0, [sp, #100]	; 0x64
 801a6ae:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a6b2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a6b6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a6ba:	911d      	str	r1, [sp, #116]	; 0x74
 801a6bc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a6c0:	1ad2      	subs	r2, r2, r3
 801a6c2:	e6b5      	b.n	801a430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	b923      	cbnz	r3, 801a6d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6ca:	4b04      	ldr	r3, [pc, #16]	; (801a6dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a6cc:	6818      	ldr	r0, [r3, #0]
 801a6ce:	6803      	ldr	r3, [r0, #0]
 801a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6d2:	4798      	blx	r3
 801a6d4:	b05b      	add	sp, #364	; 0x16c
 801a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6da:	bf00      	nop
 801a6dc:	2400b8c4 	.word	0x2400b8c4

0801a6e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a6e0:	b570      	push	{r4, r5, r6, lr}
 801a6e2:	4604      	mov	r4, r0
 801a6e4:	2500      	movs	r5, #0
 801a6e6:	9804      	ldr	r0, [sp, #16]
 801a6e8:	7223      	strb	r3, [r4, #8]
 801a6ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a6ee:	8025      	strh	r5, [r4, #0]
 801a6f0:	6061      	str	r1, [r4, #4]
 801a6f2:	7263      	strb	r3, [r4, #9]
 801a6f4:	60e0      	str	r0, [r4, #12]
 801a6f6:	8222      	strh	r2, [r4, #16]
 801a6f8:	8265      	strh	r5, [r4, #18]
 801a6fa:	82a5      	strh	r5, [r4, #20]
 801a6fc:	82e5      	strh	r5, [r4, #22]
 801a6fe:	8325      	strh	r5, [r4, #24]
 801a700:	8365      	strh	r5, [r4, #26]
 801a702:	83a5      	strh	r5, [r4, #28]
 801a704:	77a5      	strb	r5, [r4, #30]
 801a706:	6803      	ldr	r3, [r0, #0]
 801a708:	695b      	ldr	r3, [r3, #20]
 801a70a:	4798      	blx	r3
 801a70c:	4606      	mov	r6, r0
 801a70e:	b1f8      	cbz	r0, 801a750 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a710:	68e0      	ldr	r0, [r4, #12]
 801a712:	4631      	mov	r1, r6
 801a714:	6803      	ldr	r3, [r0, #0]
 801a716:	68db      	ldr	r3, [r3, #12]
 801a718:	4798      	blx	r3
 801a71a:	7b43      	ldrb	r3, [r0, #13]
 801a71c:	7a82      	ldrb	r2, [r0, #10]
 801a71e:	4605      	mov	r5, r0
 801a720:	005b      	lsls	r3, r3, #1
 801a722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a726:	4313      	orrs	r3, r2
 801a728:	83a3      	strh	r3, [r4, #28]
 801a72a:	7a63      	ldrb	r3, [r4, #9]
 801a72c:	2b04      	cmp	r3, #4
 801a72e:	d10f      	bne.n	801a750 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a730:	68e0      	ldr	r0, [r4, #12]
 801a732:	462a      	mov	r2, r5
 801a734:	4631      	mov	r1, r6
 801a736:	6803      	ldr	r3, [r0, #0]
 801a738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a73a:	4798      	blx	r3
 801a73c:	7b6b      	ldrb	r3, [r5, #13]
 801a73e:	005b      	lsls	r3, r3, #1
 801a740:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a744:	7aab      	ldrb	r3, [r5, #10]
 801a746:	4313      	orrs	r3, r2
 801a748:	4418      	add	r0, r3
 801a74a:	8ba3      	ldrh	r3, [r4, #28]
 801a74c:	4418      	add	r0, r3
 801a74e:	83a0      	strh	r0, [r4, #28]
 801a750:	4620      	mov	r0, r4
 801a752:	bd70      	pop	{r4, r5, r6, pc}

0801a754 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a758:	2400      	movs	r4, #0
 801a75a:	b085      	sub	sp, #20
 801a75c:	4681      	mov	r9, r0
 801a75e:	4688      	mov	r8, r1
 801a760:	4692      	mov	sl, r2
 801a762:	469b      	mov	fp, r3
 801a764:	4627      	mov	r7, r4
 801a766:	4625      	mov	r5, r4
 801a768:	4626      	mov	r6, r4
 801a76a:	4554      	cmp	r4, sl
 801a76c:	da2a      	bge.n	801a7c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a76e:	2300      	movs	r3, #0
 801a770:	9303      	str	r3, [sp, #12]
 801a772:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a776:	429d      	cmp	r5, r3
 801a778:	d004      	beq.n	801a784 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a77a:	f242 030b 	movw	r3, #8203	; 0x200b
 801a77e:	429d      	cmp	r5, r3
 801a780:	bf18      	it	ne
 801a782:	462f      	movne	r7, r5
 801a784:	ab03      	add	r3, sp, #12
 801a786:	4642      	mov	r2, r8
 801a788:	4659      	mov	r1, fp
 801a78a:	4648      	mov	r0, r9
 801a78c:	f002 ff82 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a790:	4605      	mov	r5, r0
 801a792:	b1b8      	cbz	r0, 801a7c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a794:	280a      	cmp	r0, #10
 801a796:	d015      	beq.n	801a7c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a798:	9a03      	ldr	r2, [sp, #12]
 801a79a:	b18a      	cbz	r2, 801a7c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a79c:	7b50      	ldrb	r0, [r2, #13]
 801a79e:	4639      	mov	r1, r7
 801a7a0:	7a93      	ldrb	r3, [r2, #10]
 801a7a2:	0040      	lsls	r0, r0, #1
 801a7a4:	8895      	ldrh	r5, [r2, #4]
 801a7a6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a7aa:	4303      	orrs	r3, r0
 801a7ac:	4640      	mov	r0, r8
 801a7ae:	9301      	str	r3, [sp, #4]
 801a7b0:	f8d8 3000 	ldr.w	r3, [r8]
 801a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7b6:	4798      	blx	r3
 801a7b8:	9b01      	ldr	r3, [sp, #4]
 801a7ba:	4418      	add	r0, r3
 801a7bc:	4406      	add	r6, r0
 801a7be:	b2b6      	uxth	r6, r6
 801a7c0:	3401      	adds	r4, #1
 801a7c2:	e7d2      	b.n	801a76a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	b005      	add	sp, #20
 801a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a7cc:	2a02      	cmp	r2, #2
 801a7ce:	b530      	push	{r4, r5, lr}
 801a7d0:	d011      	beq.n	801a7f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a7d2:	2a03      	cmp	r2, #3
 801a7d4:	d01c      	beq.n	801a810 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a7d6:	2a01      	cmp	r2, #1
 801a7d8:	d10c      	bne.n	801a7f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a7da:	888b      	ldrh	r3, [r1, #4]
 801a7dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a7e0:	8801      	ldrh	r1, [r0, #0]
 801a7e2:	1a9b      	subs	r3, r3, r2
 801a7e4:	8844      	ldrh	r4, [r0, #2]
 801a7e6:	1a5b      	subs	r3, r3, r1
 801a7e8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a7ec:	8004      	strh	r4, [r0, #0]
 801a7ee:	8043      	strh	r3, [r0, #2]
 801a7f0:	8081      	strh	r1, [r0, #4]
 801a7f2:	80c2      	strh	r2, [r0, #6]
 801a7f4:	bd30      	pop	{r4, r5, pc}
 801a7f6:	88cb      	ldrh	r3, [r1, #6]
 801a7f8:	88c2      	ldrh	r2, [r0, #6]
 801a7fa:	1a9b      	subs	r3, r3, r2
 801a7fc:	8842      	ldrh	r2, [r0, #2]
 801a7fe:	1a9b      	subs	r3, r3, r2
 801a800:	888a      	ldrh	r2, [r1, #4]
 801a802:	8881      	ldrh	r1, [r0, #4]
 801a804:	8043      	strh	r3, [r0, #2]
 801a806:	1a52      	subs	r2, r2, r1
 801a808:	8801      	ldrh	r1, [r0, #0]
 801a80a:	1a52      	subs	r2, r2, r1
 801a80c:	8002      	strh	r2, [r0, #0]
 801a80e:	e7f1      	b.n	801a7f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a810:	88cb      	ldrh	r3, [r1, #6]
 801a812:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a816:	8841      	ldrh	r1, [r0, #2]
 801a818:	1a9b      	subs	r3, r3, r2
 801a81a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a81e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a822:	1a5b      	subs	r3, r3, r1
 801a824:	8045      	strh	r5, [r0, #2]
 801a826:	8082      	strh	r2, [r0, #4]
 801a828:	8003      	strh	r3, [r0, #0]
 801a82a:	80c4      	strh	r4, [r0, #6]
 801a82c:	e7e2      	b.n	801a7f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a82e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a82e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a832:	b09f      	sub	sp, #124	; 0x7c
 801a834:	9116      	str	r1, [sp, #88]	; 0x58
 801a836:	9317      	str	r3, [sp, #92]	; 0x5c
 801a838:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a83a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a83c:	8809      	ldrh	r1, [r1, #0]
 801a83e:	889b      	ldrh	r3, [r3, #4]
 801a840:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a844:	440b      	add	r3, r1
 801a846:	9212      	str	r2, [sp, #72]	; 0x48
 801a848:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a84c:	b21b      	sxth	r3, r3
 801a84e:	9011      	str	r0, [sp, #68]	; 0x44
 801a850:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a854:	9310      	str	r3, [sp, #64]	; 0x40
 801a856:	f8d8 3000 	ldr.w	r3, [r8]
 801a85a:	7a59      	ldrb	r1, [r3, #9]
 801a85c:	7a1b      	ldrb	r3, [r3, #8]
 801a85e:	9114      	str	r1, [sp, #80]	; 0x50
 801a860:	9315      	str	r3, [sp, #84]	; 0x54
 801a862:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a864:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a868:	2a00      	cmp	r2, #0
 801a86a:	d067      	beq.n	801a93c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801a86c:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a870:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a872:	2b04      	cmp	r3, #4
 801a874:	bf14      	ite	ne
 801a876:	2301      	movne	r3, #1
 801a878:	2302      	moveq	r3, #2
 801a87a:	4413      	add	r3, r2
 801a87c:	f04f 0900 	mov.w	r9, #0
 801a880:	930f      	str	r3, [sp, #60]	; 0x3c
 801a882:	464c      	mov	r4, r9
 801a884:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a888:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a88c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a890:	4293      	cmp	r3, r2
 801a892:	f280 808c 	bge.w	801a9ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a896:	2300      	movs	r3, #0
 801a898:	931c      	str	r3, [sp, #112]	; 0x70
 801a89a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a89e:	429c      	cmp	r4, r3
 801a8a0:	d006      	beq.n	801a8b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8a4:	f242 020b 	movw	r2, #8203	; 0x200b
 801a8a8:	4294      	cmp	r4, r2
 801a8aa:	bf18      	it	ne
 801a8ac:	4623      	movne	r3, r4
 801a8ae:	930d      	str	r3, [sp, #52]	; 0x34
 801a8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8b2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a8b4:	f8d8 2000 	ldr.w	r2, [r8]
 801a8b8:	428b      	cmp	r3, r1
 801a8ba:	db41      	blt.n	801a940 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a8bc:	6813      	ldr	r3, [r2, #0]
 801a8be:	4610      	mov	r0, r2
 801a8c0:	695b      	ldr	r3, [r3, #20]
 801a8c2:	4798      	blx	r3
 801a8c4:	4604      	mov	r4, r0
 801a8c6:	f8d8 0000 	ldr.w	r0, [r8]
 801a8ca:	aa1d      	add	r2, sp, #116	; 0x74
 801a8cc:	4621      	mov	r1, r4
 801a8ce:	6803      	ldr	r3, [r0, #0]
 801a8d0:	689e      	ldr	r6, [r3, #8]
 801a8d2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a8d6:	47b0      	blx	r6
 801a8d8:	901c      	str	r0, [sp, #112]	; 0x70
 801a8da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a8de:	429c      	cmp	r4, r3
 801a8e0:	f000 80ea 	beq.w	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a8e4:	f242 030b 	movw	r3, #8203	; 0x200b
 801a8e8:	429c      	cmp	r4, r3
 801a8ea:	f000 80e5 	beq.w	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a8ee:	2c00      	cmp	r4, #0
 801a8f0:	f000 80f7 	beq.w	801aae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a8f4:	2c0a      	cmp	r4, #10
 801a8f6:	d060      	beq.n	801a9ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a8f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a8fa:	b36a      	cbz	r2, 801a958 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a8fc:	8894      	ldrh	r4, [r2, #4]
 801a8fe:	f1bb 0f00 	cmp.w	fp, #0
 801a902:	d03b      	beq.n	801a97c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a904:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a908:	f1bb 0f01 	cmp.w	fp, #1
 801a90c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a910:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a914:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a918:	ea49 0903 	orr.w	r9, r9, r3
 801a91c:	d134      	bne.n	801a988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a920:	eba5 0509 	sub.w	r5, r5, r9
 801a924:	2b00      	cmp	r3, #0
 801a926:	d14f      	bne.n	801a9c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a92a:	eb09 0305 	add.w	r3, r9, r5
 801a92e:	4413      	add	r3, r2
 801a930:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a932:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a936:	4293      	cmp	r3, r2
 801a938:	da51      	bge.n	801a9de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a93a:	e038      	b.n	801a9ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a93c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a93e:	e79d      	b.n	801a87c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a940:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a944:	4659      	mov	r1, fp
 801a946:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a948:	9301      	str	r3, [sp, #4]
 801a94a:	ab1d      	add	r3, sp, #116	; 0x74
 801a94c:	9300      	str	r3, [sp, #0]
 801a94e:	ab1c      	add	r3, sp, #112	; 0x70
 801a950:	f002 fef8 	bl	801d744 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a954:	4604      	mov	r4, r0
 801a956:	e7c0      	b.n	801a8da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a958:	f8d8 0000 	ldr.w	r0, [r8]
 801a95c:	6803      	ldr	r3, [r0, #0]
 801a95e:	691b      	ldr	r3, [r3, #16]
 801a960:	4798      	blx	r3
 801a962:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a966:	4298      	cmp	r0, r3
 801a968:	f000 80a6 	beq.w	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a96c:	f242 030b 	movw	r3, #8203	; 0x200b
 801a970:	4298      	cmp	r0, r3
 801a972:	f000 80a1 	beq.w	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a976:	f1bb 0f00 	cmp.w	fp, #0
 801a97a:	d100      	bne.n	801a97e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a97c:	444d      	add	r5, r9
 801a97e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a980:	2a00      	cmp	r2, #0
 801a982:	d1bf      	bne.n	801a904 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a984:	4691      	mov	r9, r2
 801a986:	e097      	b.n	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	f000 80ab 	beq.w	801aae6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a990:	f1bb 0f00 	cmp.w	fp, #0
 801a994:	d118      	bne.n	801a9c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a996:	f8d8 0000 	ldr.w	r0, [r8]
 801a99a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a99c:	6803      	ldr	r3, [r0, #0]
 801a99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9a0:	4798      	blx	r3
 801a9a2:	4405      	add	r5, r0
 801a9a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a9a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9a8:	1aeb      	subs	r3, r5, r3
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	dd17      	ble.n	801a9de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a9ae:	2c00      	cmp	r4, #0
 801a9b0:	f000 8097 	beq.w	801aae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a9b4:	2c0a      	cmp	r4, #10
 801a9b6:	f040 8085 	bne.w	801aac4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a9ba:	240a      	movs	r4, #10
 801a9bc:	fab4 f084 	clz	r0, r4
 801a9c0:	0940      	lsrs	r0, r0, #5
 801a9c2:	b01f      	add	sp, #124	; 0x7c
 801a9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9c8:	f8d8 0000 	ldr.w	r0, [r8]
 801a9cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a9ce:	6803      	ldr	r3, [r0, #0]
 801a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a9d2:	4798      	blx	r3
 801a9d4:	f1bb 0f01 	cmp.w	fp, #1
 801a9d8:	eba5 0500 	sub.w	r5, r5, r0
 801a9dc:	d0a4      	beq.n	801a928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a9de:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a9e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a9e2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a9e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a9ea:	7b43      	ldrb	r3, [r0, #13]
 801a9ec:	4429      	add	r1, r5
 801a9ee:	015b      	lsls	r3, r3, #5
 801a9f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a9f4:	7983      	ldrb	r3, [r0, #6]
 801a9f6:	4313      	orrs	r3, r2
 801a9f8:	440b      	add	r3, r1
 801a9fa:	42b3      	cmp	r3, r6
 801a9fc:	db5c      	blt.n	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a9fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aa00:	4299      	cmp	r1, r3
 801aa02:	da59      	bge.n	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801aa04:	f8d8 0000 	ldr.w	r0, [r8]
 801aa08:	42ae      	cmp	r6, r5
 801aa0a:	6803      	ldr	r3, [r0, #0]
 801aa0c:	bfcc      	ite	gt
 801aa0e:	1b76      	subgt	r6, r6, r5
 801aa10:	2600      	movle	r6, #0
 801aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa14:	bfc8      	it	gt
 801aa16:	b2b6      	uxthgt	r6, r6
 801aa18:	4798      	blx	r3
 801aa1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aa1c:	7b5a      	ldrb	r2, [r3, #13]
 801aa1e:	00d1      	lsls	r1, r2, #3
 801aa20:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801aa24:	7a19      	ldrb	r1, [r3, #8]
 801aa26:	4339      	orrs	r1, r7
 801aa28:	0657      	lsls	r7, r2, #25
 801aa2a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801aa2c:	bf48      	it	mi
 801aa2e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801aa32:	4407      	add	r7, r0
 801aa34:	bf48      	it	mi
 801aa36:	b209      	sxthmi	r1, r1
 801aa38:	1a7f      	subs	r7, r7, r1
 801aa3a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801aa3c:	b2bf      	uxth	r7, r7
 801aa3e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801aa42:	fa0f fa87 	sxth.w	sl, r7
 801aa46:	4551      	cmp	r1, sl
 801aa48:	dd3a      	ble.n	801aac0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801aa4a:	0112      	lsls	r2, r2, #4
 801aa4c:	79d8      	ldrb	r0, [r3, #7]
 801aa4e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801aa52:	4302      	orrs	r2, r0
 801aa54:	4492      	add	sl, r2
 801aa56:	4551      	cmp	r1, sl
 801aa58:	dc2e      	bgt.n	801aab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801aa5a:	1bcf      	subs	r7, r1, r7
 801aa5c:	468a      	mov	sl, r1
 801aa5e:	b2bf      	uxth	r7, r7
 801aa60:	9319      	str	r3, [sp, #100]	; 0x64
 801aa62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aa64:	f8d8 0000 	ldr.w	r0, [r8]
 801aa68:	681a      	ldr	r2, [r3, #0]
 801aa6a:	6801      	ldr	r1, [r0, #0]
 801aa6c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801aa6e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801aa70:	9313      	str	r3, [sp, #76]	; 0x4c
 801aa72:	9218      	str	r2, [sp, #96]	; 0x60
 801aa74:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801aa76:	4788      	blx	r1
 801aa78:	f898 1006 	ldrb.w	r1, [r8, #6]
 801aa7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aa7e:	910b      	str	r1, [sp, #44]	; 0x2c
 801aa80:	f898 100e 	ldrb.w	r1, [r8, #14]
 801aa84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801aa86:	910a      	str	r1, [sp, #40]	; 0x28
 801aa88:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801aa8c:	9109      	str	r1, [sp, #36]	; 0x24
 801aa8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801aa92:	9305      	str	r3, [sp, #20]
 801aa94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aa96:	9206      	str	r2, [sp, #24]
 801aa98:	e9cd a601 	strd	sl, r6, [sp, #4]
 801aa9c:	442e      	add	r6, r5
 801aa9e:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801aaa2:	b236      	sxth	r6, r6
 801aaa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aaa6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801aaaa:	9600      	str	r6, [sp, #0]
 801aaac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801aaae:	681a      	ldr	r2, [r3, #0]
 801aab0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801aab2:	685b      	ldr	r3, [r3, #4]
 801aab4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801aab6:	47b0      	blx	r6
 801aab8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aaba:	3301      	adds	r3, #1
 801aabc:	930e      	str	r3, [sp, #56]	; 0x38
 801aabe:	e6e5      	b.n	801a88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801aac0:	2700      	movs	r7, #0
 801aac2:	e7cd      	b.n	801aa60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801aac4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801aac6:	3501      	adds	r5, #1
 801aac8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801aaca:	429d      	cmp	r5, r3
 801aacc:	f6bf af76 	bge.w	801a9bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801aad0:	4659      	mov	r1, fp
 801aad2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801aad4:	f7ef f9ea 	bl	8009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801aad8:	4604      	mov	r4, r0
 801aada:	b110      	cbz	r0, 801aae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801aadc:	280a      	cmp	r0, #10
 801aade:	d1f2      	bne.n	801aac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801aae0:	e76b      	b.n	801a9ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801aae2:	2400      	movs	r4, #0
 801aae4:	e76a      	b.n	801a9bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801aae6:	f1bb 0f00 	cmp.w	fp, #0
 801aaea:	f43f af5b 	beq.w	801a9a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801aaee:	e776      	b.n	801a9de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801aaf0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801aaf0:	b530      	push	{r4, r5, lr}
 801aaf2:	8a44      	ldrh	r4, [r0, #18]
 801aaf4:	8ac5      	ldrh	r5, [r0, #22]
 801aaf6:	82c3      	strh	r3, [r0, #22]
 801aaf8:	442c      	add	r4, r5
 801aafa:	1ae4      	subs	r4, r4, r3
 801aafc:	8b03      	ldrh	r3, [r0, #24]
 801aafe:	8244      	strh	r4, [r0, #18]
 801ab00:	8a84      	ldrh	r4, [r0, #20]
 801ab02:	4422      	add	r2, r4
 801ab04:	440c      	add	r4, r1
 801ab06:	1a59      	subs	r1, r3, r1
 801ab08:	8342      	strh	r2, [r0, #26]
 801ab0a:	8284      	strh	r4, [r0, #20]
 801ab0c:	8301      	strh	r1, [r0, #24]
 801ab0e:	bd30      	pop	{r4, r5, pc}

0801ab10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab14:	7a43      	ldrb	r3, [r0, #9]
 801ab16:	b087      	sub	sp, #28
 801ab18:	4604      	mov	r4, r0
 801ab1a:	460f      	mov	r7, r1
 801ab1c:	1eda      	subs	r2, r3, #3
 801ab1e:	b2d2      	uxtb	r2, r2
 801ab20:	2900      	cmp	r1, #0
 801ab22:	d036      	beq.n	801ab92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801ab24:	2a01      	cmp	r2, #1
 801ab26:	d932      	bls.n	801ab8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801ab28:	1e58      	subs	r0, r3, #1
 801ab2a:	f1d0 0b00 	rsbs	fp, r0, #0
 801ab2e:	eb4b 0b00 	adc.w	fp, fp, r0
 801ab32:	1e99      	subs	r1, r3, #2
 801ab34:	424b      	negs	r3, r1
 801ab36:	414b      	adcs	r3, r1
 801ab38:	9303      	str	r3, [sp, #12]
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801ab40:	2500      	movs	r5, #0
 801ab42:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801ab46:	46a9      	mov	r9, r5
 801ab48:	8265      	strh	r5, [r4, #18]
 801ab4a:	82a5      	strh	r5, [r4, #20]
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	9305      	str	r3, [sp, #20]
 801ab50:	8823      	ldrh	r3, [r4, #0]
 801ab52:	2b20      	cmp	r3, #32
 801ab54:	d02b      	beq.n	801abae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801ab56:	eba3 020a 	sub.w	r2, r3, sl
 801ab5a:	4256      	negs	r6, r2
 801ab5c:	4156      	adcs	r6, r2
 801ab5e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d004      	beq.n	801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801ab66:	4553      	cmp	r3, sl
 801ab68:	bf16      	itet	ne
 801ab6a:	4699      	movne	r9, r3
 801ab6c:	2601      	moveq	r6, #1
 801ab6e:	2600      	movne	r6, #0
 801ab70:	ab05      	add	r3, sp, #20
 801ab72:	68e2      	ldr	r2, [r4, #12]
 801ab74:	7a21      	ldrb	r1, [r4, #8]
 801ab76:	6860      	ldr	r0, [r4, #4]
 801ab78:	f002 fd8c 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ab7c:	8020      	strh	r0, [r4, #0]
 801ab7e:	b9c8      	cbnz	r0, 801abb4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801ab80:	8b22      	ldrh	r2, [r4, #24]
 801ab82:	2300      	movs	r3, #0
 801ab84:	4611      	mov	r1, r2
 801ab86:	4620      	mov	r0, r4
 801ab88:	f7ff ffb2 	bl	801aaf0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ab8c:	e066      	b.n	801ac5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ab8e:	468b      	mov	fp, r1
 801ab90:	e7cf      	b.n	801ab32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801ab92:	3b01      	subs	r3, #1
 801ab94:	2a01      	cmp	r2, #1
 801ab96:	9103      	str	r1, [sp, #12]
 801ab98:	468b      	mov	fp, r1
 801ab9a:	bf8c      	ite	hi
 801ab9c:	2200      	movhi	r2, #0
 801ab9e:	2201      	movls	r2, #1
 801aba0:	2b01      	cmp	r3, #1
 801aba2:	9202      	str	r2, [sp, #8]
 801aba4:	bf8c      	ite	hi
 801aba6:	2300      	movhi	r3, #0
 801aba8:	2301      	movls	r3, #1
 801abaa:	9301      	str	r3, [sp, #4]
 801abac:	e7c8      	b.n	801ab40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801abae:	4699      	mov	r9, r3
 801abb0:	2601      	movs	r6, #1
 801abb2:	e7dd      	b.n	801ab70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801abb4:	8ae3      	ldrh	r3, [r4, #22]
 801abb6:	280a      	cmp	r0, #10
 801abb8:	f103 0301 	add.w	r3, r3, #1
 801abbc:	82e3      	strh	r3, [r4, #22]
 801abbe:	d0df      	beq.n	801ab80 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801abc0:	9a05      	ldr	r2, [sp, #20]
 801abc2:	bb42      	cbnz	r2, 801ac16 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801abc4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801abc8:	4298      	cmp	r0, r3
 801abca:	d001      	beq.n	801abd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801abcc:	4550      	cmp	r0, sl
 801abce:	d1bd      	bne.n	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801abd0:	8823      	ldrh	r3, [r4, #0]
 801abd2:	8b21      	ldrh	r1, [r4, #24]
 801abd4:	2b20      	cmp	r3, #32
 801abd6:	d001      	beq.n	801abdc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801abd8:	4553      	cmp	r3, sl
 801abda:	d131      	bne.n	801ac40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801abdc:	2e00      	cmp	r6, #0
 801abde:	bf0a      	itet	eq
 801abe0:	460d      	moveq	r5, r1
 801abe2:	4630      	movne	r0, r6
 801abe4:	2001      	moveq	r0, #1
 801abe6:	440a      	add	r2, r1
 801abe8:	8aa3      	ldrh	r3, [r4, #20]
 801abea:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801abee:	b292      	uxth	r2, r2
 801abf0:	8322      	strh	r2, [r4, #24]
 801abf2:	4413      	add	r3, r2
 801abf4:	2f00      	cmp	r7, #0
 801abf6:	d03a      	beq.n	801ac6e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801abf8:	f1bb 0f00 	cmp.w	fp, #0
 801abfc:	d102      	bne.n	801ac04 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801abfe:	9903      	ldr	r1, [sp, #12]
 801ac00:	b301      	cbz	r1, 801ac44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ac02:	b1f8      	cbz	r0, 801ac44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ac04:	8ba1      	ldrh	r1, [r4, #28]
 801ac06:	4419      	add	r1, r3
 801ac08:	458c      	cmp	ip, r1
 801ac0a:	da2a      	bge.n	801ac62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ac0c:	8a61      	ldrh	r1, [r4, #18]
 801ac0e:	b341      	cbz	r1, 801ac62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ac10:	4563      	cmp	r3, ip
 801ac12:	dd9b      	ble.n	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac14:	e01c      	b.n	801ac50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801ac16:	8893      	ldrh	r3, [r2, #4]
 801ac18:	4649      	mov	r1, r9
 801ac1a:	8023      	strh	r3, [r4, #0]
 801ac1c:	f892 800d 	ldrb.w	r8, [r2, #13]
 801ac20:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ac24:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801ac28:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ac2c:	ea48 0800 	orr.w	r8, r8, r0
 801ac30:	68e0      	ldr	r0, [r4, #12]
 801ac32:	6803      	ldr	r3, [r0, #0]
 801ac34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac36:	4798      	blx	r3
 801ac38:	eb08 0200 	add.w	r2, r8, r0
 801ac3c:	b292      	uxth	r2, r2
 801ac3e:	e7c7      	b.n	801abd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801ac40:	2000      	movs	r0, #0
 801ac42:	e7d0      	b.n	801abe6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801ac44:	4563      	cmp	r3, ip
 801ac46:	dd81      	ble.n	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac48:	8a63      	ldrh	r3, [r4, #18]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f43f af7e 	beq.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac50:	2301      	movs	r3, #1
 801ac52:	8ba2      	ldrh	r2, [r4, #28]
 801ac54:	77a3      	strb	r3, [r4, #30]
 801ac56:	8b63      	ldrh	r3, [r4, #26]
 801ac58:	4413      	add	r3, r2
 801ac5a:	8363      	strh	r3, [r4, #26]
 801ac5c:	b007      	add	sp, #28
 801ac5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac62:	2300      	movs	r3, #0
 801ac64:	4611      	mov	r1, r2
 801ac66:	4620      	mov	r0, r4
 801ac68:	f7ff ff42 	bl	801aaf0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ac6c:	e76e      	b.n	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac6e:	4563      	cmp	r3, ip
 801ac70:	dd14      	ble.n	801ac9c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801ac72:	9b02      	ldr	r3, [sp, #8]
 801ac74:	b113      	cbz	r3, 801ac7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801ac76:	2301      	movs	r3, #1
 801ac78:	460a      	mov	r2, r1
 801ac7a:	e783      	b.n	801ab84 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801ac7c:	9b01      	ldr	r3, [sp, #4]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	f43f af64 	beq.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac84:	2800      	cmp	r0, #0
 801ac86:	f47f af61 	bne.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac8a:	b116      	cbz	r6, 801ac92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	462a      	mov	r2, r5
 801ac90:	e779      	b.n	801ab86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801ac92:	8a63      	ldrh	r3, [r4, #18]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	f43f af59 	beq.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ac9a:	e7df      	b.n	801ac5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	f47f af55 	bne.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aca2:	2e00      	cmp	r6, #0
 801aca4:	f43f af52 	beq.w	801ab4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aca8:	2301      	movs	r3, #1
 801acaa:	462a      	mov	r2, r5
 801acac:	e7db      	b.n	801ac66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801acae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801acae:	b530      	push	{r4, r5, lr}
 801acb0:	4605      	mov	r5, r0
 801acb2:	b08b      	sub	sp, #44	; 0x2c
 801acb4:	b191      	cbz	r1, 801acdc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801acb6:	2401      	movs	r4, #1
 801acb8:	e9cd 3100 	strd	r3, r1, [sp]
 801acbc:	4613      	mov	r3, r2
 801acbe:	4601      	mov	r1, r0
 801acc0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801acc4:	a802      	add	r0, sp, #8
 801acc6:	f7ff fd0b 	bl	801a6e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801acca:	2100      	movs	r1, #0
 801accc:	a802      	add	r0, sp, #8
 801acce:	f7ff ff1f 	bl	801ab10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801acd2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801acd6:	b163      	cbz	r3, 801acf2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801acd8:	3401      	adds	r4, #1
 801acda:	e7f6      	b.n	801acca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801acdc:	2401      	movs	r4, #1
 801acde:	f002 fdd3 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ace2:	280a      	cmp	r0, #10
 801ace4:	4628      	mov	r0, r5
 801ace6:	bf08      	it	eq
 801ace8:	3401      	addeq	r4, #1
 801acea:	f002 fdcd 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801acee:	2800      	cmp	r0, #0
 801acf0:	d1f7      	bne.n	801ace2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801acf2:	b2a0      	uxth	r0, r4
 801acf4:	b00b      	add	sp, #44	; 0x2c
 801acf6:	bd30      	pop	{r4, r5, pc}

0801acf8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acfc:	b0e5      	sub	sp, #404	; 0x194
 801acfe:	4689      	mov	r9, r1
 801ad00:	461c      	mov	r4, r3
 801ad02:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801ad06:	900a      	str	r0, [sp, #40]	; 0x28
 801ad08:	f1ba 0f00 	cmp.w	sl, #0
 801ad0c:	f000 80b4 	beq.w	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	f000 80b0 	beq.w	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad18:	7ba3      	ldrb	r3, [r4, #14]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	f000 80ac 	beq.w	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ad20:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801ad24:	6810      	ldr	r0, [r2, #0]
 801ad26:	6851      	ldr	r1, [r2, #4]
 801ad28:	2500      	movs	r5, #0
 801ad2a:	4643      	mov	r3, r8
 801ad2c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801ad30:	950f      	str	r5, [sp, #60]	; 0x3c
 801ad32:	af19      	add	r7, sp, #100	; 0x64
 801ad34:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ad38:	79a2      	ldrb	r2, [r4, #6]
 801ad3a:	c303      	stmia	r3!, {r0, r1}
 801ad3c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801ad40:	a90f      	add	r1, sp, #60	; 0x3c
 801ad42:	4640      	mov	r0, r8
 801ad44:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ad48:	f7ff fd40 	bl	801a7cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801ad4c:	a90f      	add	r1, sp, #60	; 0x3c
 801ad4e:	79a2      	ldrb	r2, [r4, #6]
 801ad50:	4608      	mov	r0, r1
 801ad52:	f7ff fd3b 	bl	801a7cc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801ad56:	4638      	mov	r0, r7
 801ad58:	f002 f948 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801ad5c:	6820      	ldr	r0, [r4, #0]
 801ad5e:	6803      	ldr	r3, [r0, #0]
 801ad60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad62:	4798      	blx	r3
 801ad64:	4606      	mov	r6, r0
 801ad66:	6820      	ldr	r0, [r4, #0]
 801ad68:	6803      	ldr	r3, [r0, #0]
 801ad6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad6c:	4798      	blx	r3
 801ad6e:	4633      	mov	r3, r6
 801ad70:	9000      	str	r0, [sp, #0]
 801ad72:	4651      	mov	r1, sl
 801ad74:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ad76:	4638      	mov	r0, r7
 801ad78:	f002 f98b 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ad7c:	7923      	ldrb	r3, [r4, #4]
 801ad7e:	6820      	ldr	r0, [r4, #0]
 801ad80:	9308      	str	r3, [sp, #32]
 801ad82:	6803      	ldr	r3, [r0, #0]
 801ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad86:	4798      	blx	r3
 801ad88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad8c:	181e      	adds	r6, r3, r0
 801ad8e:	42ae      	cmp	r6, r5
 801ad90:	dd06      	ble.n	801ada0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801ad92:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801ad96:	4282      	cmp	r2, r0
 801ad98:	bfa4      	itt	ge
 801ad9a:	189d      	addge	r5, r3, r2
 801ad9c:	fb95 f5f6 	sdivge	r5, r5, r6
 801ada0:	a832      	add	r0, sp, #200	; 0xc8
 801ada2:	f002 f923 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801ada6:	7c23      	ldrb	r3, [r4, #16]
 801ada8:	b17b      	cbz	r3, 801adca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801adaa:	6820      	ldr	r0, [r4, #0]
 801adac:	6803      	ldr	r3, [r0, #0]
 801adae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adb0:	4798      	blx	r3
 801adb2:	4683      	mov	fp, r0
 801adb4:	6820      	ldr	r0, [r4, #0]
 801adb6:	6803      	ldr	r3, [r0, #0]
 801adb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801adba:	4798      	blx	r3
 801adbc:	465b      	mov	r3, fp
 801adbe:	9000      	str	r0, [sp, #0]
 801adc0:	4651      	mov	r1, sl
 801adc2:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801adc4:	a832      	add	r0, sp, #200	; 0xc8
 801adc6:	f002 f964 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801adca:	7be1      	ldrb	r1, [r4, #15]
 801adcc:	a811      	add	r0, sp, #68	; 0x44
 801adce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801add2:	7963      	ldrb	r3, [r4, #5]
 801add4:	1a52      	subs	r2, r2, r1
 801add6:	7c21      	ldrb	r1, [r4, #16]
 801add8:	9101      	str	r1, [sp, #4]
 801adda:	b292      	uxth	r2, r2
 801addc:	6821      	ldr	r1, [r4, #0]
 801adde:	9100      	str	r1, [sp, #0]
 801ade0:	a932      	add	r1, sp, #200	; 0xc8
 801ade2:	f7ff fc7d 	bl	801a6e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ade6:	7c23      	ldrb	r3, [r4, #16]
 801ade8:	b9bb      	cbnz	r3, 801ae1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801adea:	fa1f fa86 	uxth.w	sl, r6
 801adee:	2d00      	cmp	r5, #0
 801adf0:	dd45      	ble.n	801ae7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801adf2:	4638      	mov	r0, r7
 801adf4:	f002 fd48 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801adf8:	2800      	cmp	r0, #0
 801adfa:	d03d      	beq.n	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801adfc:	280a      	cmp	r0, #10
 801adfe:	d1f6      	bne.n	801adee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ae00:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ae04:	3d01      	subs	r5, #1
 801ae06:	4453      	add	r3, sl
 801ae08:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ae0c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801ae10:	eba3 030a 	sub.w	r3, r3, sl
 801ae14:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ae18:	e7e9      	b.n	801adee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ae1a:	0073      	lsls	r3, r6, #1
 801ae1c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801ae20:	fa1f fa86 	uxth.w	sl, r6
 801ae24:	9309      	str	r3, [sp, #36]	; 0x24
 801ae26:	2d00      	cmp	r5, #0
 801ae28:	dd29      	ble.n	801ae7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ae2a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ae2e:	a811      	add	r0, sp, #68	; 0x44
 801ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae32:	428b      	cmp	r3, r1
 801ae34:	bfd4      	ite	le
 801ae36:	2100      	movle	r1, #0
 801ae38:	2101      	movgt	r1, #1
 801ae3a:	f7ff fe69 	bl	801ab10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ae3e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ae42:	3b01      	subs	r3, #1
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	455b      	cmp	r3, fp
 801ae48:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae4a:	d005      	beq.n	801ae58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801ae4c:	7961      	ldrb	r1, [r4, #5]
 801ae4e:	4638      	mov	r0, r7
 801ae50:	f7ef f82c 	bl	8009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae56:	e7f4      	b.n	801ae42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801ae58:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ae5c:	3d01      	subs	r5, #1
 801ae5e:	4453      	add	r3, sl
 801ae60:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ae64:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801ae68:	eba3 030a 	sub.w	r3, r3, sl
 801ae6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ae70:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d1d6      	bne.n	801ae26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801ae78:	b065      	add	sp, #404	; 0x194
 801ae7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae7e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801ae82:	ad4b      	add	r5, sp, #300	; 0x12c
 801ae84:	f04f 0b00 	mov.w	fp, #0
 801ae88:	7c23      	ldrb	r3, [r4, #16]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d067      	beq.n	801af5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801ae8e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ae92:	a811      	add	r0, sp, #68	; 0x44
 801ae94:	458a      	cmp	sl, r1
 801ae96:	bfd4      	ite	le
 801ae98:	2100      	movle	r1, #0
 801ae9a:	2101      	movgt	r1, #1
 801ae9c:	f7ff fe38 	bl	801ab10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801aea0:	9b08      	ldr	r3, [sp, #32]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d056      	beq.n	801af54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801aea6:	7c23      	ldrb	r3, [r4, #16]
 801aea8:	2264      	movs	r2, #100	; 0x64
 801aeaa:	4639      	mov	r1, r7
 801aeac:	4628      	mov	r0, r5
 801aeae:	9309      	str	r3, [sp, #36]	; 0x24
 801aeb0:	f010 f83b 	bl	802af2a <memcpy>
 801aeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d059      	beq.n	801af6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801aeba:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801aebe:	7922      	ldrb	r2, [r4, #4]
 801aec0:	2a01      	cmp	r2, #1
 801aec2:	d13d      	bne.n	801af40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801aec4:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801aec8:	1ac0      	subs	r0, r0, r3
 801aeca:	2302      	movs	r3, #2
 801aecc:	fb90 f0f3 	sdiv	r0, r0, r3
 801aed0:	b200      	sxth	r0, r0
 801aed2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801aed6:	4418      	add	r0, r3
 801aed8:	7c23      	ldrb	r3, [r4, #16]
 801aeda:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d03a      	beq.n	801af58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801aee2:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801aee6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801aeea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801aeee:	9500      	str	r5, [sp, #0]
 801aef0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801aef2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801aef6:	e9cd b703 	strd	fp, r7, [sp, #12]
 801aefa:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801aefe:	464a      	mov	r2, r9
 801af00:	2100      	movs	r1, #0
 801af02:	f7ff fc94 	bl	801a82e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801af06:	2800      	cmp	r0, #0
 801af08:	d1b6      	bne.n	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801af0a:	b2b2      	uxth	r2, r6
 801af0c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801af10:	4611      	mov	r1, r2
 801af12:	4413      	add	r3, r2
 801af14:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801af18:	b21b      	sxth	r3, r3
 801af1a:	1a52      	subs	r2, r2, r1
 801af1c:	7c21      	ldrb	r1, [r4, #16]
 801af1e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801af22:	b212      	sxth	r2, r2
 801af24:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801af28:	b109      	cbz	r1, 801af2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801af2a:	42b2      	cmp	r2, r6
 801af2c:	dba4      	blt.n	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801af2e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801af32:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801af36:	440a      	add	r2, r1
 801af38:	b212      	sxth	r2, r2
 801af3a:	4293      	cmp	r3, r2
 801af3c:	dda4      	ble.n	801ae88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801af3e:	e79b      	b.n	801ae78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801af40:	2a02      	cmp	r2, #2
 801af42:	d105      	bne.n	801af50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801af44:	7be2      	ldrb	r2, [r4, #15]
 801af46:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801af4a:	1a80      	subs	r0, r0, r2
 801af4c:	1ac0      	subs	r0, r0, r3
 801af4e:	e7bf      	b.n	801aed0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801af50:	2000      	movs	r0, #0
 801af52:	e7be      	b.n	801aed2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801af54:	7be0      	ldrb	r0, [r4, #15]
 801af56:	e7bc      	b.n	801aed2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801af58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801af5c:	e7c3      	b.n	801aee6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801af5e:	9b08      	ldr	r3, [sp, #32]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d0f7      	beq.n	801af54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801af64:	2264      	movs	r2, #100	; 0x64
 801af66:	4639      	mov	r1, r7
 801af68:	4628      	mov	r0, r5
 801af6a:	f00f ffde 	bl	802af2a <memcpy>
 801af6e:	2300      	movs	r3, #0
 801af70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801af74:	6821      	ldr	r1, [r4, #0]
 801af76:	4628      	mov	r0, r5
 801af78:	f7ff fbec 	bl	801a754 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801af7c:	b203      	sxth	r3, r0
 801af7e:	e79e      	b.n	801aebe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801af80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801af80:	2b02      	cmp	r3, #2
 801af82:	b510      	push	{r4, lr}
 801af84:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af88:	d00b      	beq.n	801afa2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801af8a:	2b03      	cmp	r3, #3
 801af8c:	d00e      	beq.n	801afac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801af8e:	2b01      	cmp	r3, #1
 801af90:	d001      	beq.n	801af96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801af92:	1860      	adds	r0, r4, r1
 801af94:	bd10      	pop	{r4, pc}
 801af96:	8880      	ldrh	r0, [r0, #4]
 801af98:	4420      	add	r0, r4
 801af9a:	b200      	sxth	r0, r0
 801af9c:	1a80      	subs	r0, r0, r2
 801af9e:	3801      	subs	r0, #1
 801afa0:	e7f8      	b.n	801af94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801afa2:	8880      	ldrh	r0, [r0, #4]
 801afa4:	4420      	add	r0, r4
 801afa6:	b200      	sxth	r0, r0
 801afa8:	1a40      	subs	r0, r0, r1
 801afaa:	e7f8      	b.n	801af9e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801afac:	18a0      	adds	r0, r4, r2
 801afae:	e7f1      	b.n	801af94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801afb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801afb0:	2b02      	cmp	r3, #2
 801afb2:	b510      	push	{r4, lr}
 801afb4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801afb8:	d006      	beq.n	801afc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801afba:	2b03      	cmp	r3, #3
 801afbc:	d00a      	beq.n	801afd4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801afbe:	2b01      	cmp	r3, #1
 801afc0:	bf14      	ite	ne
 801afc2:	18a0      	addne	r0, r4, r2
 801afc4:	1860      	addeq	r0, r4, r1
 801afc6:	bd10      	pop	{r4, pc}
 801afc8:	88c0      	ldrh	r0, [r0, #6]
 801afca:	4420      	add	r0, r4
 801afcc:	b200      	sxth	r0, r0
 801afce:	1a80      	subs	r0, r0, r2
 801afd0:	3801      	subs	r0, #1
 801afd2:	e7f8      	b.n	801afc6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801afd4:	88c0      	ldrh	r0, [r0, #6]
 801afd6:	4420      	add	r0, r4
 801afd8:	b200      	sxth	r0, r0
 801afda:	1a40      	subs	r0, r0, r1
 801afdc:	e7f8      	b.n	801afd0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801afe0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801afe0:	4b01      	ldr	r3, [pc, #4]	; (801afe8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801afe2:	2200      	movs	r2, #0
 801afe4:	601a      	str	r2, [r3, #0]
 801afe6:	4770      	bx	lr
 801afe8:	2400b8cc 	.word	0x2400b8cc

0801afec <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801afec:	4603      	mov	r3, r0
 801afee:	b1c8      	cbz	r0, 801b024 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801aff0:	0c02      	lsrs	r2, r0, #16
 801aff2:	0412      	lsls	r2, r2, #16
 801aff4:	b9a2      	cbnz	r2, 801b020 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801aff6:	0403      	lsls	r3, r0, #16
 801aff8:	2010      	movs	r0, #16
 801affa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801affe:	bf04      	itt	eq
 801b000:	021b      	lsleq	r3, r3, #8
 801b002:	3008      	addeq	r0, #8
 801b004:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b008:	bf04      	itt	eq
 801b00a:	011b      	lsleq	r3, r3, #4
 801b00c:	3004      	addeq	r0, #4
 801b00e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b012:	bf04      	itt	eq
 801b014:	009b      	lsleq	r3, r3, #2
 801b016:	3002      	addeq	r0, #2
 801b018:	2b00      	cmp	r3, #0
 801b01a:	db04      	blt.n	801b026 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b01c:	3001      	adds	r0, #1
 801b01e:	4770      	bx	lr
 801b020:	2000      	movs	r0, #0
 801b022:	e7ea      	b.n	801affa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b024:	2020      	movs	r0, #32
 801b026:	4770      	bx	lr

0801b028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b02c:	b087      	sub	sp, #28
 801b02e:	4681      	mov	r9, r0
 801b030:	4698      	mov	r8, r3
 801b032:	4610      	mov	r0, r2
 801b034:	460d      	mov	r5, r1
 801b036:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b03a:	b981      	cbnz	r1, 801b05e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b03c:	b14b      	cbz	r3, 801b052 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b03e:	460b      	mov	r3, r1
 801b040:	464a      	mov	r2, r9
 801b042:	4641      	mov	r1, r8
 801b044:	e9cd 4700 	strd	r4, r7, [sp]
 801b048:	f7ff ffee 	bl	801b028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b04c:	b007      	add	sp, #28
 801b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b052:	f04f 33ff 	mov.w	r3, #4294967295
 801b056:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b05a:	603b      	str	r3, [r7, #0]
 801b05c:	e7f6      	b.n	801b04c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b05e:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b062:	d107      	bne.n	801b074 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b064:	fb09 f602 	mul.w	r6, r9, r2
 801b068:	fbb6 f0f4 	udiv	r0, r6, r4
 801b06c:	fb04 6610 	mls	r6, r4, r0, r6
 801b070:	603e      	str	r6, [r7, #0]
 801b072:	e7eb      	b.n	801b04c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b074:	2601      	movs	r6, #1
 801b076:	fa09 fb01 	lsl.w	fp, r9, r1
 801b07a:	408e      	lsls	r6, r1
 801b07c:	fbbb f3f4 	udiv	r3, fp, r4
 801b080:	3e01      	subs	r6, #1
 801b082:	9302      	str	r3, [sp, #8]
 801b084:	fb0a f303 	mul.w	r3, sl, r3
 801b088:	4016      	ands	r6, r2
 801b08a:	9303      	str	r3, [sp, #12]
 801b08c:	4630      	mov	r0, r6
 801b08e:	f7ff ffad 	bl	801afec <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b092:	464a      	mov	r2, r9
 801b094:	460b      	mov	r3, r1
 801b096:	4601      	mov	r1, r0
 801b098:	4630      	mov	r0, r6
 801b09a:	e9cd 4700 	strd	r4, r7, [sp]
 801b09e:	f7ff ffc3 	bl	801b028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b0a2:	9b02      	ldr	r3, [sp, #8]
 801b0a4:	4606      	mov	r6, r0
 801b0a6:	eb05 0108 	add.w	r1, r5, r8
 801b0aa:	fb04 bb13 	mls	fp, r4, r3, fp
 801b0ae:	4658      	mov	r0, fp
 801b0b0:	f7ff ff9c 	bl	801afec <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b0b4:	ab05      	add	r3, sp, #20
 801b0b6:	465a      	mov	r2, fp
 801b0b8:	e9cd 4300 	strd	r4, r3, [sp]
 801b0bc:	4603      	mov	r3, r0
 801b0be:	4650      	mov	r0, sl
 801b0c0:	f7ff ffb2 	bl	801b028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b0c4:	6839      	ldr	r1, [r7, #0]
 801b0c6:	9a05      	ldr	r2, [sp, #20]
 801b0c8:	9b03      	ldr	r3, [sp, #12]
 801b0ca:	4411      	add	r1, r2
 801b0cc:	fbb1 f2f4 	udiv	r2, r1, r4
 801b0d0:	18d3      	adds	r3, r2, r3
 801b0d2:	fb04 1412 	mls	r4, r4, r2, r1
 801b0d6:	441e      	add	r6, r3
 801b0d8:	603c      	str	r4, [r7, #0]
 801b0da:	4430      	add	r0, r6
 801b0dc:	e7b6      	b.n	801b04c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b0de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b0de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	f1b0 0900 	subs.w	r9, r0, #0
 801b0e8:	461d      	mov	r5, r3
 801b0ea:	4617      	mov	r7, r2
 801b0ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b0ee:	bfbb      	ittet	lt
 801b0f0:	f1c9 0900 	rsblt	r9, r9, #0
 801b0f4:	f04f 36ff 	movlt.w	r6, #4294967295
 801b0f8:	2601      	movge	r6, #1
 801b0fa:	6823      	ldrlt	r3, [r4, #0]
 801b0fc:	bfbc      	itt	lt
 801b0fe:	425b      	neglt	r3, r3
 801b100:	6023      	strlt	r3, [r4, #0]
 801b102:	2a00      	cmp	r2, #0
 801b104:	da04      	bge.n	801b110 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b106:	6823      	ldr	r3, [r4, #0]
 801b108:	4257      	negs	r7, r2
 801b10a:	4276      	negs	r6, r6
 801b10c:	425b      	negs	r3, r3
 801b10e:	6023      	str	r3, [r4, #0]
 801b110:	2d00      	cmp	r5, #0
 801b112:	4638      	mov	r0, r7
 801b114:	bfba      	itte	lt
 801b116:	426d      	neglt	r5, r5
 801b118:	f04f 38ff 	movlt.w	r8, #4294967295
 801b11c:	f04f 0801 	movge.w	r8, #1
 801b120:	f7ff ff64 	bl	801afec <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b124:	ab03      	add	r3, sp, #12
 801b126:	463a      	mov	r2, r7
 801b128:	e9cd 5300 	strd	r5, r3, [sp]
 801b12c:	4603      	mov	r3, r0
 801b12e:	4648      	mov	r0, r9
 801b130:	f7ff ff7a 	bl	801b028 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b134:	6823      	ldr	r3, [r4, #0]
 801b136:	9a03      	ldr	r2, [sp, #12]
 801b138:	4546      	cmp	r6, r8
 801b13a:	441a      	add	r2, r3
 801b13c:	fb92 f3f5 	sdiv	r3, r2, r5
 801b140:	4418      	add	r0, r3
 801b142:	fb05 2313 	mls	r3, r5, r3, r2
 801b146:	bf18      	it	ne
 801b148:	4240      	negne	r0, r0
 801b14a:	1c72      	adds	r2, r6, #1
 801b14c:	6023      	str	r3, [r4, #0]
 801b14e:	d105      	bne.n	801b15c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b150:	2b00      	cmp	r3, #0
 801b152:	f1c3 0200 	rsb	r2, r3, #0
 801b156:	db0b      	blt.n	801b170 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b158:	6022      	str	r2, [r4, #0]
 801b15a:	e006      	b.n	801b16a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b15c:	2e01      	cmp	r6, #1
 801b15e:	d104      	bne.n	801b16a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b160:	2b00      	cmp	r3, #0
 801b162:	da02      	bge.n	801b16a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b164:	442b      	add	r3, r5
 801b166:	3801      	subs	r0, #1
 801b168:	6023      	str	r3, [r4, #0]
 801b16a:	b005      	add	sp, #20
 801b16c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b170:	3801      	subs	r0, #1
 801b172:	1b52      	subs	r2, r2, r5
 801b174:	e7f0      	b.n	801b158 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b178 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b17c:	4c1c      	ldr	r4, [pc, #112]	; (801b1f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b17e:	4605      	mov	r5, r0
 801b180:	6807      	ldr	r7, [r0, #0]
 801b182:	69a3      	ldr	r3, [r4, #24]
 801b184:	b92b      	cbnz	r3, 801b192 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b186:	6840      	ldr	r0, [r0, #4]
 801b188:	e9c5 7000 	strd	r7, r0, [r5]
 801b18c:	b004      	add	sp, #16
 801b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b192:	f04f 0802 	mov.w	r8, #2
 801b196:	68a2      	ldr	r2, [r4, #8]
 801b198:	ae04      	add	r6, sp, #16
 801b19a:	6820      	ldr	r0, [r4, #0]
 801b19c:	fb93 f1f8 	sdiv	r1, r3, r8
 801b1a0:	440a      	add	r2, r1
 801b1a2:	69e1      	ldr	r1, [r4, #28]
 801b1a4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b1a8:	463a      	mov	r2, r7
 801b1aa:	9600      	str	r6, [sp, #0]
 801b1ac:	f7ff ff97 	bl	801b0de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b1b0:	69a3      	ldr	r3, [r4, #24]
 801b1b2:	4607      	mov	r7, r0
 801b1b4:	686a      	ldr	r2, [r5, #4]
 801b1b6:	6a21      	ldr	r1, [r4, #32]
 801b1b8:	9600      	str	r6, [sp, #0]
 801b1ba:	6860      	ldr	r0, [r4, #4]
 801b1bc:	f7ff ff8f 	bl	801b0de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b1c0:	69a3      	ldr	r3, [r4, #24]
 801b1c2:	6962      	ldr	r2, [r4, #20]
 801b1c4:	4407      	add	r7, r0
 801b1c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b1c8:	9600      	str	r6, [sp, #0]
 801b1ca:	68e0      	ldr	r0, [r4, #12]
 801b1cc:	fb93 f8f8 	sdiv	r8, r3, r8
 801b1d0:	4442      	add	r2, r8
 801b1d2:	9203      	str	r2, [sp, #12]
 801b1d4:	682a      	ldr	r2, [r5, #0]
 801b1d6:	f7ff ff82 	bl	801b0de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b1da:	4680      	mov	r8, r0
 801b1dc:	9600      	str	r6, [sp, #0]
 801b1de:	69a3      	ldr	r3, [r4, #24]
 801b1e0:	686a      	ldr	r2, [r5, #4]
 801b1e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b1e4:	6920      	ldr	r0, [r4, #16]
 801b1e6:	f7ff ff7a 	bl	801b0de <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b1ea:	4440      	add	r0, r8
 801b1ec:	e7cc      	b.n	801b188 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b1ee:	bf00      	nop
 801b1f0:	2400b8d0 	.word	0x2400b8d0

0801b1f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b1f4:	4b07      	ldr	r3, [pc, #28]	; (801b214 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d109      	bne.n	801b210 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b1fc:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b200:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b204:	8003      	strh	r3, [r0, #0]
 801b206:	4b04      	ldr	r3, [pc, #16]	; (801b218 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b208:	881b      	ldrh	r3, [r3, #0]
 801b20a:	3b01      	subs	r3, #1
 801b20c:	1a9b      	subs	r3, r3, r2
 801b20e:	800b      	strh	r3, [r1, #0]
 801b210:	4770      	bx	lr
 801b212:	bf00      	nop
 801b214:	2400b8bc 	.word	0x2400b8bc
 801b218:	2400b8c0 	.word	0x2400b8c0

0801b21c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b21c:	4b07      	ldr	r3, [pc, #28]	; (801b23c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b21e:	b510      	push	{r4, lr}
 801b220:	781b      	ldrb	r3, [r3, #0]
 801b222:	2b01      	cmp	r3, #1
 801b224:	d108      	bne.n	801b238 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b226:	4b06      	ldr	r3, [pc, #24]	; (801b240 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b228:	880c      	ldrh	r4, [r1, #0]
 801b22a:	881b      	ldrh	r3, [r3, #0]
 801b22c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b230:	3b01      	subs	r3, #1
 801b232:	1b1b      	subs	r3, r3, r4
 801b234:	8003      	strh	r3, [r0, #0]
 801b236:	800a      	strh	r2, [r1, #0]
 801b238:	bd10      	pop	{r4, pc}
 801b23a:	bf00      	nop
 801b23c:	2400b8bc 	.word	0x2400b8bc
 801b240:	2400b8c0 	.word	0x2400b8c0

0801b244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b244:	4b0a      	ldr	r3, [pc, #40]	; (801b270 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b246:	b510      	push	{r4, lr}
 801b248:	781b      	ldrb	r3, [r3, #0]
 801b24a:	2b01      	cmp	r3, #1
 801b24c:	d10e      	bne.n	801b26c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b24e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b252:	8843      	ldrh	r3, [r0, #2]
 801b254:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b258:	18ca      	adds	r2, r1, r3
 801b25a:	4b06      	ldr	r3, [pc, #24]	; (801b274 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b25c:	8044      	strh	r4, [r0, #2]
 801b25e:	881b      	ldrh	r3, [r3, #0]
 801b260:	1a9b      	subs	r3, r3, r2
 801b262:	8003      	strh	r3, [r0, #0]
 801b264:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b268:	8081      	strh	r1, [r0, #4]
 801b26a:	80c3      	strh	r3, [r0, #6]
 801b26c:	bd10      	pop	{r4, pc}
 801b26e:	bf00      	nop
 801b270:	2400b8bc 	.word	0x2400b8bc
 801b274:	2400b8c0 	.word	0x2400b8c0

0801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b278:	4b08      	ldr	r3, [pc, #32]	; (801b29c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d10c      	bne.n	801b29a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b280:	8803      	ldrh	r3, [r0, #0]
 801b282:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b286:	8842      	ldrh	r2, [r0, #2]
 801b288:	8002      	strh	r2, [r0, #0]
 801b28a:	185a      	adds	r2, r3, r1
 801b28c:	4b04      	ldr	r3, [pc, #16]	; (801b2a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b28e:	881b      	ldrh	r3, [r3, #0]
 801b290:	1a9b      	subs	r3, r3, r2
 801b292:	8043      	strh	r3, [r0, #2]
 801b294:	88c3      	ldrh	r3, [r0, #6]
 801b296:	80c1      	strh	r1, [r0, #6]
 801b298:	8083      	strh	r3, [r0, #4]
 801b29a:	4770      	bx	lr
 801b29c:	2400b8bc 	.word	0x2400b8bc
 801b2a0:	2400b8c0 	.word	0x2400b8c0

0801b2a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b2a4:	4b07      	ldr	r3, [pc, #28]	; (801b2c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b2a6:	b510      	push	{r4, lr}
 801b2a8:	781b      	ldrb	r3, [r3, #0]
 801b2aa:	2b01      	cmp	r3, #1
 801b2ac:	d108      	bne.n	801b2c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b2ae:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b2b2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2b6:	8003      	strh	r3, [r0, #0]
 801b2b8:	8893      	ldrh	r3, [r2, #4]
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	1b1b      	subs	r3, r3, r4
 801b2be:	800b      	strh	r3, [r1, #0]
 801b2c0:	bd10      	pop	{r4, pc}
 801b2c2:	bf00      	nop
 801b2c4:	2400b8bc 	.word	0x2400b8bc

0801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b2c8:	4b0a      	ldr	r3, [pc, #40]	; (801b2f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b2ca:	460a      	mov	r2, r1
 801b2cc:	b510      	push	{r4, lr}
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	2b01      	cmp	r3, #1
 801b2d2:	d10d      	bne.n	801b2f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b2d4:	8881      	ldrh	r1, [r0, #4]
 801b2d6:	8803      	ldrh	r3, [r0, #0]
 801b2d8:	440b      	add	r3, r1
 801b2da:	4601      	mov	r1, r0
 801b2dc:	3b01      	subs	r3, #1
 801b2de:	f821 3b02 	strh.w	r3, [r1], #2
 801b2e2:	f7ff ffdf 	bl	801b2a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b2e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b2ea:	88c2      	ldrh	r2, [r0, #6]
 801b2ec:	80c3      	strh	r3, [r0, #6]
 801b2ee:	8082      	strh	r2, [r0, #4]
 801b2f0:	bd10      	pop	{r4, pc}
 801b2f2:	bf00      	nop
 801b2f4:	2400b8bc 	.word	0x2400b8bc

0801b2f8 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b2f8:	4b06      	ldr	r3, [pc, #24]	; (801b314 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b2fa:	2100      	movs	r1, #0
 801b2fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b300:	4b05      	ldr	r3, [pc, #20]	; (801b318 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b302:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b306:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b30a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b30e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b312:	4770      	bx	lr
 801b314:	2400b8b8 	.word	0x2400b8b8
 801b318:	2400b8ba 	.word	0x2400b8ba

0801b31c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b31c:	4b03      	ldr	r3, [pc, #12]	; (801b32c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b31e:	6818      	ldr	r0, [r3, #0]
 801b320:	b110      	cbz	r0, 801b328 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b322:	6803      	ldr	r3, [r0, #0]
 801b324:	699b      	ldr	r3, [r3, #24]
 801b326:	4718      	bx	r3
 801b328:	4770      	bx	lr
 801b32a:	bf00      	nop
 801b32c:	2400b900 	.word	0x2400b900

0801b330 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b330:	4770      	bx	lr
	...

0801b334 <_ZN8touchgfx11Application4drawEv>:
 801b334:	4b09      	ldr	r3, [pc, #36]	; (801b35c <_ZN8touchgfx11Application4drawEv+0x28>)
 801b336:	b507      	push	{r0, r1, r2, lr}
 801b338:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b33c:	2100      	movs	r1, #0
 801b33e:	4b08      	ldr	r3, [pc, #32]	; (801b360 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b340:	9100      	str	r1, [sp, #0]
 801b342:	4669      	mov	r1, sp
 801b344:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b348:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b34c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b350:	6803      	ldr	r3, [r0, #0]
 801b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b354:	4798      	blx	r3
 801b356:	b003      	add	sp, #12
 801b358:	f85d fb04 	ldr.w	pc, [sp], #4
 801b35c:	2400b8b8 	.word	0x2400b8b8
 801b360:	2400b8ba 	.word	0x2400b8ba

0801b364 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b364:	4b03      	ldr	r3, [pc, #12]	; (801b374 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b366:	6818      	ldr	r0, [r3, #0]
 801b368:	b110      	cbz	r0, 801b370 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b36a:	6803      	ldr	r3, [r0, #0]
 801b36c:	69db      	ldr	r3, [r3, #28]
 801b36e:	4718      	bx	r3
 801b370:	4770      	bx	lr
 801b372:	bf00      	nop
 801b374:	2400b900 	.word	0x2400b900

0801b378 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b378:	4b03      	ldr	r3, [pc, #12]	; (801b388 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b37a:	6818      	ldr	r0, [r3, #0]
 801b37c:	b110      	cbz	r0, 801b384 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b37e:	6803      	ldr	r3, [r0, #0]
 801b380:	6a1b      	ldr	r3, [r3, #32]
 801b382:	4718      	bx	r3
 801b384:	4770      	bx	lr
 801b386:	bf00      	nop
 801b388:	2400b900 	.word	0x2400b900

0801b38c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b38c:	4b03      	ldr	r3, [pc, #12]	; (801b39c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b38e:	6818      	ldr	r0, [r3, #0]
 801b390:	b110      	cbz	r0, 801b398 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b392:	6803      	ldr	r3, [r0, #0]
 801b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b396:	4718      	bx	r3
 801b398:	4770      	bx	lr
 801b39a:	bf00      	nop
 801b39c:	2400b900 	.word	0x2400b900

0801b3a0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b3a0:	b570      	push	{r4, r5, r6, lr}
 801b3a2:	4d38      	ldr	r5, [pc, #224]	; (801b484 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b3a4:	4604      	mov	r4, r0
 801b3a6:	6828      	ldr	r0, [r5, #0]
 801b3a8:	b140      	cbz	r0, 801b3bc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b3aa:	7a03      	ldrb	r3, [r0, #8]
 801b3ac:	b933      	cbnz	r3, 801b3bc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b3ae:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b3b2:	6803      	ldr	r3, [r0, #0]
 801b3b4:	689b      	ldr	r3, [r3, #8]
 801b3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3ba:	4718      	bx	r3
 801b3bc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801b3c0:	b97b      	cbnz	r3, 801b3e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b3c2:	b170      	cbz	r0, 801b3e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b3c4:	7a03      	ldrb	r3, [r0, #8]
 801b3c6:	b163      	cbz	r3, 801b3e2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b3c8:	4b2f      	ldr	r3, [pc, #188]	; (801b488 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b3ca:	6818      	ldr	r0, [r3, #0]
 801b3cc:	b110      	cbz	r0, 801b3d4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b3ce:	6803      	ldr	r3, [r0, #0]
 801b3d0:	691b      	ldr	r3, [r3, #16]
 801b3d2:	4798      	blx	r3
 801b3d4:	6828      	ldr	r0, [r5, #0]
 801b3d6:	6803      	ldr	r3, [r0, #0]
 801b3d8:	68db      	ldr	r3, [r3, #12]
 801b3da:	4798      	blx	r3
 801b3dc:	2301      	movs	r3, #1
 801b3de:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b3e2:	2500      	movs	r5, #0
 801b3e4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b3e8:	42a8      	cmp	r0, r5
 801b3ea:	dd0c      	ble.n	801b406 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b3ec:	1963      	adds	r3, r4, r5
 801b3ee:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b3f2:	b132      	cbz	r2, 801b402 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b3f4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b3f8:	4413      	add	r3, r2
 801b3fa:	6858      	ldr	r0, [r3, #4]
 801b3fc:	6803      	ldr	r3, [r0, #0]
 801b3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b400:	4798      	blx	r3
 801b402:	3501      	adds	r5, #1
 801b404:	e7ee      	b.n	801b3e4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b406:	2300      	movs	r3, #0
 801b408:	461a      	mov	r2, r3
 801b40a:	4298      	cmp	r0, r3
 801b40c:	d10f      	bne.n	801b42e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801b40e:	1d25      	adds	r5, r4, #4
 801b410:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801b414:	4291      	cmp	r1, r2
 801b416:	dd2d      	ble.n	801b474 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801b418:	1e48      	subs	r0, r1, #1
 801b41a:	b280      	uxth	r0, r0
 801b41c:	4288      	cmp	r0, r1
 801b41e:	d31a      	bcc.n	801b456 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801b420:	4b1a      	ldr	r3, [pc, #104]	; (801b48c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801b422:	f240 11a9 	movw	r1, #425	; 0x1a9
 801b426:	4a1a      	ldr	r2, [pc, #104]	; (801b490 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801b428:	481a      	ldr	r0, [pc, #104]	; (801b494 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801b42a:	f00f fa53 	bl	802a8d4 <__assert_func>
 801b42e:	18e1      	adds	r1, r4, r3
 801b430:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b434:	b16d      	cbz	r5, 801b452 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801b436:	429a      	cmp	r2, r3
 801b438:	d00a      	beq.n	801b450 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801b43a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b43e:	4431      	add	r1, r6
 801b440:	684e      	ldr	r6, [r1, #4]
 801b442:	b291      	uxth	r1, r2
 801b444:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b448:	604e      	str	r6, [r1, #4]
 801b44a:	18a1      	adds	r1, r4, r2
 801b44c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b450:	3201      	adds	r2, #1
 801b452:	3301      	adds	r3, #1
 801b454:	e7d9      	b.n	801b40a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b456:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801b45a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801b45e:	3304      	adds	r3, #4
 801b460:	428b      	cmp	r3, r1
 801b462:	d004      	beq.n	801b46e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801b464:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801b468:	f843 6c04 	str.w	r6, [r3, #-4]
 801b46c:	e7f8      	b.n	801b460 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801b46e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801b472:	e7cd      	b.n	801b410 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801b474:	4b04      	ldr	r3, [pc, #16]	; (801b488 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b476:	6818      	ldr	r0, [r3, #0]
 801b478:	b110      	cbz	r0, 801b480 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801b47a:	6803      	ldr	r3, [r0, #0]
 801b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b47e:	e79a      	b.n	801b3b6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b480:	bd70      	pop	{r4, r5, r6, pc}
 801b482:	bf00      	nop
 801b484:	2400b904 	.word	0x2400b904
 801b488:	2400b900 	.word	0x2400b900
 801b48c:	0802ebe4 	.word	0x0802ebe4
 801b490:	0802ee3d 	.word	0x0802ee3d
 801b494:	0802ebf2 	.word	0x0802ebf2

0801b498 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b498:	b570      	push	{r4, r5, r6, lr}
 801b49a:	4606      	mov	r6, r0
 801b49c:	460c      	mov	r4, r1
 801b49e:	b929      	cbnz	r1, 801b4ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801b4a0:	4b0c      	ldr	r3, [pc, #48]	; (801b4d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801b4a2:	2167      	movs	r1, #103	; 0x67
 801b4a4:	4a0c      	ldr	r2, [pc, #48]	; (801b4d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801b4a6:	480d      	ldr	r0, [pc, #52]	; (801b4dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801b4a8:	f00f fa14 	bl	802a8d4 <__assert_func>
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	4d0c      	ldr	r5, [pc, #48]	; (801b4e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801b4b0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b4b4:	6828      	ldr	r0, [r5, #0]
 801b4b6:	b110      	cbz	r0, 801b4be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801b4b8:	6803      	ldr	r3, [r0, #0]
 801b4ba:	695b      	ldr	r3, [r3, #20]
 801b4bc:	4798      	blx	r3
 801b4be:	602c      	str	r4, [r5, #0]
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	6823      	ldr	r3, [r4, #0]
 801b4c4:	68db      	ldr	r3, [r3, #12]
 801b4c6:	4798      	blx	r3
 801b4c8:	6833      	ldr	r3, [r6, #0]
 801b4ca:	4630      	mov	r0, r6
 801b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4d2:	4718      	bx	r3
 801b4d4:	0802ebb0 	.word	0x0802ebb0
 801b4d8:	0802ecb8 	.word	0x0802ecb8
 801b4dc:	0802ebba 	.word	0x0802ebba
 801b4e0:	2400b900 	.word	0x2400b900

0801b4e4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b4e4:	b510      	push	{r4, lr}
 801b4e6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b4ea:	888a      	ldrh	r2, [r1, #4]
 801b4ec:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b4f0:	4422      	add	r2, r4
 801b4f2:	b212      	sxth	r2, r2
 801b4f4:	4293      	cmp	r3, r2
 801b4f6:	da15      	bge.n	801b524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b4f8:	8882      	ldrh	r2, [r0, #4]
 801b4fa:	4413      	add	r3, r2
 801b4fc:	b21b      	sxth	r3, r3
 801b4fe:	429c      	cmp	r4, r3
 801b500:	da10      	bge.n	801b524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b502:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b506:	88c9      	ldrh	r1, [r1, #6]
 801b508:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b50c:	4419      	add	r1, r3
 801b50e:	b209      	sxth	r1, r1
 801b510:	428a      	cmp	r2, r1
 801b512:	da07      	bge.n	801b524 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b514:	88c0      	ldrh	r0, [r0, #6]
 801b516:	4410      	add	r0, r2
 801b518:	b200      	sxth	r0, r0
 801b51a:	4283      	cmp	r3, r0
 801b51c:	bfac      	ite	ge
 801b51e:	2000      	movge	r0, #0
 801b520:	2001      	movlt	r0, #1
 801b522:	bd10      	pop	{r4, pc}
 801b524:	2000      	movs	r0, #0
 801b526:	e7fc      	b.n	801b522 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b528 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b528:	b570      	push	{r4, r5, r6, lr}
 801b52a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b52e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801b532:	42ac      	cmp	r4, r5
 801b534:	db18      	blt.n	801b568 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b536:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801b53a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b53e:	429a      	cmp	r2, r3
 801b540:	db12      	blt.n	801b568 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b542:	8886      	ldrh	r6, [r0, #4]
 801b544:	4435      	add	r5, r6
 801b546:	888e      	ldrh	r6, [r1, #4]
 801b548:	4434      	add	r4, r6
 801b54a:	b22d      	sxth	r5, r5
 801b54c:	b224      	sxth	r4, r4
 801b54e:	42a5      	cmp	r5, r4
 801b550:	db0a      	blt.n	801b568 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801b552:	88c0      	ldrh	r0, [r0, #6]
 801b554:	4418      	add	r0, r3
 801b556:	88cb      	ldrh	r3, [r1, #6]
 801b558:	441a      	add	r2, r3
 801b55a:	b200      	sxth	r0, r0
 801b55c:	b212      	sxth	r2, r2
 801b55e:	4290      	cmp	r0, r2
 801b560:	bfb4      	ite	lt
 801b562:	2000      	movlt	r0, #0
 801b564:	2001      	movge	r0, #1
 801b566:	bd70      	pop	{r4, r5, r6, pc}
 801b568:	2000      	movs	r0, #0
 801b56a:	e7fc      	b.n	801b566 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801b56c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b56e:	4604      	mov	r4, r0
 801b570:	4608      	mov	r0, r1
 801b572:	460d      	mov	r5, r1
 801b574:	f7fc fb11 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b578:	b978      	cbnz	r0, 801b59a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b57a:	4620      	mov	r0, r4
 801b57c:	f7fc fb0d 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b580:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b584:	b150      	cbz	r0, 801b59c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b586:	8026      	strh	r6, [r4, #0]
 801b588:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b58c:	8063      	strh	r3, [r4, #2]
 801b58e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b592:	80a3      	strh	r3, [r4, #4]
 801b594:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b598:	80e3      	strh	r3, [r4, #6]
 801b59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b59c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b5a0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b5a4:	42b1      	cmp	r1, r6
 801b5a6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b5aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b5ae:	460f      	mov	r7, r1
 801b5b0:	88ed      	ldrh	r5, [r5, #6]
 801b5b2:	bfa8      	it	ge
 801b5b4:	4637      	movge	r7, r6
 801b5b6:	4293      	cmp	r3, r2
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	4466      	add	r6, ip
 801b5bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b5c0:	bfa8      	it	ge
 801b5c2:	4610      	movge	r0, r2
 801b5c4:	442a      	add	r2, r5
 801b5c6:	88e5      	ldrh	r5, [r4, #6]
 801b5c8:	4461      	add	r1, ip
 801b5ca:	b236      	sxth	r6, r6
 801b5cc:	8027      	strh	r7, [r4, #0]
 801b5ce:	442b      	add	r3, r5
 801b5d0:	b209      	sxth	r1, r1
 801b5d2:	b212      	sxth	r2, r2
 801b5d4:	8060      	strh	r0, [r4, #2]
 801b5d6:	b21b      	sxth	r3, r3
 801b5d8:	428e      	cmp	r6, r1
 801b5da:	bfac      	ite	ge
 801b5dc:	ebc7 0106 	rsbge	r1, r7, r6
 801b5e0:	ebc7 0101 	rsblt	r1, r7, r1
 801b5e4:	429a      	cmp	r2, r3
 801b5e6:	bfac      	ite	ge
 801b5e8:	ebc0 0202 	rsbge	r2, r0, r2
 801b5ec:	ebc0 0203 	rsblt	r2, r0, r3
 801b5f0:	80a1      	strh	r1, [r4, #4]
 801b5f2:	80e2      	strh	r2, [r4, #6]
 801b5f4:	e7d1      	b.n	801b59a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b5f8 <_ZN8touchgfx11Application11getInstanceEv>:
 801b5f8:	4b01      	ldr	r3, [pc, #4]	; (801b600 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b5fa:	6818      	ldr	r0, [r3, #0]
 801b5fc:	4770      	bx	lr
 801b5fe:	bf00      	nop
 801b600:	2400b910 	.word	0x2400b910

0801b604 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801b604:	b570      	push	{r4, r5, r6, lr}
 801b606:	2200      	movs	r2, #0
 801b608:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801b60c:	1d04      	adds	r4, r0, #4
 801b60e:	b295      	uxth	r5, r2
 801b610:	42ab      	cmp	r3, r5
 801b612:	d90e      	bls.n	801b632 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801b614:	f854 6b04 	ldr.w	r6, [r4], #4
 801b618:	4615      	mov	r5, r2
 801b61a:	3201      	adds	r2, #1
 801b61c:	428e      	cmp	r6, r1
 801b61e:	d1f6      	bne.n	801b60e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801b620:	4428      	add	r0, r5
 801b622:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b626:	2bff      	cmp	r3, #255	; 0xff
 801b628:	d002      	beq.n	801b630 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b62a:	3301      	adds	r3, #1
 801b62c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801b630:	bd70      	pop	{r4, r5, r6, pc}
 801b632:	2b20      	cmp	r3, #32
 801b634:	d106      	bne.n	801b644 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801b636:	4b09      	ldr	r3, [pc, #36]	; (801b65c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801b638:	f240 215f 	movw	r1, #607	; 0x25f
 801b63c:	4a08      	ldr	r2, [pc, #32]	; (801b660 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801b63e:	4809      	ldr	r0, [pc, #36]	; (801b664 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801b640:	f00f f948 	bl	802a8d4 <__assert_func>
 801b644:	18c2      	adds	r2, r0, r3
 801b646:	2401      	movs	r4, #1
 801b648:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801b64c:	191a      	adds	r2, r3, r4
 801b64e:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801b652:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801b656:	6041      	str	r1, [r0, #4]
 801b658:	e7ea      	b.n	801b630 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801b65a:	bf00      	nop
 801b65c:	0802ec1b 	.word	0x0802ec1b
 801b660:	0802ecfc 	.word	0x0802ecfc
 801b664:	0802ebba 	.word	0x0802ebba

0801b668 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801b668:	b570      	push	{r4, r5, r6, lr}
 801b66a:	2300      	movs	r3, #0
 801b66c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801b670:	1d04      	adds	r4, r0, #4
 801b672:	b29a      	uxth	r2, r3
 801b674:	4296      	cmp	r6, r2
 801b676:	d90a      	bls.n	801b68e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801b678:	f854 2b04 	ldr.w	r2, [r4], #4
 801b67c:	428a      	cmp	r2, r1
 801b67e:	d107      	bne.n	801b690 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b680:	18c5      	adds	r5, r0, r3
 801b682:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801b686:	b11a      	cbz	r2, 801b690 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801b688:	3a01      	subs	r2, #1
 801b68a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801b68e:	bd70      	pop	{r4, r5, r6, pc}
 801b690:	3301      	adds	r3, #1
 801b692:	e7ee      	b.n	801b672 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801b694 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b694:	2300      	movs	r3, #0
 801b696:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b69a:	30a8      	adds	r0, #168	; 0xa8
 801b69c:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b6a0:	f802 3b01 	strb.w	r3, [r2], #1
 801b6a4:	4282      	cmp	r2, r0
 801b6a6:	d1fb      	bne.n	801b6a0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b6a8:	4770      	bx	lr

0801b6aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b6b0:	2200      	movs	r2, #0
 801b6b2:	801a      	strh	r2, [r3, #0]
 801b6b4:	3308      	adds	r3, #8
 801b6b6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b6ba:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b6be:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b6c2:	428b      	cmp	r3, r1
 801b6c4:	d1f5      	bne.n	801b6b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b6c6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b6ca:	4770      	bx	lr

0801b6cc <_ZN8touchgfx11ApplicationC1Ev>:
 801b6cc:	b570      	push	{r4, r5, r6, lr}
 801b6ce:	4b1a      	ldr	r3, [pc, #104]	; (801b738 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b6d0:	2500      	movs	r5, #0
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	30a8      	adds	r0, #168	; 0xa8
 801b6d6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b6da:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b6de:	f7ff ffe4 	bl	801b6aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b6e2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b6e6:	f7ff ffe0 	bl	801b6aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b6ea:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b6ee:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b6f2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b6f6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b6fa:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b6fe:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801b702:	490e      	ldr	r1, [pc, #56]	; (801b73c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b704:	480e      	ldr	r0, [pc, #56]	; (801b740 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b706:	f00e ffa9 	bl	802a65c <CRC_Lock>
 801b70a:	4e0e      	ldr	r6, [pc, #56]	; (801b744 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b70c:	4b0e      	ldr	r3, [pc, #56]	; (801b748 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b70e:	b158      	cbz	r0, 801b728 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801b710:	801d      	strh	r5, [r3, #0]
 801b712:	2300      	movs	r3, #0
 801b714:	4a0d      	ldr	r2, [pc, #52]	; (801b74c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b716:	4620      	mov	r0, r4
 801b718:	6013      	str	r3, [r2, #0]
 801b71a:	4a0d      	ldr	r2, [pc, #52]	; (801b750 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801b71c:	6033      	str	r3, [r6, #0]
 801b71e:	6013      	str	r3, [r2, #0]
 801b720:	f7ff ffb8 	bl	801b694 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b724:	4620      	mov	r0, r4
 801b726:	bd70      	pop	{r4, r5, r6, pc}
 801b728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b72c:	2002      	movs	r0, #2
 801b72e:	801a      	strh	r2, [r3, #0]
 801b730:	6030      	str	r0, [r6, #0]
 801b732:	f001 fa81 	bl	801cc38 <_ZN8touchgfx6Screen4drawEv>
 801b736:	e7ec      	b.n	801b712 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801b738:	0802ec7c 	.word	0x0802ec7c
 801b73c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b740:	f407a5c2 	.word	0xf407a5c2
 801b744:	2400b900 	.word	0x2400b900
 801b748:	24000056 	.word	0x24000056
 801b74c:	2400b910 	.word	0x2400b910
 801b750:	2400b904 	.word	0x2400b904

0801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b754:	b510      	push	{r4, lr}
 801b756:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b75a:	428b      	cmp	r3, r1
 801b75c:	d806      	bhi.n	801b76c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801b75e:	4b0b      	ldr	r3, [pc, #44]	; (801b78c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801b760:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801b764:	4a0a      	ldr	r2, [pc, #40]	; (801b790 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801b766:	480b      	ldr	r0, [pc, #44]	; (801b794 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801b768:	f00f f8b4 	bl	802a8d4 <__assert_func>
 801b76c:	3b01      	subs	r3, #1
 801b76e:	b29b      	uxth	r3, r3
 801b770:	428b      	cmp	r3, r1
 801b772:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b776:	d908      	bls.n	801b78a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801b778:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b77c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b780:	681a      	ldr	r2, [r3, #0]
 801b782:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b786:	685a      	ldr	r2, [r3, #4]
 801b788:	6062      	str	r2, [r4, #4]
 801b78a:	bd10      	pop	{r4, pc}
 801b78c:	0802ebe4 	.word	0x0802ebe4
 801b790:	0802ed41 	.word	0x0802ed41
 801b794:	0802ebf2 	.word	0x0802ebf2

0801b798 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801b798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b79a:	466b      	mov	r3, sp
 801b79c:	4604      	mov	r4, r0
 801b79e:	e883 0006 	stmia.w	r3, {r1, r2}
 801b7a2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801b7a6:	2a07      	cmp	r2, #7
 801b7a8:	d906      	bls.n	801b7b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801b7aa:	4b09      	ldr	r3, [pc, #36]	; (801b7d0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801b7ac:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801b7b0:	4a08      	ldr	r2, [pc, #32]	; (801b7d4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801b7b2:	4809      	ldr	r0, [pc, #36]	; (801b7d8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801b7b4:	f00f f88e 	bl	802a8d4 <__assert_func>
 801b7b8:	1c51      	adds	r1, r2, #1
 801b7ba:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801b7be:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b7c2:	cb03      	ldmia	r3!, {r0, r1}
 801b7c4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801b7c8:	6069      	str	r1, [r5, #4]
 801b7ca:	b003      	add	sp, #12
 801b7cc:	bd30      	pop	{r4, r5, pc}
 801b7ce:	bf00      	nop
 801b7d0:	0802ec43 	.word	0x0802ec43
 801b7d4:	0802edd7 	.word	0x0802edd7
 801b7d8:	0802ebf2 	.word	0x0802ebf2

0801b7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7e0:	b08d      	sub	sp, #52	; 0x34
 801b7e2:	4683      	mov	fp, r0
 801b7e4:	ac08      	add	r4, sp, #32
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	e884 0006 	stmia.w	r4, {r1, r2}
 801b7ec:	f7fc f9d5 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7f0:	2800      	cmp	r0, #0
 801b7f2:	d16a      	bne.n	801b8ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b7f4:	9402      	str	r4, [sp, #8]
 801b7f6:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b7fa:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b7fe:	2400      	movs	r4, #0
 801b800:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b804:	9301      	str	r3, [sp, #4]
 801b806:	36a0      	adds	r6, #160	; 0xa0
 801b808:	42a5      	cmp	r5, r4
 801b80a:	d00d      	beq.n	801b828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801b80c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b810:	9802      	ldr	r0, [sp, #8]
 801b812:	f7ff fe89 	bl	801b528 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b816:	b128      	cbz	r0, 801b824 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801b818:	1e69      	subs	r1, r5, #1
 801b81a:	9801      	ldr	r0, [sp, #4]
 801b81c:	1b09      	subs	r1, r1, r4
 801b81e:	b289      	uxth	r1, r1
 801b820:	f7ff ff98 	bl	801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b824:	3401      	adds	r4, #1
 801b826:	e7ef      	b.n	801b808 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b828:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b82c:	1e7b      	subs	r3, r7, #1
 801b82e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b832:	9703      	str	r7, [sp, #12]
 801b834:	9300      	str	r3, [sp, #0]
 801b836:	2400      	movs	r4, #0
 801b838:	4655      	mov	r5, sl
 801b83a:	9704      	str	r7, [sp, #16]
 801b83c:	4626      	mov	r6, r4
 801b83e:	9b04      	ldr	r3, [sp, #16]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d078      	beq.n	801b936 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801b844:	9902      	ldr	r1, [sp, #8]
 801b846:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b84a:	f7ff fe4b 	bl	801b4e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b84e:	b360      	cbz	r0, 801b8aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b850:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b854:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b858:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801b85c:	45e6      	cmp	lr, ip
 801b85e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b862:	db35      	blt.n	801b8d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b864:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b868:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b86c:	4472      	add	r2, lr
 801b86e:	4463      	add	r3, ip
 801b870:	b212      	sxth	r2, r2
 801b872:	b21b      	sxth	r3, r3
 801b874:	429a      	cmp	r2, r3
 801b876:	dc2b      	bgt.n	801b8d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801b878:	fa1f f288 	uxth.w	r2, r8
 801b87c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b880:	45c1      	cmp	r9, r8
 801b882:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b886:	4413      	add	r3, r2
 801b888:	fa1f fc89 	uxth.w	ip, r9
 801b88c:	b29b      	uxth	r3, r3
 801b88e:	fa0f fe83 	sxth.w	lr, r3
 801b892:	db0f      	blt.n	801b8b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801b894:	eba3 030c 	sub.w	r3, r3, ip
 801b898:	1ac9      	subs	r1, r1, r3
 801b89a:	b209      	sxth	r1, r1
 801b89c:	2900      	cmp	r1, #0
 801b89e:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b8a2:	dd12      	ble.n	801b8ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b8a4:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801b8a8:	4604      	mov	r4, r0
 801b8aa:	9b04      	ldr	r3, [sp, #16]
 801b8ac:	3d08      	subs	r5, #8
 801b8ae:	3b01      	subs	r3, #1
 801b8b0:	9304      	str	r3, [sp, #16]
 801b8b2:	e7c4      	b.n	801b83e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801b8b4:	4461      	add	r1, ip
 801b8b6:	b209      	sxth	r1, r1
 801b8b8:	4571      	cmp	r1, lr
 801b8ba:	dc3a      	bgt.n	801b932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b8bc:	eba2 020c 	sub.w	r2, r2, ip
 801b8c0:	b212      	sxth	r2, r2
 801b8c2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b8c6:	2a00      	cmp	r2, #0
 801b8c8:	dcee      	bgt.n	801b8a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b8ca:	b00d      	add	sp, #52	; 0x34
 801b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d0:	45c1      	cmp	r9, r8
 801b8d2:	db2e      	blt.n	801b932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b8d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801b8d8:	4499      	add	r9, r3
 801b8da:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b8de:	4498      	add	r8, r3
 801b8e0:	fa0f f989 	sxth.w	r9, r9
 801b8e4:	fa0f f888 	sxth.w	r8, r8
 801b8e8:	45c1      	cmp	r9, r8
 801b8ea:	dc22      	bgt.n	801b932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b8ec:	fa1f f28c 	uxth.w	r2, ip
 801b8f0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b8f4:	45e6      	cmp	lr, ip
 801b8f6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b8fa:	4413      	add	r3, r2
 801b8fc:	fa1f f88e 	uxth.w	r8, lr
 801b900:	b29b      	uxth	r3, r3
 801b902:	fa0f f983 	sxth.w	r9, r3
 801b906:	db0a      	blt.n	801b91e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801b908:	eba3 0308 	sub.w	r3, r3, r8
 801b90c:	1ac9      	subs	r1, r1, r3
 801b90e:	b209      	sxth	r1, r1
 801b910:	2900      	cmp	r1, #0
 801b912:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b916:	ddd8      	ble.n	801b8ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b918:	f8ad 9020 	strh.w	r9, [sp, #32]
 801b91c:	e7c4      	b.n	801b8a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b91e:	4441      	add	r1, r8
 801b920:	b209      	sxth	r1, r1
 801b922:	4549      	cmp	r1, r9
 801b924:	dc05      	bgt.n	801b932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b926:	eba2 0208 	sub.w	r2, r2, r8
 801b92a:	b212      	sxth	r2, r2
 801b92c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b930:	e7c9      	b.n	801b8c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b932:	4606      	mov	r6, r0
 801b934:	e7b9      	b.n	801b8aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b936:	2c00      	cmp	r4, #0
 801b938:	f47f af7d 	bne.w	801b836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b93c:	2e00      	cmp	r6, #0
 801b93e:	f000 81dc 	beq.w	801bcfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b942:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801b946:	4655      	mov	r5, sl
 801b948:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801b94c:	b2b9      	uxth	r1, r7
 801b94e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b952:	b2b3      	uxth	r3, r6
 801b954:	9104      	str	r1, [sp, #16]
 801b956:	9804      	ldr	r0, [sp, #16]
 801b958:	441a      	add	r2, r3
 801b95a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b95e:	b292      	uxth	r2, r2
 801b960:	4401      	add	r1, r0
 801b962:	fa0f f882 	sxth.w	r8, r2
 801b966:	b289      	uxth	r1, r1
 801b968:	9105      	str	r1, [sp, #20]
 801b96a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801b96e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b972:	9b03      	ldr	r3, [sp, #12]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d054      	beq.n	801ba22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b978:	9902      	ldr	r1, [sp, #8]
 801b97a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b97e:	f7ff fdb1 	bl	801b4e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b986:	b1d8      	cbz	r0, 801b9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b988:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b98c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b990:	4576      	cmp	r6, lr
 801b992:	dc26      	bgt.n	801b9e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b994:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b998:	44f4      	add	ip, lr
 801b99a:	fa0f fc8c 	sxth.w	ip, ip
 801b99e:	45e0      	cmp	r8, ip
 801b9a0:	db1f      	blt.n	801b9e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b9a2:	428f      	cmp	r7, r1
 801b9a4:	fa1f fc81 	uxth.w	ip, r1
 801b9a8:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b9ac:	dc0f      	bgt.n	801b9ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801b9ae:	9805      	ldr	r0, [sp, #20]
 801b9b0:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b9b4:	eba0 0c0c 	sub.w	ip, r0, ip
 801b9b8:	eba1 010c 	sub.w	r1, r1, ip
 801b9bc:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	9903      	ldr	r1, [sp, #12]
 801b9c4:	3d08      	subs	r5, #8
 801b9c6:	4604      	mov	r4, r0
 801b9c8:	3901      	subs	r1, #1
 801b9ca:	9103      	str	r1, [sp, #12]
 801b9cc:	e7cf      	b.n	801b96e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801b9ce:	4461      	add	r1, ip
 801b9d0:	b209      	sxth	r1, r1
 801b9d2:	4549      	cmp	r1, r9
 801b9d4:	dcf5      	bgt.n	801b9c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b9d6:	9904      	ldr	r1, [sp, #16]
 801b9d8:	eba1 0c0c 	sub.w	ip, r1, ip
 801b9dc:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b9e0:	e7ee      	b.n	801b9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b9e2:	428f      	cmp	r7, r1
 801b9e4:	dced      	bgt.n	801b9c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b9e6:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b9ea:	4461      	add	r1, ip
 801b9ec:	b209      	sxth	r1, r1
 801b9ee:	4589      	cmp	r9, r1
 801b9f0:	dbe7      	blt.n	801b9c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b9f2:	4576      	cmp	r6, lr
 801b9f4:	fa1f fc8e 	uxth.w	ip, lr
 801b9f8:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b9fc:	dc08      	bgt.n	801ba10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801b9fe:	eba2 0c0c 	sub.w	ip, r2, ip
 801ba02:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801ba06:	eba1 010c 	sub.w	r1, r1, ip
 801ba0a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801ba0e:	e7d7      	b.n	801b9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ba10:	4461      	add	r1, ip
 801ba12:	b209      	sxth	r1, r1
 801ba14:	4588      	cmp	r8, r1
 801ba16:	dbd4      	blt.n	801b9c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ba18:	eba3 0c0c 	sub.w	ip, r3, ip
 801ba1c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801ba20:	e7ce      	b.n	801b9c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ba22:	2c00      	cmp	r4, #0
 801ba24:	f000 8169 	beq.w	801bcfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ba28:	9b00      	ldr	r3, [sp, #0]
 801ba2a:	3301      	adds	r3, #1
 801ba2c:	f000 8165 	beq.w	801bcfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ba30:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801ba34:	9802      	ldr	r0, [sp, #8]
 801ba36:	4621      	mov	r1, r4
 801ba38:	f7ff fd76 	bl	801b528 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ba3c:	b120      	cbz	r0, 801ba48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ba3e:	f8bd 1000 	ldrh.w	r1, [sp]
 801ba42:	9801      	ldr	r0, [sp, #4]
 801ba44:	f7ff fe86 	bl	801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba48:	9902      	ldr	r1, [sp, #8]
 801ba4a:	4620      	mov	r0, r4
 801ba4c:	f7ff fd4a 	bl	801b4e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ba50:	2800      	cmp	r0, #0
 801ba52:	f000 809b 	beq.w	801bb8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801ba56:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ba5a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801ba5e:	fa1f f288 	uxth.w	r2, r8
 801ba62:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801ba66:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801ba6a:	19d5      	adds	r5, r2, r7
 801ba6c:	b2a1      	uxth	r1, r4
 801ba6e:	45a0      	cmp	r8, r4
 801ba70:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ba74:	fa1f f985 	uxth.w	r9, r5
 801ba78:	440b      	add	r3, r1
 801ba7a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801ba7e:	fa0f f589 	sxth.w	r5, r9
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	9503      	str	r5, [sp, #12]
 801ba86:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ba8a:	9507      	str	r5, [sp, #28]
 801ba8c:	f340 809d 	ble.w	801bbca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ba90:	1a52      	subs	r2, r2, r1
 801ba92:	4584      	cmp	ip, r0
 801ba94:	fa0f fe83 	sxth.w	lr, r3
 801ba98:	b292      	uxth	r2, r2
 801ba9a:	b215      	sxth	r5, r2
 801ba9c:	dd2f      	ble.n	801bafe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ba9e:	9e00      	ldr	r6, [sp, #0]
 801baa0:	fa1f fc8c 	uxth.w	ip, ip
 801baa4:	b280      	uxth	r0, r0
 801baa6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801baaa:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801baae:	9e03      	ldr	r6, [sp, #12]
 801bab0:	ebac 0300 	sub.w	r3, ip, r0
 801bab4:	448c      	add	ip, r1
 801bab6:	eba6 060e 	sub.w	r6, r6, lr
 801baba:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801babe:	b29b      	uxth	r3, r3
 801bac0:	4470      	add	r0, lr
 801bac2:	fa0f fc8c 	sxth.w	ip, ip
 801bac6:	b21c      	sxth	r4, r3
 801bac8:	b200      	sxth	r0, r0
 801baca:	4366      	muls	r6, r4
 801bacc:	ebac 0000 	sub.w	r0, ip, r0
 801bad0:	4368      	muls	r0, r5
 801bad2:	4286      	cmp	r6, r0
 801bad4:	db09      	blt.n	801baea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801bad6:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801bada:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801bade:	4417      	add	r7, r2
 801bae0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bae4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801bae8:	e685      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801baea:	440b      	add	r3, r1
 801baec:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801baf0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801baf4:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801baf8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bafc:	e67b      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bafe:	9e03      	ldr	r6, [sp, #12]
 801bb00:	45b6      	cmp	lr, r6
 801bb02:	da28      	bge.n	801bb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801bb04:	9b00      	ldr	r3, [sp, #0]
 801bb06:	eba6 060e 	sub.w	r6, r6, lr
 801bb0a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801bb0e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801bb12:	eb04 030c 	add.w	r3, r4, ip
 801bb16:	fa1f f883 	uxth.w	r8, r3
 801bb1a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801bb1e:	4403      	add	r3, r0
 801bb20:	fa0f f988 	sxth.w	r9, r8
 801bb24:	eba0 000c 	sub.w	r0, r0, ip
 801bb28:	eba3 0308 	sub.w	r3, r3, r8
 801bb2c:	4368      	muls	r0, r5
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	fa0f f883 	sxth.w	r8, r3
 801bb34:	fb08 f606 	mul.w	r6, r8, r6
 801bb38:	42b0      	cmp	r0, r6
 801bb3a:	dc06      	bgt.n	801bb4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801bb3c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801bb40:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801bb44:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801bb48:	e7c9      	b.n	801bade <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801bb4a:	4423      	add	r3, r4
 801bb4c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801bb50:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801bb54:	e64f      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bb56:	eba3 0309 	sub.w	r3, r3, r9
 801bb5a:	9807      	ldr	r0, [sp, #28]
 801bb5c:	b29b      	uxth	r3, r3
 801bb5e:	2806      	cmp	r0, #6
 801bb60:	fa0f fc83 	sxth.w	ip, r3
 801bb64:	d818      	bhi.n	801bb98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801bb66:	4652      	mov	r2, sl
 801bb68:	ab0a      	add	r3, sp, #40	; 0x28
 801bb6a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801bb6e:	6851      	ldr	r1, [r2, #4]
 801bb70:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801bb74:	c303      	stmia	r3!, {r0, r1}
 801bb76:	9b03      	ldr	r3, [sp, #12]
 801bb78:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801bb7c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801bb80:	ab0a      	add	r3, sp, #40	; 0x28
 801bb82:	9801      	ldr	r0, [sp, #4]
 801bb84:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bb88:	f7ff fe06 	bl	801b798 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bb8c:	9b00      	ldr	r3, [sp, #0]
 801bb8e:	f1aa 0a08 	sub.w	sl, sl, #8
 801bb92:	3b01      	subs	r3, #1
 801bb94:	9300      	str	r3, [sp, #0]
 801bb96:	e747      	b.n	801ba28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801bb98:	9800      	ldr	r0, [sp, #0]
 801bb9a:	45ac      	cmp	ip, r5
 801bb9c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bba0:	db0c      	blt.n	801bbbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801bba2:	4417      	add	r7, r2
 801bba4:	4458      	add	r0, fp
 801bba6:	f8ad 4020 	strh.w	r4, [sp, #32]
 801bbaa:	b2bf      	uxth	r7, r7
 801bbac:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801bbb0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801bbb4:	440f      	add	r7, r1
 801bbb6:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801bbba:	e61c      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bbbc:	4458      	add	r0, fp
 801bbbe:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801bbc2:	443b      	add	r3, r7
 801bbc4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801bbc8:	e615      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bbca:	fa1f f18c 	uxth.w	r1, ip
 801bbce:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801bbd2:	b282      	uxth	r2, r0
 801bbd4:	4584      	cmp	ip, r0
 801bbd6:	eb01 0e05 	add.w	lr, r1, r5
 801bbda:	9204      	str	r2, [sp, #16]
 801bbdc:	fa1f fe8e 	uxth.w	lr, lr
 801bbe0:	9e04      	ldr	r6, [sp, #16]
 801bbe2:	fa0f f28e 	sxth.w	r2, lr
 801bbe6:	9205      	str	r2, [sp, #20]
 801bbe8:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801bbec:	4432      	add	r2, r6
 801bbee:	b292      	uxth	r2, r2
 801bbf0:	9206      	str	r2, [sp, #24]
 801bbf2:	da26      	bge.n	801bc42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801bbf4:	eba3 0309 	sub.w	r3, r3, r9
 801bbf8:	eba2 020e 	sub.w	r2, r2, lr
 801bbfc:	eba0 000c 	sub.w	r0, r0, ip
 801bc00:	eba4 0408 	sub.w	r4, r4, r8
 801bc04:	b29b      	uxth	r3, r3
 801bc06:	b292      	uxth	r2, r2
 801bc08:	fa0f fa83 	sxth.w	sl, r3
 801bc0c:	b211      	sxth	r1, r2
 801bc0e:	fb0a f000 	mul.w	r0, sl, r0
 801bc12:	434c      	muls	r4, r1
 801bc14:	42a0      	cmp	r0, r4
 801bc16:	9800      	ldr	r0, [sp, #0]
 801bc18:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801bc1c:	dc06      	bgt.n	801bc2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801bc1e:	4458      	add	r0, fp
 801bc20:	9a05      	ldr	r2, [sp, #20]
 801bc22:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801bc26:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801bc2a:	e7ca      	b.n	801bbc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bc2c:	eb0b 0300 	add.w	r3, fp, r0
 801bc30:	9903      	ldr	r1, [sp, #12]
 801bc32:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801bc36:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801bc3a:	442a      	add	r2, r5
 801bc3c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801bc40:	e5d9      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bc42:	9e04      	ldr	r6, [sp, #16]
 801bc44:	9a03      	ldr	r2, [sp, #12]
 801bc46:	1b89      	subs	r1, r1, r6
 801bc48:	b21e      	sxth	r6, r3
 801bc4a:	b289      	uxth	r1, r1
 801bc4c:	4296      	cmp	r6, r2
 801bc4e:	fa0f fc81 	sxth.w	ip, r1
 801bc52:	dd25      	ble.n	801bca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801bc54:	eba3 0309 	sub.w	r3, r3, r9
 801bc58:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801bc5c:	9e05      	ldr	r6, [sp, #20]
 801bc5e:	eba4 0408 	sub.w	r4, r4, r8
 801bc62:	b29b      	uxth	r3, r3
 801bc64:	eba6 0902 	sub.w	r9, r6, r2
 801bc68:	fb0c f404 	mul.w	r4, ip, r4
 801bc6c:	b218      	sxth	r0, r3
 801bc6e:	9a00      	ldr	r2, [sp, #0]
 801bc70:	fb00 f909 	mul.w	r9, r0, r9
 801bc74:	00d2      	lsls	r2, r2, #3
 801bc76:	454c      	cmp	r4, r9
 801bc78:	db03      	blt.n	801bc82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801bc7a:	445a      	add	r2, fp
 801bc7c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801bc80:	e79f      	b.n	801bbc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801bc82:	eb0b 0302 	add.w	r3, fp, r2
 801bc86:	9a03      	ldr	r2, [sp, #12]
 801bc88:	4429      	add	r1, r5
 801bc8a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801bc8e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801bc92:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801bc96:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801bc9a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bc9e:	e5aa      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bca0:	9b06      	ldr	r3, [sp, #24]
 801bca2:	9c07      	ldr	r4, [sp, #28]
 801bca4:	eba3 020e 	sub.w	r2, r3, lr
 801bca8:	2c06      	cmp	r4, #6
 801bcaa:	b292      	uxth	r2, r2
 801bcac:	b213      	sxth	r3, r2
 801bcae:	d80d      	bhi.n	801bccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801bcb0:	4651      	mov	r1, sl
 801bcb2:	aa0a      	add	r2, sp, #40	; 0x28
 801bcb4:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801bcb8:	6849      	ldr	r1, [r1, #4]
 801bcba:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801bcbe:	9b05      	ldr	r3, [sp, #20]
 801bcc0:	c203      	stmia	r2!, {r0, r1}
 801bcc2:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801bcc6:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801bcca:	e759      	b.n	801bb80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801bccc:	9c00      	ldr	r4, [sp, #0]
 801bcce:	4563      	cmp	r3, ip
 801bcd0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801bcd4:	db0d      	blt.n	801bcf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801bcd6:	4429      	add	r1, r5
 801bcd8:	9a04      	ldr	r2, [sp, #16]
 801bcda:	445c      	add	r4, fp
 801bcdc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bce0:	b289      	uxth	r1, r1
 801bce2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801bce6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801bcea:	4411      	add	r1, r2
 801bcec:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801bcf0:	e581      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bcf2:	445c      	add	r4, fp
 801bcf4:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801bcf8:	e79f      	b.n	801bc3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801bcfa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801bcfe:	2f07      	cmp	r7, #7
 801bd00:	d806      	bhi.n	801bd10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801bd02:	ab08      	add	r3, sp, #32
 801bd04:	9801      	ldr	r0, [sp, #4]
 801bd06:	e893 0006 	ldmia.w	r3, {r1, r2}
 801bd0a:	f7ff fd45 	bl	801b798 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bd0e:	e5dc      	b.n	801b8ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bd10:	f107 39ff 	add.w	r9, r7, #4294967295
 801bd14:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801bd18:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801bd1c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801bd20:	f04f 35ff 	mov.w	r5, #4294967295
 801bd24:	2400      	movs	r4, #0
 801bd26:	9304      	str	r3, [sp, #16]
 801bd28:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801bd2c:	f109 32ff 	add.w	r2, r9, #4294967295
 801bd30:	9300      	str	r3, [sp, #0]
 801bd32:	4690      	mov	r8, r2
 801bd34:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801bd38:	9303      	str	r3, [sp, #12]
 801bd3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bd3e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801bd42:	6818      	ldr	r0, [r3, #0]
 801bd44:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801bd48:	9206      	str	r2, [sp, #24]
 801bd4a:	bf16      	itet	ne
 801bd4c:	9904      	ldrne	r1, [sp, #16]
 801bd4e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801bd52:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801bd56:	9305      	str	r3, [sp, #20]
 801bd58:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801bd5c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801bd60:	fb16 f601 	smulbb	r6, r6, r1
 801bd64:	6859      	ldr	r1, [r3, #4]
 801bd66:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bd6a:	4671      	mov	r1, lr
 801bd6c:	a80a      	add	r0, sp, #40	; 0x28
 801bd6e:	f7ff fbfd 	bl	801b56c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bd72:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801bd76:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bd7a:	9b03      	ldr	r3, [sp, #12]
 801bd7c:	9a00      	ldr	r2, [sp, #0]
 801bd7e:	fb11 f100 	smulbb	r1, r1, r0
 801bd82:	2008      	movs	r0, #8
 801bd84:	fb02 6603 	mla	r6, r2, r3, r6
 801bd88:	1b8e      	subs	r6, r1, r6
 801bd8a:	fb91 f1f0 	sdiv	r1, r1, r0
 801bd8e:	42b1      	cmp	r1, r6
 801bd90:	dc21      	bgt.n	801bdd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801bd92:	4556      	cmp	r6, sl
 801bd94:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801bd98:	da03      	bge.n	801bda2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801bd9a:	b1e6      	cbz	r6, 801bdd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801bd9c:	46b2      	mov	sl, r6
 801bd9e:	4645      	mov	r5, r8
 801bda0:	464c      	mov	r4, r9
 801bda2:	f108 38ff 	add.w	r8, r8, #4294967295
 801bda6:	f118 0f02 	cmn.w	r8, #2
 801bdaa:	d1c8      	bne.n	801bd3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801bdac:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bdb0:	f1a7 0708 	sub.w	r7, r7, #8
 801bdb4:	4691      	mov	r9, r2
 801bdb6:	d1b7      	bne.n	801bd28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801bdb8:	9b01      	ldr	r3, [sp, #4]
 801bdba:	b2a6      	uxth	r6, r4
 801bdbc:	00e4      	lsls	r4, r4, #3
 801bdbe:	1918      	adds	r0, r3, r4
 801bdc0:	1c6b      	adds	r3, r5, #1
 801bdc2:	d10b      	bne.n	801bddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801bdc4:	4601      	mov	r1, r0
 801bdc6:	9802      	ldr	r0, [sp, #8]
 801bdc8:	f7ff fbd0 	bl	801b56c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bdcc:	4631      	mov	r1, r6
 801bdce:	9801      	ldr	r0, [sp, #4]
 801bdd0:	f7ff fcc0 	bl	801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bdd4:	e50f      	b.n	801b7f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801bdd6:	4645      	mov	r5, r8
 801bdd8:	464c      	mov	r4, r9
 801bdda:	e7ed      	b.n	801bdb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801bddc:	9b01      	ldr	r3, [sp, #4]
 801bdde:	00ed      	lsls	r5, r5, #3
 801bde0:	445c      	add	r4, fp
 801bde2:	1959      	adds	r1, r3, r5
 801bde4:	445d      	add	r5, fp
 801bde6:	f7ff fbc1 	bl	801b56c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bdea:	9b02      	ldr	r3, [sp, #8]
 801bdec:	cb03      	ldmia	r3!, {r0, r1}
 801bdee:	9b02      	ldr	r3, [sp, #8]
 801bdf0:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801bdf4:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801bdf8:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801bdfc:	6861      	ldr	r1, [r4, #4]
 801bdfe:	c303      	stmia	r3!, {r0, r1}
 801be00:	e7e4      	b.n	801bdcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801be04 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801be04:	4b1d      	ldr	r3, [pc, #116]	; (801be7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801be06:	b530      	push	{r4, r5, lr}
 801be08:	f9b3 2000 	ldrsh.w	r2, [r3]
 801be0c:	b085      	sub	sp, #20
 801be0e:	4b1c      	ldr	r3, [pc, #112]	; (801be80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801be10:	460c      	mov	r4, r1
 801be12:	2100      	movs	r1, #0
 801be14:	4605      	mov	r5, r0
 801be16:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be1a:	6820      	ldr	r0, [r4, #0]
 801be1c:	9100      	str	r1, [sp, #0]
 801be1e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801be22:	ab02      	add	r3, sp, #8
 801be24:	6861      	ldr	r1, [r4, #4]
 801be26:	f8ad 2004 	strh.w	r2, [sp, #4]
 801be2a:	c303      	stmia	r3!, {r0, r1}
 801be2c:	4669      	mov	r1, sp
 801be2e:	a802      	add	r0, sp, #8
 801be30:	f7fb fe70 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801be34:	ab02      	add	r3, sp, #8
 801be36:	cb03      	ldmia	r3!, {r0, r1}
 801be38:	4b12      	ldr	r3, [pc, #72]	; (801be84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801be3a:	6020      	str	r0, [r4, #0]
 801be3c:	6818      	ldr	r0, [r3, #0]
 801be3e:	6061      	str	r1, [r4, #4]
 801be40:	b138      	cbz	r0, 801be52 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801be42:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801be46:	b133      	cbz	r3, 801be56 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801be48:	6821      	ldr	r1, [r4, #0]
 801be4a:	4628      	mov	r0, r5
 801be4c:	6862      	ldr	r2, [r4, #4]
 801be4e:	f7ff fcc5 	bl	801b7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801be52:	b005      	add	sp, #20
 801be54:	bd30      	pop	{r4, r5, pc}
 801be56:	6803      	ldr	r3, [r0, #0]
 801be58:	4621      	mov	r1, r4
 801be5a:	689b      	ldr	r3, [r3, #8]
 801be5c:	4798      	blx	r3
 801be5e:	4b0a      	ldr	r3, [pc, #40]	; (801be88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801be60:	6818      	ldr	r0, [r3, #0]
 801be62:	b118      	cbz	r0, 801be6c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801be64:	6803      	ldr	r3, [r0, #0]
 801be66:	4621      	mov	r1, r4
 801be68:	689b      	ldr	r3, [r3, #8]
 801be6a:	4798      	blx	r3
 801be6c:	4b07      	ldr	r3, [pc, #28]	; (801be8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801be6e:	4621      	mov	r1, r4
 801be70:	6818      	ldr	r0, [r3, #0]
 801be72:	6803      	ldr	r3, [r0, #0]
 801be74:	69db      	ldr	r3, [r3, #28]
 801be76:	4798      	blx	r3
 801be78:	e7eb      	b.n	801be52 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801be7a:	bf00      	nop
 801be7c:	2400b8b8 	.word	0x2400b8b8
 801be80:	2400b8ba 	.word	0x2400b8ba
 801be84:	2400b900 	.word	0x2400b900
 801be88:	2400b8fc 	.word	0x2400b8fc
 801be8c:	2400b8c4 	.word	0x2400b8c4

0801be90 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be94:	4604      	mov	r4, r0
 801be96:	b09b      	sub	sp, #108	; 0x6c
 801be98:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801be9c:	b129      	cbz	r1, 801beaa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801be9e:	2300      	movs	r3, #0
 801bea0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801bea4:	b01b      	add	sp, #108	; 0x6c
 801bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beaa:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801beae:	4630      	mov	r0, r6
 801beb0:	f7fb fe73 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801beb4:	4605      	mov	r5, r0
 801beb6:	b940      	cbnz	r0, 801beca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801beb8:	4620      	mov	r0, r4
 801beba:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bebe:	f7ff fc8d 	bl	801b7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bec2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801bec6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801beca:	4ba6      	ldr	r3, [pc, #664]	; (801c164 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	b33b      	cbz	r3, 801bf20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bed0:	4da5      	ldr	r5, [pc, #660]	; (801c168 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801bed2:	4628      	mov	r0, r5
 801bed4:	f7fb fe61 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bed8:	4606      	mov	r6, r0
 801beda:	bb08      	cbnz	r0, 801bf20 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801bedc:	4628      	mov	r0, r5
 801bede:	f7ff f9b1 	bl	801b244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bee2:	6829      	ldr	r1, [r5, #0]
 801bee4:	686a      	ldr	r2, [r5, #4]
 801bee6:	4620      	mov	r0, r4
 801bee8:	f7ff fc78 	bl	801b7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801beec:	802e      	strh	r6, [r5, #0]
 801beee:	806e      	strh	r6, [r5, #2]
 801bef0:	80ae      	strh	r6, [r5, #4]
 801bef2:	80ee      	strh	r6, [r5, #6]
 801bef4:	4f9d      	ldr	r7, [pc, #628]	; (801c16c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801bef6:	a809      	add	r0, sp, #36	; 0x24
 801bef8:	f7ff fbd7 	bl	801b6aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801befc:	883d      	ldrh	r5, [r7, #0]
 801befe:	462e      	mov	r6, r5
 801bf00:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bf04:	42b3      	cmp	r3, r6
 801bf06:	d910      	bls.n	801bf2a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801bf08:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bf0c:	3601      	adds	r6, #1
 801bf0e:	a809      	add	r0, sp, #36	; 0x24
 801bf10:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801bf14:	b2b6      	uxth	r6, r6
 801bf16:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801bf1a:	f7ff fc3d 	bl	801b798 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bf1e:	e7ef      	b.n	801bf00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801bf20:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d1e5      	bne.n	801bef4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801bf28:	e7bc      	b.n	801bea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bf2a:	462e      	mov	r6, r5
 801bf2c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801bf30:	42b3      	cmp	r3, r6
 801bf32:	d90b      	bls.n	801bf4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801bf34:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bf38:	3601      	adds	r6, #1
 801bf3a:	4620      	mov	r0, r4
 801bf3c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bf40:	b2b6      	uxth	r6, r6
 801bf42:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bf46:	f7ff fc49 	bl	801b7dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf4a:	e7ef      	b.n	801bf2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801bf4c:	4a88      	ldr	r2, [pc, #544]	; (801c170 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801bf4e:	6813      	ldr	r3, [r2, #0]
 801bf50:	4690      	mov	r8, r2
 801bf52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bf56:	2b01      	cmp	r3, #1
 801bf58:	f040 8094 	bne.w	801c084 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801bf5c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bf60:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801bf64:	f04f 0900 	mov.w	r9, #0
 801bf68:	33aa      	adds	r3, #170	; 0xaa
 801bf6a:	42a8      	cmp	r0, r5
 801bf6c:	f103 0308 	add.w	r3, r3, #8
 801bf70:	dd0a      	ble.n	801bf88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801bf72:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bf76:	3501      	adds	r5, #1
 801bf78:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801bf7c:	440a      	add	r2, r1
 801bf7e:	b212      	sxth	r2, r2
 801bf80:	4591      	cmp	r9, r2
 801bf82:	bfb8      	it	lt
 801bf84:	4691      	movlt	r9, r2
 801bf86:	e7f0      	b.n	801bf6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801bf88:	4b7a      	ldr	r3, [pc, #488]	; (801c174 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801bf8a:	4e7b      	ldr	r6, [pc, #492]	; (801c178 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801bf8c:	881d      	ldrh	r5, [r3, #0]
 801bf8e:	2300      	movs	r3, #0
 801bf90:	2d0f      	cmp	r5, #15
 801bf92:	bf8c      	ite	hi
 801bf94:	08ed      	lsrhi	r5, r5, #3
 801bf96:	2501      	movls	r5, #1
 801bf98:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bf9c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bfa0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801bfa4:	f8d8 0000 	ldr.w	r0, [r8]
 801bfa8:	440b      	add	r3, r1
 801bfaa:	6802      	ldr	r2, [r0, #0]
 801bfac:	b21b      	sxth	r3, r3
 801bfae:	4599      	cmp	r9, r3
 801bfb0:	dd4b      	ble.n	801c04a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801bfb2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801bfb6:	4798      	blx	r3
 801bfb8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bfbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801bfc0:	4413      	add	r3, r2
 801bfc2:	b21b      	sxth	r3, r3
 801bfc4:	195a      	adds	r2, r3, r5
 801bfc6:	4290      	cmp	r0, r2
 801bfc8:	da07      	bge.n	801bfda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801bfca:	4581      	cmp	r9, r0
 801bfcc:	dd05      	ble.n	801bfda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801bfce:	4298      	cmp	r0, r3
 801bfd0:	da33      	bge.n	801c03a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	dd31      	ble.n	801c03a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801bfd6:	4648      	mov	r0, r9
 801bfd8:	e004      	b.n	801bfe4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801bfda:	4298      	cmp	r0, r3
 801bfdc:	dbfb      	blt.n	801bfd6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801bfde:	4548      	cmp	r0, r9
 801bfe0:	bfa8      	it	ge
 801bfe2:	4648      	movge	r0, r9
 801bfe4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801bfe8:	2100      	movs	r1, #0
 801bfea:	1ac0      	subs	r0, r0, r3
 801bfec:	f8b7 a000 	ldrh.w	sl, [r7]
 801bff0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bff8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bffc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c000:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c004:	4553      	cmp	r3, sl
 801c006:	d9c9      	bls.n	801bf9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c008:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c00c:	ab07      	add	r3, sp, #28
 801c00e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c012:	6851      	ldr	r1, [r2, #4]
 801c014:	c303      	stmia	r3!, {r0, r1}
 801c016:	a807      	add	r0, sp, #28
 801c018:	a905      	add	r1, sp, #20
 801c01a:	f7fb fd7b 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801c01e:	a807      	add	r0, sp, #28
 801c020:	f7fb fdbb 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c024:	b920      	cbnz	r0, 801c030 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801c026:	6823      	ldr	r3, [r4, #0]
 801c028:	a907      	add	r1, sp, #28
 801c02a:	4620      	mov	r0, r4
 801c02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c02e:	4798      	blx	r3
 801c030:	f10a 0a01 	add.w	sl, sl, #1
 801c034:	fa1f fa8a 	uxth.w	sl, sl
 801c038:	e7e2      	b.n	801c000 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c03a:	f8d8 0000 	ldr.w	r0, [r8]
 801c03e:	2101      	movs	r1, #1
 801c040:	6803      	ldr	r3, [r0, #0]
 801c042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c046:	4798      	blx	r3
 801c048:	e7a8      	b.n	801bf9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c04a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801c04c:	4798      	blx	r3
 801c04e:	4b4b      	ldr	r3, [pc, #300]	; (801c17c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c050:	781b      	ldrb	r3, [r3, #0]
 801c052:	2b00      	cmp	r3, #0
 801c054:	f43f af26 	beq.w	801bea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c058:	2300      	movs	r3, #0
 801c05a:	883d      	ldrh	r5, [r7, #0]
 801c05c:	34ea      	adds	r4, #234	; 0xea
 801c05e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c062:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c066:	42ab      	cmp	r3, r5
 801c068:	f67f af1c 	bls.w	801bea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c06c:	ab1a      	add	r3, sp, #104	; 0x68
 801c06e:	4620      	mov	r0, r4
 801c070:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c074:	3501      	adds	r5, #1
 801c076:	3b44      	subs	r3, #68	; 0x44
 801c078:	b2ad      	uxth	r5, r5
 801c07a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c07e:	f7ff fb8b 	bl	801b798 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c082:	e7ee      	b.n	801c062 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801c084:	2b02      	cmp	r3, #2
 801c086:	f040 813d 	bne.w	801c304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801c08a:	4b3d      	ldr	r3, [pc, #244]	; (801c180 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d02c      	beq.n	801c0ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801c092:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801c096:	883a      	ldrh	r2, [r7, #0]
 801c098:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801c09c:	3201      	adds	r2, #1
 801c09e:	b292      	uxth	r2, r2
 801c0a0:	2900      	cmp	r1, #0
 801c0a2:	d0d4      	beq.n	801c04e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c0a4:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801c0a8:	4610      	mov	r0, r2
 801c0aa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801c0ae:	f04f 0a00 	mov.w	sl, #0
 801c0b2:	441d      	add	r5, r3
 801c0b4:	b22d      	sxth	r5, r5
 801c0b6:	b283      	uxth	r3, r0
 801c0b8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801c0bc:	4299      	cmp	r1, r3
 801c0be:	f240 80c3 	bls.w	801c248 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801c0c2:	4426      	add	r6, r4
 801c0c4:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801c0c8:	4684      	mov	ip, r0
 801c0ca:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801c0ce:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801c0d2:	4573      	cmp	r3, lr
 801c0d4:	f340 80a5 	ble.w	801c222 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801c0d8:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801c0dc:	4475      	add	r5, lr
 801c0de:	b22d      	sxth	r5, r5
 801c0e0:	429d      	cmp	r5, r3
 801c0e2:	bfa8      	it	ge
 801c0e4:	461d      	movge	r5, r3
 801c0e6:	3001      	adds	r0, #1
 801c0e8:	46e2      	mov	sl, ip
 801c0ea:	e7e4      	b.n	801c0b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801c0ec:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801c0f0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801c0f4:	f1bb 0f00 	cmp.w	fp, #0
 801c0f8:	d0a9      	beq.n	801c04e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c0fa:	883b      	ldrh	r3, [r7, #0]
 801c0fc:	2600      	movs	r6, #0
 801c0fe:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801c102:	3301      	adds	r3, #1
 801c104:	b29b      	uxth	r3, r3
 801c106:	b299      	uxth	r1, r3
 801c108:	00f5      	lsls	r5, r6, #3
 801c10a:	458b      	cmp	fp, r1
 801c10c:	d93a      	bls.n	801c184 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c10e:	4425      	add	r5, r4
 801c110:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c114:	469c      	mov	ip, r3
 801c116:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801c11a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801c11e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801c122:	4408      	add	r0, r1
 801c124:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801c128:	4471      	add	r1, lr
 801c12a:	b200      	sxth	r0, r0
 801c12c:	b209      	sxth	r1, r1
 801c12e:	4288      	cmp	r0, r1
 801c130:	da06      	bge.n	801c140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801c132:	4586      	cmp	lr, r0
 801c134:	4672      	mov	r2, lr
 801c136:	bfb8      	it	lt
 801c138:	4602      	movlt	r2, r0
 801c13a:	3301      	adds	r3, #1
 801c13c:	4666      	mov	r6, ip
 801c13e:	e7e2      	b.n	801c106 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c140:	d10b      	bne.n	801c15a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801c142:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801c146:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801c14a:	458c      	cmp	ip, r1
 801c14c:	bfb4      	ite	lt
 801c14e:	469c      	movlt	ip, r3
 801c150:	46b4      	movge	ip, r6
 801c152:	4572      	cmp	r2, lr
 801c154:	bfb8      	it	lt
 801c156:	4672      	movlt	r2, lr
 801c158:	e7ef      	b.n	801c13a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c15a:	428a      	cmp	r2, r1
 801c15c:	46b4      	mov	ip, r6
 801c15e:	bfb8      	it	lt
 801c160:	460a      	movlt	r2, r1
 801c162:	e7ea      	b.n	801c13a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c164:	2400b8fc 	.word	0x2400b8fc
 801c168:	2400b908 	.word	0x2400b908
 801c16c:	24000056 	.word	0x24000056
 801c170:	2400b8c4 	.word	0x2400b8c4
 801c174:	2400b8ba 	.word	0x2400b8ba
 801c178:	2400b8b8 	.word	0x2400b8b8
 801c17c:	2400b8c2 	.word	0x2400b8c2
 801c180:	2400b8bc 	.word	0x2400b8bc
 801c184:	1961      	adds	r1, r4, r5
 801c186:	ab07      	add	r3, sp, #28
 801c188:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c18c:	6849      	ldr	r1, [r1, #4]
 801c18e:	c303      	stmia	r3!, {r0, r1}
 801c190:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c194:	a807      	add	r0, sp, #28
 801c196:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c19a:	2b13      	cmp	r3, #19
 801c19c:	440b      	add	r3, r1
 801c19e:	bfd8      	it	le
 801c1a0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c1a4:	1a9b      	subs	r3, r3, r2
 801c1a6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c1aa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c1ae:	f7ff f863 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1b2:	a807      	add	r0, sp, #28
 801c1b4:	f7fb fcf1 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	d199      	bne.n	801c0f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c1bc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c1c0:	4425      	add	r5, r4
 801c1c2:	f8d8 0000 	ldr.w	r0, [r8]
 801c1c6:	f1bc 0f14 	cmp.w	ip, #20
 801c1ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c1ce:	f8d0 e000 	ldr.w	lr, [r0]
 801c1d2:	bfa8      	it	ge
 801c1d4:	f04f 0c14 	movge.w	ip, #20
 801c1d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c1dc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c1e0:	fa1f fc8c 	uxth.w	ip, ip
 801c1e4:	f8cd c000 	str.w	ip, [sp]
 801c1e8:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801c1ec:	47d0      	blx	sl
 801c1ee:	4682      	mov	sl, r0
 801c1f0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c1f4:	a807      	add	r0, sp, #28
 801c1f6:	f7ff f825 	bl	801b244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c1fa:	6823      	ldr	r3, [r4, #0]
 801c1fc:	4620      	mov	r0, r4
 801c1fe:	a907      	add	r1, sp, #28
 801c200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c202:	4798      	blx	r3
 801c204:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801c208:	eba0 000a 	sub.w	r0, r0, sl
 801c20c:	b200      	sxth	r0, r0
 801c20e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801c212:	2800      	cmp	r0, #0
 801c214:	f47f af6c 	bne.w	801c0f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c218:	b2b1      	uxth	r1, r6
 801c21a:	4648      	mov	r0, r9
 801c21c:	f7ff fa9a 	bl	801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c220:	e766      	b.n	801c0f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c222:	d10c      	bne.n	801c23e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801c224:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801c228:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801c22c:	45b4      	cmp	ip, r6
 801c22e:	bfb4      	ite	lt
 801c230:	4684      	movlt	ip, r0
 801c232:	46d4      	movge	ip, sl
 801c234:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801c238:	4433      	add	r3, r6
 801c23a:	b21b      	sxth	r3, r3
 801c23c:	e750      	b.n	801c0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801c23e:	4575      	cmp	r5, lr
 801c240:	46d4      	mov	ip, sl
 801c242:	bfa8      	it	ge
 801c244:	4675      	movge	r5, lr
 801c246:	e74e      	b.n	801c0e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801c248:	eb0b 0006 	add.w	r0, fp, r6
 801c24c:	4426      	add	r6, r4
 801c24e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801c252:	f1b9 0f13 	cmp.w	r9, #19
 801c256:	bfdc      	itt	le
 801c258:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801c25c:	444d      	addle	r5, r9
 801c25e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c262:	bfd8      	it	le
 801c264:	b22d      	sxthle	r5, r5
 801c266:	f7fb fc98 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c26a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c26e:	2800      	cmp	r0, #0
 801c270:	f47f af16 	bne.w	801c0a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801c274:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801c278:	fa1f f989 	uxth.w	r9, r9
 801c27c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c280:	eba5 050c 	sub.w	r5, r5, ip
 801c284:	fa1f f28c 	uxth.w	r2, ip
 801c288:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801c28c:	eb02 0009 	add.w	r0, r2, r9
 801c290:	2d14      	cmp	r5, #20
 801c292:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801c296:	bfa8      	it	ge
 801c298:	2514      	movge	r5, #20
 801c29a:	b200      	sxth	r0, r0
 801c29c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c2a0:	b289      	uxth	r1, r1
 801c2a2:	fa1f fe85 	uxth.w	lr, r5
 801c2a6:	eba0 000c 	sub.w	r0, r0, ip
 801c2aa:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c2ae:	4586      	cmp	lr, r0
 801c2b0:	f8d8 0000 	ldr.w	r0, [r8]
 801c2b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c2b8:	b29b      	uxth	r3, r3
 801c2ba:	bfb8      	it	lt
 801c2bc:	46f1      	movlt	r9, lr
 801c2be:	6805      	ldr	r5, [r0, #0]
 801c2c0:	f8cd 9000 	str.w	r9, [sp]
 801c2c4:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801c2c8:	47a8      	blx	r5
 801c2ca:	6823      	ldr	r3, [r4, #0]
 801c2cc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c2d0:	a907      	add	r1, sp, #28
 801c2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	4798      	blx	r3
 801c2d8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c2dc:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801c2e0:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801c2e4:	1a5b      	subs	r3, r3, r1
 801c2e6:	440a      	add	r2, r1
 801c2e8:	b21b      	sxth	r3, r3
 801c2ea:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801c2ee:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	f47f aecf 	bne.w	801c096 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c2f8:	fa1f f18a 	uxth.w	r1, sl
 801c2fc:	4658      	mov	r0, fp
 801c2fe:	f7ff fa29 	bl	801b754 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c302:	e6c8      	b.n	801c096 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c304:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c308:	42ab      	cmp	r3, r5
 801c30a:	f67f aea0 	bls.w	801c04e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c30e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c312:	ab07      	add	r3, sp, #28
 801c314:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c318:	6851      	ldr	r1, [r2, #4]
 801c31a:	c303      	stmia	r3!, {r0, r1}
 801c31c:	a807      	add	r0, sp, #28
 801c31e:	f7fb fc3c 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c322:	b920      	cbnz	r0, 801c32e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801c324:	6823      	ldr	r3, [r4, #0]
 801c326:	a907      	add	r1, sp, #28
 801c328:	4620      	mov	r0, r4
 801c32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c32c:	4798      	blx	r3
 801c32e:	3501      	adds	r5, #1
 801c330:	b2ad      	uxth	r5, r5
 801c332:	e7e7      	b.n	801c304 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801c334 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c334:	4b03      	ldr	r3, [pc, #12]	; (801c344 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c336:	2200      	movs	r2, #0
 801c338:	801a      	strh	r2, [r3, #0]
 801c33a:	805a      	strh	r2, [r3, #2]
 801c33c:	809a      	strh	r2, [r3, #4]
 801c33e:	80da      	strh	r2, [r3, #6]
 801c340:	4770      	bx	lr
 801c342:	bf00      	nop
 801c344:	2400b908 	.word	0x2400b908

0801c348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c34c:	b09d      	sub	sp, #116	; 0x74
 801c34e:	4606      	mov	r6, r0
 801c350:	4614      	mov	r4, r2
 801c352:	468a      	mov	sl, r1
 801c354:	a803      	add	r0, sp, #12
 801c356:	461d      	mov	r5, r3
 801c358:	f000 fe48 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801c35c:	6833      	ldr	r3, [r6, #0]
 801c35e:	4630      	mov	r0, r6
 801c360:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c366:	4798      	blx	r3
 801c368:	6833      	ldr	r3, [r6, #0]
 801c36a:	4607      	mov	r7, r0
 801c36c:	4630      	mov	r0, r6
 801c36e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c370:	4798      	blx	r3
 801c372:	462a      	mov	r2, r5
 801c374:	2500      	movs	r5, #0
 801c376:	4621      	mov	r1, r4
 801c378:	9000      	str	r0, [sp, #0]
 801c37a:	463b      	mov	r3, r7
 801c37c:	462c      	mov	r4, r5
 801c37e:	46a9      	mov	r9, r5
 801c380:	46a8      	mov	r8, r5
 801c382:	a803      	add	r0, sp, #12
 801c384:	f000 fe85 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c388:	2300      	movs	r3, #0
 801c38a:	9302      	str	r3, [sp, #8]
 801c38c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c390:	429c      	cmp	r4, r3
 801c392:	d002      	beq.n	801c39a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c394:	455c      	cmp	r4, fp
 801c396:	bf18      	it	ne
 801c398:	4625      	movne	r5, r4
 801c39a:	ab02      	add	r3, sp, #8
 801c39c:	4632      	mov	r2, r6
 801c39e:	4651      	mov	r1, sl
 801c3a0:	a803      	add	r0, sp, #12
 801c3a2:	f001 f977 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c3a6:	4604      	mov	r4, r0
 801c3a8:	b108      	cbz	r0, 801c3ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c3aa:	280a      	cmp	r0, #10
 801c3ac:	d10a      	bne.n	801c3c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c3ae:	45c1      	cmp	r9, r8
 801c3b0:	bf38      	it	cc
 801c3b2:	46c1      	movcc	r9, r8
 801c3b4:	f04f 0800 	mov.w	r8, #0
 801c3b8:	2c00      	cmp	r4, #0
 801c3ba:	d1e5      	bne.n	801c388 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c3bc:	4648      	mov	r0, r9
 801c3be:	b01d      	add	sp, #116	; 0x74
 801c3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c4:	9a02      	ldr	r2, [sp, #8]
 801c3c6:	2a00      	cmp	r2, #0
 801c3c8:	d0de      	beq.n	801c388 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c3ca:	7b57      	ldrb	r7, [r2, #13]
 801c3cc:	4629      	mov	r1, r5
 801c3ce:	6833      	ldr	r3, [r6, #0]
 801c3d0:	007f      	lsls	r7, r7, #1
 801c3d2:	8894      	ldrh	r4, [r2, #4]
 801c3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c3d6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c3da:	7a97      	ldrb	r7, [r2, #10]
 801c3dc:	4307      	orrs	r7, r0
 801c3de:	4630      	mov	r0, r6
 801c3e0:	4798      	blx	r3
 801c3e2:	4438      	add	r0, r7
 801c3e4:	4480      	add	r8, r0
 801c3e6:	fa1f f888 	uxth.w	r8, r8
 801c3ea:	e7e5      	b.n	801c3b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c3ec <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c3ec:	b508      	push	{r3, lr}
 801c3ee:	6803      	ldr	r3, [r0, #0]
 801c3f0:	68db      	ldr	r3, [r3, #12]
 801c3f2:	4798      	blx	r3
 801c3f4:	b128      	cbz	r0, 801c402 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c3f6:	7b43      	ldrb	r3, [r0, #13]
 801c3f8:	7a80      	ldrb	r0, [r0, #10]
 801c3fa:	005b      	lsls	r3, r3, #1
 801c3fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c400:	4318      	orrs	r0, r3
 801c402:	bd08      	pop	{r3, pc}

0801c404 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c404:	b40e      	push	{r1, r2, r3}
 801c406:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c408:	b09e      	sub	sp, #120	; 0x78
 801c40a:	4605      	mov	r5, r0
 801c40c:	ab23      	add	r3, sp, #140	; 0x8c
 801c40e:	a805      	add	r0, sp, #20
 801c410:	f853 4b04 	ldr.w	r4, [r3], #4
 801c414:	9303      	str	r3, [sp, #12]
 801c416:	f000 fde9 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801c41a:	682b      	ldr	r3, [r5, #0]
 801c41c:	4628      	mov	r0, r5
 801c41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c420:	4798      	blx	r3
 801c422:	682b      	ldr	r3, [r5, #0]
 801c424:	4606      	mov	r6, r0
 801c426:	4628      	mov	r0, r5
 801c428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c42a:	4798      	blx	r3
 801c42c:	4633      	mov	r3, r6
 801c42e:	4621      	mov	r1, r4
 801c430:	ae1e      	add	r6, sp, #120	; 0x78
 801c432:	2400      	movs	r4, #0
 801c434:	9000      	str	r0, [sp, #0]
 801c436:	9a03      	ldr	r2, [sp, #12]
 801c438:	a805      	add	r0, sp, #20
 801c43a:	f000 fe2a 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c43e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c442:	462a      	mov	r2, r5
 801c444:	4633      	mov	r3, r6
 801c446:	4621      	mov	r1, r4
 801c448:	a805      	add	r0, sp, #20
 801c44a:	f001 f923 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c44e:	b300      	cbz	r0, 801c492 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c450:	280a      	cmp	r0, #10
 801c452:	d01a      	beq.n	801c48a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c454:	9f04      	ldr	r7, [sp, #16]
 801c456:	b1c7      	cbz	r7, 801c48a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c458:	7b78      	ldrb	r0, [r7, #13]
 801c45a:	7a3b      	ldrb	r3, [r7, #8]
 801c45c:	00c1      	lsls	r1, r0, #3
 801c45e:	88aa      	ldrh	r2, [r5, #4]
 801c460:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c464:	4319      	orrs	r1, r3
 801c466:	0643      	lsls	r3, r0, #25
 801c468:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c46c:	bf48      	it	mi
 801c46e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c472:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c476:	bf48      	it	mi
 801c478:	b219      	sxthmi	r1, r3
 801c47a:	79fb      	ldrb	r3, [r7, #7]
 801c47c:	4303      	orrs	r3, r0
 801c47e:	4413      	add	r3, r2
 801c480:	1a5b      	subs	r3, r3, r1
 801c482:	b29b      	uxth	r3, r3
 801c484:	42a3      	cmp	r3, r4
 801c486:	bfc8      	it	gt
 801c488:	b21c      	sxthgt	r4, r3
 801c48a:	4633      	mov	r3, r6
 801c48c:	462a      	mov	r2, r5
 801c48e:	2100      	movs	r1, #0
 801c490:	e7da      	b.n	801c448 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c492:	b2a0      	uxth	r0, r4
 801c494:	b01e      	add	sp, #120	; 0x78
 801c496:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c49a:	b003      	add	sp, #12
 801c49c:	4770      	bx	lr

0801c49e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c49e:	b40e      	push	{r1, r2, r3}
 801c4a0:	b570      	push	{r4, r5, r6, lr}
 801c4a2:	b09d      	sub	sp, #116	; 0x74
 801c4a4:	4604      	mov	r4, r0
 801c4a6:	ab21      	add	r3, sp, #132	; 0x84
 801c4a8:	a803      	add	r0, sp, #12
 801c4aa:	f853 5b04 	ldr.w	r5, [r3], #4
 801c4ae:	9302      	str	r3, [sp, #8]
 801c4b0:	f000 fd9c 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801c4b4:	6823      	ldr	r3, [r4, #0]
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4ba:	4798      	blx	r3
 801c4bc:	6823      	ldr	r3, [r4, #0]
 801c4be:	4606      	mov	r6, r0
 801c4c0:	4620      	mov	r0, r4
 801c4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4c4:	2401      	movs	r4, #1
 801c4c6:	4798      	blx	r3
 801c4c8:	4633      	mov	r3, r6
 801c4ca:	9000      	str	r0, [sp, #0]
 801c4cc:	4629      	mov	r1, r5
 801c4ce:	9a02      	ldr	r2, [sp, #8]
 801c4d0:	a803      	add	r0, sp, #12
 801c4d2:	f000 fdde 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c4d6:	a803      	add	r0, sp, #12
 801c4d8:	f001 f9d6 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c4dc:	b2a3      	uxth	r3, r4
 801c4de:	b138      	cbz	r0, 801c4f0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c4e0:	280a      	cmp	r0, #10
 801c4e2:	a803      	add	r0, sp, #12
 801c4e4:	bf04      	itt	eq
 801c4e6:	3301      	addeq	r3, #1
 801c4e8:	b21c      	sxtheq	r4, r3
 801c4ea:	f001 f9cd 	bl	801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c4ee:	e7f5      	b.n	801c4dc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c4f0:	4618      	mov	r0, r3
 801c4f2:	b01d      	add	sp, #116	; 0x74
 801c4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c4f8:	b003      	add	sp, #12
 801c4fa:	4770      	bx	lr

0801c4fc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c4fc:	b40e      	push	{r1, r2, r3}
 801c4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c500:	b09e      	sub	sp, #120	; 0x78
 801c502:	4604      	mov	r4, r0
 801c504:	ab23      	add	r3, sp, #140	; 0x8c
 801c506:	a805      	add	r0, sp, #20
 801c508:	f853 5b04 	ldr.w	r5, [r3], #4
 801c50c:	9303      	str	r3, [sp, #12]
 801c50e:	f000 fd6d 	bl	801cfec <_ZN8touchgfx12TextProviderC1Ev>
 801c512:	6823      	ldr	r3, [r4, #0]
 801c514:	4620      	mov	r0, r4
 801c516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c518:	4798      	blx	r3
 801c51a:	6823      	ldr	r3, [r4, #0]
 801c51c:	4606      	mov	r6, r0
 801c51e:	4620      	mov	r0, r4
 801c520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c522:	4798      	blx	r3
 801c524:	4633      	mov	r3, r6
 801c526:	4629      	mov	r1, r5
 801c528:	9000      	str	r0, [sp, #0]
 801c52a:	9a03      	ldr	r2, [sp, #12]
 801c52c:	a805      	add	r0, sp, #20
 801c52e:	f000 fdb0 	bl	801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c532:	ad1e      	add	r5, sp, #120	; 0x78
 801c534:	2100      	movs	r1, #0
 801c536:	26ff      	movs	r6, #255	; 0xff
 801c538:	4622      	mov	r2, r4
 801c53a:	a805      	add	r0, sp, #20
 801c53c:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c540:	462b      	mov	r3, r5
 801c542:	f001 f8a7 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c546:	b1d8      	cbz	r0, 801c580 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c548:	280a      	cmp	r0, #10
 801c54a:	d012      	beq.n	801c572 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c54c:	9804      	ldr	r0, [sp, #16]
 801c54e:	b180      	cbz	r0, 801c572 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c550:	7b47      	ldrb	r7, [r0, #13]
 801c552:	7922      	ldrb	r2, [r4, #4]
 801c554:	00fb      	lsls	r3, r7, #3
 801c556:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c55a:	7a03      	ldrb	r3, [r0, #8]
 801c55c:	430b      	orrs	r3, r1
 801c55e:	0679      	lsls	r1, r7, #25
 801c560:	bf44      	itt	mi
 801c562:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c566:	b21b      	sxthmi	r3, r3
 801c568:	1ad3      	subs	r3, r2, r3
 801c56a:	b2db      	uxtb	r3, r3
 801c56c:	429e      	cmp	r6, r3
 801c56e:	bf28      	it	cs
 801c570:	461e      	movcs	r6, r3
 801c572:	462b      	mov	r3, r5
 801c574:	4622      	mov	r2, r4
 801c576:	2100      	movs	r1, #0
 801c578:	a805      	add	r0, sp, #20
 801c57a:	f001 f88b 	bl	801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c57e:	e7e2      	b.n	801c546 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c580:	4630      	mov	r0, r6
 801c582:	b01e      	add	sp, #120	; 0x78
 801c584:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c588:	b003      	add	sp, #12
 801c58a:	4770      	bx	lr

0801c58c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c58c:	b513      	push	{r0, r1, r4, lr}
 801c58e:	6803      	ldr	r3, [r0, #0]
 801c590:	2400      	movs	r4, #0
 801c592:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c596:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c59a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c59e:	4669      	mov	r1, sp
 801c5a0:	691b      	ldr	r3, [r3, #16]
 801c5a2:	9400      	str	r4, [sp, #0]
 801c5a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c5a8:	4798      	blx	r3
 801c5aa:	b002      	add	sp, #8
 801c5ac:	bd10      	pop	{r4, pc}

0801c5ae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c5ae:	b538      	push	{r3, r4, r5, lr}
 801c5b0:	680b      	ldr	r3, [r1, #0]
 801c5b2:	460c      	mov	r4, r1
 801c5b4:	4605      	mov	r5, r0
 801c5b6:	68db      	ldr	r3, [r3, #12]
 801c5b8:	4798      	blx	r3
 801c5ba:	6823      	ldr	r3, [r4, #0]
 801c5bc:	4620      	mov	r0, r4
 801c5be:	4629      	mov	r1, r5
 801c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5c2:	4798      	blx	r3
 801c5c4:	4628      	mov	r0, r5
 801c5c6:	bd38      	pop	{r3, r4, r5, pc}

0801c5c8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c5c8:	b410      	push	{r4}
 801c5ca:	880a      	ldrh	r2, [r1, #0]
 801c5cc:	8884      	ldrh	r4, [r0, #4]
 801c5ce:	4422      	add	r2, r4
 801c5d0:	800a      	strh	r2, [r1, #0]
 801c5d2:	884a      	ldrh	r2, [r1, #2]
 801c5d4:	88c4      	ldrh	r4, [r0, #6]
 801c5d6:	4422      	add	r2, r4
 801c5d8:	804a      	strh	r2, [r1, #2]
 801c5da:	6940      	ldr	r0, [r0, #20]
 801c5dc:	b120      	cbz	r0, 801c5e8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c5de:	6803      	ldr	r3, [r0, #0]
 801c5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5e6:	4718      	bx	r3
 801c5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5ec:	4770      	bx	lr

0801c5ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c5ee:	b570      	push	{r4, r5, r6, lr}
 801c5f0:	8882      	ldrh	r2, [r0, #4]
 801c5f2:	460c      	mov	r4, r1
 801c5f4:	880b      	ldrh	r3, [r1, #0]
 801c5f6:	4605      	mov	r5, r0
 801c5f8:	4413      	add	r3, r2
 801c5fa:	800b      	strh	r3, [r1, #0]
 801c5fc:	884b      	ldrh	r3, [r1, #2]
 801c5fe:	88c2      	ldrh	r2, [r0, #6]
 801c600:	4413      	add	r3, r2
 801c602:	804b      	strh	r3, [r1, #2]
 801c604:	1d01      	adds	r1, r0, #4
 801c606:	4620      	mov	r0, r4
 801c608:	f7fb fa84 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801c60c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c610:	2b00      	cmp	r3, #0
 801c612:	dd0b      	ble.n	801c62c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c614:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	dd07      	ble.n	801c62c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c61c:	6968      	ldr	r0, [r5, #20]
 801c61e:	b128      	cbz	r0, 801c62c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c620:	6803      	ldr	r3, [r0, #0]
 801c622:	4621      	mov	r1, r4
 801c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c62a:	4718      	bx	r3
 801c62c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c630 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c630:	b570      	push	{r4, r5, r6, lr}
 801c632:	8882      	ldrh	r2, [r0, #4]
 801c634:	460c      	mov	r4, r1
 801c636:	880b      	ldrh	r3, [r1, #0]
 801c638:	4605      	mov	r5, r0
 801c63a:	4413      	add	r3, r2
 801c63c:	800b      	strh	r3, [r1, #0]
 801c63e:	884b      	ldrh	r3, [r1, #2]
 801c640:	88c2      	ldrh	r2, [r0, #6]
 801c642:	4413      	add	r3, r2
 801c644:	804b      	strh	r3, [r1, #2]
 801c646:	1d01      	adds	r1, r0, #4
 801c648:	4620      	mov	r0, r4
 801c64a:	f7fb fa63 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801c64e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c652:	2b00      	cmp	r3, #0
 801c654:	dd15      	ble.n	801c682 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c656:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	dd11      	ble.n	801c682 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c65e:	6968      	ldr	r0, [r5, #20]
 801c660:	b128      	cbz	r0, 801c66e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c662:	6803      	ldr	r3, [r0, #0]
 801c664:	691b      	ldr	r3, [r3, #16]
 801c666:	4621      	mov	r1, r4
 801c668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c66c:	4718      	bx	r3
 801c66e:	4b05      	ldr	r3, [pc, #20]	; (801c684 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801c670:	681b      	ldr	r3, [r3, #0]
 801c672:	3304      	adds	r3, #4
 801c674:	429d      	cmp	r5, r3
 801c676:	d104      	bne.n	801c682 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801c678:	f7fe ffbe 	bl	801b5f8 <_ZN8touchgfx11Application11getInstanceEv>
 801c67c:	6803      	ldr	r3, [r0, #0]
 801c67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c680:	e7f1      	b.n	801c666 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801c682:	bd70      	pop	{r4, r5, r6, pc}
 801c684:	2400b900 	.word	0x2400b900

0801c688 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c688:	b570      	push	{r4, r5, r6, lr}
 801c68a:	4604      	mov	r4, r0
 801c68c:	4616      	mov	r6, r2
 801c68e:	460d      	mov	r5, r1
 801c690:	b901      	cbnz	r1, 801c694 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c692:	b192      	cbz	r2, 801c6ba <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c694:	6823      	ldr	r3, [r4, #0]
 801c696:	4620      	mov	r0, r4
 801c698:	695b      	ldr	r3, [r3, #20]
 801c69a:	4798      	blx	r3
 801c69c:	88e2      	ldrh	r2, [r4, #6]
 801c69e:	88a1      	ldrh	r1, [r4, #4]
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	4432      	add	r2, r6
 801c6a4:	4429      	add	r1, r5
 801c6a6:	b212      	sxth	r2, r2
 801c6a8:	b209      	sxth	r1, r1
 801c6aa:	f7e7 fcd9 	bl	8004060 <_ZN8touchgfx8Drawable5setXYEss>
 801c6ae:	6823      	ldr	r3, [r4, #0]
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	695b      	ldr	r3, [r3, #20]
 801c6b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c6b8:	4718      	bx	r3
 801c6ba:	bd70      	pop	{r4, r5, r6, pc}

0801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c6bc:	b510      	push	{r4, lr}
 801c6be:	2300      	movs	r3, #0
 801c6c0:	4604      	mov	r4, r0
 801c6c2:	4608      	mov	r0, r1
 801c6c4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c6c8:	8023      	strh	r3, [r4, #0]
 801c6ca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c6ce:	8063      	strh	r3, [r4, #2]
 801c6d0:	6803      	ldr	r3, [r0, #0]
 801c6d2:	80a1      	strh	r1, [r4, #4]
 801c6d4:	4621      	mov	r1, r4
 801c6d6:	80e2      	strh	r2, [r4, #6]
 801c6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6da:	4798      	blx	r3
 801c6dc:	4620      	mov	r0, r4
 801c6de:	bd10      	pop	{r4, pc}

0801c6e0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c6e0:	b530      	push	{r4, r5, lr}
 801c6e2:	8083      	strh	r3, [r0, #4]
 801c6e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c6e8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c6ec:	7183      	strb	r3, [r0, #6]
 801c6ee:	79c3      	ldrb	r3, [r0, #7]
 801c6f0:	6101      	str	r1, [r0, #16]
 801c6f2:	f365 0306 	bfi	r3, r5, #0, #7
 801c6f6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c6fa:	8282      	strh	r2, [r0, #20]
 801c6fc:	f365 13c7 	bfi	r3, r5, #7, #1
 801c700:	71c3      	strb	r3, [r0, #7]
 801c702:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c706:	7203      	strb	r3, [r0, #8]
 801c708:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c70c:	7243      	strb	r3, [r0, #9]
 801c70e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c712:	8143      	strh	r3, [r0, #10]
 801c714:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c718:	8183      	strh	r3, [r0, #12]
 801c71a:	4b01      	ldr	r3, [pc, #4]	; (801c720 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c71c:	6003      	str	r3, [r0, #0]
 801c71e:	bd30      	pop	{r4, r5, pc}
 801c720:	0802ef40 	.word	0x0802ef40

0801c724 <_ZNK8touchgfx9ConstFont4findEt>:
 801c724:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c726:	6904      	ldr	r4, [r0, #16]
 801c728:	b3bc      	cbz	r4, 801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c72a:	88a3      	ldrh	r3, [r4, #4]
 801c72c:	8a82      	ldrh	r2, [r0, #20]
 801c72e:	1acb      	subs	r3, r1, r3
 801c730:	f102 32ff 	add.w	r2, r2, #4294967295
 801c734:	d431      	bmi.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c736:	4293      	cmp	r3, r2
 801c738:	dd0c      	ble.n	801c754 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c73a:	230e      	movs	r3, #14
 801c73c:	fb03 4302 	mla	r3, r3, r2, r4
 801c740:	889b      	ldrh	r3, [r3, #4]
 801c742:	1a5b      	subs	r3, r3, r1
 801c744:	1ad3      	subs	r3, r2, r3
 801c746:	429a      	cmp	r2, r3
 801c748:	db27      	blt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	bfbc      	itt	lt
 801c74e:	2302      	movlt	r3, #2
 801c750:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c754:	2500      	movs	r5, #0
 801c756:	260e      	movs	r6, #14
 801c758:	4295      	cmp	r5, r2
 801c75a:	dc1e      	bgt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c75c:	fb06 4003 	mla	r0, r6, r3, r4
 801c760:	8887      	ldrh	r7, [r0, #4]
 801c762:	42b9      	cmp	r1, r7
 801c764:	d01a      	beq.n	801c79c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c766:	d20d      	bcs.n	801c784 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c768:	1e5a      	subs	r2, r3, #1
 801c76a:	4295      	cmp	r5, r2
 801c76c:	dc15      	bgt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c76e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c772:	1a5b      	subs	r3, r3, r1
 801c774:	1ad3      	subs	r3, r2, r3
 801c776:	429a      	cmp	r2, r3
 801c778:	db0f      	blt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c77a:	429d      	cmp	r5, r3
 801c77c:	ddec      	ble.n	801c758 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c77e:	1953      	adds	r3, r2, r5
 801c780:	105b      	asrs	r3, r3, #1
 801c782:	e7e9      	b.n	801c758 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c784:	1c5d      	adds	r5, r3, #1
 801c786:	42aa      	cmp	r2, r5
 801c788:	db07      	blt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c78a:	8a43      	ldrh	r3, [r0, #18]
 801c78c:	1acb      	subs	r3, r1, r3
 801c78e:	442b      	add	r3, r5
 801c790:	429d      	cmp	r5, r3
 801c792:	dc02      	bgt.n	801c79a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c794:	429a      	cmp	r2, r3
 801c796:	dadf      	bge.n	801c758 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c798:	e7f1      	b.n	801c77e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c79a:	2000      	movs	r0, #0
 801c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c79e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	4617      	mov	r7, r2
 801c7a4:	461e      	mov	r6, r3
 801c7a6:	b911      	cbnz	r1, 801c7ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c7a8:	2500      	movs	r5, #0
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7ae:	290a      	cmp	r1, #10
 801c7b0:	d0fa      	beq.n	801c7a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c7b2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c7b6:	4291      	cmp	r1, r2
 801c7b8:	d0f6      	beq.n	801c7a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c7ba:	f242 020b 	movw	r2, #8203	; 0x200b
 801c7be:	4291      	cmp	r1, r2
 801c7c0:	d0f2      	beq.n	801c7a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c7c2:	f7ff ffaf 	bl	801c724 <_ZNK8touchgfx9ConstFont4findEt>
 801c7c6:	4605      	mov	r5, r0
 801c7c8:	b950      	cbnz	r0, 801c7e0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c7ca:	6823      	ldr	r3, [r4, #0]
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	691b      	ldr	r3, [r3, #16]
 801c7d0:	4798      	blx	r3
 801c7d2:	4601      	mov	r1, r0
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f7ff ffa5 	bl	801c724 <_ZNK8touchgfx9ConstFont4findEt>
 801c7da:	4605      	mov	r5, r0
 801c7dc:	2800      	cmp	r0, #0
 801c7de:	d0e3      	beq.n	801c7a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c7e0:	6823      	ldr	r3, [r4, #0]
 801c7e2:	4629      	mov	r1, r5
 801c7e4:	4620      	mov	r0, r4
 801c7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c7e8:	4798      	blx	r3
 801c7ea:	6038      	str	r0, [r7, #0]
 801c7ec:	6823      	ldr	r3, [r4, #0]
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c7f2:	4798      	blx	r3
 801c7f4:	7030      	strb	r0, [r6, #0]
 801c7f6:	e7d8      	b.n	801c7aa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c7f8 <_ZN8touchgfx4clzuEm>:
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	b1c8      	cbz	r0, 801c830 <_ZN8touchgfx4clzuEm+0x38>
 801c7fc:	0c02      	lsrs	r2, r0, #16
 801c7fe:	0412      	lsls	r2, r2, #16
 801c800:	b9a2      	cbnz	r2, 801c82c <_ZN8touchgfx4clzuEm+0x34>
 801c802:	0403      	lsls	r3, r0, #16
 801c804:	2010      	movs	r0, #16
 801c806:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c80a:	bf04      	itt	eq
 801c80c:	021b      	lsleq	r3, r3, #8
 801c80e:	3008      	addeq	r0, #8
 801c810:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c814:	bf04      	itt	eq
 801c816:	011b      	lsleq	r3, r3, #4
 801c818:	3004      	addeq	r0, #4
 801c81a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c81e:	bf04      	itt	eq
 801c820:	009b      	lsleq	r3, r3, #2
 801c822:	3002      	addeq	r0, #2
 801c824:	2b00      	cmp	r3, #0
 801c826:	db04      	blt.n	801c832 <_ZN8touchgfx4clzuEm+0x3a>
 801c828:	3001      	adds	r0, #1
 801c82a:	4770      	bx	lr
 801c82c:	2000      	movs	r0, #0
 801c82e:	e7ea      	b.n	801c806 <_ZN8touchgfx4clzuEm+0xe>
 801c830:	2020      	movs	r0, #32
 801c832:	4770      	bx	lr

0801c834 <_ZN8touchgfx7muldivuEmmmRm>:
 801c834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c838:	4680      	mov	r8, r0
 801c83a:	460f      	mov	r7, r1
 801c83c:	4615      	mov	r5, r2
 801c83e:	461e      	mov	r6, r3
 801c840:	f7ff ffda 	bl	801c7f8 <_ZN8touchgfx4clzuEm>
 801c844:	b998      	cbnz	r0, 801c86e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801c846:	4608      	mov	r0, r1
 801c848:	f7ff ffd6 	bl	801c7f8 <_ZN8touchgfx4clzuEm>
 801c84c:	2800      	cmp	r0, #0
 801c84e:	dd08      	ble.n	801c862 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801c850:	4633      	mov	r3, r6
 801c852:	462a      	mov	r2, r5
 801c854:	4641      	mov	r1, r8
 801c856:	4638      	mov	r0, r7
 801c858:	f7ff ffec 	bl	801c834 <_ZN8touchgfx7muldivuEmmmRm>
 801c85c:	b003      	add	sp, #12
 801c85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c862:	f04f 33ff 	mov.w	r3, #4294967295
 801c866:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c86a:	6033      	str	r3, [r6, #0]
 801c86c:	e7f6      	b.n	801c85c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c86e:	fa31 f900 	lsrs.w	r9, r1, r0
 801c872:	fb01 f308 	mul.w	r3, r1, r8
 801c876:	d105      	bne.n	801c884 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801c878:	fbb3 f0f5 	udiv	r0, r3, r5
 801c87c:	fb05 3510 	mls	r5, r5, r0, r3
 801c880:	6035      	str	r5, [r6, #0]
 801c882:	e7eb      	b.n	801c85c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c884:	2301      	movs	r3, #1
 801c886:	fa08 fb00 	lsl.w	fp, r8, r0
 801c88a:	462a      	mov	r2, r5
 801c88c:	4641      	mov	r1, r8
 801c88e:	fa03 f000 	lsl.w	r0, r3, r0
 801c892:	4633      	mov	r3, r6
 801c894:	fbbb faf5 	udiv	sl, fp, r5
 801c898:	3801      	subs	r0, #1
 801c89a:	fb09 f40a 	mul.w	r4, r9, sl
 801c89e:	4038      	ands	r0, r7
 801c8a0:	f7ff ffc8 	bl	801c834 <_ZN8touchgfx7muldivuEmmmRm>
 801c8a4:	462a      	mov	r2, r5
 801c8a6:	4607      	mov	r7, r0
 801c8a8:	ab01      	add	r3, sp, #4
 801c8aa:	fb05 b11a 	mls	r1, r5, sl, fp
 801c8ae:	4648      	mov	r0, r9
 801c8b0:	f7ff ffc0 	bl	801c834 <_ZN8touchgfx7muldivuEmmmRm>
 801c8b4:	9b01      	ldr	r3, [sp, #4]
 801c8b6:	6832      	ldr	r2, [r6, #0]
 801c8b8:	441a      	add	r2, r3
 801c8ba:	fbb2 f3f5 	udiv	r3, r2, r5
 801c8be:	441c      	add	r4, r3
 801c8c0:	fb05 2513 	mls	r5, r5, r3, r2
 801c8c4:	443c      	add	r4, r7
 801c8c6:	4420      	add	r0, r4
 801c8c8:	e7da      	b.n	801c880 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801c8ca <_ZN8touchgfx6muldivElllRl>:
 801c8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	461e      	mov	r6, r3
 801c8d0:	bfba      	itte	lt
 801c8d2:	4240      	neglt	r0, r0
 801c8d4:	f04f 34ff 	movlt.w	r4, #4294967295
 801c8d8:	2401      	movge	r4, #1
 801c8da:	2900      	cmp	r1, #0
 801c8dc:	bfbc      	itt	lt
 801c8de:	4249      	neglt	r1, r1
 801c8e0:	4264      	neglt	r4, r4
 801c8e2:	2a00      	cmp	r2, #0
 801c8e4:	bfb6      	itet	lt
 801c8e6:	4265      	neglt	r5, r4
 801c8e8:	4625      	movge	r5, r4
 801c8ea:	4252      	neglt	r2, r2
 801c8ec:	4288      	cmp	r0, r1
 801c8ee:	bfc2      	ittt	gt
 801c8f0:	4603      	movgt	r3, r0
 801c8f2:	4608      	movgt	r0, r1
 801c8f4:	4619      	movgt	r1, r3
 801c8f6:	ab01      	add	r3, sp, #4
 801c8f8:	f7ff ff9c 	bl	801c834 <_ZN8touchgfx7muldivuEmmmRm>
 801c8fc:	9b01      	ldr	r3, [sp, #4]
 801c8fe:	4368      	muls	r0, r5
 801c900:	435c      	muls	r4, r3
 801c902:	6034      	str	r4, [r6, #0]
 801c904:	b002      	add	sp, #8
 801c906:	bd70      	pop	{r4, r5, r6, pc}

0801c908 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801c908:	2000      	movs	r0, #0
 801c90a:	4770      	bx	lr

0801c90c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801c90c:	2001      	movs	r0, #1
 801c90e:	4770      	bx	lr

0801c910 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c910:	2002      	movs	r0, #2
 801c912:	4770      	bx	lr

0801c914 <_ZN8touchgfx12GestureEventD1Ev>:
 801c914:	4770      	bx	lr

0801c916 <_ZN8touchgfx9DragEventD1Ev>:
 801c916:	4770      	bx	lr

0801c918 <_ZN8touchgfx10ClickEventD1Ev>:
 801c918:	4770      	bx	lr

0801c91a <_ZN8touchgfx10ClickEventD0Ev>:
 801c91a:	b510      	push	{r4, lr}
 801c91c:	4604      	mov	r4, r0
 801c91e:	210c      	movs	r1, #12
 801c920:	f00d ffa9 	bl	802a876 <_ZdlPvj>
 801c924:	4620      	mov	r0, r4
 801c926:	bd10      	pop	{r4, pc}

0801c928 <_ZN8touchgfx9DragEventD0Ev>:
 801c928:	b510      	push	{r4, lr}
 801c92a:	4604      	mov	r4, r0
 801c92c:	2110      	movs	r1, #16
 801c92e:	f00d ffa2 	bl	802a876 <_ZdlPvj>
 801c932:	4620      	mov	r0, r4
 801c934:	bd10      	pop	{r4, pc}

0801c936 <_ZN8touchgfx12GestureEventD0Ev>:
 801c936:	b510      	push	{r4, lr}
 801c938:	4604      	mov	r4, r0
 801c93a:	210c      	movs	r1, #12
 801c93c:	f00d ff9b 	bl	802a876 <_ZdlPvj>
 801c940:	4620      	mov	r0, r4
 801c942:	bd10      	pop	{r4, pc}

0801c944 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c944:	b530      	push	{r4, r5, lr}
 801c946:	460d      	mov	r5, r1
 801c948:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c94a:	b087      	sub	sp, #28
 801c94c:	4604      	mov	r4, r0
 801c94e:	b301      	cbz	r1, 801c992 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c950:	a801      	add	r0, sp, #4
 801c952:	f7ff feb3 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c956:	892a      	ldrh	r2, [r5, #8]
 801c958:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c95c:	7928      	ldrb	r0, [r5, #4]
 801c95e:	1ad2      	subs	r2, r2, r3
 801c960:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c962:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c966:	441a      	add	r2, r3
 801c968:	896b      	ldrh	r3, [r5, #10]
 801c96a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c96e:	f88d 0010 	strb.w	r0, [sp, #16]
 801c972:	1b5b      	subs	r3, r3, r5
 801c974:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c976:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c978:	442b      	add	r3, r5
 801c97a:	4d07      	ldr	r5, [pc, #28]	; (801c998 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c97c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c980:	a903      	add	r1, sp, #12
 801c982:	9503      	str	r5, [sp, #12]
 801c984:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c988:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c98c:	6803      	ldr	r3, [r0, #0]
 801c98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c990:	4798      	blx	r3
 801c992:	b007      	add	sp, #28
 801c994:	bd30      	pop	{r4, r5, pc}
 801c996:	bf00      	nop
 801c998:	0802efc0 	.word	0x0802efc0

0801c99c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c9a2:	b08a      	sub	sp, #40	; 0x28
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	460d      	mov	r5, r1
 801c9a8:	b113      	cbz	r3, 801c9b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c9aa:	790b      	ldrb	r3, [r1, #4]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d044      	beq.n	801ca3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c9b0:	f104 0804 	add.w	r8, r4, #4
 801c9b4:	a803      	add	r0, sp, #12
 801c9b6:	4641      	mov	r1, r8
 801c9b8:	f7ff fe80 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9bc:	792b      	ldrb	r3, [r5, #4]
 801c9be:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c9c2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c9c6:	b983      	cbnz	r3, 801c9ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c9c8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c9cc:	892a      	ldrh	r2, [r5, #8]
 801c9ce:	88e9      	ldrh	r1, [r5, #6]
 801c9d0:	4640      	mov	r0, r8
 801c9d2:	1b92      	subs	r2, r2, r6
 801c9d4:	9301      	str	r3, [sp, #4]
 801c9d6:	1bc9      	subs	r1, r1, r7
 801c9d8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c9dc:	b212      	sxth	r2, r2
 801c9de:	9300      	str	r3, [sp, #0]
 801c9e0:	b209      	sxth	r1, r1
 801c9e2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c9e6:	f7fa ffb3 	bl	8017950 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c9ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c9ec:	b329      	cbz	r1, 801ca3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c9ee:	a805      	add	r0, sp, #20
 801c9f0:	f7ff fe64 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c9f8:	792b      	ldrb	r3, [r5, #4]
 801c9fa:	a907      	add	r1, sp, #28
 801c9fc:	1abf      	subs	r7, r7, r2
 801c9fe:	88ea      	ldrh	r2, [r5, #6]
 801ca00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ca02:	4417      	add	r7, r2
 801ca04:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801ca06:	f88d 3020 	strb.w	r3, [sp, #32]
 801ca0a:	4417      	add	r7, r2
 801ca0c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ca10:	1ab6      	subs	r6, r6, r2
 801ca12:	892a      	ldrh	r2, [r5, #8]
 801ca14:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801ca18:	4416      	add	r6, r2
 801ca1a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ca1c:	4416      	add	r6, r2
 801ca1e:	4a08      	ldr	r2, [pc, #32]	; (801ca40 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801ca20:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801ca24:	2600      	movs	r6, #0
 801ca26:	9207      	str	r2, [sp, #28]
 801ca28:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801ca2c:	6803      	ldr	r3, [r0, #0]
 801ca2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca30:	4798      	blx	r3
 801ca32:	792b      	ldrb	r3, [r5, #4]
 801ca34:	b10b      	cbz	r3, 801ca3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801ca36:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801ca3a:	b00a      	add	sp, #40	; 0x28
 801ca3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca40:	0802ef98 	.word	0x0802ef98

0801ca44 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ca44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca48:	460c      	mov	r4, r1
 801ca4a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ca4c:	b088      	sub	sp, #32
 801ca4e:	4605      	mov	r5, r0
 801ca50:	2900      	cmp	r1, #0
 801ca52:	d06d      	beq.n	801cb30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801ca54:	4668      	mov	r0, sp
 801ca56:	f7ff fe31 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca5a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801ca5c:	88e3      	ldrh	r3, [r4, #6]
 801ca5e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801ca62:	440b      	add	r3, r1
 801ca64:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801ca68:	b21b      	sxth	r3, r3
 801ca6a:	4543      	cmp	r3, r8
 801ca6c:	db31      	blt.n	801cad2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ca6e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801ca72:	44c4      	add	ip, r8
 801ca74:	fa0f fc8c 	sxth.w	ip, ip
 801ca78:	4563      	cmp	r3, ip
 801ca7a:	da2a      	bge.n	801cad2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ca7c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801ca7e:	8926      	ldrh	r6, [r4, #8]
 801ca80:	4416      	add	r6, r2
 801ca82:	b236      	sxth	r6, r6
 801ca84:	42be      	cmp	r6, r7
 801ca86:	db24      	blt.n	801cad2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ca88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ca8c:	4438      	add	r0, r7
 801ca8e:	b200      	sxth	r0, r0
 801ca90:	4286      	cmp	r6, r0
 801ca92:	da1e      	bge.n	801cad2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801ca94:	8963      	ldrh	r3, [r4, #10]
 801ca96:	4419      	add	r1, r3
 801ca98:	b209      	sxth	r1, r1
 801ca9a:	4541      	cmp	r1, r8
 801ca9c:	db08      	blt.n	801cab0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801ca9e:	4561      	cmp	r1, ip
 801caa0:	da06      	bge.n	801cab0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801caa2:	89a3      	ldrh	r3, [r4, #12]
 801caa4:	441a      	add	r2, r3
 801caa6:	b212      	sxth	r2, r2
 801caa8:	42ba      	cmp	r2, r7
 801caaa:	db01      	blt.n	801cab0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801caac:	4282      	cmp	r2, r0
 801caae:	db10      	blt.n	801cad2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801cab0:	4b21      	ldr	r3, [pc, #132]	; (801cb38 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801cab2:	a904      	add	r1, sp, #16
 801cab4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cab6:	9304      	str	r3, [sp, #16]
 801cab8:	2302      	movs	r3, #2
 801caba:	f88d 3014 	strb.w	r3, [sp, #20]
 801cabe:	2300      	movs	r3, #0
 801cac0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cac4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801cac8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801cacc:	6803      	ldr	r3, [r0, #0]
 801cace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cad0:	4798      	blx	r3
 801cad2:	1d29      	adds	r1, r5, #4
 801cad4:	a802      	add	r0, sp, #8
 801cad6:	f7ff fdf1 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cada:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cade:	88e0      	ldrh	r0, [r4, #6]
 801cae0:	eba3 0808 	sub.w	r8, r3, r8
 801cae4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cae8:	7921      	ldrb	r1, [r4, #4]
 801caea:	fa1f f888 	uxth.w	r8, r8
 801caee:	1bdf      	subs	r7, r3, r7
 801caf0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801caf4:	b2bb      	uxth	r3, r7
 801caf6:	4440      	add	r0, r8
 801caf8:	8922      	ldrh	r2, [r4, #8]
 801cafa:	8967      	ldrh	r7, [r4, #10]
 801cafc:	4460      	add	r0, ip
 801cafe:	89a4      	ldrh	r4, [r4, #12]
 801cb00:	441a      	add	r2, r3
 801cb02:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801cb04:	44b8      	add	r8, r7
 801cb06:	4423      	add	r3, r4
 801cb08:	f8ad 0016 	strh.w	r0, [sp, #22]
 801cb0c:	4432      	add	r2, r6
 801cb0e:	44e0      	add	r8, ip
 801cb10:	4433      	add	r3, r6
 801cb12:	4c0a      	ldr	r4, [pc, #40]	; (801cb3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801cb14:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801cb16:	f88d 1014 	strb.w	r1, [sp, #20]
 801cb1a:	a904      	add	r1, sp, #16
 801cb1c:	9404      	str	r4, [sp, #16]
 801cb1e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801cb22:	f8ad 801a 	strh.w	r8, [sp, #26]
 801cb26:	f8ad 301c 	strh.w	r3, [sp, #28]
 801cb2a:	6803      	ldr	r3, [r0, #0]
 801cb2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb2e:	4798      	blx	r3
 801cb30:	b008      	add	sp, #32
 801cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb36:	bf00      	nop
 801cb38:	0802ef98 	.word	0x0802ef98
 801cb3c:	0802efac 	.word	0x0802efac

0801cb40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801cb40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cb42:	4604      	mov	r4, r0
 801cb44:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801cb48:	3201      	adds	r2, #1
 801cb4a:	d112      	bne.n	801cb72 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801cb4c:	2500      	movs	r5, #0
 801cb4e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cb52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cb56:	6803      	ldr	r3, [r0, #0]
 801cb58:	9500      	str	r5, [sp, #0]
 801cb5a:	466d      	mov	r5, sp
 801cb5c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cb60:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cb64:	4629      	mov	r1, r5
 801cb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb68:	4798      	blx	r3
 801cb6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801cb6e:	e884 0003 	stmia.w	r4, {r0, r1}
 801cb72:	4620      	mov	r0, r4
 801cb74:	b003      	add	sp, #12
 801cb76:	bd30      	pop	{r4, r5, pc}

0801cb78 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801cb78:	b513      	push	{r0, r1, r4, lr}
 801cb7a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801cb7e:	4604      	mov	r4, r0
 801cb80:	3301      	adds	r3, #1
 801cb82:	d109      	bne.n	801cb98 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801cb84:	4601      	mov	r1, r0
 801cb86:	4668      	mov	r0, sp
 801cb88:	f7ff fd98 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb8c:	f8bd 3000 	ldrh.w	r3, [sp]
 801cb90:	8423      	strh	r3, [r4, #32]
 801cb92:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cb96:	8463      	strh	r3, [r4, #34]	; 0x22
 801cb98:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801cb9c:	b002      	add	sp, #8
 801cb9e:	bd10      	pop	{r4, pc}

0801cba0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801cba0:	b513      	push	{r0, r1, r4, lr}
 801cba2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801cba6:	4604      	mov	r4, r0
 801cba8:	3301      	adds	r3, #1
 801cbaa:	d109      	bne.n	801cbc0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801cbac:	4601      	mov	r1, r0
 801cbae:	4668      	mov	r0, sp
 801cbb0:	f7ff fd84 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbb4:	f8bd 3000 	ldrh.w	r3, [sp]
 801cbb8:	8423      	strh	r3, [r4, #32]
 801cbba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cbbe:	8463      	strh	r3, [r4, #34]	; 0x22
 801cbc0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801cbc4:	b002      	add	sp, #8
 801cbc6:	bd10      	pop	{r4, pc}

0801cbc8 <_ZN8touchgfx6ScreenC1Ev>:
 801cbc8:	b570      	push	{r4, r5, r6, lr}
 801cbca:	4b17      	ldr	r3, [pc, #92]	; (801cc28 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801cbcc:	4605      	mov	r5, r0
 801cbce:	4a17      	ldr	r2, [pc, #92]	; (801cc2c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801cbd0:	2101      	movs	r1, #1
 801cbd2:	f845 3b04 	str.w	r3, [r5], #4
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	6042      	str	r2, [r0, #4]
 801cbda:	4604      	mov	r4, r0
 801cbdc:	8103      	strh	r3, [r0, #8]
 801cbde:	8143      	strh	r3, [r0, #10]
 801cbe0:	8183      	strh	r3, [r0, #12]
 801cbe2:	81c3      	strh	r3, [r0, #14]
 801cbe4:	8203      	strh	r3, [r0, #16]
 801cbe6:	8243      	strh	r3, [r0, #18]
 801cbe8:	8283      	strh	r3, [r0, #20]
 801cbea:	82c3      	strh	r3, [r0, #22]
 801cbec:	6203      	str	r3, [r0, #32]
 801cbee:	8483      	strh	r3, [r0, #36]	; 0x24
 801cbf0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801cbf2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801cbf6:	6343      	str	r3, [r0, #52]	; 0x34
 801cbf8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801cbfc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801cc00:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801cc04:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801cc08:	4b09      	ldr	r3, [pc, #36]	; (801cc30 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cc10:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801cc12:	4a08      	ldr	r2, [pc, #32]	; (801cc34 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801cc14:	f9b2 1000 	ldrsh.w	r1, [r2]
 801cc18:	4798      	blx	r3
 801cc1a:	6863      	ldr	r3, [r4, #4]
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	4631      	mov	r1, r6
 801cc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc22:	4798      	blx	r3
 801cc24:	4620      	mov	r0, r4
 801cc26:	bd70      	pop	{r4, r5, r6, pc}
 801cc28:	0802efd4 	.word	0x0802efd4
 801cc2c:	0802d814 	.word	0x0802d814
 801cc30:	2400b8ba 	.word	0x2400b8ba
 801cc34:	2400b8b8 	.word	0x2400b8b8

0801cc38 <_ZN8touchgfx6Screen4drawEv>:
 801cc38:	4b09      	ldr	r3, [pc, #36]	; (801cc60 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801cc3a:	b507      	push	{r0, r1, r2, lr}
 801cc3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cc40:	2100      	movs	r1, #0
 801cc42:	4b08      	ldr	r3, [pc, #32]	; (801cc64 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cc44:	9100      	str	r1, [sp, #0]
 801cc46:	4669      	mov	r1, sp
 801cc48:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cc4c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cc50:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cc54:	6803      	ldr	r3, [r0, #0]
 801cc56:	689b      	ldr	r3, [r3, #8]
 801cc58:	4798      	blx	r3
 801cc5a:	b003      	add	sp, #12
 801cc5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801cc60:	2400b8b8 	.word	0x2400b8b8
 801cc64:	2400b8ba 	.word	0x2400b8ba

0801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc6c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cc70:	b089      	sub	sp, #36	; 0x24
 801cc72:	4680      	mov	r8, r0
 801cc74:	460c      	mov	r4, r1
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	4615      	mov	r5, r2
 801cc7a:	dd0e      	ble.n	801cc9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cc7c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	dd0a      	ble.n	801cc9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cc84:	4628      	mov	r0, r5
 801cc86:	f7ff ff5b 	bl	801cb40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cc8a:	4621      	mov	r1, r4
 801cc8c:	f7fe fc2a 	bl	801b4e4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cc90:	69eb      	ldr	r3, [r5, #28]
 801cc92:	b928      	cbnz	r0, 801cca0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cc94:	461d      	mov	r5, r3
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d1f4      	bne.n	801cc84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cc9a:	b009      	add	sp, #36	; 0x24
 801cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cca0:	ae04      	add	r6, sp, #16
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	f000 80b5 	beq.w	801ce12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cca8:	682b      	ldr	r3, [r5, #0]
 801ccaa:	4629      	mov	r1, r5
 801ccac:	a802      	add	r0, sp, #8
 801ccae:	68db      	ldr	r3, [r3, #12]
 801ccb0:	4798      	blx	r3
 801ccb2:	4628      	mov	r0, r5
 801ccb4:	f7ff ff60 	bl	801cb78 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ccb8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801ccbc:	4407      	add	r7, r0
 801ccbe:	4628      	mov	r0, r5
 801ccc0:	f7ff ff6e 	bl	801cba0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ccc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ccc8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cccc:	b23f      	sxth	r7, r7
 801ccce:	4418      	add	r0, r3
 801ccd0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ccd4:	4621      	mov	r1, r4
 801ccd6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ccda:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ccde:	4630      	mov	r0, r6
 801cce0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cce4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cce8:	f7fa ff14 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801ccec:	4628      	mov	r0, r5
 801ccee:	f7ff ff27 	bl	801cb40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ccf2:	ab06      	add	r3, sp, #24
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ccfa:	e883 0003 	stmia.w	r3, {r0, r1}
 801ccfe:	4611      	mov	r1, r2
 801cd00:	4618      	mov	r0, r3
 801cd02:	f7fa ff07 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801cd06:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cd0a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cd0e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cd12:	4299      	cmp	r1, r3
 801cd14:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cd18:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cd1c:	d10b      	bne.n	801cd36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd1e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cd22:	4552      	cmp	r2, sl
 801cd24:	d107      	bne.n	801cd36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd26:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cd2a:	455a      	cmp	r2, fp
 801cd2c:	d103      	bne.n	801cd36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cd2e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cd32:	454a      	cmp	r2, r9
 801cd34:	d06d      	beq.n	801ce12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cd36:	f1bb 0f00 	cmp.w	fp, #0
 801cd3a:	dd65      	ble.n	801ce08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cd3c:	f1b9 0f00 	cmp.w	r9, #0
 801cd40:	dd62      	ble.n	801ce08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cd42:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cd46:	fa1f f08a 	uxth.w	r0, sl
 801cd4a:	4552      	cmp	r2, sl
 801cd4c:	9000      	str	r0, [sp, #0]
 801cd4e:	da12      	bge.n	801cd76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cd50:	9301      	str	r3, [sp, #4]
 801cd52:	9b00      	ldr	r3, [sp, #0]
 801cd54:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cd58:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cd5c:	1a9a      	subs	r2, r3, r2
 801cd5e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cd62:	4631      	mov	r1, r6
 801cd64:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cd68:	4640      	mov	r0, r8
 801cd6a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cd6e:	69ea      	ldr	r2, [r5, #28]
 801cd70:	f7ff ff7a 	bl	801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cd74:	9b01      	ldr	r3, [sp, #4]
 801cd76:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cd7a:	b29f      	uxth	r7, r3
 801cd7c:	429a      	cmp	r2, r3
 801cd7e:	da0d      	bge.n	801cd9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cd80:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cd84:	1aba      	subs	r2, r7, r2
 801cd86:	f8ad a012 	strh.w	sl, [sp, #18]
 801cd8a:	4631      	mov	r1, r6
 801cd8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cd90:	4640      	mov	r0, r8
 801cd92:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cd96:	69ea      	ldr	r2, [r5, #28]
 801cd98:	f7ff ff66 	bl	801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cd9c:	8822      	ldrh	r2, [r4, #0]
 801cd9e:	445f      	add	r7, fp
 801cda0:	88a3      	ldrh	r3, [r4, #4]
 801cda2:	b2bf      	uxth	r7, r7
 801cda4:	4413      	add	r3, r2
 801cda6:	b23a      	sxth	r2, r7
 801cda8:	b29b      	uxth	r3, r3
 801cdaa:	b219      	sxth	r1, r3
 801cdac:	4291      	cmp	r1, r2
 801cdae:	dd0d      	ble.n	801cdcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801cdb0:	1bdb      	subs	r3, r3, r7
 801cdb2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cdb6:	f8ad a012 	strh.w	sl, [sp, #18]
 801cdba:	4631      	mov	r1, r6
 801cdbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cdc0:	4640      	mov	r0, r8
 801cdc2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cdc6:	69ea      	ldr	r2, [r5, #28]
 801cdc8:	f7ff ff4e 	bl	801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cdcc:	88e2      	ldrh	r2, [r4, #6]
 801cdce:	8863      	ldrh	r3, [r4, #2]
 801cdd0:	4413      	add	r3, r2
 801cdd2:	9a00      	ldr	r2, [sp, #0]
 801cdd4:	444a      	add	r2, r9
 801cdd6:	b29b      	uxth	r3, r3
 801cdd8:	fa1f f982 	uxth.w	r9, r2
 801cddc:	b219      	sxth	r1, r3
 801cdde:	fa0f f289 	sxth.w	r2, r9
 801cde2:	428a      	cmp	r2, r1
 801cde4:	da15      	bge.n	801ce12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cde6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cdea:	eba3 0309 	sub.w	r3, r3, r9
 801cdee:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cdf2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cdf6:	4631      	mov	r1, r6
 801cdf8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cdfc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce00:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ce04:	69ea      	ldr	r2, [r5, #28]
 801ce06:	e001      	b.n	801ce0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801ce08:	69ea      	ldr	r2, [r5, #28]
 801ce0a:	4621      	mov	r1, r4
 801ce0c:	4640      	mov	r0, r8
 801ce0e:	f7ff ff2b 	bl	801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ce12:	4628      	mov	r0, r5
 801ce14:	f7ff fe94 	bl	801cb40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ce18:	6861      	ldr	r1, [r4, #4]
 801ce1a:	4602      	mov	r2, r0
 801ce1c:	4633      	mov	r3, r6
 801ce1e:	6820      	ldr	r0, [r4, #0]
 801ce20:	c303      	stmia	r3!, {r0, r1}
 801ce22:	4611      	mov	r1, r2
 801ce24:	4630      	mov	r0, r6
 801ce26:	f7fa fe75 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801ce2a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	f77f af33 	ble.w	801cc9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce34:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	f77f af2e 	ble.w	801cc9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ce3e:	4628      	mov	r0, r5
 801ce40:	f7ff fe9a 	bl	801cb78 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ce44:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ce48:	1a18      	subs	r0, r3, r0
 801ce4a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ce4e:	4628      	mov	r0, r5
 801ce50:	f7ff fea6 	bl	801cba0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ce54:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ce58:	4631      	mov	r1, r6
 801ce5a:	1a18      	subs	r0, r3, r0
 801ce5c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ce60:	4628      	mov	r0, r5
 801ce62:	682b      	ldr	r3, [r5, #0]
 801ce64:	689b      	ldr	r3, [r3, #8]
 801ce66:	4798      	blx	r3
 801ce68:	e717      	b.n	801cc9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ce6a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ce6a:	b570      	push	{r4, r5, r6, lr}
 801ce6c:	1d06      	adds	r6, r0, #4
 801ce6e:	b086      	sub	sp, #24
 801ce70:	460c      	mov	r4, r1
 801ce72:	2300      	movs	r3, #0
 801ce74:	4631      	mov	r1, r6
 801ce76:	4605      	mov	r5, r0
 801ce78:	a802      	add	r0, sp, #8
 801ce7a:	9301      	str	r3, [sp, #4]
 801ce7c:	f7ff fc1e 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ce80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ce84:	8822      	ldrh	r2, [r4, #0]
 801ce86:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ce8a:	1ad2      	subs	r2, r2, r3
 801ce8c:	8863      	ldrh	r3, [r4, #2]
 801ce8e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ce92:	1a5b      	subs	r3, r3, r1
 801ce94:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ce98:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ce9c:	aa01      	add	r2, sp, #4
 801ce9e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cea2:	4630      	mov	r0, r6
 801cea4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cea8:	a904      	add	r1, sp, #16
 801ceaa:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ceae:	f7fa ff09 	bl	8017cc4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ceb2:	9a01      	ldr	r2, [sp, #4]
 801ceb4:	b11a      	cbz	r2, 801cebe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ceb6:	4621      	mov	r1, r4
 801ceb8:	4628      	mov	r0, r5
 801ceba:	f7ff fed5 	bl	801cc68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cebe:	b006      	add	sp, #24
 801cec0:	bd70      	pop	{r4, r5, r6, pc}

0801cec2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cec2:	4602      	mov	r2, r0
 801cec4:	b530      	push	{r4, r5, lr}
 801cec6:	4604      	mov	r4, r0
 801cec8:	b085      	sub	sp, #20
 801ceca:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cece:	460d      	mov	r5, r1
 801ced0:	466b      	mov	r3, sp
 801ced2:	6851      	ldr	r1, [r2, #4]
 801ced4:	c303      	stmia	r3!, {r0, r1}
 801ced6:	4629      	mov	r1, r5
 801ced8:	4668      	mov	r0, sp
 801ceda:	f7fa fe1b 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 801cede:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cee2:	b12b      	cbz	r3, 801cef0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cee4:	4669      	mov	r1, sp
 801cee6:	4620      	mov	r0, r4
 801cee8:	f7ff ffbf 	bl	801ce6a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ceec:	b005      	add	sp, #20
 801ceee:	bd30      	pop	{r4, r5, pc}
 801cef0:	3404      	adds	r4, #4
 801cef2:	a802      	add	r0, sp, #8
 801cef4:	4621      	mov	r1, r4
 801cef6:	f7ff fbe1 	bl	801c6bc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cefa:	f8bd 3000 	ldrh.w	r3, [sp]
 801cefe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cf02:	4669      	mov	r1, sp
 801cf04:	4620      	mov	r0, r4
 801cf06:	1a9b      	subs	r3, r3, r2
 801cf08:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cf0c:	f8ad 3000 	strh.w	r3, [sp]
 801cf10:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cf14:	1a9b      	subs	r3, r3, r2
 801cf16:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cf1a:	f7fa fe9a 	bl	8017c52 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cf1e:	e7e5      	b.n	801ceec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cf20 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cf20:	460b      	mov	r3, r1
 801cf22:	680a      	ldr	r2, [r1, #0]
 801cf24:	1d01      	adds	r1, r0, #4
 801cf26:	6992      	ldr	r2, [r2, #24]
 801cf28:	4618      	mov	r0, r3
 801cf2a:	4710      	bx	r2

0801cf2c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cf2c:	4298      	cmp	r0, r3
 801cf2e:	d200      	bcs.n	801cf32 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cf30:	b913      	cbnz	r3, 801cf38 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cf32:	440a      	add	r2, r1
 801cf34:	b210      	sxth	r0, r2
 801cf36:	4770      	bx	lr
 801cf38:	ee07 0a90 	vmov	s15, r0
 801cf3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf40:	ee07 3a90 	vmov	s15, r3
 801cf44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf4c:	ee07 2a90 	vmov	s15, r2
 801cf50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cf54:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cf58:	ee07 1a90 	vmov	s15, r1
 801cf5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf60:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cf64:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cf68:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cf6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cf70:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cf74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf7c:	bfcc      	ite	gt
 801cf7e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cf82:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cf86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cf8a:	ee17 3a90 	vmov	r3, s15
 801cf8e:	b218      	sxth	r0, r3
 801cf90:	4770      	bx	lr

0801cf92 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801cf92:	4298      	cmp	r0, r3
 801cf94:	d200      	bcs.n	801cf98 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801cf96:	b913      	cbnz	r3, 801cf9e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801cf98:	440a      	add	r2, r1
 801cf9a:	b210      	sxth	r0, r2
 801cf9c:	4770      	bx	lr
 801cf9e:	ee07 2a90 	vmov	s15, r2
 801cfa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cfa6:	ee07 0a90 	vmov	s15, r0
 801cfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cfb2:	ee07 3a10 	vmov	s14, r3
 801cfb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801cfba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cfbe:	ee07 1a90 	vmov	s15, r1
 801cfc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cfc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cfca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cfce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfd6:	bfcc      	ite	gt
 801cfd8:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cfdc:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cfe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cfe4:	ee17 3a90 	vmov	r3, s15
 801cfe8:	b218      	sxth	r0, r3
 801cfea:	4770      	bx	lr

0801cfec <_ZN8touchgfx12TextProviderC1Ev>:
 801cfec:	b538      	push	{r3, r4, r5, lr}
 801cfee:	2500      	movs	r5, #0
 801cff0:	2302      	movs	r3, #2
 801cff2:	4604      	mov	r4, r0
 801cff4:	220e      	movs	r2, #14
 801cff6:	7403      	strb	r3, [r0, #16]
 801cff8:	4629      	mov	r1, r5
 801cffa:	6145      	str	r5, [r0, #20]
 801cffc:	7605      	strb	r5, [r0, #24]
 801cffe:	83c5      	strh	r5, [r0, #30]
 801d000:	8405      	strh	r5, [r0, #32]
 801d002:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d004:	8705      	strh	r5, [r0, #56]	; 0x38
 801d006:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d008:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d00c:	e9c0 5500 	strd	r5, r5, [r0]
 801d010:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d014:	304c      	adds	r0, #76	; 0x4c
 801d016:	f00d fe62 	bl	802acde <memset>
 801d01a:	2301      	movs	r3, #1
 801d01c:	4620      	mov	r0, r4
 801d01e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d022:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d026:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d02a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d02e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d032:	f7ec ffe1 	bl	8009ff8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d036:	4620      	mov	r0, r4
 801d038:	bd38      	pop	{r3, r4, r5, pc}

0801d03a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d03a:	b530      	push	{r4, r5, lr}
 801d03c:	2500      	movs	r5, #0
 801d03e:	2401      	movs	r4, #1
 801d040:	6843      	ldr	r3, [r0, #4]
 801d042:	b913      	cbnz	r3, 801d04a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d044:	6803      	ldr	r3, [r0, #0]
 801d046:	b313      	cbz	r3, 801d08e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d048:	6043      	str	r3, [r0, #4]
 801d04a:	7e03      	ldrb	r3, [r0, #24]
 801d04c:	b143      	cbz	r3, 801d060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d04e:	6943      	ldr	r3, [r0, #20]
 801d050:	b12b      	cbz	r3, 801d05e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d052:	881a      	ldrh	r2, [r3, #0]
 801d054:	b11a      	cbz	r2, 801d05e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d056:	1c9a      	adds	r2, r3, #2
 801d058:	6142      	str	r2, [r0, #20]
 801d05a:	8818      	ldrh	r0, [r3, #0]
 801d05c:	bd30      	pop	{r4, r5, pc}
 801d05e:	7605      	strb	r5, [r0, #24]
 801d060:	6843      	ldr	r3, [r0, #4]
 801d062:	8819      	ldrh	r1, [r3, #0]
 801d064:	b199      	cbz	r1, 801d08e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d066:	1c9a      	adds	r2, r3, #2
 801d068:	2902      	cmp	r1, #2
 801d06a:	6042      	str	r2, [r0, #4]
 801d06c:	d1f5      	bne.n	801d05a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d06e:	7c03      	ldrb	r3, [r0, #16]
 801d070:	2b01      	cmp	r3, #1
 801d072:	d8e5      	bhi.n	801d040 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d074:	1c5a      	adds	r2, r3, #1
 801d076:	3302      	adds	r3, #2
 801d078:	7402      	strb	r2, [r0, #16]
 801d07a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d07e:	6143      	str	r3, [r0, #20]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d0dd      	beq.n	801d040 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d084:	881b      	ldrh	r3, [r3, #0]
 801d086:	2b00      	cmp	r3, #0
 801d088:	d0da      	beq.n	801d040 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d08a:	7604      	strb	r4, [r0, #24]
 801d08c:	e7d8      	b.n	801d040 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d08e:	2000      	movs	r0, #0
 801d090:	e7e4      	b.n	801d05c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d092 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d092:	b430      	push	{r4, r5}
 801d094:	6815      	ldr	r5, [r2, #0]
 801d096:	6085      	str	r5, [r0, #8]
 801d098:	6852      	ldr	r2, [r2, #4]
 801d09a:	6443      	str	r3, [r0, #68]	; 0x44
 801d09c:	60c2      	str	r2, [r0, #12]
 801d09e:	2200      	movs	r2, #0
 801d0a0:	9b02      	ldr	r3, [sp, #8]
 801d0a2:	7402      	strb	r2, [r0, #16]
 801d0a4:	6001      	str	r1, [r0, #0]
 801d0a6:	6483      	str	r3, [r0, #72]	; 0x48
 801d0a8:	6042      	str	r2, [r0, #4]
 801d0aa:	6142      	str	r2, [r0, #20]
 801d0ac:	7602      	strb	r2, [r0, #24]
 801d0ae:	8702      	strh	r2, [r0, #56]	; 0x38
 801d0b0:	8402      	strh	r2, [r0, #32]
 801d0b2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801d0b6:	bc30      	pop	{r4, r5}
 801d0b8:	f7ec bf9e 	b.w	8009ff8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d0bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0be:	4605      	mov	r5, r0
 801d0c0:	4608      	mov	r0, r1
 801d0c2:	b1f1      	cbz	r1, 801d102 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d0c4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d0c8:	460b      	mov	r3, r1
 801d0ca:	f101 0708 	add.w	r7, r1, #8
 801d0ce:	4622      	mov	r2, r4
 801d0d0:	6818      	ldr	r0, [r3, #0]
 801d0d2:	3308      	adds	r3, #8
 801d0d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d0d8:	4626      	mov	r6, r4
 801d0da:	42bb      	cmp	r3, r7
 801d0dc:	c603      	stmia	r6!, {r0, r1}
 801d0de:	4634      	mov	r4, r6
 801d0e0:	d1f6      	bne.n	801d0d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d0e2:	6818      	ldr	r0, [r3, #0]
 801d0e4:	6030      	str	r0, [r6, #0]
 801d0e6:	4610      	mov	r0, r2
 801d0e8:	889b      	ldrh	r3, [r3, #4]
 801d0ea:	80b3      	strh	r3, [r6, #4]
 801d0ec:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d0f0:	015b      	lsls	r3, r3, #5
 801d0f2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d0f6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d0fa:	430b      	orrs	r3, r1
 801d0fc:	425b      	negs	r3, r3
 801d0fe:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d102:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d104 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d104:	b538      	push	{r3, r4, r5, lr}
 801d106:	460c      	mov	r4, r1
 801d108:	6811      	ldr	r1, [r2, #0]
 801d10a:	4610      	mov	r0, r2
 801d10c:	68cd      	ldr	r5, [r1, #12]
 801d10e:	4619      	mov	r1, r3
 801d110:	47a8      	blx	r5
 801d112:	2800      	cmp	r0, #0
 801d114:	bf08      	it	eq
 801d116:	4620      	moveq	r0, r4
 801d118:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d11c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d11e:	4604      	mov	r4, r0
 801d120:	4615      	mov	r5, r2
 801d122:	4608      	mov	r0, r1
 801d124:	b93a      	cbnz	r2, 801d136 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d126:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d12a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d12e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d132:	4628      	mov	r0, r5
 801d134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d136:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d13a:	8893      	ldrh	r3, [r2, #4]
 801d13c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d140:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d144:	79ee      	ldrb	r6, [r5, #7]
 801d146:	4316      	orrs	r6, r2
 801d148:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801d14c:	189a      	adds	r2, r3, r2
 801d14e:	b2b7      	uxth	r7, r6
 801d150:	b291      	uxth	r1, r2
 801d152:	291d      	cmp	r1, #29
 801d154:	f200 8084 	bhi.w	801d260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d158:	2201      	movs	r2, #1
 801d15a:	10f6      	asrs	r6, r6, #3
 801d15c:	408a      	lsls	r2, r1
 801d15e:	4978      	ldr	r1, [pc, #480]	; (801d340 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d160:	420a      	tst	r2, r1
 801d162:	d12e      	bne.n	801d1c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d164:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d168:	d07a      	beq.n	801d260 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d16a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d16e:	462b      	mov	r3, r5
 801d170:	f105 0e08 	add.w	lr, r5, #8
 801d174:	4615      	mov	r5, r2
 801d176:	6818      	ldr	r0, [r3, #0]
 801d178:	3308      	adds	r3, #8
 801d17a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d17e:	4694      	mov	ip, r2
 801d180:	4573      	cmp	r3, lr
 801d182:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d186:	4662      	mov	r2, ip
 801d188:	d1f5      	bne.n	801d176 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d18a:	6818      	ldr	r0, [r3, #0]
 801d18c:	f8cc 0000 	str.w	r0, [ip]
 801d190:	889b      	ldrh	r3, [r3, #4]
 801d192:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d196:	b2b3      	uxth	r3, r6
 801d198:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d19c:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d1a0:	1aca      	subs	r2, r1, r3
 801d1a2:	1bcf      	subs	r7, r1, r7
 801d1a4:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d1a8:	b292      	uxth	r2, r2
 801d1aa:	1afb      	subs	r3, r7, r3
 801d1ac:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d1b0:	10d2      	asrs	r2, r2, #3
 801d1b2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d1b6:	4302      	orrs	r2, r0
 801d1b8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d1bc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d1c0:	e7b7      	b.n	801d132 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d1c2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d1c4:	b92b      	cbnz	r3, 801d1d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d1c6:	4b5f      	ldr	r3, [pc, #380]	; (801d344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d1c8:	21c0      	movs	r1, #192	; 0xc0
 801d1ca:	4a5f      	ldr	r2, [pc, #380]	; (801d348 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d1cc:	485f      	ldr	r0, [pc, #380]	; (801d34c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d1ce:	f00d fb81 	bl	802a8d4 <__assert_func>
 801d1d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d1d4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d1d8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d1da:	f640 6333 	movw	r3, #3635	; 0xe33
 801d1de:	4299      	cmp	r1, r3
 801d1e0:	d110      	bne.n	801d204 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d1e2:	6803      	ldr	r3, [r0, #0]
 801d1e4:	68db      	ldr	r3, [r3, #12]
 801d1e6:	4798      	blx	r3
 801d1e8:	7b41      	ldrb	r1, [r0, #13]
 801d1ea:	00cb      	lsls	r3, r1, #3
 801d1ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d1f0:	7a03      	ldrb	r3, [r0, #8]
 801d1f2:	0648      	lsls	r0, r1, #25
 801d1f4:	ea43 0302 	orr.w	r3, r3, r2
 801d1f8:	bf44      	itt	mi
 801d1fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1fe:	b21b      	sxthmi	r3, r3
 801d200:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d204:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d208:	462a      	mov	r2, r5
 801d20a:	f105 0c08 	add.w	ip, r5, #8
 801d20e:	443b      	add	r3, r7
 801d210:	4433      	add	r3, r6
 801d212:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d216:	b29b      	uxth	r3, r3
 801d218:	4635      	mov	r5, r6
 801d21a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d21e:	6810      	ldr	r0, [r2, #0]
 801d220:	3208      	adds	r2, #8
 801d222:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d226:	4637      	mov	r7, r6
 801d228:	4562      	cmp	r2, ip
 801d22a:	c703      	stmia	r7!, {r0, r1}
 801d22c:	463e      	mov	r6, r7
 801d22e:	d1f6      	bne.n	801d21e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d230:	6810      	ldr	r0, [r2, #0]
 801d232:	6038      	str	r0, [r7, #0]
 801d234:	8892      	ldrh	r2, [r2, #4]
 801d236:	80ba      	strh	r2, [r7, #4]
 801d238:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d23c:	10db      	asrs	r3, r3, #3
 801d23e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d246:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d24a:	4313      	orrs	r3, r2
 801d24c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d250:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d254:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d258:	1a9b      	subs	r3, r3, r2
 801d25a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d25e:	e768      	b.n	801d132 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d260:	f023 0204 	bic.w	r2, r3, #4
 801d264:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d268:	428a      	cmp	r2, r1
 801d26a:	d003      	beq.n	801d274 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d26c:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d270:	4293      	cmp	r3, r2
 801d272:	d120      	bne.n	801d2b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d274:	3b01      	subs	r3, #1
 801d276:	4602      	mov	r2, r0
 801d278:	4629      	mov	r1, r5
 801d27a:	4620      	mov	r0, r4
 801d27c:	b29b      	uxth	r3, r3
 801d27e:	f7ff ff41 	bl	801d104 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d282:	7b41      	ldrb	r1, [r0, #13]
 801d284:	00cb      	lsls	r3, r1, #3
 801d286:	0649      	lsls	r1, r1, #25
 801d288:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d28c:	7a03      	ldrb	r3, [r0, #8]
 801d28e:	ea43 0302 	orr.w	r3, r3, r2
 801d292:	bf44      	itt	mi
 801d294:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d298:	b21b      	sxthmi	r3, r3
 801d29a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d29e:	7b6b      	ldrb	r3, [r5, #13]
 801d2a0:	7aaa      	ldrb	r2, [r5, #10]
 801d2a2:	005b      	lsls	r3, r3, #1
 801d2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2a8:	4313      	orrs	r3, r2
 801d2aa:	115a      	asrs	r2, r3, #5
 801d2ac:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d2b0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d2b4:	e035      	b.n	801d322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d2b6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d2ba:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d2be:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d2c2:	7a2a      	ldrb	r2, [r5, #8]
 801d2c4:	ea42 0201 	orr.w	r2, r2, r1
 801d2c8:	f640 6109 	movw	r1, #3593	; 0xe09
 801d2cc:	bf1c      	itt	ne
 801d2ce:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d2d2:	b212      	sxthne	r2, r2
 801d2d4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d2d8:	f023 0210 	bic.w	r2, r3, #16
 801d2dc:	428a      	cmp	r2, r1
 801d2de:	d003      	beq.n	801d2e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d2e0:	f640 6213 	movw	r2, #3603	; 0xe13
 801d2e4:	4293      	cmp	r3, r2
 801d2e6:	d129      	bne.n	801d33c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d2e8:	7b6e      	ldrb	r6, [r5, #13]
 801d2ea:	4629      	mov	r1, r5
 801d2ec:	0076      	lsls	r6, r6, #1
 801d2ee:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d2f2:	7aae      	ldrb	r6, [r5, #10]
 801d2f4:	4316      	orrs	r6, r2
 801d2f6:	f640 6213 	movw	r2, #3603	; 0xe13
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	4602      	mov	r2, r0
 801d2fe:	4620      	mov	r0, r4
 801d300:	bf16      	itet	ne
 801d302:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d306:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d30a:	b29b      	uxthne	r3, r3
 801d30c:	f7ff fefa 	bl	801d104 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d310:	7b43      	ldrb	r3, [r0, #13]
 801d312:	7a82      	ldrb	r2, [r0, #10]
 801d314:	005b      	lsls	r3, r3, #1
 801d316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d31a:	4313      	orrs	r3, r2
 801d31c:	1af6      	subs	r6, r6, r3
 801d31e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d322:	7b69      	ldrb	r1, [r5, #13]
 801d324:	00cb      	lsls	r3, r1, #3
 801d326:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d32a:	7a2b      	ldrb	r3, [r5, #8]
 801d32c:	4313      	orrs	r3, r2
 801d32e:	064a      	lsls	r2, r1, #25
 801d330:	bf44      	itt	mi
 801d332:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d336:	b21b      	sxthmi	r3, r3
 801d338:	1bdb      	subs	r3, r3, r7
 801d33a:	e73f      	b.n	801d1bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d33c:	2300      	movs	r3, #0
 801d33e:	e7b7      	b.n	801d2b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d340:	3fc00079 	.word	0x3fc00079
 801d344:	0802f000 	.word	0x0802f000
 801d348:	0802f272 	.word	0x0802f272
 801d34c:	0802f009 	.word	0x0802f009

0801d350 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d354:	4604      	mov	r4, r0
 801d356:	b942      	cbnz	r2, 801d36a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d35c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d360:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d364:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d368:	e046      	b.n	801d3f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d36a:	7b51      	ldrb	r1, [r2, #13]
 801d36c:	8893      	ldrh	r3, [r2, #4]
 801d36e:	010f      	lsls	r7, r1, #4
 801d370:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d374:	79d7      	ldrb	r7, [r2, #7]
 801d376:	4307      	orrs	r7, r0
 801d378:	2f04      	cmp	r7, #4
 801d37a:	b2bd      	uxth	r5, r7
 801d37c:	bfcc      	ite	gt
 801d37e:	08bf      	lsrgt	r7, r7, #2
 801d380:	2701      	movle	r7, #1
 801d382:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d386:	f200 80ab 	bhi.w	801d4e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d38a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d38e:	4283      	cmp	r3, r0
 801d390:	d216      	bcs.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d392:	f240 605b 	movw	r0, #1627	; 0x65b
 801d396:	4283      	cmp	r3, r0
 801d398:	d859      	bhi.n	801d44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d39a:	f240 6057 	movw	r0, #1623	; 0x657
 801d39e:	4283      	cmp	r3, r0
 801d3a0:	d20e      	bcs.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d3a2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d3a6:	d24a      	bcs.n	801d43e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d3a8:	f240 604e 	movw	r0, #1614	; 0x64e
 801d3ac:	4283      	cmp	r3, r0
 801d3ae:	d207      	bcs.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d3b0:	f240 601a 	movw	r0, #1562	; 0x61a
 801d3b4:	4283      	cmp	r3, r0
 801d3b6:	d02a      	beq.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d3b8:	d821      	bhi.n	801d3fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d3ba:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d3be:	d35b      	bcc.n	801d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d3c0:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d3c4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d3c8:	f040 80d0 	bne.w	801d56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d3cc:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d3d0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d3d4:	f040 80ca 	bne.w	801d56c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801d3d8:	00cb      	lsls	r3, r1, #3
 801d3da:	0649      	lsls	r1, r1, #25
 801d3dc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d3e0:	7a13      	ldrb	r3, [r2, #8]
 801d3e2:	ea43 0300 	orr.w	r3, r3, r0
 801d3e6:	bf44      	itt	mi
 801d3e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d3ec:	b21b      	sxthmi	r3, r3
 801d3ee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d3f2:	1b5d      	subs	r5, r3, r5
 801d3f4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d3f8:	4610      	mov	r0, r2
 801d3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3fe:	f240 604b 	movw	r0, #1611	; 0x64b
 801d402:	4283      	cmp	r3, r0
 801d404:	d338      	bcc.n	801d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d406:	f240 604c 	movw	r0, #1612	; 0x64c
 801d40a:	4283      	cmp	r3, r0
 801d40c:	d9d8      	bls.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d40e:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d412:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d416:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d41a:	f040 80f2 	bne.w	801d602 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d41e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d422:	f040 80ee 	bne.w	801d602 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801d426:	00cb      	lsls	r3, r1, #3
 801d428:	064e      	lsls	r6, r1, #25
 801d42a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d42e:	7a13      	ldrb	r3, [r2, #8]
 801d430:	ea43 0300 	orr.w	r3, r3, r0
 801d434:	bf44      	itt	mi
 801d436:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d43a:	b21b      	sxthmi	r3, r3
 801d43c:	e7d9      	b.n	801d3f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801d43e:	f240 6054 	movw	r0, #1620	; 0x654
 801d442:	4283      	cmp	r3, r0
 801d444:	d8e3      	bhi.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d446:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d44a:	d9e0      	bls.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d44c:	e7b8      	b.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d44e:	f240 6074 	movw	r0, #1652	; 0x674
 801d452:	4283      	cmp	r3, r0
 801d454:	d0b4      	beq.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d456:	d82d      	bhi.n	801d4b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801d458:	f240 605e 	movw	r0, #1630	; 0x65e
 801d45c:	4283      	cmp	r3, r0
 801d45e:	d804      	bhi.n	801d46a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801d460:	f240 605d 	movw	r0, #1629	; 0x65d
 801d464:	4283      	cmp	r3, r0
 801d466:	d3d2      	bcc.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d468:	e7aa      	b.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d46a:	f240 605f 	movw	r0, #1631	; 0x65f
 801d46e:	4283      	cmp	r3, r0
 801d470:	d0cd      	beq.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d472:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d476:	d0a3      	beq.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d478:	00cb      	lsls	r3, r1, #3
 801d47a:	0649      	lsls	r1, r1, #25
 801d47c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d480:	7a13      	ldrb	r3, [r2, #8]
 801d482:	ea43 0300 	orr.w	r3, r3, r0
 801d486:	bf44      	itt	mi
 801d488:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d48c:	b21b      	sxthmi	r3, r3
 801d48e:	1b5d      	subs	r5, r3, r5
 801d490:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d494:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d498:	7b53      	ldrb	r3, [r2, #13]
 801d49a:	015b      	lsls	r3, r3, #5
 801d49c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d4a0:	7993      	ldrb	r3, [r2, #6]
 801d4a2:	430b      	orrs	r3, r1
 801d4a4:	2105      	movs	r1, #5
 801d4a6:	005b      	lsls	r3, r3, #1
 801d4a8:	fb93 f3f1 	sdiv	r3, r3, r1
 801d4ac:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d4b0:	440b      	add	r3, r1
 801d4b2:	e757      	b.n	801d364 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d4b4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d4b8:	4283      	cmp	r3, r0
 801d4ba:	d809      	bhi.n	801d4d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801d4bc:	f240 60df 	movw	r0, #1759	; 0x6df
 801d4c0:	4283      	cmp	r3, r0
 801d4c2:	f4bf af7d 	bcs.w	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4c6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d4ca:	2b05      	cmp	r3, #5
 801d4cc:	d8d4      	bhi.n	801d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d4ce:	e777      	b.n	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d4d0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d4d4:	4283      	cmp	r3, r0
 801d4d6:	d09a      	beq.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4d8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d4dc:	4283      	cmp	r3, r0
 801d4de:	e7ca      	b.n	801d476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801d4e0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d4e4:	d22b      	bcs.n	801d53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801d4e6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d4ea:	4283      	cmp	r3, r0
 801d4ec:	d28f      	bcs.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d4ee:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d4f2:	4283      	cmp	r3, r0
 801d4f4:	d816      	bhi.n	801d524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801d4f6:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d4fa:	4283      	cmp	r3, r0
 801d4fc:	f4bf af60 	bcs.w	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d500:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d504:	4283      	cmp	r3, r0
 801d506:	d80a      	bhi.n	801d51e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801d508:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d50c:	4283      	cmp	r3, r0
 801d50e:	f4bf af57 	bcs.w	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d512:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d516:	4283      	cmp	r3, r0
 801d518:	f43f af79 	beq.w	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d51c:	e7ac      	b.n	801d478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d51e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d522:	e7f8      	b.n	801d516 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801d524:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d528:	4283      	cmp	r3, r0
 801d52a:	d802      	bhi.n	801d532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801d52c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d530:	e798      	b.n	801d464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801d532:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d536:	4283      	cmp	r3, r0
 801d538:	f47f af42 	bne.w	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d53c:	e767      	b.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d53e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d542:	4283      	cmp	r3, r0
 801d544:	f43f af63 	beq.w	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d548:	d802      	bhi.n	801d550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801d54a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d54e:	e7f2      	b.n	801d536 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801d550:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d554:	4283      	cmp	r3, r0
 801d556:	d805      	bhi.n	801d564 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801d558:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d55c:	4283      	cmp	r3, r0
 801d55e:	f4ff af2f 	bcc.w	801d3c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d562:	e754      	b.n	801d40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d564:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d568:	4283      	cmp	r3, r0
 801d56a:	e7af      	b.n	801d4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801d56c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d570:	4617      	mov	r7, r2
 801d572:	f102 0808 	add.w	r8, r2, #8
 801d576:	4666      	mov	r6, ip
 801d578:	6838      	ldr	r0, [r7, #0]
 801d57a:	3708      	adds	r7, #8
 801d57c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d580:	46e6      	mov	lr, ip
 801d582:	4547      	cmp	r7, r8
 801d584:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d588:	46f4      	mov	ip, lr
 801d58a:	d1f5      	bne.n	801d578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801d58c:	6838      	ldr	r0, [r7, #0]
 801d58e:	f8ce 0000 	str.w	r0, [lr]
 801d592:	88b9      	ldrh	r1, [r7, #4]
 801d594:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d598:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d59c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d5a0:	d009      	beq.n	801d5b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d5a2:	7b51      	ldrb	r1, [r2, #13]
 801d5a4:	7992      	ldrb	r2, [r2, #6]
 801d5a6:	0149      	lsls	r1, r1, #5
 801d5a8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d5ac:	4311      	orrs	r1, r2
 801d5ae:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d5b2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d5b6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d5ba:	d00d      	beq.n	801d5d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801d5bc:	442b      	add	r3, r5
 801d5be:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d5c2:	b29b      	uxth	r3, r3
 801d5c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d5c8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d5cc:	10db      	asrs	r3, r3, #3
 801d5ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d5d2:	4313      	orrs	r3, r2
 801d5d4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d5d8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d5dc:	00cb      	lsls	r3, r1, #3
 801d5de:	064f      	lsls	r7, r1, #25
 801d5e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d5e4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d5e8:	ea43 0302 	orr.w	r3, r3, r2
 801d5ec:	bf44      	itt	mi
 801d5ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d5f2:	b21b      	sxthmi	r3, r3
 801d5f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d5f8:	1b5d      	subs	r5, r3, r5
 801d5fa:	4632      	mov	r2, r6
 801d5fc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d600:	e6fa      	b.n	801d3f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d602:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801d606:	4694      	mov	ip, r2
 801d608:	f102 0908 	add.w	r9, r2, #8
 801d60c:	4676      	mov	r6, lr
 801d60e:	f8dc 0000 	ldr.w	r0, [ip]
 801d612:	f10c 0c08 	add.w	ip, ip, #8
 801d616:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801d61a:	46f0      	mov	r8, lr
 801d61c:	45cc      	cmp	ip, r9
 801d61e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d622:	46c6      	mov	lr, r8
 801d624:	d1f3      	bne.n	801d60e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801d626:	f8dc 0000 	ldr.w	r0, [ip]
 801d62a:	f8c8 0000 	str.w	r0, [r8]
 801d62e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801d632:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d636:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d63a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d63e:	d009      	beq.n	801d654 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801d640:	7b51      	ldrb	r1, [r2, #13]
 801d642:	7992      	ldrb	r2, [r2, #6]
 801d644:	0149      	lsls	r1, r1, #5
 801d646:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d64a:	4311      	orrs	r1, r2
 801d64c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d650:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d654:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d658:	d00d      	beq.n	801d676 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801d65a:	1bdb      	subs	r3, r3, r7
 801d65c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d660:	b29b      	uxth	r3, r3
 801d662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d666:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d66a:	10db      	asrs	r3, r3, #3
 801d66c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d670:	4313      	orrs	r3, r2
 801d672:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d676:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d67a:	00cb      	lsls	r3, r1, #3
 801d67c:	0648      	lsls	r0, r1, #25
 801d67e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d682:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d686:	ea43 0302 	orr.w	r3, r3, r2
 801d68a:	bf44      	itt	mi
 801d68c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d690:	b21b      	sxthmi	r3, r3
 801d692:	e7b1      	b.n	801d5f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801d694 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d698:	461e      	mov	r6, r3
 801d69a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d69c:	4604      	mov	r4, r0
 801d69e:	4617      	mov	r7, r2
 801d6a0:	b92b      	cbnz	r3, 801d6ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801d6a2:	4b25      	ldr	r3, [pc, #148]	; (801d738 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801d6a4:	21c0      	movs	r1, #192	; 0xc0
 801d6a6:	4a25      	ldr	r2, [pc, #148]	; (801d73c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801d6a8:	4825      	ldr	r0, [pc, #148]	; (801d740 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801d6aa:	f00d f913 	bl	802a8d4 <__assert_func>
 801d6ae:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d6b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d6b4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d6b8:	f7ec fbf8 	bl	8009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d6bc:	4605      	mov	r5, r0
 801d6be:	b918      	cbnz	r0, 801d6c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801d6c0:	6030      	str	r0, [r6, #0]
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	4601      	mov	r1, r0
 801d6cc:	4638      	mov	r0, r7
 801d6ce:	68db      	ldr	r3, [r3, #12]
 801d6d0:	4798      	blx	r3
 801d6d2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d6d6:	4602      	mov	r2, r0
 801d6d8:	6030      	str	r0, [r6, #0]
 801d6da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d6de:	d213      	bcs.n	801d708 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801d6e0:	4643      	mov	r3, r8
 801d6e2:	4639      	mov	r1, r7
 801d6e4:	4620      	mov	r0, r4
 801d6e6:	f7ff fe33 	bl	801d350 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d6ea:	6030      	str	r0, [r6, #0]
 801d6ec:	6833      	ldr	r3, [r6, #0]
 801d6ee:	b143      	cbz	r3, 801d702 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801d6f0:	7b5a      	ldrb	r2, [r3, #13]
 801d6f2:	7a9b      	ldrb	r3, [r3, #10]
 801d6f4:	0052      	lsls	r2, r2, #1
 801d6f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d6fa:	4313      	orrs	r3, r2
 801d6fc:	bf0c      	ite	eq
 801d6fe:	2301      	moveq	r3, #1
 801d700:	2300      	movne	r3, #0
 801d702:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d706:	e7dc      	b.n	801d6c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801d708:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d70c:	b29b      	uxth	r3, r3
 801d70e:	2b7f      	cmp	r3, #127	; 0x7f
 801d710:	d804      	bhi.n	801d71c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801d712:	4639      	mov	r1, r7
 801d714:	4620      	mov	r0, r4
 801d716:	f7ff fd01 	bl	801d11c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d71a:	e7e6      	b.n	801d6ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d71c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d720:	2b00      	cmp	r3, #0
 801d722:	d0e3      	beq.n	801d6ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d724:	f640 1302 	movw	r3, #2306	; 0x902
 801d728:	429d      	cmp	r5, r3
 801d72a:	d1df      	bne.n	801d6ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801d72c:	4601      	mov	r1, r0
 801d72e:	4620      	mov	r0, r4
 801d730:	f7ff fcc4 	bl	801d0bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d734:	e7d9      	b.n	801d6ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801d736:	bf00      	nop
 801d738:	0802f000 	.word	0x0802f000
 801d73c:	0802f272 	.word	0x0802f272
 801d740:	0802f009 	.word	0x0802f009

0801d744 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d748:	461e      	mov	r6, r3
 801d74a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801d74c:	4604      	mov	r4, r0
 801d74e:	4617      	mov	r7, r2
 801d750:	b92b      	cbnz	r3, 801d75e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801d752:	4b26      	ldr	r3, [pc, #152]	; (801d7ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801d754:	21c0      	movs	r1, #192	; 0xc0
 801d756:	4a26      	ldr	r2, [pc, #152]	; (801d7f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801d758:	4826      	ldr	r0, [pc, #152]	; (801d7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801d75a:	f00d f8bb 	bl	802a8d4 <__assert_func>
 801d75e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d760:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d764:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d768:	f7ec fba0 	bl	8009eac <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d76c:	4605      	mov	r5, r0
 801d76e:	b918      	cbnz	r0, 801d778 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801d770:	6030      	str	r0, [r6, #0]
 801d772:	4628      	mov	r0, r5
 801d774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d778:	683b      	ldr	r3, [r7, #0]
 801d77a:	4601      	mov	r1, r0
 801d77c:	4638      	mov	r0, r7
 801d77e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d782:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d786:	47c8      	blx	r9
 801d788:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d78c:	4602      	mov	r2, r0
 801d78e:	6030      	str	r0, [r6, #0]
 801d790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d794:	d213      	bcs.n	801d7be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801d796:	4643      	mov	r3, r8
 801d798:	4639      	mov	r1, r7
 801d79a:	4620      	mov	r0, r4
 801d79c:	f7ff fdd8 	bl	801d350 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d7a0:	6030      	str	r0, [r6, #0]
 801d7a2:	6833      	ldr	r3, [r6, #0]
 801d7a4:	b143      	cbz	r3, 801d7b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801d7a6:	7b5a      	ldrb	r2, [r3, #13]
 801d7a8:	7a9b      	ldrb	r3, [r3, #10]
 801d7aa:	0052      	lsls	r2, r2, #1
 801d7ac:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d7b0:	4313      	orrs	r3, r2
 801d7b2:	bf0c      	ite	eq
 801d7b4:	2301      	moveq	r3, #1
 801d7b6:	2300      	movne	r3, #0
 801d7b8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d7bc:	e7d9      	b.n	801d772 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801d7be:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d7c2:	b29b      	uxth	r3, r3
 801d7c4:	2b7f      	cmp	r3, #127	; 0x7f
 801d7c6:	d804      	bhi.n	801d7d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801d7c8:	4639      	mov	r1, r7
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	f7ff fca6 	bl	801d11c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d7d0:	e7e6      	b.n	801d7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d7d2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d0e3      	beq.n	801d7a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d7da:	f640 1302 	movw	r3, #2306	; 0x902
 801d7de:	429d      	cmp	r5, r3
 801d7e0:	d1df      	bne.n	801d7a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801d7e2:	4601      	mov	r1, r0
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	f7ff fc69 	bl	801d0bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d7ea:	e7d9      	b.n	801d7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801d7ec:	0802f000 	.word	0x0802f000
 801d7f0:	0802f272 	.word	0x0802f272
 801d7f4:	0802f009 	.word	0x0802f009

0801d7f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d7f8:	b510      	push	{r4, lr}
 801d7fa:	4604      	mov	r4, r0
 801d7fc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d800:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d802:	b9d9      	cbnz	r1, 801d83c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801d804:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d806:	2b0a      	cmp	r3, #10
 801d808:	d037      	beq.n	801d87a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d80a:	4620      	mov	r0, r4
 801d80c:	f7ff fc15 	bl	801d03a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d810:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d812:	2b09      	cmp	r3, #9
 801d814:	d906      	bls.n	801d824 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801d816:	4b19      	ldr	r3, [pc, #100]	; (801d87c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801d818:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d81c:	4a18      	ldr	r2, [pc, #96]	; (801d880 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801d81e:	4819      	ldr	r0, [pc, #100]	; (801d884 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801d820:	f00d f858 	bl	802a8d4 <__assert_func>
 801d824:	1c5a      	adds	r2, r3, #1
 801d826:	8722      	strh	r2, [r4, #56]	; 0x38
 801d828:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d82a:	4413      	add	r3, r2
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	2b09      	cmp	r3, #9
 801d830:	bf88      	it	hi
 801d832:	3b0a      	subhi	r3, #10
 801d834:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d838:	8458      	strh	r0, [r3, #34]	; 0x22
 801d83a:	e7e3      	b.n	801d804 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801d83c:	2b0a      	cmp	r3, #10
 801d83e:	d01c      	beq.n	801d87a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801d840:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d842:	3901      	subs	r1, #1
 801d844:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d848:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d84a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d84e:	1c51      	adds	r1, r2, #1
 801d850:	b289      	uxth	r1, r1
 801d852:	2901      	cmp	r1, #1
 801d854:	bf8a      	itet	hi
 801d856:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d85a:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d85c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d85e:	2b09      	cmp	r3, #9
 801d860:	d8d9      	bhi.n	801d816 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801d862:	1c5a      	adds	r2, r3, #1
 801d864:	8722      	strh	r2, [r4, #56]	; 0x38
 801d866:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d868:	4413      	add	r3, r2
 801d86a:	b29b      	uxth	r3, r3
 801d86c:	2b09      	cmp	r3, #9
 801d86e:	bf88      	it	hi
 801d870:	3b0a      	subhi	r3, #10
 801d872:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d876:	8458      	strh	r0, [r3, #34]	; 0x22
 801d878:	e7c0      	b.n	801d7fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d87a:	bd10      	pop	{r4, pc}
 801d87c:	0802f035 	.word	0x0802f035
 801d880:	0802f3c8 	.word	0x0802f3c8
 801d884:	0802f009 	.word	0x0802f009

0801d888 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d888:	b538      	push	{r3, r4, r5, lr}
 801d88a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d88c:	4604      	mov	r4, r0
 801d88e:	b92a      	cbnz	r2, 801d89c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801d890:	4b13      	ldr	r3, [pc, #76]	; (801d8e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801d892:	21d5      	movs	r1, #213	; 0xd5
 801d894:	4a13      	ldr	r2, [pc, #76]	; (801d8e4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801d896:	4814      	ldr	r0, [pc, #80]	; (801d8e8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801d898:	f00d f81c 	bl	802a8d4 <__assert_func>
 801d89c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d89e:	3a01      	subs	r2, #1
 801d8a0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801d8a4:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801d8a6:	8702      	strh	r2, [r0, #56]	; 0x38
 801d8a8:	1c5a      	adds	r2, r3, #1
 801d8aa:	b292      	uxth	r2, r2
 801d8ac:	2a09      	cmp	r2, #9
 801d8ae:	bf8a      	itet	hi
 801d8b0:	3b09      	subhi	r3, #9
 801d8b2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d8b4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d8b6:	f7ff ff9f 	bl	801d7f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d8ba:	8c23      	ldrh	r3, [r4, #32]
 801d8bc:	2b01      	cmp	r3, #1
 801d8be:	bf9c      	itt	ls
 801d8c0:	3301      	addls	r3, #1
 801d8c2:	8423      	strhls	r3, [r4, #32]
 801d8c4:	8be3      	ldrh	r3, [r4, #30]
 801d8c6:	b90b      	cbnz	r3, 801d8cc <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801d8c8:	2302      	movs	r3, #2
 801d8ca:	83e3      	strh	r3, [r4, #30]
 801d8cc:	8be3      	ldrh	r3, [r4, #30]
 801d8ce:	4628      	mov	r0, r5
 801d8d0:	3b01      	subs	r3, #1
 801d8d2:	b29b      	uxth	r3, r3
 801d8d4:	83e3      	strh	r3, [r4, #30]
 801d8d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d8da:	8365      	strh	r5, [r4, #26]
 801d8dc:	bd38      	pop	{r3, r4, r5, pc}
 801d8de:	bf00      	nop
 801d8e0:	0802f000 	.word	0x0802f000
 801d8e4:	0802f31d 	.word	0x0802f31d
 801d8e8:	0802f009 	.word	0x0802f009

0801d8ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d8ec:	428a      	cmp	r2, r1
 801d8ee:	b538      	push	{r3, r4, r5, lr}
 801d8f0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d8f2:	d90c      	bls.n	801d90e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d8f4:	b92c      	cbnz	r4, 801d902 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d8f6:	4b1c      	ldr	r3, [pc, #112]	; (801d968 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d8f8:	21e1      	movs	r1, #225	; 0xe1
 801d8fa:	4a1c      	ldr	r2, [pc, #112]	; (801d96c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d8fc:	481c      	ldr	r0, [pc, #112]	; (801d970 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d8fe:	f00c ffe9 	bl	802a8d4 <__assert_func>
 801d902:	3c01      	subs	r4, #1
 801d904:	4b1b      	ldr	r3, [pc, #108]	; (801d974 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d906:	4a1c      	ldr	r2, [pc, #112]	; (801d978 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d908:	21c5      	movs	r1, #197	; 0xc5
 801d90a:	8704      	strh	r4, [r0, #56]	; 0x38
 801d90c:	e7f6      	b.n	801d8fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d90e:	428c      	cmp	r4, r1
 801d910:	d203      	bcs.n	801d91a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801d912:	4b1a      	ldr	r3, [pc, #104]	; (801d97c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801d914:	21cb      	movs	r1, #203	; 0xcb
 801d916:	4a1a      	ldr	r2, [pc, #104]	; (801d980 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801d918:	e7f0      	b.n	801d8fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d91a:	1a64      	subs	r4, r4, r1
 801d91c:	250a      	movs	r5, #10
 801d91e:	8704      	strh	r4, [r0, #56]	; 0x38
 801d920:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801d922:	4421      	add	r1, r4
 801d924:	b289      	uxth	r1, r1
 801d926:	2909      	cmp	r1, #9
 801d928:	bf88      	it	hi
 801d92a:	390a      	subhi	r1, #10
 801d92c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d92e:	b1ba      	cbz	r2, 801d960 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801d930:	3a01      	subs	r2, #1
 801d932:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d934:	b292      	uxth	r2, r2
 801d936:	2909      	cmp	r1, #9
 801d938:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d93c:	d903      	bls.n	801d946 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801d93e:	4b11      	ldr	r3, [pc, #68]	; (801d984 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801d940:	21e6      	movs	r1, #230	; 0xe6
 801d942:	4a11      	ldr	r2, [pc, #68]	; (801d988 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801d944:	e7da      	b.n	801d8fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d946:	3101      	adds	r1, #1
 801d948:	8701      	strh	r1, [r0, #56]	; 0x38
 801d94a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d94c:	b901      	cbnz	r1, 801d950 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801d94e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d950:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d952:	3901      	subs	r1, #1
 801d954:	b289      	uxth	r1, r1
 801d956:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d958:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d95c:	844c      	strh	r4, [r1, #34]	; 0x22
 801d95e:	e7e6      	b.n	801d92e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801d960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d964:	f7ff bf48 	b.w	801d7f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d968:	0802f000 	.word	0x0802f000
 801d96c:	0802f0f6 	.word	0x0802f0f6
 801d970:	0802f009 	.word	0x0802f009
 801d974:	0802f041 	.word	0x0802f041
 801d978:	0802f1a0 	.word	0x0802f1a0
 801d97c:	0802f04f 	.word	0x0802f04f
 801d980:	0802f477 	.word	0x0802f477
 801d984:	0802f05b 	.word	0x0802f05b
 801d988:	0802f06e 	.word	0x0802f06e

0801d98c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d98c:	3a01      	subs	r2, #1
 801d98e:	b570      	push	{r4, r5, r6, lr}
 801d990:	b292      	uxth	r2, r2
 801d992:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d996:	42b2      	cmp	r2, r6
 801d998:	d019      	beq.n	801d9ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801d99a:	8c04      	ldrh	r4, [r0, #32]
 801d99c:	f831 5b02 	ldrh.w	r5, [r1], #2
 801d9a0:	4294      	cmp	r4, r2
 801d9a2:	d805      	bhi.n	801d9b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801d9a4:	4b19      	ldr	r3, [pc, #100]	; (801da0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d9a6:	4a1a      	ldr	r2, [pc, #104]	; (801da10 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801d9a8:	21c5      	movs	r1, #197	; 0xc5
 801d9aa:	481a      	ldr	r0, [pc, #104]	; (801da14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801d9ac:	f00c ff92 	bl	802a8d4 <__assert_func>
 801d9b0:	8bc4      	ldrh	r4, [r0, #30]
 801d9b2:	4414      	add	r4, r2
 801d9b4:	3a01      	subs	r2, #1
 801d9b6:	b2a4      	uxth	r4, r4
 801d9b8:	b292      	uxth	r2, r2
 801d9ba:	2c01      	cmp	r4, #1
 801d9bc:	bf88      	it	hi
 801d9be:	3c02      	subhi	r4, #2
 801d9c0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d9c4:	8b64      	ldrh	r4, [r4, #26]
 801d9c6:	42ac      	cmp	r4, r5
 801d9c8:	d0e5      	beq.n	801d996 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801d9ca:	2000      	movs	r0, #0
 801d9cc:	bd70      	pop	{r4, r5, r6, pc}
 801d9ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d9d2:	2400      	movs	r4, #0
 801d9d4:	4413      	add	r3, r2
 801d9d6:	b2a2      	uxth	r2, r4
 801d9d8:	429a      	cmp	r2, r3
 801d9da:	da14      	bge.n	801da06 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801d9dc:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801d9de:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d9e2:	4296      	cmp	r6, r2
 801d9e4:	d802      	bhi.n	801d9ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801d9e6:	4b09      	ldr	r3, [pc, #36]	; (801da0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d9e8:	4a0b      	ldr	r2, [pc, #44]	; (801da18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801d9ea:	e7dd      	b.n	801d9a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801d9ec:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d9ee:	3401      	adds	r4, #1
 801d9f0:	4432      	add	r2, r6
 801d9f2:	b292      	uxth	r2, r2
 801d9f4:	2a09      	cmp	r2, #9
 801d9f6:	bf88      	it	hi
 801d9f8:	3a0a      	subhi	r2, #10
 801d9fa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d9fe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801da00:	42aa      	cmp	r2, r5
 801da02:	d0e8      	beq.n	801d9d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801da04:	e7e1      	b.n	801d9ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801da06:	2001      	movs	r0, #1
 801da08:	e7e0      	b.n	801d9cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801da0a:	bf00      	nop
 801da0c:	0802f041 	.word	0x0802f041
 801da10:	0802f4fb 	.word	0x0802f4fb
 801da14:	0802f009 	.word	0x0802f009
 801da18:	0802f1a0 	.word	0x0802f1a0

0801da1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801da1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da20:	4605      	mov	r5, r0
 801da22:	4616      	mov	r6, r2
 801da24:	1c8c      	adds	r4, r1, #2
 801da26:	8809      	ldrh	r1, [r1, #0]
 801da28:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801da2c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801da30:	42b3      	cmp	r3, r6
 801da32:	d124      	bne.n	801da7e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801da34:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801da38:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801da3c:	f001 070f 	and.w	r7, r1, #15
 801da40:	4652      	mov	r2, sl
 801da42:	f8cd 8000 	str.w	r8, [sp]
 801da46:	464b      	mov	r3, r9
 801da48:	4621      	mov	r1, r4
 801da4a:	4628      	mov	r0, r5
 801da4c:	f7ff ff9e 	bl	801d98c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801da50:	4683      	mov	fp, r0
 801da52:	b168      	cbz	r0, 801da70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801da54:	eb0a 0109 	add.w	r1, sl, r9
 801da58:	463a      	mov	r2, r7
 801da5a:	4628      	mov	r0, r5
 801da5c:	4441      	add	r1, r8
 801da5e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801da62:	4649      	mov	r1, r9
 801da64:	f7ff ff42 	bl	801d8ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801da68:	4658      	mov	r0, fp
 801da6a:	b003      	add	sp, #12
 801da6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da70:	eb07 010a 	add.w	r1, r7, sl
 801da74:	4449      	add	r1, r9
 801da76:	4441      	add	r1, r8
 801da78:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801da7c:	e7d2      	b.n	801da24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801da7e:	f04f 0b00 	mov.w	fp, #0
 801da82:	e7f1      	b.n	801da68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801da84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801da84:	b570      	push	{r4, r5, r6, lr}
 801da86:	8810      	ldrh	r0, [r2, #0]
 801da88:	4298      	cmp	r0, r3
 801da8a:	d817      	bhi.n	801dabc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801da8c:	1e48      	subs	r0, r1, #1
 801da8e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801da92:	4298      	cmp	r0, r3
 801da94:	d312      	bcc.n	801dabc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801da96:	2400      	movs	r4, #0
 801da98:	428c      	cmp	r4, r1
 801da9a:	d20f      	bcs.n	801dabc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801da9c:	1860      	adds	r0, r4, r1
 801da9e:	1040      	asrs	r0, r0, #1
 801daa0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801daa4:	0085      	lsls	r5, r0, #2
 801daa6:	42b3      	cmp	r3, r6
 801daa8:	d902      	bls.n	801dab0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801daaa:	3001      	adds	r0, #1
 801daac:	b284      	uxth	r4, r0
 801daae:	e7f3      	b.n	801da98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dab0:	d201      	bcs.n	801dab6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801dab2:	b281      	uxth	r1, r0
 801dab4:	e7f0      	b.n	801da98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801dab6:	442a      	add	r2, r5
 801dab8:	8850      	ldrh	r0, [r2, #2]
 801daba:	bd70      	pop	{r4, r5, r6, pc}
 801dabc:	2000      	movs	r0, #0
 801dabe:	e7fc      	b.n	801daba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801dac0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801dac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dac4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801dac6:	4604      	mov	r4, r0
 801dac8:	260b      	movs	r6, #11
 801daca:	886f      	ldrh	r7, [r5, #2]
 801dacc:	087f      	lsrs	r7, r7, #1
 801dace:	3e01      	subs	r6, #1
 801dad0:	d01b      	beq.n	801db0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801dad2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dad4:	b92b      	cbnz	r3, 801dae2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801dad6:	4b0e      	ldr	r3, [pc, #56]	; (801db10 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801dad8:	21c0      	movs	r1, #192	; 0xc0
 801dada:	4a0e      	ldr	r2, [pc, #56]	; (801db14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801dadc:	480e      	ldr	r0, [pc, #56]	; (801db18 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801dade:	f00c fef9 	bl	802a8d4 <__assert_func>
 801dae2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801dae4:	462a      	mov	r2, r5
 801dae6:	4639      	mov	r1, r7
 801dae8:	4620      	mov	r0, r4
 801daea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801daee:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801daf2:	4643      	mov	r3, r8
 801daf4:	f7ff ffc6 	bl	801da84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801daf8:	b138      	cbz	r0, 801db0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801dafa:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801dafe:	4642      	mov	r2, r8
 801db00:	4620      	mov	r0, r4
 801db02:	f7ff ff8b 	bl	801da1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801db06:	2800      	cmp	r0, #0
 801db08:	d1e1      	bne.n	801dace <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801db0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db0e:	bf00      	nop
 801db10:	0802f000 	.word	0x0802f000
 801db14:	0802f272 	.word	0x0802f272
 801db18:	0802f009 	.word	0x0802f009

0801db1c <_ZN8touchgfx8ceil28_4El>:
 801db1c:	f110 030f 	adds.w	r3, r0, #15
 801db20:	d401      	bmi.n	801db26 <_ZN8touchgfx8ceil28_4El+0xa>
 801db22:	1118      	asrs	r0, r3, #4
 801db24:	4770      	bx	lr
 801db26:	2210      	movs	r2, #16
 801db28:	f1c0 0001 	rsb	r0, r0, #1
 801db2c:	fb93 f3f2 	sdiv	r3, r3, r2
 801db30:	f010 000f 	ands.w	r0, r0, #15
 801db34:	bf18      	it	ne
 801db36:	2001      	movne	r0, #1
 801db38:	1a18      	subs	r0, r3, r0
 801db3a:	4770      	bx	lr

0801db3c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801db3c:	2900      	cmp	r1, #0
 801db3e:	b538      	push	{r3, r4, r5, lr}
 801db40:	dc05      	bgt.n	801db4e <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801db42:	4b0f      	ldr	r3, [pc, #60]	; (801db80 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801db44:	21f7      	movs	r1, #247	; 0xf7
 801db46:	4a0f      	ldr	r2, [pc, #60]	; (801db84 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801db48:	480f      	ldr	r0, [pc, #60]	; (801db88 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801db4a:	f00c fec3 	bl	802a8d4 <__assert_func>
 801db4e:	2800      	cmp	r0, #0
 801db50:	db06      	blt.n	801db60 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801db52:	fb90 f4f1 	sdiv	r4, r0, r1
 801db56:	fb01 0114 	mls	r1, r1, r4, r0
 801db5a:	6014      	str	r4, [r2, #0]
 801db5c:	6019      	str	r1, [r3, #0]
 801db5e:	bd38      	pop	{r3, r4, r5, pc}
 801db60:	4240      	negs	r0, r0
 801db62:	fb90 f4f1 	sdiv	r4, r0, r1
 801db66:	4265      	negs	r5, r4
 801db68:	fb01 0014 	mls	r0, r1, r4, r0
 801db6c:	6015      	str	r5, [r2, #0]
 801db6e:	6018      	str	r0, [r3, #0]
 801db70:	2800      	cmp	r0, #0
 801db72:	d0f4      	beq.n	801db5e <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801db74:	6810      	ldr	r0, [r2, #0]
 801db76:	3801      	subs	r0, #1
 801db78:	6010      	str	r0, [r2, #0]
 801db7a:	6818      	ldr	r0, [r3, #0]
 801db7c:	1a09      	subs	r1, r1, r0
 801db7e:	e7ed      	b.n	801db5c <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801db80:	0802f5cc 	.word	0x0802f5cc
 801db84:	0802f60b 	.word	0x0802f60b
 801db88:	0802f5dc 	.word	0x0802f5dc

0801db8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801db8c:	b570      	push	{r4, r5, r6, lr}
 801db8e:	694a      	ldr	r2, [r1, #20]
 801db90:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801db92:	684b      	ldr	r3, [r1, #4]
 801db94:	1b54      	subs	r4, r2, r5
 801db96:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801db98:	f000 8106 	beq.w	801dda8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801db9c:	1b9b      	subs	r3, r3, r6
 801db9e:	d003      	beq.n	801dba8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801dba0:	4363      	muls	r3, r4
 801dba2:	2210      	movs	r2, #16
 801dba4:	fb93 f3f2 	sdiv	r3, r3, r2
 801dba8:	680c      	ldr	r4, [r1, #0]
 801dbaa:	698a      	ldr	r2, [r1, #24]
 801dbac:	1b65      	subs	r5, r4, r5
 801dbae:	f000 80fd 	beq.w	801ddac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801dbb2:	1b92      	subs	r2, r2, r6
 801dbb4:	d003      	beq.n	801dbbe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801dbb6:	436a      	muls	r2, r5
 801dbb8:	2410      	movs	r4, #16
 801dbba:	fb92 f2f4 	sdiv	r2, r2, r4
 801dbbe:	1a9b      	subs	r3, r3, r2
 801dbc0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801dde8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801dbc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dbc8:	460a      	mov	r2, r1
 801dbca:	ee07 3a90 	vmov	s15, r3
 801dbce:	f100 040c 	add.w	r4, r0, #12
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dbd8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dbdc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801dbe0:	eeb1 6a43 	vneg.f32	s12, s6
 801dbe4:	edd2 7a02 	vldr	s15, [r2, #8]
 801dbe8:	3214      	adds	r2, #20
 801dbea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801dbee:	ece3 6a01 	vstmia	r3!, {s13}
 801dbf2:	429c      	cmp	r4, r3
 801dbf4:	ed52 7a02 	vldr	s15, [r2, #-8]
 801dbf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dbfc:	edc3 7a02 	vstr	s15, [r3, #8]
 801dc00:	ed52 7a01 	vldr	s15, [r2, #-4]
 801dc04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dc08:	edc3 7a05 	vstr	s15, [r3, #20]
 801dc0c:	d1ea      	bne.n	801dbe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801dc0e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dc10:	698b      	ldr	r3, [r1, #24]
 801dc12:	edd0 4a02 	vldr	s9, [r0, #8]
 801dc16:	1a9b      	subs	r3, r3, r2
 801dc18:	edd0 3a00 	vldr	s7, [r0]
 801dc1c:	edd0 6a01 	vldr	s13, [r0, #4]
 801dc20:	ee07 3a90 	vmov	s15, r3
 801dc24:	684b      	ldr	r3, [r1, #4]
 801dc26:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801dc2a:	ed90 5a05 	vldr	s10, [r0, #20]
 801dc2e:	1a9b      	subs	r3, r3, r2
 801dc30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc34:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801dc38:	ed90 2a03 	vldr	s4, [r0, #12]
 801dc3c:	ee07 3a10 	vmov	s14, r3
 801dc40:	edd0 5a04 	vldr	s11, [r0, #16]
 801dc44:	ee67 7a84 	vmul.f32	s15, s15, s8
 801dc48:	ed90 1a07 	vldr	s2, [r0, #28]
 801dc4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc50:	edd0 2a06 	vldr	s5, [r0, #24]
 801dc54:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801dc58:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801dc5c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc60:	ee32 5a45 	vsub.f32	s10, s4, s10
 801dc64:	eee6 7a87 	vfma.f32	s15, s13, s14
 801dc68:	ee67 7a83 	vmul.f32	s15, s15, s6
 801dc6c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801dc70:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dc72:	694a      	ldr	r2, [r1, #20]
 801dc74:	1b13      	subs	r3, r2, r4
 801dc76:	ee07 3a10 	vmov	s14, r3
 801dc7a:	680b      	ldr	r3, [r1, #0]
 801dc7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc80:	1b1b      	subs	r3, r3, r4
 801dc82:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc86:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801dc8a:	ee07 3a10 	vmov	s14, r3
 801dc8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc92:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dc96:	eee6 4a87 	vfma.f32	s9, s13, s14
 801dc9a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801dc9e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801dca2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dca4:	698b      	ldr	r3, [r1, #24]
 801dca6:	1a9b      	subs	r3, r3, r2
 801dca8:	ee06 3a90 	vmov	s13, r3
 801dcac:	684b      	ldr	r3, [r1, #4]
 801dcae:	1a9b      	subs	r3, r3, r2
 801dcb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dcb4:	ee07 3a10 	vmov	s14, r3
 801dcb8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801dcbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcc0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801dcc4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcc8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801dccc:	ee66 6a83 	vmul.f32	s13, s13, s6
 801dcd0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801dcd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dcd6:	694a      	ldr	r2, [r1, #20]
 801dcd8:	1b13      	subs	r3, r2, r4
 801dcda:	ee07 3a10 	vmov	s14, r3
 801dcde:	680b      	ldr	r3, [r1, #0]
 801dce0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dce4:	1b1b      	subs	r3, r3, r4
 801dce6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcea:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801dcee:	ee07 3a10 	vmov	s14, r3
 801dcf2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dcf6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dcfa:	eea5 5a87 	vfma.f32	s10, s11, s14
 801dcfe:	edd0 5a08 	vldr	s11, [r0, #32]
 801dd02:	ee31 1a65 	vsub.f32	s2, s2, s11
 801dd06:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801dd0a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801dd0e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801dd12:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801dd14:	698b      	ldr	r3, [r1, #24]
 801dd16:	1a9b      	subs	r3, r3, r2
 801dd18:	ee07 3a10 	vmov	s14, r3
 801dd1c:	684b      	ldr	r3, [r1, #4]
 801dd1e:	1a9b      	subs	r3, r3, r2
 801dd20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd24:	ee01 3a90 	vmov	s3, r3
 801dd28:	ee27 7a04 	vmul.f32	s14, s14, s8
 801dd2c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd30:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801dd34:	ee61 1a84 	vmul.f32	s3, s3, s8
 801dd38:	eea1 7a21 	vfma.f32	s14, s2, s3
 801dd3c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801dd40:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801dd44:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dd46:	694a      	ldr	r2, [r1, #20]
 801dd48:	1b13      	subs	r3, r2, r4
 801dd4a:	ee03 3a10 	vmov	s6, r3
 801dd4e:	680b      	ldr	r3, [r1, #0]
 801dd50:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dd54:	1b1b      	subs	r3, r3, r4
 801dd56:	ee23 3a04 	vmul.f32	s6, s6, s8
 801dd5a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801dd5e:	ee03 3a10 	vmov	s6, r3
 801dd62:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801dd66:	ee23 4a04 	vmul.f32	s8, s6, s8
 801dd6a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801dd6e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801dd72:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801dd76:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801dd7a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801dd7e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801dd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd86:	dd13      	ble.n	801ddb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801dd88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dd8c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801dd90:	63c3      	str	r3, [r0, #60]	; 0x3c
 801dd92:	eee3 7a87 	vfma.f32	s15, s7, s14
 801dd96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801dd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd9e:	dd15      	ble.n	801ddcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801dda0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dda4:	6403      	str	r3, [r0, #64]	; 0x40
 801dda6:	bd70      	pop	{r4, r5, r6, pc}
 801dda8:	4623      	mov	r3, r4
 801ddaa:	e6fd      	b.n	801dba8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ddac:	462a      	mov	r2, r5
 801ddae:	e706      	b.n	801dbbe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ddb0:	d502      	bpl.n	801ddb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ddb2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ddb6:	e7e9      	b.n	801dd8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ddb8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ddbc:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ddc0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ddc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddc8:	dade      	bge.n	801dd88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ddca:	e7f2      	b.n	801ddb2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ddcc:	d502      	bpl.n	801ddd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ddce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ddd2:	e7e7      	b.n	801dda4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ddd4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ddd8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801dddc:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801dde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dde4:	dadc      	bge.n	801dda0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801dde6:	e7f2      	b.n	801ddce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801dde8:	3d800000 	.word	0x3d800000

0801ddec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ddec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddf0:	f04f 0814 	mov.w	r8, #20
 801ddf4:	4604      	mov	r4, r0
 801ddf6:	4617      	mov	r7, r2
 801ddf8:	460d      	mov	r5, r1
 801ddfa:	fb08 f903 	mul.w	r9, r8, r3
 801ddfe:	461e      	mov	r6, r3
 801de00:	eb02 0a09 	add.w	sl, r2, r9
 801de04:	f8da 0004 	ldr.w	r0, [sl, #4]
 801de08:	f7ff fe88 	bl	801db1c <_ZN8touchgfx8ceil28_4El>
 801de0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de0e:	6160      	str	r0, [r4, #20]
 801de10:	fb08 f803 	mul.w	r8, r8, r3
 801de14:	9001      	str	r0, [sp, #4]
 801de16:	eb07 0b08 	add.w	fp, r7, r8
 801de1a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801de1e:	f7ff fe7d 	bl	801db1c <_ZN8touchgfx8ceil28_4El>
 801de22:	9a01      	ldr	r2, [sp, #4]
 801de24:	1a80      	subs	r0, r0, r2
 801de26:	61a0      	str	r0, [r4, #24]
 801de28:	2800      	cmp	r0, #0
 801de2a:	f000 8088 	beq.w	801df3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801de2e:	f857 3009 	ldr.w	r3, [r7, r9]
 801de32:	f857 c008 	ldr.w	ip, [r7, r8]
 801de36:	f8db 0004 	ldr.w	r0, [fp, #4]
 801de3a:	ebac 0c03 	sub.w	ip, ip, r3
 801de3e:	f8da 1004 	ldr.w	r1, [sl, #4]
 801de42:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801de46:	1a40      	subs	r0, r0, r1
 801de48:	fb0b f202 	mul.w	r2, fp, r2
 801de4c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801de50:	fb0c 2211 	mls	r2, ip, r1, r2
 801de54:	4641      	mov	r1, r8
 801de56:	fb00 2003 	mla	r0, r0, r3, r2
 801de5a:	f104 0310 	add.w	r3, r4, #16
 801de5e:	4622      	mov	r2, r4
 801de60:	3801      	subs	r0, #1
 801de62:	4440      	add	r0, r8
 801de64:	f7ff fe6a 	bl	801db3c <_ZN8touchgfx11floorDivModEllRlS0_>
 801de68:	f104 0308 	add.w	r3, r4, #8
 801de6c:	1d22      	adds	r2, r4, #4
 801de6e:	4641      	mov	r1, r8
 801de70:	4658      	mov	r0, fp
 801de72:	f7ff fe63 	bl	801db3c <_ZN8touchgfx11floorDivModEllRlS0_>
 801de76:	f8c4 800c 	str.w	r8, [r4, #12]
 801de7a:	6962      	ldr	r2, [r4, #20]
 801de7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801de80:	eddf 6a31 	vldr	s13, [pc, #196]	; 801df48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801de84:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801de88:	6822      	ldr	r2, [r4, #0]
 801de8a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801de8e:	ee07 3a10 	vmov	s14, r3
 801de92:	f857 3009 	ldr.w	r3, [r7, r9]
 801de96:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801de9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801de9e:	ee07 3a90 	vmov	s15, r3
 801dea2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801dea6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801deaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801deae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801deb2:	edd3 6a00 	vldr	s13, [r3]
 801deb6:	eee6 6a07 	vfma.f32	s13, s12, s14
 801deba:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801debe:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dec2:	edc4 6a07 	vstr	s13, [r4, #28]
 801dec6:	edd4 6a01 	vldr	s13, [r4, #4]
 801deca:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801dece:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ded2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801ded6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801deda:	ed84 6a08 	vstr	s12, [r4, #32]
 801dede:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801dee0:	6262      	str	r2, [r4, #36]	; 0x24
 801dee2:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801dee6:	ed93 6a03 	vldr	s12, [r3, #12]
 801deea:	eea5 6a87 	vfma.f32	s12, s11, s14
 801deee:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801def2:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801def6:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801defa:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801defe:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801df02:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801df06:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801df0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801df0c:	6322      	str	r2, [r4, #48]	; 0x30
 801df0e:	ed93 6a06 	vldr	s12, [r3, #24]
 801df12:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801df16:	eea5 6a87 	vfma.f32	s12, s11, s14
 801df1a:	eeb0 7a46 	vmov.f32	s14, s12
 801df1e:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801df22:	eea6 7a27 	vfma.f32	s14, s12, s15
 801df26:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801df2a:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801df2e:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801df32:	eee6 7a87 	vfma.f32	s15, s13, s14
 801df36:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801df3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801df3c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801df3e:	4620      	mov	r0, r4
 801df40:	b003      	add	sp, #12
 801df42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df46:	bf00      	nop
 801df48:	3d800000 	.word	0x3d800000

0801df4c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801df4c:	4602      	mov	r2, r0
 801df4e:	b148      	cbz	r0, 801df64 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801df50:	2300      	movs	r3, #0
 801df52:	b298      	uxth	r0, r3
 801df54:	3301      	adds	r3, #1
 801df56:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801df5a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801df5e:	2900      	cmp	r1, #0
 801df60:	d1f7      	bne.n	801df52 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801df62:	4770      	bx	lr
 801df64:	4770      	bx	lr

0801df66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801df66:	b530      	push	{r4, r5, lr}
 801df68:	4604      	mov	r4, r0
 801df6a:	b159      	cbz	r1, 801df84 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801df6c:	b148      	cbz	r0, 801df82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801df6e:	2300      	movs	r3, #0
 801df70:	b298      	uxth	r0, r3
 801df72:	4282      	cmp	r2, r0
 801df74:	d905      	bls.n	801df82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801df76:	5ccd      	ldrb	r5, [r1, r3]
 801df78:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801df7c:	3301      	adds	r3, #1
 801df7e:	2d00      	cmp	r5, #0
 801df80:	d1f6      	bne.n	801df70 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801df82:	bd30      	pop	{r4, r5, pc}
 801df84:	4608      	mov	r0, r1
 801df86:	e7fc      	b.n	801df82 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801df88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801df88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df8a:	468c      	mov	ip, r1
 801df8c:	b08b      	sub	sp, #44	; 0x2c
 801df8e:	2100      	movs	r1, #0
 801df90:	ae01      	add	r6, sp, #4
 801df92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801df96:	211f      	movs	r1, #31
 801df98:	fbb0 f7f3 	udiv	r7, r0, r3
 801df9c:	fb03 0517 	mls	r5, r3, r7, r0
 801dfa0:	4638      	mov	r0, r7
 801dfa2:	b2ec      	uxtb	r4, r5
 801dfa4:	2d09      	cmp	r5, #9
 801dfa6:	bfd4      	ite	le
 801dfa8:	3430      	addle	r4, #48	; 0x30
 801dfaa:	3457      	addgt	r4, #87	; 0x57
 801dfac:	b2e4      	uxtb	r4, r4
 801dfae:	558c      	strb	r4, [r1, r6]
 801dfb0:	1e4c      	subs	r4, r1, #1
 801dfb2:	b92f      	cbnz	r7, 801dfc0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801dfb4:	4431      	add	r1, r6
 801dfb6:	4660      	mov	r0, ip
 801dfb8:	f7ff ffd5 	bl	801df66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801dfbc:	b00b      	add	sp, #44	; 0x2c
 801dfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfc0:	4621      	mov	r1, r4
 801dfc2:	e7e9      	b.n	801df98 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801dfc4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfc6:	4607      	mov	r7, r0
 801dfc8:	b08b      	sub	sp, #44	; 0x2c
 801dfca:	4608      	mov	r0, r1
 801dfcc:	b341      	cbz	r1, 801e020 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801dfce:	1e99      	subs	r1, r3, #2
 801dfd0:	2922      	cmp	r1, #34	; 0x22
 801dfd2:	d825      	bhi.n	801e020 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801dfd4:	2100      	movs	r1, #0
 801dfd6:	463c      	mov	r4, r7
 801dfd8:	261f      	movs	r6, #31
 801dfda:	f10d 0c04 	add.w	ip, sp, #4
 801dfde:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801dfe2:	1e71      	subs	r1, r6, #1
 801dfe4:	fb94 fef3 	sdiv	lr, r4, r3
 801dfe8:	fb03 441e 	mls	r4, r3, lr, r4
 801dfec:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801dff0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801dff4:	b2ec      	uxtb	r4, r5
 801dff6:	2d09      	cmp	r5, #9
 801dff8:	bfd4      	ite	le
 801dffa:	3430      	addle	r4, #48	; 0x30
 801dffc:	3457      	addgt	r4, #87	; 0x57
 801dffe:	b2e4      	uxtb	r4, r4
 801e000:	f80c 4006 	strb.w	r4, [ip, r6]
 801e004:	4674      	mov	r4, lr
 801e006:	b96c      	cbnz	r4, 801e024 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e008:	2f00      	cmp	r7, #0
 801e00a:	da05      	bge.n	801e018 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e00c:	ab0a      	add	r3, sp, #40	; 0x28
 801e00e:	4419      	add	r1, r3
 801e010:	232d      	movs	r3, #45	; 0x2d
 801e012:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e016:	1eb1      	subs	r1, r6, #2
 801e018:	3101      	adds	r1, #1
 801e01a:	4461      	add	r1, ip
 801e01c:	f7ff ffa3 	bl	801df66 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e020:	b00b      	add	sp, #44	; 0x2c
 801e022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e024:	460e      	mov	r6, r1
 801e026:	e7dc      	b.n	801dfe2 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e028 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e02c:	b085      	sub	sp, #20
 801e02e:	4691      	mov	r9, r2
 801e030:	6802      	ldr	r2, [r0, #0]
 801e032:	4688      	mov	r8, r1
 801e034:	461c      	mov	r4, r3
 801e036:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e03a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e03e:	4683      	mov	fp, r0
 801e040:	4610      	mov	r0, r2
 801e042:	9103      	str	r1, [sp, #12]
 801e044:	9302      	str	r3, [sp, #8]
 801e046:	9201      	str	r2, [sp, #4]
 801e048:	f7ff ff80 	bl	801df4c <_ZN8touchgfx7Unicode6strlenEPKt>
 801e04c:	f1b8 0f00 	cmp.w	r8, #0
 801e050:	bf0c      	ite	eq
 801e052:	4684      	moveq	ip, r0
 801e054:	f100 0c01 	addne.w	ip, r0, #1
 801e058:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e05c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e060:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e062:	fa1f fc8c 	uxth.w	ip, ip
 801e066:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e068:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e06c:	9903      	ldr	r1, [sp, #12]
 801e06e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e072:	d041      	beq.n	801e0f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e074:	d834      	bhi.n	801e0e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e076:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e07a:	d059      	beq.n	801e130 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e07c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e080:	d03a      	beq.n	801e0f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e082:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e086:	d034      	beq.n	801e0f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e088:	2400      	movs	r4, #0
 801e08a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e08e:	3a01      	subs	r2, #1
 801e090:	b169      	cbz	r1, 801e0ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e092:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e094:	458c      	cmp	ip, r1
 801e096:	da09      	bge.n	801e0ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e098:	eba1 010c 	sub.w	r1, r1, ip
 801e09c:	b289      	uxth	r1, r1
 801e09e:	b933      	cbnz	r3, 801e0ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e0a0:	2e00      	cmp	r6, #0
 801e0a2:	d051      	beq.n	801e148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e0a4:	2800      	cmp	r0, #0
 801e0a6:	d04f      	beq.n	801e148 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e0a8:	440c      	add	r4, r1
 801e0aa:	b2a4      	uxth	r4, r4
 801e0ac:	2100      	movs	r1, #0
 801e0ae:	682b      	ldr	r3, [r5, #0]
 801e0b0:	4293      	cmp	r3, r2
 801e0b2:	da07      	bge.n	801e0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e0b4:	f1b8 0f00 	cmp.w	r8, #0
 801e0b8:	d004      	beq.n	801e0c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e0ba:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e0be:	682b      	ldr	r3, [r5, #0]
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	602b      	str	r3, [r5, #0]
 801e0c4:	2730      	movs	r7, #48	; 0x30
 801e0c6:	2c00      	cmp	r4, #0
 801e0c8:	d04e      	beq.n	801e168 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e0ca:	682e      	ldr	r6, [r5, #0]
 801e0cc:	3c01      	subs	r4, #1
 801e0ce:	42b2      	cmp	r2, r6
 801e0d0:	b2a4      	uxth	r4, r4
 801e0d2:	dd49      	ble.n	801e168 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e0d4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e0d8:	682b      	ldr	r3, [r5, #0]
 801e0da:	3301      	adds	r3, #1
 801e0dc:	602b      	str	r3, [r5, #0]
 801e0de:	e7f2      	b.n	801e0c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e0e0:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e0e4:	d01d      	beq.n	801e122 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e0e6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e0ea:	d002      	beq.n	801e0f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e0ec:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e0f0:	e7c9      	b.n	801e086 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e0f2:	4684      	mov	ip, r0
 801e0f4:	f04f 0800 	mov.w	r8, #0
 801e0f8:	2c00      	cmp	r4, #0
 801e0fa:	d0c6      	beq.n	801e08a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e0fc:	b947      	cbnz	r7, 801e110 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e0fe:	2801      	cmp	r0, #1
 801e100:	d106      	bne.n	801e110 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e102:	8814      	ldrh	r4, [r2, #0]
 801e104:	2c30      	cmp	r4, #48	; 0x30
 801e106:	bf02      	ittt	eq
 801e108:	3202      	addeq	r2, #2
 801e10a:	4638      	moveq	r0, r7
 801e10c:	f8cb 2000 	streq.w	r2, [fp]
 801e110:	45bc      	cmp	ip, r7
 801e112:	da14      	bge.n	801e13e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e114:	b2bf      	uxth	r7, r7
 801e116:	eba7 040c 	sub.w	r4, r7, ip
 801e11a:	46bc      	mov	ip, r7
 801e11c:	b2a4      	uxth	r4, r4
 801e11e:	2600      	movs	r6, #0
 801e120:	e7b3      	b.n	801e08a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e122:	4684      	mov	ip, r0
 801e124:	b16c      	cbz	r4, 801e142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e126:	42b8      	cmp	r0, r7
 801e128:	dd00      	ble.n	801e12c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e12a:	b2b8      	uxth	r0, r7
 801e12c:	2400      	movs	r4, #0
 801e12e:	e003      	b.n	801e138 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e130:	f04f 0c01 	mov.w	ip, #1
 801e134:	2400      	movs	r4, #0
 801e136:	4660      	mov	r0, ip
 801e138:	4626      	mov	r6, r4
 801e13a:	46a0      	mov	r8, r4
 801e13c:	e7a5      	b.n	801e08a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e13e:	2400      	movs	r4, #0
 801e140:	e7ed      	b.n	801e11e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e142:	4626      	mov	r6, r4
 801e144:	46a0      	mov	r8, r4
 801e146:	e7a0      	b.n	801e08a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e148:	2900      	cmp	r1, #0
 801e14a:	d0b0      	beq.n	801e0ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e14c:	2720      	movs	r7, #32
 801e14e:	682e      	ldr	r6, [r5, #0]
 801e150:	2900      	cmp	r1, #0
 801e152:	d0ac      	beq.n	801e0ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e154:	3901      	subs	r1, #1
 801e156:	4296      	cmp	r6, r2
 801e158:	b289      	uxth	r1, r1
 801e15a:	daa7      	bge.n	801e0ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e15c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e160:	682b      	ldr	r3, [r5, #0]
 801e162:	3301      	adds	r3, #1
 801e164:	602b      	str	r3, [r5, #0]
 801e166:	e7f2      	b.n	801e14e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e168:	b188      	cbz	r0, 801e18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e16a:	682b      	ldr	r3, [r5, #0]
 801e16c:	3801      	subs	r0, #1
 801e16e:	429a      	cmp	r2, r3
 801e170:	b280      	uxth	r0, r0
 801e172:	dd0c      	ble.n	801e18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e174:	f8db 3000 	ldr.w	r3, [fp]
 801e178:	1c9c      	adds	r4, r3, #2
 801e17a:	f8cb 4000 	str.w	r4, [fp]
 801e17e:	881c      	ldrh	r4, [r3, #0]
 801e180:	682b      	ldr	r3, [r5, #0]
 801e182:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e186:	682b      	ldr	r3, [r5, #0]
 801e188:	3301      	adds	r3, #1
 801e18a:	602b      	str	r3, [r5, #0]
 801e18c:	e7ec      	b.n	801e168 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e18e:	2620      	movs	r6, #32
 801e190:	b151      	cbz	r1, 801e1a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e192:	6828      	ldr	r0, [r5, #0]
 801e194:	3901      	subs	r1, #1
 801e196:	4282      	cmp	r2, r0
 801e198:	b289      	uxth	r1, r1
 801e19a:	dd05      	ble.n	801e1a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e19c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e1a0:	682b      	ldr	r3, [r5, #0]
 801e1a2:	3301      	adds	r3, #1
 801e1a4:	602b      	str	r3, [r5, #0]
 801e1a6:	e7f3      	b.n	801e190 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e1a8:	b005      	add	sp, #20
 801e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e1ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e1ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e1b2:	2400      	movs	r4, #0
 801e1b4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e1b8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e1bc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e1c0:	8014      	strh	r4, [r2, #0]
 801e1c2:	701c      	strb	r4, [r3, #0]
 801e1c4:	f888 4000 	strb.w	r4, [r8]
 801e1c8:	f88c 4000 	strb.w	r4, [ip]
 801e1cc:	f88e 4000 	strb.w	r4, [lr]
 801e1d0:	703c      	strb	r4, [r7, #0]
 801e1d2:	6804      	ldr	r4, [r0, #0]
 801e1d4:	b1a4      	cbz	r4, 801e200 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e1d6:	8824      	ldrh	r4, [r4, #0]
 801e1d8:	f04f 0901 	mov.w	r9, #1
 801e1dc:	b314      	cbz	r4, 801e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e1de:	2c2b      	cmp	r4, #43	; 0x2b
 801e1e0:	d001      	beq.n	801e1e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e1e2:	2c20      	cmp	r4, #32
 801e1e4:	d110      	bne.n	801e208 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e1e6:	8014      	strh	r4, [r2, #0]
 801e1e8:	6804      	ldr	r4, [r0, #0]
 801e1ea:	b10c      	cbz	r4, 801e1f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e1ec:	3402      	adds	r4, #2
 801e1ee:	6004      	str	r4, [r0, #0]
 801e1f0:	680c      	ldr	r4, [r1, #0]
 801e1f2:	b10c      	cbz	r4, 801e1f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e1f4:	3401      	adds	r4, #1
 801e1f6:	600c      	str	r4, [r1, #0]
 801e1f8:	6804      	ldr	r4, [r0, #0]
 801e1fa:	b17c      	cbz	r4, 801e21c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e1fc:	8824      	ldrh	r4, [r4, #0]
 801e1fe:	e7ed      	b.n	801e1dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e200:	680c      	ldr	r4, [r1, #0]
 801e202:	b17c      	cbz	r4, 801e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e204:	7824      	ldrb	r4, [r4, #0]
 801e206:	e7e7      	b.n	801e1d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e208:	2c2d      	cmp	r4, #45	; 0x2d
 801e20a:	d102      	bne.n	801e212 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e20c:	f883 9000 	strb.w	r9, [r3]
 801e210:	e7ea      	b.n	801e1e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e212:	2c23      	cmp	r4, #35	; 0x23
 801e214:	d107      	bne.n	801e226 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e216:	f888 9000 	strb.w	r9, [r8]
 801e21a:	e7e5      	b.n	801e1e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e21c:	680c      	ldr	r4, [r1, #0]
 801e21e:	b10c      	cbz	r4, 801e224 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e220:	7824      	ldrb	r4, [r4, #0]
 801e222:	e7db      	b.n	801e1dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e224:	2400      	movs	r4, #0
 801e226:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e22a:	2b09      	cmp	r3, #9
 801e22c:	d901      	bls.n	801e232 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e22e:	2c2a      	cmp	r4, #42	; 0x2a
 801e230:	d122      	bne.n	801e278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e232:	2301      	movs	r3, #1
 801e234:	2c30      	cmp	r4, #48	; 0x30
 801e236:	f88e 3000 	strb.w	r3, [lr]
 801e23a:	d10d      	bne.n	801e258 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e23c:	f88c 3000 	strb.w	r3, [ip]
 801e240:	6803      	ldr	r3, [r0, #0]
 801e242:	b10b      	cbz	r3, 801e248 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e244:	3302      	adds	r3, #2
 801e246:	6003      	str	r3, [r0, #0]
 801e248:	680b      	ldr	r3, [r1, #0]
 801e24a:	b10b      	cbz	r3, 801e250 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e24c:	3301      	adds	r3, #1
 801e24e:	600b      	str	r3, [r1, #0]
 801e250:	6803      	ldr	r3, [r0, #0]
 801e252:	2b00      	cmp	r3, #0
 801e254:	d02f      	beq.n	801e2b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e256:	881c      	ldrh	r4, [r3, #0]
 801e258:	2c2a      	cmp	r4, #42	; 0x2a
 801e25a:	d135      	bne.n	801e2c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e25c:	f04f 33ff 	mov.w	r3, #4294967295
 801e260:	6033      	str	r3, [r6, #0]
 801e262:	6803      	ldr	r3, [r0, #0]
 801e264:	b10b      	cbz	r3, 801e26a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e266:	3302      	adds	r3, #2
 801e268:	6003      	str	r3, [r0, #0]
 801e26a:	680b      	ldr	r3, [r1, #0]
 801e26c:	b10b      	cbz	r3, 801e272 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e26e:	3301      	adds	r3, #1
 801e270:	600b      	str	r3, [r1, #0]
 801e272:	6803      	ldr	r3, [r0, #0]
 801e274:	b31b      	cbz	r3, 801e2be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e276:	881c      	ldrh	r4, [r3, #0]
 801e278:	2c2e      	cmp	r4, #46	; 0x2e
 801e27a:	d11a      	bne.n	801e2b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e27c:	2301      	movs	r3, #1
 801e27e:	703b      	strb	r3, [r7, #0]
 801e280:	6803      	ldr	r3, [r0, #0]
 801e282:	b10b      	cbz	r3, 801e288 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e284:	3302      	adds	r3, #2
 801e286:	6003      	str	r3, [r0, #0]
 801e288:	680b      	ldr	r3, [r1, #0]
 801e28a:	b10b      	cbz	r3, 801e290 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e28c:	3301      	adds	r3, #1
 801e28e:	600b      	str	r3, [r1, #0]
 801e290:	6803      	ldr	r3, [r0, #0]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d036      	beq.n	801e304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e296:	881b      	ldrh	r3, [r3, #0]
 801e298:	2b2a      	cmp	r3, #42	; 0x2a
 801e29a:	d137      	bne.n	801e30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e29c:	f04f 33ff 	mov.w	r3, #4294967295
 801e2a0:	602b      	str	r3, [r5, #0]
 801e2a2:	6803      	ldr	r3, [r0, #0]
 801e2a4:	b10b      	cbz	r3, 801e2aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e2a6:	3302      	adds	r3, #2
 801e2a8:	6003      	str	r3, [r0, #0]
 801e2aa:	680b      	ldr	r3, [r1, #0]
 801e2ac:	b10b      	cbz	r3, 801e2b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e2ae:	3301      	adds	r3, #1
 801e2b0:	600b      	str	r3, [r1, #0]
 801e2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e2b6:	680c      	ldr	r4, [r1, #0]
 801e2b8:	b134      	cbz	r4, 801e2c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e2ba:	7824      	ldrb	r4, [r4, #0]
 801e2bc:	e7cc      	b.n	801e258 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e2be:	680b      	ldr	r3, [r1, #0]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d0f6      	beq.n	801e2b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e2c4:	781c      	ldrb	r4, [r3, #0]
 801e2c6:	e7d7      	b.n	801e278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	220a      	movs	r2, #10
 801e2cc:	6033      	str	r3, [r6, #0]
 801e2ce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e2d2:	fa1f f38c 	uxth.w	r3, ip
 801e2d6:	2b09      	cmp	r3, #9
 801e2d8:	d8ce      	bhi.n	801e278 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e2da:	6833      	ldr	r3, [r6, #0]
 801e2dc:	fb02 c303 	mla	r3, r2, r3, ip
 801e2e0:	6033      	str	r3, [r6, #0]
 801e2e2:	6803      	ldr	r3, [r0, #0]
 801e2e4:	b10b      	cbz	r3, 801e2ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e2e6:	3302      	adds	r3, #2
 801e2e8:	6003      	str	r3, [r0, #0]
 801e2ea:	680b      	ldr	r3, [r1, #0]
 801e2ec:	b10b      	cbz	r3, 801e2f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e2ee:	3301      	adds	r3, #1
 801e2f0:	600b      	str	r3, [r1, #0]
 801e2f2:	6803      	ldr	r3, [r0, #0]
 801e2f4:	b10b      	cbz	r3, 801e2fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e2f6:	881c      	ldrh	r4, [r3, #0]
 801e2f8:	e7e9      	b.n	801e2ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e2fa:	680c      	ldr	r4, [r1, #0]
 801e2fc:	2c00      	cmp	r4, #0
 801e2fe:	d0e6      	beq.n	801e2ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e300:	7824      	ldrb	r4, [r4, #0]
 801e302:	e7e4      	b.n	801e2ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e304:	680b      	ldr	r3, [r1, #0]
 801e306:	b10b      	cbz	r3, 801e30c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e308:	781b      	ldrb	r3, [r3, #0]
 801e30a:	e7c5      	b.n	801e298 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e30c:	2200      	movs	r2, #0
 801e30e:	240a      	movs	r4, #10
 801e310:	602a      	str	r2, [r5, #0]
 801e312:	3b30      	subs	r3, #48	; 0x30
 801e314:	682a      	ldr	r2, [r5, #0]
 801e316:	b29e      	uxth	r6, r3
 801e318:	2e09      	cmp	r6, #9
 801e31a:	d813      	bhi.n	801e344 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e31c:	fb04 3302 	mla	r3, r4, r2, r3
 801e320:	602b      	str	r3, [r5, #0]
 801e322:	6803      	ldr	r3, [r0, #0]
 801e324:	b10b      	cbz	r3, 801e32a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e326:	3302      	adds	r3, #2
 801e328:	6003      	str	r3, [r0, #0]
 801e32a:	680b      	ldr	r3, [r1, #0]
 801e32c:	b10b      	cbz	r3, 801e332 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e32e:	3301      	adds	r3, #1
 801e330:	600b      	str	r3, [r1, #0]
 801e332:	6803      	ldr	r3, [r0, #0]
 801e334:	b10b      	cbz	r3, 801e33a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e336:	881b      	ldrh	r3, [r3, #0]
 801e338:	e7eb      	b.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e33a:	680b      	ldr	r3, [r1, #0]
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d0e8      	beq.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e340:	781b      	ldrb	r3, [r3, #0]
 801e342:	e7e6      	b.n	801e312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e344:	2a06      	cmp	r2, #6
 801e346:	bfa8      	it	ge
 801e348:	2206      	movge	r2, #6
 801e34a:	602a      	str	r2, [r5, #0]
 801e34c:	e7b1      	b.n	801e2b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e34e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e34e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e352:	b0a3      	sub	sp, #140	; 0x8c
 801e354:	2600      	movs	r6, #0
 801e356:	4607      	mov	r7, r0
 801e358:	4688      	mov	r8, r1
 801e35a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e35e:	4631      	mov	r1, r6
 801e360:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e362:	4648      	mov	r0, r9
 801e364:	960d      	str	r6, [sp, #52]	; 0x34
 801e366:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e36a:	2242      	movs	r2, #66	; 0x42
 801e36c:	f00c fcb7 	bl	802acde <memset>
 801e370:	b15f      	cbz	r7, 801e38a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e372:	f108 3aff 	add.w	sl, r8, #4294967295
 801e376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e37a:	b152      	cbz	r2, 801e392 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e37c:	8812      	ldrh	r2, [r2, #0]
 801e37e:	b10a      	cbz	r2, 801e384 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e380:	459a      	cmp	sl, r3
 801e382:	dc2e      	bgt.n	801e3e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e384:	2200      	movs	r2, #0
 801e386:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e38a:	4638      	mov	r0, r7
 801e38c:	b023      	add	sp, #140	; 0x8c
 801e38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e392:	9a08      	ldr	r2, [sp, #32]
 801e394:	2a00      	cmp	r2, #0
 801e396:	d0f5      	beq.n	801e384 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e398:	7812      	ldrb	r2, [r2, #0]
 801e39a:	e7f0      	b.n	801e37e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e39c:	2d00      	cmp	r5, #0
 801e39e:	d0ea      	beq.n	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e3a0:	782a      	ldrb	r2, [r5, #0]
 801e3a2:	b142      	cbz	r2, 801e3b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e3a4:	2a25      	cmp	r2, #37	; 0x25
 801e3a6:	d001      	beq.n	801e3ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e3a8:	459a      	cmp	sl, r3
 801e3aa:	dc08      	bgt.n	801e3be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e3ac:	f1bb 0f00 	cmp.w	fp, #0
 801e3b0:	d121      	bne.n	801e3f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e3b2:	2d00      	cmp	r5, #0
 801e3b4:	d0df      	beq.n	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e3b6:	782a      	ldrb	r2, [r5, #0]
 801e3b8:	f04f 0b00 	mov.w	fp, #0
 801e3bc:	e01d      	b.n	801e3fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e3be:	f1bb 0f00 	cmp.w	fp, #0
 801e3c2:	d077      	beq.n	801e4b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e3c4:	f8bb 2000 	ldrh.w	r2, [fp]
 801e3c8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e3cc:	f1bb 0f00 	cmp.w	fp, #0
 801e3d0:	d002      	beq.n	801e3d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e3d2:	f10b 0202 	add.w	r2, fp, #2
 801e3d6:	9209      	str	r2, [sp, #36]	; 0x24
 801e3d8:	b10d      	cbz	r5, 801e3de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e3da:	3501      	adds	r5, #1
 801e3dc:	9508      	str	r5, [sp, #32]
 801e3de:	3301      	adds	r3, #1
 801e3e0:	930d      	str	r3, [sp, #52]	; 0x34
 801e3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e3e4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e3e8:	f1bb 0f00 	cmp.w	fp, #0
 801e3ec:	d0d6      	beq.n	801e39c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e3ee:	f8bb 2000 	ldrh.w	r2, [fp]
 801e3f2:	2a00      	cmp	r2, #0
 801e3f4:	d1d6      	bne.n	801e3a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e3f6:	f8bb 2000 	ldrh.w	r2, [fp]
 801e3fa:	2a00      	cmp	r2, #0
 801e3fc:	d0bb      	beq.n	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e3fe:	459a      	cmp	sl, r3
 801e400:	ddb9      	ble.n	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e402:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801e406:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801e40a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801e40e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801e412:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801e416:	960e      	str	r6, [sp, #56]	; 0x38
 801e418:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801e41c:	960f      	str	r6, [sp, #60]	; 0x3c
 801e41e:	f1bb 0f00 	cmp.w	fp, #0
 801e422:	d002      	beq.n	801e42a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801e424:	f10b 0302 	add.w	r3, fp, #2
 801e428:	9309      	str	r3, [sp, #36]	; 0x24
 801e42a:	b10d      	cbz	r5, 801e430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801e42c:	1c6b      	adds	r3, r5, #1
 801e42e:	9308      	str	r3, [sp, #32]
 801e430:	ab0f      	add	r3, sp, #60	; 0x3c
 801e432:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801e436:	a908      	add	r1, sp, #32
 801e438:	a809      	add	r0, sp, #36	; 0x24
 801e43a:	9305      	str	r3, [sp, #20]
 801e43c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801e440:	9304      	str	r3, [sp, #16]
 801e442:	ab0e      	add	r3, sp, #56	; 0x38
 801e444:	9303      	str	r3, [sp, #12]
 801e446:	ab0c      	add	r3, sp, #48	; 0x30
 801e448:	9302      	str	r3, [sp, #8]
 801e44a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801e44e:	9301      	str	r3, [sp, #4]
 801e450:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801e454:	9300      	str	r3, [sp, #0]
 801e456:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801e45a:	f7ff fea8 	bl	801e1ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801e45e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e460:	2b00      	cmp	r3, #0
 801e462:	bfbf      	itttt	lt
 801e464:	6823      	ldrlt	r3, [r4, #0]
 801e466:	3404      	addlt	r4, #4
 801e468:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e46c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801e46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e470:	2b00      	cmp	r3, #0
 801e472:	bfbe      	ittt	lt
 801e474:	6823      	ldrlt	r3, [r4, #0]
 801e476:	3404      	addlt	r4, #4
 801e478:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801e47c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801e480:	bfb8      	it	lt
 801e482:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801e484:	b1d9      	cbz	r1, 801e4be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801e486:	880b      	ldrh	r3, [r1, #0]
 801e488:	2b69      	cmp	r3, #105	; 0x69
 801e48a:	d01f      	beq.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e48c:	d82f      	bhi.n	801e4ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801e48e:	2b58      	cmp	r3, #88	; 0x58
 801e490:	d01c      	beq.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e492:	d818      	bhi.n	801e4c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801e494:	2b25      	cmp	r3, #37	; 0x25
 801e496:	d034      	beq.n	801e502 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801e498:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e49a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801e49e:	f1bb 0f00 	cmp.w	fp, #0
 801e4a2:	f000 80b7 	beq.w	801e614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801e4a6:	f8bb 5000 	ldrh.w	r5, [fp]
 801e4aa:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801e4ae:	3301      	adds	r3, #1
 801e4b0:	930d      	str	r3, [sp, #52]	; 0x34
 801e4b2:	e029      	b.n	801e508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e4b4:	b10d      	cbz	r5, 801e4ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801e4b6:	782a      	ldrb	r2, [r5, #0]
 801e4b8:	e786      	b.n	801e3c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e4ba:	462a      	mov	r2, r5
 801e4bc:	e784      	b.n	801e3c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801e4be:	2a00      	cmp	r2, #0
 801e4c0:	d0ea      	beq.n	801e498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e4c2:	7813      	ldrb	r3, [r2, #0]
 801e4c4:	e7e0      	b.n	801e488 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801e4c6:	3b63      	subs	r3, #99	; 0x63
 801e4c8:	2b01      	cmp	r3, #1
 801e4ca:	d8e5      	bhi.n	801e498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e4cc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801e4d0:	b329      	cbz	r1, 801e51e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801e4d2:	880b      	ldrh	r3, [r1, #0]
 801e4d4:	2b69      	cmp	r3, #105	; 0x69
 801e4d6:	d063      	beq.n	801e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e4d8:	d825      	bhi.n	801e526 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801e4da:	2b63      	cmp	r3, #99	; 0x63
 801e4dc:	d038      	beq.n	801e550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801e4de:	2b64      	cmp	r3, #100	; 0x64
 801e4e0:	d05e      	beq.n	801e5a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801e4e2:	2b58      	cmp	r3, #88	; 0x58
 801e4e4:	d07a      	beq.n	801e5dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801e4e6:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801e4ea:	4625      	mov	r5, r4
 801e4ec:	e036      	b.n	801e55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e4ee:	2b73      	cmp	r3, #115	; 0x73
 801e4f0:	d0ec      	beq.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4f2:	d802      	bhi.n	801e4fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801e4f4:	2b6f      	cmp	r3, #111	; 0x6f
 801e4f6:	d1cf      	bne.n	801e498 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801e4f8:	e7e8      	b.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4fa:	2b75      	cmp	r3, #117	; 0x75
 801e4fc:	d0e6      	beq.n	801e4cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801e4fe:	2b78      	cmp	r3, #120	; 0x78
 801e500:	e7f9      	b.n	801e4f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801e502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e504:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801e508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e50a:	b10b      	cbz	r3, 801e510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801e50c:	3302      	adds	r3, #2
 801e50e:	9309      	str	r3, [sp, #36]	; 0x24
 801e510:	9b08      	ldr	r3, [sp, #32]
 801e512:	2b00      	cmp	r3, #0
 801e514:	f43f af2f 	beq.w	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e518:	3301      	adds	r3, #1
 801e51a:	9308      	str	r3, [sp, #32]
 801e51c:	e72b      	b.n	801e376 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e51e:	2a00      	cmp	r2, #0
 801e520:	d0e1      	beq.n	801e4e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e522:	7813      	ldrb	r3, [r2, #0]
 801e524:	e7d6      	b.n	801e4d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801e526:	2b73      	cmp	r3, #115	; 0x73
 801e528:	d036      	beq.n	801e598 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801e52a:	d807      	bhi.n	801e53c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801e52c:	2b6f      	cmp	r3, #111	; 0x6f
 801e52e:	d1da      	bne.n	801e4e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e532:	1d25      	adds	r5, r4, #4
 801e534:	2308      	movs	r3, #8
 801e536:	eba8 0202 	sub.w	r2, r8, r2
 801e53a:	e049      	b.n	801e5d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e53c:	2b75      	cmp	r3, #117	; 0x75
 801e53e:	d042      	beq.n	801e5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801e540:	2b78      	cmp	r3, #120	; 0x78
 801e542:	d1d0      	bne.n	801e4e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801e544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e546:	1d25      	adds	r5, r4, #4
 801e548:	2310      	movs	r3, #16
 801e54a:	eba8 0202 	sub.w	r2, r8, r2
 801e54e:	e03f      	b.n	801e5d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801e550:	7823      	ldrb	r3, [r4, #0]
 801e552:	1d25      	adds	r5, r4, #4
 801e554:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801e558:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801e55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e55e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e562:	2b00      	cmp	r3, #0
 801e564:	d051      	beq.n	801e60a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801e566:	881a      	ldrh	r2, [r3, #0]
 801e568:	a80d      	add	r0, sp, #52	; 0x34
 801e56a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801e56e:	462c      	mov	r4, r5
 801e570:	9005      	str	r0, [sp, #20]
 801e572:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801e576:	9004      	str	r0, [sp, #16]
 801e578:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e57a:	9003      	str	r0, [sp, #12]
 801e57c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801e580:	9002      	str	r0, [sp, #8]
 801e582:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e584:	9001      	str	r0, [sp, #4]
 801e586:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801e58a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801e58e:	9000      	str	r0, [sp, #0]
 801e590:	a810      	add	r0, sp, #64	; 0x40
 801e592:	f7ff fd49 	bl	801e028 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801e596:	e7b7      	b.n	801e508 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801e598:	1d25      	adds	r5, r4, #4
 801e59a:	6823      	ldr	r3, [r4, #0]
 801e59c:	9310      	str	r3, [sp, #64]	; 0x40
 801e59e:	e7dd      	b.n	801e55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5a2:	230a      	movs	r3, #10
 801e5a4:	4649      	mov	r1, r9
 801e5a6:	6820      	ldr	r0, [r4, #0]
 801e5a8:	eba8 0202 	sub.w	r2, r8, r2
 801e5ac:	1d25      	adds	r5, r4, #4
 801e5ae:	b292      	uxth	r2, r2
 801e5b0:	f7ff fd08 	bl	801dfc4 <_ZN8touchgfx7Unicode4itoaElPtti>
 801e5b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e5b8:	2b2d      	cmp	r3, #45	; 0x2d
 801e5ba:	d1cf      	bne.n	801e55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5bc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e5c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5c2:	3302      	adds	r3, #2
 801e5c4:	e7ea      	b.n	801e59c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801e5c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5c8:	1d25      	adds	r5, r4, #4
 801e5ca:	230a      	movs	r3, #10
 801e5cc:	eba8 0202 	sub.w	r2, r8, r2
 801e5d0:	b292      	uxth	r2, r2
 801e5d2:	4649      	mov	r1, r9
 801e5d4:	6820      	ldr	r0, [r4, #0]
 801e5d6:	f7ff fcd7 	bl	801df88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e5da:	e7bf      	b.n	801e55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e5de:	2310      	movs	r3, #16
 801e5e0:	4649      	mov	r1, r9
 801e5e2:	6820      	ldr	r0, [r4, #0]
 801e5e4:	eba8 0202 	sub.w	r2, r8, r2
 801e5e8:	1d25      	adds	r5, r4, #4
 801e5ea:	b292      	uxth	r2, r2
 801e5ec:	f7ff fccc 	bl	801df88 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801e5f0:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801e5f4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d0af      	beq.n	801e55c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801e5fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801e600:	2919      	cmp	r1, #25
 801e602:	d8f7      	bhi.n	801e5f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e604:	3b20      	subs	r3, #32
 801e606:	8013      	strh	r3, [r2, #0]
 801e608:	e7f4      	b.n	801e5f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801e60a:	9a08      	ldr	r2, [sp, #32]
 801e60c:	2a00      	cmp	r2, #0
 801e60e:	d0ab      	beq.n	801e568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e610:	7812      	ldrb	r2, [r2, #0]
 801e612:	e7a9      	b.n	801e568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801e614:	2d00      	cmp	r5, #0
 801e616:	f43f af48 	beq.w	801e4aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801e61a:	782d      	ldrb	r5, [r5, #0]
 801e61c:	e745      	b.n	801e4aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801e61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801e61e:	b507      	push	{r0, r1, r2, lr}
 801e620:	9300      	str	r3, [sp, #0]
 801e622:	4613      	mov	r3, r2
 801e624:	2200      	movs	r2, #0
 801e626:	f7ff fe92 	bl	801e34e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801e62a:	b003      	add	sp, #12
 801e62c:	f85d fb04 	ldr.w	pc, [sp], #4

0801e630 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801e630:	b40c      	push	{r2, r3}
 801e632:	b507      	push	{r0, r1, r2, lr}
 801e634:	ab04      	add	r3, sp, #16
 801e636:	f853 2b04 	ldr.w	r2, [r3], #4
 801e63a:	9301      	str	r3, [sp, #4]
 801e63c:	f7ff ffef 	bl	801e61e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801e640:	b003      	add	sp, #12
 801e642:	f85d eb04 	ldr.w	lr, [sp], #4
 801e646:	b002      	add	sp, #8
 801e648:	4770      	bx	lr
	...

0801e64c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801e64c:	4b01      	ldr	r3, [pc, #4]	; (801e654 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801e64e:	6018      	str	r0, [r3, #0]
 801e650:	4770      	bx	lr
 801e652:	bf00      	nop
 801e654:	2400b924 	.word	0x2400b924

0801e658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801e658:	4b06      	ldr	r3, [pc, #24]	; (801e674 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801e65a:	881a      	ldrh	r2, [r3, #0]
 801e65c:	4282      	cmp	r2, r0
 801e65e:	d807      	bhi.n	801e670 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801e660:	4b05      	ldr	r3, [pc, #20]	; (801e678 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801e662:	881b      	ldrh	r3, [r3, #0]
 801e664:	4413      	add	r3, r2
 801e666:	4298      	cmp	r0, r3
 801e668:	bfac      	ite	ge
 801e66a:	2000      	movge	r0, #0
 801e66c:	2001      	movlt	r0, #1
 801e66e:	4770      	bx	lr
 801e670:	2000      	movs	r0, #0
 801e672:	4770      	bx	lr
 801e674:	2400b944 	.word	0x2400b944
 801e678:	2400b948 	.word	0x2400b948

0801e67c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801e67c:	b508      	push	{r3, lr}
 801e67e:	4601      	mov	r1, r0
 801e680:	f7ff ffea 	bl	801e658 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801e684:	b118      	cbz	r0, 801e68e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801e686:	4b02      	ldr	r3, [pc, #8]	; (801e690 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801e68e:	bd08      	pop	{r3, pc}
 801e690:	2400b928 	.word	0x2400b928

0801e694 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e698:	4d28      	ldr	r5, [pc, #160]	; (801e73c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e69a:	682b      	ldr	r3, [r5, #0]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d04a      	beq.n	801e736 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e6a0:	4a27      	ldr	r2, [pc, #156]	; (801e740 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e6a2:	4e28      	ldr	r6, [pc, #160]	; (801e744 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e6a4:	8810      	ldrh	r0, [r2, #0]
 801e6a6:	f8b6 8000 	ldrh.w	r8, [r6]
 801e6aa:	4c27      	ldr	r4, [pc, #156]	; (801e748 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e6ac:	4440      	add	r0, r8
 801e6ae:	4f27      	ldr	r7, [pc, #156]	; (801e74c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e6b0:	1c41      	adds	r1, r0, #1
 801e6b2:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801e6b6:	f021 0101 	bic.w	r1, r1, #1
 801e6ba:	eb03 020e 	add.w	r2, r3, lr
 801e6be:	0409      	lsls	r1, r1, #16
 801e6c0:	6022      	str	r2, [r4, #0]
 801e6c2:	0c09      	lsrs	r1, r1, #16
 801e6c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801e6c8:	eb0e 010c 	add.w	r1, lr, ip
 801e6cc:	185a      	adds	r2, r3, r1
 801e6ce:	603a      	str	r2, [r7, #0]
 801e6d0:	220e      	movs	r2, #14
 801e6d2:	fb02 f208 	mul.w	r2, r2, r8
 801e6d6:	3203      	adds	r2, #3
 801e6d8:	f022 0203 	bic.w	r2, r2, #3
 801e6dc:	4411      	add	r1, r2
 801e6de:	440b      	add	r3, r1
 801e6e0:	491b      	ldr	r1, [pc, #108]	; (801e750 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801e6e2:	600b      	str	r3, [r1, #0]
 801e6e4:	2300      	movs	r3, #0
 801e6e6:	491b      	ldr	r1, [pc, #108]	; (801e754 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801e6e8:	800b      	strh	r3, [r1, #0]
 801e6ea:	491b      	ldr	r1, [pc, #108]	; (801e758 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801e6ec:	6809      	ldr	r1, [r1, #0]
 801e6ee:	eba1 010e 	sub.w	r1, r1, lr
 801e6f2:	eba1 010c 	sub.w	r1, r1, ip
 801e6f6:	469c      	mov	ip, r3
 801e6f8:	1a8a      	subs	r2, r1, r2
 801e6fa:	4918      	ldr	r1, [pc, #96]	; (801e75c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801e6fc:	600a      	str	r2, [r1, #0]
 801e6fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801e702:	4a17      	ldr	r2, [pc, #92]	; (801e760 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801e704:	8013      	strh	r3, [r2, #0]
 801e706:	4283      	cmp	r3, r0
 801e708:	d10d      	bne.n	801e726 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801e70a:	8835      	ldrh	r5, [r6, #0]
 801e70c:	2300      	movs	r3, #0
 801e70e:	6838      	ldr	r0, [r7, #0]
 801e710:	240e      	movs	r4, #14
 801e712:	429d      	cmp	r5, r3
 801e714:	d90f      	bls.n	801e736 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801e716:	fb04 0203 	mla	r2, r4, r3, r0
 801e71a:	3301      	adds	r3, #1
 801e71c:	7b11      	ldrb	r1, [r2, #12]
 801e71e:	f36f 1145 	bfc	r1, #5, #1
 801e722:	7311      	strb	r1, [r2, #12]
 801e724:	e7f5      	b.n	801e712 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801e726:	682a      	ldr	r2, [r5, #0]
 801e728:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e72c:	6822      	ldr	r2, [r4, #0]
 801e72e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801e732:	3301      	adds	r3, #1
 801e734:	e7e7      	b.n	801e706 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801e736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e73a:	bf00      	nop
 801e73c:	2400b928 	.word	0x2400b928
 801e740:	2400b944 	.word	0x2400b944
 801e744:	2400b948 	.word	0x2400b948
 801e748:	2400b93c 	.word	0x2400b93c
 801e74c:	2400b92c 	.word	0x2400b92c
 801e750:	2400b934 	.word	0x2400b934
 801e754:	2400b946 	.word	0x2400b946
 801e758:	2400b930 	.word	0x2400b930
 801e75c:	2400b940 	.word	0x2400b940
 801e760:	2400b938 	.word	0x2400b938

0801e764 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e764:	4b10      	ldr	r3, [pc, #64]	; (801e7a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801e766:	b510      	push	{r4, lr}
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	b9db      	cbnz	r3, 801e7a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e76c:	b1d1      	cbz	r1, 801e7a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801e76e:	4b0f      	ldr	r3, [pc, #60]	; (801e7ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801e770:	240e      	movs	r4, #14
 801e772:	801a      	strh	r2, [r3, #0]
 801e774:	b292      	uxth	r2, r2
 801e776:	4b0e      	ldr	r3, [pc, #56]	; (801e7b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801e778:	881b      	ldrh	r3, [r3, #0]
 801e77a:	4413      	add	r3, r2
 801e77c:	4362      	muls	r2, r4
 801e77e:	2406      	movs	r4, #6
 801e780:	fb04 2203 	mla	r2, r4, r3, r2
 801e784:	428a      	cmp	r2, r1
 801e786:	d305      	bcc.n	801e794 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801e788:	4b0a      	ldr	r3, [pc, #40]	; (801e7b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801e78a:	2135      	movs	r1, #53	; 0x35
 801e78c:	4a0a      	ldr	r2, [pc, #40]	; (801e7b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801e78e:	480b      	ldr	r0, [pc, #44]	; (801e7bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801e790:	f00c f8a0 	bl	802a8d4 <__assert_func>
 801e794:	4b0a      	ldr	r3, [pc, #40]	; (801e7c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801e796:	6019      	str	r1, [r3, #0]
 801e798:	4b0a      	ldr	r3, [pc, #40]	; (801e7c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801e79a:	6018      	str	r0, [r3, #0]
 801e79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7a0:	f7ff bf78 	b.w	801e694 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e7a4:	bd10      	pop	{r4, pc}
 801e7a6:	bf00      	nop
 801e7a8:	2400b934 	.word	0x2400b934
 801e7ac:	2400b948 	.word	0x2400b948
 801e7b0:	2400b944 	.word	0x2400b944
 801e7b4:	0802f6a9 	.word	0x0802f6a9
 801e7b8:	0802f702 	.word	0x0802f702
 801e7bc:	0802f684 	.word	0x0802f684
 801e7c0:	2400b930 	.word	0x2400b930
 801e7c4:	2400b928 	.word	0x2400b928

0801e7c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e7c8:	b470      	push	{r4, r5, r6}
 801e7ca:	4c07      	ldr	r4, [pc, #28]	; (801e7e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e7cc:	4605      	mov	r5, r0
 801e7ce:	4610      	mov	r0, r2
 801e7d0:	9a03      	ldr	r2, [sp, #12]
 801e7d2:	6826      	ldr	r6, [r4, #0]
 801e7d4:	b936      	cbnz	r6, 801e7e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e7d6:	6025      	str	r5, [r4, #0]
 801e7d8:	4c04      	ldr	r4, [pc, #16]	; (801e7ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e7da:	8021      	strh	r1, [r4, #0]
 801e7dc:	4619      	mov	r1, r3
 801e7de:	bc70      	pop	{r4, r5, r6}
 801e7e0:	f7ff bfc0 	b.w	801e764 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e7e4:	bc70      	pop	{r4, r5, r6}
 801e7e6:	4770      	bx	lr
 801e7e8:	2400b94c 	.word	0x2400b94c
 801e7ec:	2400b944 	.word	0x2400b944

0801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e7f0:	b508      	push	{r3, lr}
 801e7f2:	4b14      	ldr	r3, [pc, #80]	; (801e844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e7f4:	6819      	ldr	r1, [r3, #0]
 801e7f6:	b931      	cbnz	r1, 801e806 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801e7f8:	4b13      	ldr	r3, [pc, #76]	; (801e848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e7fa:	f240 4185 	movw	r1, #1157	; 0x485
 801e7fe:	4a13      	ldr	r2, [pc, #76]	; (801e84c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e800:	4813      	ldr	r0, [pc, #76]	; (801e850 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e802:	f00c f867 	bl	802a8d4 <__assert_func>
 801e806:	4a13      	ldr	r2, [pc, #76]	; (801e854 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e808:	8803      	ldrh	r3, [r0, #0]
 801e80a:	8812      	ldrh	r2, [r2, #0]
 801e80c:	4293      	cmp	r3, r2
 801e80e:	d204      	bcs.n	801e81a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801e810:	2214      	movs	r2, #20
 801e812:	fb02 1303 	mla	r3, r2, r3, r1
 801e816:	8918      	ldrh	r0, [r3, #8]
 801e818:	bd08      	pop	{r3, pc}
 801e81a:	490f      	ldr	r1, [pc, #60]	; (801e858 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801e81c:	8809      	ldrh	r1, [r1, #0]
 801e81e:	4411      	add	r1, r2
 801e820:	428b      	cmp	r3, r1
 801e822:	da06      	bge.n	801e832 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801e824:	1a9b      	subs	r3, r3, r2
 801e826:	4a0d      	ldr	r2, [pc, #52]	; (801e85c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801e828:	210e      	movs	r1, #14
 801e82a:	6812      	ldr	r2, [r2, #0]
 801e82c:	fb01 2303 	mla	r3, r1, r3, r2
 801e830:	e7f1      	b.n	801e816 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801e832:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e836:	4293      	cmp	r3, r2
 801e838:	bf0a      	itet	eq
 801e83a:	4b09      	ldreq	r3, [pc, #36]	; (801e860 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801e83c:	2000      	movne	r0, #0
 801e83e:	8818      	ldrheq	r0, [r3, #0]
 801e840:	e7ea      	b.n	801e818 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801e842:	bf00      	nop
 801e844:	2400b94c 	.word	0x2400b94c
 801e848:	0802e8e4 	.word	0x0802e8e4
 801e84c:	0802f7af 	.word	0x0802f7af
 801e850:	0802f684 	.word	0x0802f684
 801e854:	2400b944 	.word	0x2400b944
 801e858:	2400b948 	.word	0x2400b948
 801e85c:	2400b92c 	.word	0x2400b92c
 801e860:	2400b8b8 	.word	0x2400b8b8

0801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e864:	b508      	push	{r3, lr}
 801e866:	4b14      	ldr	r3, [pc, #80]	; (801e8b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e868:	6819      	ldr	r1, [r3, #0]
 801e86a:	b931      	cbnz	r1, 801e87a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801e86c:	4b13      	ldr	r3, [pc, #76]	; (801e8bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e86e:	f240 4199 	movw	r1, #1177	; 0x499
 801e872:	4a13      	ldr	r2, [pc, #76]	; (801e8c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e874:	4813      	ldr	r0, [pc, #76]	; (801e8c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e876:	f00c f82d 	bl	802a8d4 <__assert_func>
 801e87a:	4a13      	ldr	r2, [pc, #76]	; (801e8c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e87c:	8803      	ldrh	r3, [r0, #0]
 801e87e:	8812      	ldrh	r2, [r2, #0]
 801e880:	4293      	cmp	r3, r2
 801e882:	d204      	bcs.n	801e88e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801e884:	2214      	movs	r2, #20
 801e886:	fb02 1303 	mla	r3, r2, r3, r1
 801e88a:	8958      	ldrh	r0, [r3, #10]
 801e88c:	bd08      	pop	{r3, pc}
 801e88e:	490f      	ldr	r1, [pc, #60]	; (801e8cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801e890:	8809      	ldrh	r1, [r1, #0]
 801e892:	4411      	add	r1, r2
 801e894:	428b      	cmp	r3, r1
 801e896:	da06      	bge.n	801e8a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801e898:	1a9b      	subs	r3, r3, r2
 801e89a:	4a0d      	ldr	r2, [pc, #52]	; (801e8d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801e89c:	210e      	movs	r1, #14
 801e89e:	6812      	ldr	r2, [r2, #0]
 801e8a0:	fb01 2303 	mla	r3, r1, r3, r2
 801e8a4:	e7f1      	b.n	801e88a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801e8a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e8aa:	4293      	cmp	r3, r2
 801e8ac:	bf0a      	itet	eq
 801e8ae:	4b09      	ldreq	r3, [pc, #36]	; (801e8d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801e8b0:	2000      	movne	r0, #0
 801e8b2:	8818      	ldrheq	r0, [r3, #0]
 801e8b4:	e7ea      	b.n	801e88c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801e8b6:	bf00      	nop
 801e8b8:	2400b94c 	.word	0x2400b94c
 801e8bc:	0802e8e4 	.word	0x0802e8e4
 801e8c0:	0802f7db 	.word	0x0802f7db
 801e8c4:	0802f684 	.word	0x0802f684
 801e8c8:	2400b944 	.word	0x2400b944
 801e8cc:	2400b948 	.word	0x2400b948
 801e8d0:	2400b92c 	.word	0x2400b92c
 801e8d4:	2400b8ba 	.word	0x2400b8ba

0801e8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801e8d8:	4b23      	ldr	r3, [pc, #140]	; (801e968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801e8da:	b510      	push	{r4, lr}
 801e8dc:	681c      	ldr	r4, [r3, #0]
 801e8de:	b934      	cbnz	r4, 801e8ee <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801e8e0:	4b22      	ldr	r3, [pc, #136]	; (801e96c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801e8e2:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801e8e6:	4a22      	ldr	r2, [pc, #136]	; (801e970 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801e8e8:	4822      	ldr	r0, [pc, #136]	; (801e974 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801e8ea:	f00b fff3 	bl	802a8d4 <__assert_func>
 801e8ee:	4a22      	ldr	r2, [pc, #136]	; (801e978 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e8f0:	880b      	ldrh	r3, [r1, #0]
 801e8f2:	8812      	ldrh	r2, [r2, #0]
 801e8f4:	4293      	cmp	r3, r2
 801e8f6:	d211      	bcs.n	801e91c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e8f8:	2214      	movs	r2, #20
 801e8fa:	fb02 4303 	mla	r3, r2, r3, r4
 801e8fe:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e902:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e906:	8a1a      	ldrh	r2, [r3, #16]
 801e908:	8a5b      	ldrh	r3, [r3, #18]
 801e90a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e90e:	8004      	strh	r4, [r0, #0]
 801e910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e914:	8041      	strh	r1, [r0, #2]
 801e916:	8082      	strh	r2, [r0, #4]
 801e918:	80c3      	strh	r3, [r0, #6]
 801e91a:	e00e      	b.n	801e93a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e91c:	4917      	ldr	r1, [pc, #92]	; (801e97c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e91e:	8809      	ldrh	r1, [r1, #0]
 801e920:	4411      	add	r1, r2
 801e922:	428b      	cmp	r3, r1
 801e924:	da0a      	bge.n	801e93c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e926:	1a9b      	subs	r3, r3, r2
 801e928:	4a15      	ldr	r2, [pc, #84]	; (801e980 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e92a:	210e      	movs	r1, #14
 801e92c:	6812      	ldr	r2, [r2, #0]
 801e92e:	fb01 2303 	mla	r3, r1, r3, r2
 801e932:	681a      	ldr	r2, [r3, #0]
 801e934:	6002      	str	r2, [r0, #0]
 801e936:	685a      	ldr	r2, [r3, #4]
 801e938:	6042      	str	r2, [r0, #4]
 801e93a:	bd10      	pop	{r4, pc}
 801e93c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e940:	4293      	cmp	r3, r2
 801e942:	d10b      	bne.n	801e95c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e944:	4b0f      	ldr	r3, [pc, #60]	; (801e984 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e946:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e94a:	4b0f      	ldr	r3, [pc, #60]	; (801e988 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e94c:	8081      	strh	r1, [r0, #4]
 801e94e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e952:	2300      	movs	r3, #0
 801e954:	80c2      	strh	r2, [r0, #6]
 801e956:	8003      	strh	r3, [r0, #0]
 801e958:	8043      	strh	r3, [r0, #2]
 801e95a:	e7ee      	b.n	801e93a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e95c:	2300      	movs	r3, #0
 801e95e:	8003      	strh	r3, [r0, #0]
 801e960:	8043      	strh	r3, [r0, #2]
 801e962:	8083      	strh	r3, [r0, #4]
 801e964:	e7d8      	b.n	801e918 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e966:	bf00      	nop
 801e968:	2400b94c 	.word	0x2400b94c
 801e96c:	0802e8e4 	.word	0x0802e8e4
 801e970:	0802f748 	.word	0x0802f748
 801e974:	0802f684 	.word	0x0802f684
 801e978:	2400b944 	.word	0x2400b944
 801e97c:	2400b948 	.word	0x2400b948
 801e980:	2400b92c 	.word	0x2400b92c
 801e984:	2400b8b8 	.word	0x2400b8b8
 801e988:	2400b8ba 	.word	0x2400b8ba

0801e98c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e98c:	4b18      	ldr	r3, [pc, #96]	; (801e9f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	b34b      	cbz	r3, 801e9e6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e992:	4a18      	ldr	r2, [pc, #96]	; (801e9f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e994:	8800      	ldrh	r0, [r0, #0]
 801e996:	8812      	ldrh	r2, [r2, #0]
 801e998:	4290      	cmp	r0, r2
 801e99a:	d211      	bcs.n	801e9c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e99c:	2214      	movs	r2, #20
 801e99e:	fb02 3300 	mla	r3, r2, r0, r3
 801e9a2:	8a1a      	ldrh	r2, [r3, #16]
 801e9a4:	8919      	ldrh	r1, [r3, #8]
 801e9a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e9aa:	428a      	cmp	r2, r1
 801e9ac:	db1d      	blt.n	801e9ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e9ae:	8a58      	ldrh	r0, [r3, #18]
 801e9b0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e9b4:	895b      	ldrh	r3, [r3, #10]
 801e9b6:	4298      	cmp	r0, r3
 801e9b8:	bfac      	ite	ge
 801e9ba:	2000      	movge	r0, #0
 801e9bc:	2001      	movlt	r0, #1
 801e9be:	4770      	bx	lr
 801e9c0:	4b0d      	ldr	r3, [pc, #52]	; (801e9f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e9c2:	881b      	ldrh	r3, [r3, #0]
 801e9c4:	4413      	add	r3, r2
 801e9c6:	4298      	cmp	r0, r3
 801e9c8:	da0d      	bge.n	801e9e6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e9ca:	4b0c      	ldr	r3, [pc, #48]	; (801e9fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e9cc:	1a80      	subs	r0, r0, r2
 801e9ce:	220e      	movs	r2, #14
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	fb02 3300 	mla	r3, r2, r0, r3
 801e9d6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e9da:	891a      	ldrh	r2, [r3, #8]
 801e9dc:	4291      	cmp	r1, r2
 801e9de:	db04      	blt.n	801e9ea <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e9e0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e9e4:	e7e6      	b.n	801e9b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e9e6:	2000      	movs	r0, #0
 801e9e8:	4770      	bx	lr
 801e9ea:	2001      	movs	r0, #1
 801e9ec:	4770      	bx	lr
 801e9ee:	bf00      	nop
 801e9f0:	2400b94c 	.word	0x2400b94c
 801e9f4:	2400b944 	.word	0x2400b944
 801e9f8:	2400b948 	.word	0x2400b948
 801e9fc:	2400b92c 	.word	0x2400b92c

0801ea00 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ea00:	b508      	push	{r3, lr}
 801ea02:	4b12      	ldr	r3, [pc, #72]	; (801ea4c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ea04:	6819      	ldr	r1, [r3, #0]
 801ea06:	b931      	cbnz	r1, 801ea16 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ea08:	4b11      	ldr	r3, [pc, #68]	; (801ea50 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ea0a:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801ea0e:	4a11      	ldr	r2, [pc, #68]	; (801ea54 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ea10:	4811      	ldr	r0, [pc, #68]	; (801ea58 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ea12:	f00b ff5f 	bl	802a8d4 <__assert_func>
 801ea16:	8803      	ldrh	r3, [r0, #0]
 801ea18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ea1c:	4293      	cmp	r3, r2
 801ea1e:	d012      	beq.n	801ea46 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ea20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ea24:	4293      	cmp	r3, r2
 801ea26:	d103      	bne.n	801ea30 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801ea28:	4b0c      	ldr	r3, [pc, #48]	; (801ea5c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ea2e:	bd08      	pop	{r3, pc}
 801ea30:	4a0b      	ldr	r2, [pc, #44]	; (801ea60 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801ea32:	6812      	ldr	r2, [r2, #0]
 801ea34:	b11a      	cbz	r2, 801ea3e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801ea36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ea3a:	2800      	cmp	r0, #0
 801ea3c:	d1f7      	bne.n	801ea2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ea3e:	2214      	movs	r2, #20
 801ea40:	4353      	muls	r3, r2
 801ea42:	58c8      	ldr	r0, [r1, r3]
 801ea44:	e7f3      	b.n	801ea2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ea46:	2000      	movs	r0, #0
 801ea48:	e7f1      	b.n	801ea2e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801ea4a:	bf00      	nop
 801ea4c:	2400b94c 	.word	0x2400b94c
 801ea50:	0802e8e4 	.word	0x0802e8e4
 801ea54:	0802f77e 	.word	0x0802f77e
 801ea58:	0802f684 	.word	0x0802f684
 801ea5c:	2400b8c4 	.word	0x2400b8c4
 801ea60:	2400b928 	.word	0x2400b928

0801ea64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ea64:	8802      	ldrh	r2, [r0, #0]
 801ea66:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801ea6a:	429a      	cmp	r2, r3
 801ea6c:	d845      	bhi.n	801eafa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801ea6e:	4b24      	ldr	r3, [pc, #144]	; (801eb00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ea70:	8818      	ldrh	r0, [r3, #0]
 801ea72:	4282      	cmp	r2, r0
 801ea74:	d221      	bcs.n	801eaba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801ea76:	4b23      	ldr	r3, [pc, #140]	; (801eb04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ea78:	6819      	ldr	r1, [r3, #0]
 801ea7a:	2314      	movs	r3, #20
 801ea7c:	fb03 1302 	mla	r3, r3, r2, r1
 801ea80:	6858      	ldr	r0, [r3, #4]
 801ea82:	2800      	cmp	r0, #0
 801ea84:	d03a      	beq.n	801eafc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ea86:	4920      	ldr	r1, [pc, #128]	; (801eb08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ea88:	6809      	ldr	r1, [r1, #0]
 801ea8a:	2900      	cmp	r1, #0
 801ea8c:	d036      	beq.n	801eafc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ea8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ea92:	2900      	cmp	r1, #0
 801ea94:	d032      	beq.n	801eafc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801ea96:	891a      	ldrh	r2, [r3, #8]
 801ea98:	8958      	ldrh	r0, [r3, #10]
 801ea9a:	4350      	muls	r0, r2
 801ea9c:	7c5a      	ldrb	r2, [r3, #17]
 801ea9e:	7cdb      	ldrb	r3, [r3, #19]
 801eaa0:	0952      	lsrs	r2, r2, #5
 801eaa2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801eaa6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801eaaa:	2b0b      	cmp	r3, #11
 801eaac:	bf18      	it	ne
 801eaae:	0040      	lslne	r0, r0, #1
 801eab0:	3003      	adds	r0, #3
 801eab2:	f020 0003 	bic.w	r0, r0, #3
 801eab6:	4408      	add	r0, r1
 801eab8:	4770      	bx	lr
 801eaba:	4b14      	ldr	r3, [pc, #80]	; (801eb0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801eabc:	881b      	ldrh	r3, [r3, #0]
 801eabe:	4403      	add	r3, r0
 801eac0:	429a      	cmp	r2, r3
 801eac2:	da1a      	bge.n	801eafa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eac4:	4b12      	ldr	r3, [pc, #72]	; (801eb10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801eac6:	1a10      	subs	r0, r2, r0
 801eac8:	210e      	movs	r1, #14
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	fb01 3000 	mla	r0, r1, r0, r3
 801ead0:	7b03      	ldrb	r3, [r0, #12]
 801ead2:	f003 031f 	and.w	r3, r3, #31
 801ead6:	2b0b      	cmp	r3, #11
 801ead8:	d10b      	bne.n	801eaf2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801eada:	8903      	ldrh	r3, [r0, #8]
 801eadc:	8940      	ldrh	r0, [r0, #10]
 801eade:	4358      	muls	r0, r3
 801eae0:	4b09      	ldr	r3, [pc, #36]	; (801eb08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801eae2:	3003      	adds	r0, #3
 801eae4:	6819      	ldr	r1, [r3, #0]
 801eae6:	f020 0303 	bic.w	r3, r0, #3
 801eaea:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801eaee:	4418      	add	r0, r3
 801eaf0:	4770      	bx	lr
 801eaf2:	2b0d      	cmp	r3, #13
 801eaf4:	d101      	bne.n	801eafa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801eaf6:	300d      	adds	r0, #13
 801eaf8:	4770      	bx	lr
 801eafa:	2000      	movs	r0, #0
 801eafc:	4770      	bx	lr
 801eafe:	bf00      	nop
 801eb00:	2400b944 	.word	0x2400b944
 801eb04:	2400b94c 	.word	0x2400b94c
 801eb08:	2400b928 	.word	0x2400b928
 801eb0c:	2400b948 	.word	0x2400b948
 801eb10:	2400b92c 	.word	0x2400b92c

0801eb14 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801eb14:	4b17      	ldr	r3, [pc, #92]	; (801eb74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801eb16:	b510      	push	{r4, lr}
 801eb18:	6819      	ldr	r1, [r3, #0]
 801eb1a:	8803      	ldrh	r3, [r0, #0]
 801eb1c:	b1e9      	cbz	r1, 801eb5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801eb1e:	4a16      	ldr	r2, [pc, #88]	; (801eb78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801eb20:	8812      	ldrh	r2, [r2, #0]
 801eb22:	429a      	cmp	r2, r3
 801eb24:	d90a      	bls.n	801eb3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801eb26:	2214      	movs	r2, #20
 801eb28:	fb02 1303 	mla	r3, r2, r3, r1
 801eb2c:	7c58      	ldrb	r0, [r3, #17]
 801eb2e:	0942      	lsrs	r2, r0, #5
 801eb30:	7cd8      	ldrb	r0, [r3, #19]
 801eb32:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801eb36:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801eb3a:	bd10      	pop	{r4, pc}
 801eb3c:	490f      	ldr	r1, [pc, #60]	; (801eb7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801eb3e:	8809      	ldrh	r1, [r1, #0]
 801eb40:	4411      	add	r1, r2
 801eb42:	428b      	cmp	r3, r1
 801eb44:	da09      	bge.n	801eb5a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801eb46:	1a9b      	subs	r3, r3, r2
 801eb48:	4a0d      	ldr	r2, [pc, #52]	; (801eb80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801eb4a:	210e      	movs	r1, #14
 801eb4c:	6812      	ldr	r2, [r2, #0]
 801eb4e:	fb01 2303 	mla	r3, r1, r3, r2
 801eb52:	7b18      	ldrb	r0, [r3, #12]
 801eb54:	f000 001f 	and.w	r0, r0, #31
 801eb58:	e7ef      	b.n	801eb3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801eb5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eb5e:	4293      	cmp	r3, r2
 801eb60:	d106      	bne.n	801eb70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801eb62:	f7e5 fb73 	bl	800424c <_ZN8touchgfx3HAL3lcdEv>
 801eb66:	6803      	ldr	r3, [r0, #0]
 801eb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb6e:	4718      	bx	r3
 801eb70:	2000      	movs	r0, #0
 801eb72:	e7e2      	b.n	801eb3a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801eb74:	2400b94c 	.word	0x2400b94c
 801eb78:	2400b944 	.word	0x2400b944
 801eb7c:	2400b948 	.word	0x2400b948
 801eb80:	2400b92c 	.word	0x2400b92c

0801eb84 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801eb84:	2010      	movs	r0, #16
 801eb86:	4770      	bx	lr

0801eb88 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801eb88:	2000      	movs	r0, #0
 801eb8a:	4770      	bx	lr

0801eb8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801eb8c:	2bff      	cmp	r3, #255	; 0xff
 801eb8e:	d050      	beq.n	801ec32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801eb90:	2a0b      	cmp	r2, #11
 801eb92:	d04a      	beq.n	801ec2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801eb94:	d80e      	bhi.n	801ebb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801eb96:	2a03      	cmp	r2, #3
 801eb98:	d03f      	beq.n	801ec1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801eb9a:	d804      	bhi.n	801eba6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801eb9c:	2a01      	cmp	r2, #1
 801eb9e:	d03e      	beq.n	801ec1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801eba0:	d93f      	bls.n	801ec22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801eba2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801eba4:	4770      	bx	lr
 801eba6:	2a09      	cmp	r2, #9
 801eba8:	d03f      	beq.n	801ec2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ebaa:	d83c      	bhi.n	801ec26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ebac:	2a08      	cmp	r2, #8
 801ebae:	d03a      	beq.n	801ec26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ebb0:	2000      	movs	r0, #0
 801ebb2:	4770      	bx	lr
 801ebb4:	2a2f      	cmp	r2, #47	; 0x2f
 801ebb6:	d024      	beq.n	801ec02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801ebb8:	d80d      	bhi.n	801ebd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801ebba:	2a2d      	cmp	r2, #45	; 0x2d
 801ebbc:	d014      	beq.n	801ebe8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801ebbe:	d826      	bhi.n	801ec0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801ebc0:	2a2c      	cmp	r2, #44	; 0x2c
 801ebc2:	d1f5      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ebc4:	684b      	ldr	r3, [r1, #4]
 801ebc6:	781b      	ldrb	r3, [r3, #0]
 801ebc8:	2b01      	cmp	r3, #1
 801ebca:	d018      	beq.n	801ebfe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801ebcc:	d323      	bcc.n	801ec16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801ebce:	2b02      	cmp	r3, #2
 801ebd0:	d1ee      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ebd2:	6880      	ldr	r0, [r0, #8]
 801ebd4:	4770      	bx	lr
 801ebd6:	2a31      	cmp	r2, #49	; 0x31
 801ebd8:	d004      	beq.n	801ebe4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801ebda:	d328      	bcc.n	801ec2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ebdc:	2a32      	cmp	r2, #50	; 0x32
 801ebde:	d026      	beq.n	801ec2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ebe0:	2a33      	cmp	r2, #51	; 0x33
 801ebe2:	d1e5      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ebe4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801ebe6:	4770      	bx	lr
 801ebe8:	684b      	ldr	r3, [r1, #4]
 801ebea:	781b      	ldrb	r3, [r3, #0]
 801ebec:	2b01      	cmp	r3, #1
 801ebee:	d004      	beq.n	801ebfa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ebf0:	d30b      	bcc.n	801ec0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801ebf2:	2b02      	cmp	r3, #2
 801ebf4:	d1dc      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ebf6:	6900      	ldr	r0, [r0, #16]
 801ebf8:	4770      	bx	lr
 801ebfa:	6a00      	ldr	r0, [r0, #32]
 801ebfc:	4770      	bx	lr
 801ebfe:	6980      	ldr	r0, [r0, #24]
 801ec00:	4770      	bx	lr
 801ec02:	684b      	ldr	r3, [r1, #4]
 801ec04:	781b      	ldrb	r3, [r3, #0]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d1d2      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ec0c:	4770      	bx	lr
 801ec0e:	684b      	ldr	r3, [r1, #4]
 801ec10:	781b      	ldrb	r3, [r3, #0]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d1cc      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ec18:	4770      	bx	lr
 801ec1a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ec1c:	4770      	bx	lr
 801ec1e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ec20:	4770      	bx	lr
 801ec22:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ec24:	4770      	bx	lr
 801ec26:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801ec28:	4770      	bx	lr
 801ec2a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801ec2c:	4770      	bx	lr
 801ec2e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801ec30:	4770      	bx	lr
 801ec32:	2a0b      	cmp	r2, #11
 801ec34:	d049      	beq.n	801ecca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ec36:	d80e      	bhi.n	801ec56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801ec38:	2a03      	cmp	r2, #3
 801ec3a:	d040      	beq.n	801ecbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ec3c:	d804      	bhi.n	801ec48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801ec3e:	2a01      	cmp	r2, #1
 801ec40:	d03f      	beq.n	801ecc2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801ec42:	d940      	bls.n	801ecc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ec44:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ec46:	4770      	bx	lr
 801ec48:	2a09      	cmp	r2, #9
 801ec4a:	d03e      	beq.n	801ecca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ec4c:	d801      	bhi.n	801ec52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ec4e:	2a08      	cmp	r2, #8
 801ec50:	d1ae      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec52:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801ec54:	4770      	bx	lr
 801ec56:	2a2f      	cmp	r2, #47	; 0x2f
 801ec58:	d024      	beq.n	801eca4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801ec5a:	d80d      	bhi.n	801ec78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801ec5c:	2a2d      	cmp	r2, #45	; 0x2d
 801ec5e:	d014      	beq.n	801ec8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801ec60:	d826      	bhi.n	801ecb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801ec62:	2a2c      	cmp	r2, #44	; 0x2c
 801ec64:	d1a4      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec66:	684b      	ldr	r3, [r1, #4]
 801ec68:	781b      	ldrb	r3, [r3, #0]
 801ec6a:	2b01      	cmp	r3, #1
 801ec6c:	d018      	beq.n	801eca0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801ec6e:	d324      	bcc.n	801ecba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ec70:	2b02      	cmp	r3, #2
 801ec72:	d19d      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec74:	68c0      	ldr	r0, [r0, #12]
 801ec76:	4770      	bx	lr
 801ec78:	2a31      	cmp	r2, #49	; 0x31
 801ec7a:	d004      	beq.n	801ec86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801ec7c:	d327      	bcc.n	801ecce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ec7e:	2a32      	cmp	r2, #50	; 0x32
 801ec80:	d025      	beq.n	801ecce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ec82:	2a33      	cmp	r2, #51	; 0x33
 801ec84:	d194      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec86:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801ec88:	4770      	bx	lr
 801ec8a:	684b      	ldr	r3, [r1, #4]
 801ec8c:	781b      	ldrb	r3, [r3, #0]
 801ec8e:	2b01      	cmp	r3, #1
 801ec90:	d004      	beq.n	801ec9c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ec92:	d30b      	bcc.n	801ecac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801ec94:	2b02      	cmp	r3, #2
 801ec96:	d18b      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ec98:	6940      	ldr	r0, [r0, #20]
 801ec9a:	4770      	bx	lr
 801ec9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ec9e:	4770      	bx	lr
 801eca0:	69c0      	ldr	r0, [r0, #28]
 801eca2:	4770      	bx	lr
 801eca4:	684b      	ldr	r3, [r1, #4]
 801eca6:	781b      	ldrb	r3, [r3, #0]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d181      	bne.n	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecac:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801ecae:	4770      	bx	lr
 801ecb0:	684b      	ldr	r3, [r1, #4]
 801ecb2:	781b      	ldrb	r3, [r3, #0]
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	f47f af7b 	bne.w	801ebb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ecba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ecbc:	4770      	bx	lr
 801ecbe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ecc0:	4770      	bx	lr
 801ecc2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ecc4:	4770      	bx	lr
 801ecc6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ecc8:	4770      	bx	lr
 801ecca:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801eccc:	4770      	bx	lr
 801ecce:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801ecd0:	4770      	bx	lr

0801ecd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ecd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecd6:	b087      	sub	sp, #28
 801ecd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ecda:	9205      	str	r2, [sp, #20]
 801ecdc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ece0:	9101      	str	r1, [sp, #4]
 801ece2:	9202      	str	r2, [sp, #8]
 801ece4:	6841      	ldr	r1, [r0, #4]
 801ece6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ecea:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ecee:	fb01 2404 	mla	r4, r1, r4, r2
 801ecf2:	6802      	ldr	r2, [r0, #0]
 801ecf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ecf8:	f8de 2000 	ldr.w	r2, [lr]
 801ecfc:	9203      	str	r2, [sp, #12]
 801ecfe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ed02:	3204      	adds	r2, #4
 801ed04:	9204      	str	r2, [sp, #16]
 801ed06:	9a02      	ldr	r2, [sp, #8]
 801ed08:	43d6      	mvns	r6, r2
 801ed0a:	b2f6      	uxtb	r6, r6
 801ed0c:	9a01      	ldr	r2, [sp, #4]
 801ed0e:	2a00      	cmp	r2, #0
 801ed10:	dc03      	bgt.n	801ed1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ed12:	9a05      	ldr	r2, [sp, #20]
 801ed14:	2a00      	cmp	r2, #0
 801ed16:	f340 8129 	ble.w	801ef6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ed1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ed1c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801ed20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed26:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801ed2a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	dd0e      	ble.n	801ed50 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ed32:	1408      	asrs	r0, r1, #16
 801ed34:	d405      	bmi.n	801ed42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed36:	4560      	cmp	r0, ip
 801ed38:	da03      	bge.n	801ed42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed3a:	1410      	asrs	r0, r2, #16
 801ed3c:	d401      	bmi.n	801ed42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ed3e:	42b8      	cmp	r0, r7
 801ed40:	db07      	blt.n	801ed52 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ed42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ed44:	3b01      	subs	r3, #1
 801ed46:	3402      	adds	r4, #2
 801ed48:	4401      	add	r1, r0
 801ed4a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ed4c:	4402      	add	r2, r0
 801ed4e:	e7ee      	b.n	801ed2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ed50:	d071      	beq.n	801ee36 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ed52:	1e58      	subs	r0, r3, #1
 801ed54:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed56:	fb05 1500 	mla	r5, r5, r0, r1
 801ed5a:	142d      	asrs	r5, r5, #16
 801ed5c:	d45f      	bmi.n	801ee1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ed5e:	4565      	cmp	r5, ip
 801ed60:	da5d      	bge.n	801ee1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ed62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ed64:	fb05 2000 	mla	r0, r5, r0, r2
 801ed68:	1400      	asrs	r0, r0, #16
 801ed6a:	d458      	bmi.n	801ee1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ed6c:	42b8      	cmp	r0, r7
 801ed6e:	da56      	bge.n	801ee1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ed70:	4699      	mov	r9, r3
 801ed72:	46a2      	mov	sl, r4
 801ed74:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801ed78:	f1b9 0f00 	cmp.w	r9, #0
 801ed7c:	dd57      	ble.n	801ee2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ed7e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ed82:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ed86:	9803      	ldr	r0, [sp, #12]
 801ed88:	140d      	asrs	r5, r1, #16
 801ed8a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ed8e:	fb07 000c 	mla	r0, r7, ip, r0
 801ed92:	5d40      	ldrb	r0, [r0, r5]
 801ed94:	9d04      	ldr	r5, [sp, #16]
 801ed96:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ed9a:	f8ba 5000 	ldrh.w	r5, [sl]
 801ed9e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801eda2:	122f      	asrs	r7, r5, #8
 801eda4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801eda8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801edac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801edb0:	00ed      	lsls	r5, r5, #3
 801edb2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801edb6:	fb17 f706 	smulbb	r7, r7, r6
 801edba:	b2ed      	uxtb	r5, r5
 801edbc:	fb18 f806 	smulbb	r8, r8, r6
 801edc0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801edc4:	10c7      	asrs	r7, r0, #3
 801edc6:	fb15 f506 	smulbb	r5, r5, r6
 801edca:	00c0      	lsls	r0, r0, #3
 801edcc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801edd0:	fa1f fc8c 	uxth.w	ip, ip
 801edd4:	b2c0      	uxtb	r0, r0
 801edd6:	fb07 870b 	mla	r7, r7, fp, r8
 801edda:	fb00 500b 	mla	r0, r0, fp, r5
 801edde:	f10c 0501 	add.w	r5, ip, #1
 801ede2:	b2bf      	uxth	r7, r7
 801ede4:	b280      	uxth	r0, r0
 801ede6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801edea:	f107 0801 	add.w	r8, r7, #1
 801edee:	1c45      	adds	r5, r0, #1
 801edf0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801edf4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801edf8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801edfc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801edfe:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ee02:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ee06:	4401      	add	r1, r0
 801ee08:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ee0c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ee0e:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee12:	4402      	add	r2, r0
 801ee14:	ea4c 0c08 	orr.w	ip, ip, r8
 801ee18:	f82a cb02 	strh.w	ip, [sl], #2
 801ee1c:	e7ac      	b.n	801ed78 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ee1e:	f04f 0800 	mov.w	r8, #0
 801ee22:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ee26:	eb03 0008 	add.w	r0, r3, r8
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	dc41      	bgt.n	801eeb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ee2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee36:	9b01      	ldr	r3, [sp, #4]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	f340 8097 	ble.w	801ef6c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ee3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ee42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee44:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee4c:	eef0 6a62 	vmov.f32	s13, s5
 801ee50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ee54:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee5c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801ee60:	eef0 6a43 	vmov.f32	s13, s6
 801ee64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee68:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ee6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee70:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee74:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee84:	ee12 2a90 	vmov	r2, s5
 801ee88:	eef0 2a47 	vmov.f32	s5, s14
 801ee8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee90:	ee13 2a10 	vmov	r2, s6
 801ee94:	9313      	str	r3, [sp, #76]	; 0x4c
 801ee96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee98:	eeb0 3a67 	vmov.f32	s6, s15
 801ee9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801eea0:	9314      	str	r3, [sp, #80]	; 0x50
 801eea2:	9b01      	ldr	r3, [sp, #4]
 801eea4:	9a05      	ldr	r2, [sp, #20]
 801eea6:	3b01      	subs	r3, #1
 801eea8:	9301      	str	r3, [sp, #4]
 801eeaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eeac:	bf08      	it	eq
 801eeae:	4613      	moveq	r3, r2
 801eeb0:	e72c      	b.n	801ed0c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801eeb2:	140f      	asrs	r7, r1, #16
 801eeb4:	d453      	bmi.n	801ef5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eeb6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801eeba:	42bd      	cmp	r5, r7
 801eebc:	dd4f      	ble.n	801ef5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eebe:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801eec2:	d44c      	bmi.n	801ef5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eec4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801eec8:	4560      	cmp	r0, ip
 801eeca:	dd48      	ble.n	801ef5e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801eecc:	9803      	ldr	r0, [sp, #12]
 801eece:	b22d      	sxth	r5, r5
 801eed0:	fb0c 0505 	mla	r5, ip, r5, r0
 801eed4:	5de8      	ldrb	r0, [r5, r7]
 801eed6:	9d04      	ldr	r5, [sp, #16]
 801eed8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801eedc:	f06f 0501 	mvn.w	r5, #1
 801eee0:	fb05 fb08 	mul.w	fp, r5, r8
 801eee4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801eee8:	f834 500b 	ldrh.w	r5, [r4, fp]
 801eeec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eef0:	122f      	asrs	r7, r5, #8
 801eef2:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801eef6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eefa:	00ed      	lsls	r5, r5, #3
 801eefc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ef00:	fb17 f706 	smulbb	r7, r7, r6
 801ef04:	b2ed      	uxtb	r5, r5
 801ef06:	fb19 f906 	smulbb	r9, r9, r6
 801ef0a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801ef0e:	10c7      	asrs	r7, r0, #3
 801ef10:	fb15 f506 	smulbb	r5, r5, r6
 801ef14:	00c0      	lsls	r0, r0, #3
 801ef16:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef1a:	fa1f fc8c 	uxth.w	ip, ip
 801ef1e:	b2c0      	uxtb	r0, r0
 801ef20:	fb07 970a 	mla	r7, r7, sl, r9
 801ef24:	fb00 500a 	mla	r0, r0, sl, r5
 801ef28:	f10c 0501 	add.w	r5, ip, #1
 801ef2c:	b2bf      	uxth	r7, r7
 801ef2e:	b280      	uxth	r0, r0
 801ef30:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ef34:	f107 0901 	add.w	r9, r7, #1
 801ef38:	1c45      	adds	r5, r0, #1
 801ef3a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801ef3e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ef42:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ef46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801ef4a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ef4e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ef52:	ea45 0c0c 	orr.w	ip, r5, ip
 801ef56:	ea4c 0c09 	orr.w	ip, ip, r9
 801ef5a:	f824 c00b 	strh.w	ip, [r4, fp]
 801ef5e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ef60:	f108 38ff 	add.w	r8, r8, #4294967295
 801ef64:	4401      	add	r1, r0
 801ef66:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ef68:	4402      	add	r2, r0
 801ef6a:	e75c      	b.n	801ee26 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ef6c:	b007      	add	sp, #28
 801ef6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef76:	b085      	sub	sp, #20
 801ef78:	4693      	mov	fp, r2
 801ef7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef7e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ef80:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ef82:	6870      	ldr	r0, [r6, #4]
 801ef84:	9100      	str	r1, [sp, #0]
 801ef86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef8a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801ef8e:	fb00 2404 	mla	r4, r0, r4, r2
 801ef92:	6832      	ldr	r2, [r6, #0]
 801ef94:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ef98:	682a      	ldr	r2, [r5, #0]
 801ef9a:	9201      	str	r2, [sp, #4]
 801ef9c:	686a      	ldr	r2, [r5, #4]
 801ef9e:	3204      	adds	r2, #4
 801efa0:	9202      	str	r2, [sp, #8]
 801efa2:	9a00      	ldr	r2, [sp, #0]
 801efa4:	2a00      	cmp	r2, #0
 801efa6:	dc03      	bgt.n	801efb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801efa8:	f1bb 0f00 	cmp.w	fp, #0
 801efac:	f340 80a0 	ble.w	801f0f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801efb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801efb2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801efb6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801efba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801efbc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801efc0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	dd0c      	ble.n	801efe2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801efc8:	1406      	asrs	r6, r0, #16
 801efca:	d405      	bmi.n	801efd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efcc:	454e      	cmp	r6, r9
 801efce:	da03      	bge.n	801efd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efd0:	1416      	asrs	r6, r2, #16
 801efd2:	d401      	bmi.n	801efd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801efd4:	4546      	cmp	r6, r8
 801efd6:	db05      	blt.n	801efe4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801efd8:	4470      	add	r0, lr
 801efda:	4462      	add	r2, ip
 801efdc:	3b01      	subs	r3, #1
 801efde:	3402      	adds	r4, #2
 801efe0:	e7f0      	b.n	801efc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801efe2:	d00f      	beq.n	801f004 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801efe4:	1e5e      	subs	r6, r3, #1
 801efe6:	fb0e 0706 	mla	r7, lr, r6, r0
 801efea:	143f      	asrs	r7, r7, #16
 801efec:	d541      	bpl.n	801f072 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801efee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801eff2:	4698      	mov	r8, r3
 801eff4:	9603      	str	r6, [sp, #12]
 801eff6:	f1b8 0f00 	cmp.w	r8, #0
 801effa:	dc59      	bgt.n	801f0b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801effc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f000:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f004:	9b00      	ldr	r3, [sp, #0]
 801f006:	2b00      	cmp	r3, #0
 801f008:	dd72      	ble.n	801f0f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f00a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f010:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f014:	eeb0 6a62 	vmov.f32	s12, s5
 801f018:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f01c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f020:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f024:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f028:	eeb0 6a43 	vmov.f32	s12, s6
 801f02c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f030:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f034:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f038:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f03c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f040:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f044:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f048:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f04c:	ee12 2a90 	vmov	r2, s5
 801f050:	eef0 2a47 	vmov.f32	s5, s14
 801f054:	fb92 fef3 	sdiv	lr, r2, r3
 801f058:	ee13 2a10 	vmov	r2, s6
 801f05c:	eeb0 3a67 	vmov.f32	s6, s15
 801f060:	fb92 fcf3 	sdiv	ip, r2, r3
 801f064:	9b00      	ldr	r3, [sp, #0]
 801f066:	3b01      	subs	r3, #1
 801f068:	9300      	str	r3, [sp, #0]
 801f06a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f06c:	bf08      	it	eq
 801f06e:	465b      	moveq	r3, fp
 801f070:	e797      	b.n	801efa2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f072:	454f      	cmp	r7, r9
 801f074:	dabb      	bge.n	801efee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f076:	fb0c 2606 	mla	r6, ip, r6, r2
 801f07a:	1436      	asrs	r6, r6, #16
 801f07c:	d4b7      	bmi.n	801efee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f07e:	4546      	cmp	r6, r8
 801f080:	dab5      	bge.n	801efee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f082:	461e      	mov	r6, r3
 801f084:	46a0      	mov	r8, r4
 801f086:	2e00      	cmp	r6, #0
 801f088:	ddb8      	ble.n	801effc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f08a:	1417      	asrs	r7, r2, #16
 801f08c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f090:	9901      	ldr	r1, [sp, #4]
 801f092:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f096:	4462      	add	r2, ip
 801f098:	4470      	add	r0, lr
 801f09a:	fb0a 1707 	mla	r7, sl, r7, r1
 801f09e:	9902      	ldr	r1, [sp, #8]
 801f0a0:	3e01      	subs	r6, #1
 801f0a2:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f0a6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f0aa:	f828 7b02 	strh.w	r7, [r8], #2
 801f0ae:	e7ea      	b.n	801f086 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f0b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f0b4:	d417      	bmi.n	801f0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f0b6:	68ae      	ldr	r6, [r5, #8]
 801f0b8:	454e      	cmp	r6, r9
 801f0ba:	dd14      	ble.n	801f0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f0bc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f0c0:	d411      	bmi.n	801f0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f0c2:	68ef      	ldr	r7, [r5, #12]
 801f0c4:	4557      	cmp	r7, sl
 801f0c6:	dd0e      	ble.n	801f0e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f0c8:	9f01      	ldr	r7, [sp, #4]
 801f0ca:	b236      	sxth	r6, r6
 801f0cc:	f06f 0101 	mvn.w	r1, #1
 801f0d0:	fb0a 7606 	mla	r6, sl, r6, r7
 801f0d4:	9f02      	ldr	r7, [sp, #8]
 801f0d6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f0da:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f0de:	fb01 f608 	mul.w	r6, r1, r8
 801f0e2:	9903      	ldr	r1, [sp, #12]
 801f0e4:	538f      	strh	r7, [r1, r6]
 801f0e6:	4470      	add	r0, lr
 801f0e8:	4462      	add	r2, ip
 801f0ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801f0ee:	e782      	b.n	801eff6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f0f0:	b005      	add	sp, #20
 801f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fa:	b087      	sub	sp, #28
 801f0fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f0fe:	9205      	str	r2, [sp, #20]
 801f100:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f104:	9102      	str	r1, [sp, #8]
 801f106:	9203      	str	r2, [sp, #12]
 801f108:	6861      	ldr	r1, [r4, #4]
 801f10a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f10e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f112:	fb01 2000 	mla	r0, r1, r0, r2
 801f116:	6822      	ldr	r2, [r4, #0]
 801f118:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f11c:	9200      	str	r2, [sp, #0]
 801f11e:	f8dc 2000 	ldr.w	r2, [ip]
 801f122:	9204      	str	r2, [sp, #16]
 801f124:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f128:	3204      	adds	r2, #4
 801f12a:	9201      	str	r2, [sp, #4]
 801f12c:	9a03      	ldr	r2, [sp, #12]
 801f12e:	43d5      	mvns	r5, r2
 801f130:	b2ed      	uxtb	r5, r5
 801f132:	9a02      	ldr	r2, [sp, #8]
 801f134:	2a00      	cmp	r2, #0
 801f136:	dc03      	bgt.n	801f140 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f138:	9a05      	ldr	r2, [sp, #20]
 801f13a:	2a00      	cmp	r2, #0
 801f13c:	f340 812c 	ble.w	801f398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f142:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f146:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f14a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f14c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f150:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f154:	2b00      	cmp	r3, #0
 801f156:	dd10      	ble.n	801f17a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f158:	140c      	asrs	r4, r1, #16
 801f15a:	d405      	bmi.n	801f168 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f15c:	4574      	cmp	r4, lr
 801f15e:	da03      	bge.n	801f168 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f160:	1414      	asrs	r4, r2, #16
 801f162:	d401      	bmi.n	801f168 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f164:	42bc      	cmp	r4, r7
 801f166:	db09      	blt.n	801f17c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f168:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f16a:	3b01      	subs	r3, #1
 801f16c:	9800      	ldr	r0, [sp, #0]
 801f16e:	4421      	add	r1, r4
 801f170:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f172:	3002      	adds	r0, #2
 801f174:	4422      	add	r2, r4
 801f176:	9000      	str	r0, [sp, #0]
 801f178:	e7ec      	b.n	801f154 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f17a:	d071      	beq.n	801f260 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f17c:	1e5c      	subs	r4, r3, #1
 801f17e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f180:	fb06 1604 	mla	r6, r6, r4, r1
 801f184:	1436      	asrs	r6, r6, #16
 801f186:	d45d      	bmi.n	801f244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f188:	4576      	cmp	r6, lr
 801f18a:	da5b      	bge.n	801f244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f18c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f18e:	fb06 2404 	mla	r4, r6, r4, r2
 801f192:	1424      	asrs	r4, r4, #16
 801f194:	d456      	bmi.n	801f244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f196:	42bc      	cmp	r4, r7
 801f198:	da54      	bge.n	801f244 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f19a:	4698      	mov	r8, r3
 801f19c:	f8dd 9000 	ldr.w	r9, [sp]
 801f1a0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f1a4:	f1b8 0f00 	cmp.w	r8, #0
 801f1a8:	dd54      	ble.n	801f254 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f1aa:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f1ae:	1414      	asrs	r4, r2, #16
 801f1b0:	9804      	ldr	r0, [sp, #16]
 801f1b2:	140e      	asrs	r6, r1, #16
 801f1b4:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1b8:	fb07 0404 	mla	r4, r7, r4, r0
 801f1bc:	9801      	ldr	r0, [sp, #4]
 801f1be:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f1c2:	f8b9 4000 	ldrh.w	r4, [r9]
 801f1c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f1ca:	1227      	asrs	r7, r4, #8
 801f1cc:	eb00 0b0e 	add.w	fp, r0, lr
 801f1d0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f1d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f1d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f1da:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f1de:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f1e2:	4401      	add	r1, r0
 801f1e4:	fb16 f60a 	smulbb	r6, r6, sl
 801f1e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f1ea:	fb1b fb0a 	smulbb	fp, fp, sl
 801f1ee:	fb07 6705 	mla	r7, r7, r5, r6
 801f1f2:	10e6      	asrs	r6, r4, #3
 801f1f4:	00e4      	lsls	r4, r4, #3
 801f1f6:	4402      	add	r2, r0
 801f1f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f1fc:	b2bf      	uxth	r7, r7
 801f1fe:	b2e4      	uxtb	r4, r4
 801f200:	fb06 b605 	mla	r6, r6, r5, fp
 801f204:	fb14 f405 	smulbb	r4, r4, r5
 801f208:	b2b6      	uxth	r6, r6
 801f20a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f20e:	1c7c      	adds	r4, r7, #1
 801f210:	f106 0b01 	add.w	fp, r6, #1
 801f214:	fa1f fe8e 	uxth.w	lr, lr
 801f218:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f21c:	f10e 0401 	add.w	r4, lr, #1
 801f220:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f224:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f228:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f22c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f230:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f234:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f238:	4327      	orrs	r7, r4
 801f23a:	ea47 070b 	orr.w	r7, r7, fp
 801f23e:	f829 7b02 	strh.w	r7, [r9], #2
 801f242:	e7af      	b.n	801f1a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f244:	f04f 0e00 	mov.w	lr, #0
 801f248:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f24c:	eb03 040e 	add.w	r4, r3, lr
 801f250:	2c00      	cmp	r4, #0
 801f252:	dc43      	bgt.n	801f2dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f254:	9a00      	ldr	r2, [sp, #0]
 801f256:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f25a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f25e:	9300      	str	r3, [sp, #0]
 801f260:	9b02      	ldr	r3, [sp, #8]
 801f262:	2b00      	cmp	r3, #0
 801f264:	f340 8098 	ble.w	801f398 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f26e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f272:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f276:	eef0 6a62 	vmov.f32	s13, s5
 801f27a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f27e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f282:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f286:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f28a:	eef0 6a43 	vmov.f32	s13, s6
 801f28e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f292:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f296:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f29a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f29e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2ae:	ee12 2a90 	vmov	r2, s5
 801f2b2:	eef0 2a47 	vmov.f32	s5, s14
 801f2b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ba:	ee13 2a10 	vmov	r2, s6
 801f2be:	9313      	str	r3, [sp, #76]	; 0x4c
 801f2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2c2:	eeb0 3a67 	vmov.f32	s6, s15
 801f2c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ca:	9314      	str	r3, [sp, #80]	; 0x50
 801f2cc:	9b02      	ldr	r3, [sp, #8]
 801f2ce:	9a05      	ldr	r2, [sp, #20]
 801f2d0:	3b01      	subs	r3, #1
 801f2d2:	9302      	str	r3, [sp, #8]
 801f2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2d6:	bf08      	it	eq
 801f2d8:	4613      	moveq	r3, r2
 801f2da:	e72a      	b.n	801f132 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f2dc:	140f      	asrs	r7, r1, #16
 801f2de:	d454      	bmi.n	801f38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f2e0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f2e4:	42be      	cmp	r6, r7
 801f2e6:	dd50      	ble.n	801f38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f2e8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f2ec:	d44d      	bmi.n	801f38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f2ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f2f2:	4544      	cmp	r4, r8
 801f2f4:	dd49      	ble.n	801f38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f2f6:	9c04      	ldr	r4, [sp, #16]
 801f2f8:	b236      	sxth	r6, r6
 801f2fa:	f06f 0001 	mvn.w	r0, #1
 801f2fe:	fb08 4606 	mla	r6, r8, r6, r4
 801f302:	9c01      	ldr	r4, [sp, #4]
 801f304:	fb00 fa0e 	mul.w	sl, r0, lr
 801f308:	9800      	ldr	r0, [sp, #0]
 801f30a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f30e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f312:	eb04 0b08 	add.w	fp, r4, r8
 801f316:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f31a:	9801      	ldr	r0, [sp, #4]
 801f31c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f320:	1227      	asrs	r7, r4, #8
 801f322:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f326:	fb16 f609 	smulbb	r6, r6, r9
 801f32a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f32e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f332:	fb1b fb09 	smulbb	fp, fp, r9
 801f336:	fb07 6705 	mla	r7, r7, r5, r6
 801f33a:	10e6      	asrs	r6, r4, #3
 801f33c:	00e4      	lsls	r4, r4, #3
 801f33e:	9800      	ldr	r0, [sp, #0]
 801f340:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f344:	b2bf      	uxth	r7, r7
 801f346:	b2e4      	uxtb	r4, r4
 801f348:	fb06 b605 	mla	r6, r6, r5, fp
 801f34c:	fb14 f405 	smulbb	r4, r4, r5
 801f350:	b2b6      	uxth	r6, r6
 801f352:	fb08 4809 	mla	r8, r8, r9, r4
 801f356:	1c7c      	adds	r4, r7, #1
 801f358:	f106 0b01 	add.w	fp, r6, #1
 801f35c:	fa1f f888 	uxth.w	r8, r8
 801f360:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f364:	f108 0401 	add.w	r4, r8, #1
 801f368:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f36c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f370:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f374:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f378:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f37c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f380:	4327      	orrs	r7, r4
 801f382:	ea47 070b 	orr.w	r7, r7, fp
 801f386:	f820 700a 	strh.w	r7, [r0, sl]
 801f38a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f38c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f390:	4401      	add	r1, r0
 801f392:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f394:	4402      	add	r2, r0
 801f396:	e759      	b.n	801f24c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f398:	b007      	add	sp, #28
 801f39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f3a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3a4:	b085      	sub	sp, #20
 801f3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f3aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f3ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f3ae:	9203      	str	r2, [sp, #12]
 801f3b0:	6870      	ldr	r0, [r6, #4]
 801f3b2:	686f      	ldr	r7, [r5, #4]
 801f3b4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801f3b8:	3704      	adds	r7, #4
 801f3ba:	9101      	str	r1, [sp, #4]
 801f3bc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f3c0:	fb00 2404 	mla	r4, r0, r4, r2
 801f3c4:	6832      	ldr	r2, [r6, #0]
 801f3c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f3ca:	682a      	ldr	r2, [r5, #0]
 801f3cc:	9202      	str	r2, [sp, #8]
 801f3ce:	9a01      	ldr	r2, [sp, #4]
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	dc03      	bgt.n	801f3dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f3d4:	9a03      	ldr	r2, [sp, #12]
 801f3d6:	2a00      	cmp	r2, #0
 801f3d8:	f340 80cc 	ble.w	801f574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f3dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f3de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f3e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f3e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f3e8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f3ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	dd0d      	ble.n	801f410 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f3f4:	1406      	asrs	r6, r0, #16
 801f3f6:	d405      	bmi.n	801f404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f3f8:	454e      	cmp	r6, r9
 801f3fa:	da03      	bge.n	801f404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f3fc:	1416      	asrs	r6, r2, #16
 801f3fe:	d401      	bmi.n	801f404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f400:	4546      	cmp	r6, r8
 801f402:	db06      	blt.n	801f412 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f404:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f406:	4460      	add	r0, ip
 801f408:	3b01      	subs	r3, #1
 801f40a:	3402      	adds	r4, #2
 801f40c:	4432      	add	r2, r6
 801f40e:	e7ef      	b.n	801f3f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f410:	d00f      	beq.n	801f432 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f412:	1e5e      	subs	r6, r3, #1
 801f414:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f418:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f41c:	d543      	bpl.n	801f4a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f41e:	4698      	mov	r8, r3
 801f420:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f424:	f1b8 0f00 	cmp.w	r8, #0
 801f428:	dc71      	bgt.n	801f50e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f42a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f42e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f432:	9b01      	ldr	r3, [sp, #4]
 801f434:	2b00      	cmp	r3, #0
 801f436:	f340 809d 	ble.w	801f574 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f43a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f43e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f440:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f444:	eeb0 6a62 	vmov.f32	s12, s5
 801f448:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f44c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f450:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f454:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f458:	eeb0 6a43 	vmov.f32	s12, s6
 801f45c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f460:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f464:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f468:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f46c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f470:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f474:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f478:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f47c:	ee12 2a90 	vmov	r2, s5
 801f480:	eef0 2a47 	vmov.f32	s5, s14
 801f484:	fb92 fcf3 	sdiv	ip, r2, r3
 801f488:	ee13 2a10 	vmov	r2, s6
 801f48c:	eeb0 3a67 	vmov.f32	s6, s15
 801f490:	fb92 f3f3 	sdiv	r3, r2, r3
 801f494:	9312      	str	r3, [sp, #72]	; 0x48
 801f496:	9b01      	ldr	r3, [sp, #4]
 801f498:	9a03      	ldr	r2, [sp, #12]
 801f49a:	3b01      	subs	r3, #1
 801f49c:	9301      	str	r3, [sp, #4]
 801f49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4a0:	bf08      	it	eq
 801f4a2:	4613      	moveq	r3, r2
 801f4a4:	e793      	b.n	801f3ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f4a6:	45ce      	cmp	lr, r9
 801f4a8:	dab9      	bge.n	801f41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f4aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f4ac:	fb01 2606 	mla	r6, r1, r6, r2
 801f4b0:	1436      	asrs	r6, r6, #16
 801f4b2:	d4b4      	bmi.n	801f41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f4b4:	4546      	cmp	r6, r8
 801f4b6:	dab2      	bge.n	801f41e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f4b8:	4698      	mov	r8, r3
 801f4ba:	46a2      	mov	sl, r4
 801f4bc:	f1b8 0f00 	cmp.w	r8, #0
 801f4c0:	ddb3      	ble.n	801f42a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f4c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f4c6:	1416      	asrs	r6, r2, #16
 801f4c8:	9902      	ldr	r1, [sp, #8]
 801f4ca:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801f4ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4d2:	4460      	add	r0, ip
 801f4d4:	fb09 1606 	mla	r6, r9, r6, r1
 801f4d8:	4928      	ldr	r1, [pc, #160]	; (801f57c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801f4da:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801f4de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f4e2:	eb07 0b0e 	add.w	fp, r7, lr
 801f4e6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801f4ea:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f4ee:	00f6      	lsls	r6, r6, #3
 801f4f0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801f4f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f4f6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f4fa:	440a      	add	r2, r1
 801f4fc:	ea49 0606 	orr.w	r6, r9, r6
 801f500:	f817 900e 	ldrb.w	r9, [r7, lr]
 801f504:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801f508:	f82a 6b02 	strh.w	r6, [sl], #2
 801f50c:	e7d6      	b.n	801f4bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f50e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f512:	d429      	bmi.n	801f568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f514:	68ae      	ldr	r6, [r5, #8]
 801f516:	454e      	cmp	r6, r9
 801f518:	dd26      	ble.n	801f568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f51a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801f51e:	d423      	bmi.n	801f568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f520:	68e9      	ldr	r1, [r5, #12]
 801f522:	4559      	cmp	r1, fp
 801f524:	dd20      	ble.n	801f568 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801f526:	fa0f fe86 	sxth.w	lr, r6
 801f52a:	9902      	ldr	r1, [sp, #8]
 801f52c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801f530:	f06f 0101 	mvn.w	r1, #1
 801f534:	f81e e009 	ldrb.w	lr, [lr, r9]
 801f538:	fb01 f908 	mul.w	r9, r1, r8
 801f53c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801f540:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f544:	eb07 060e 	add.w	r6, r7, lr
 801f548:	f896 b002 	ldrb.w	fp, [r6, #2]
 801f54c:	7876      	ldrb	r6, [r6, #1]
 801f54e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801f552:	00f6      	lsls	r6, r6, #3
 801f554:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f558:	ea4b 0606 	orr.w	r6, fp, r6
 801f55c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801f560:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801f564:	f82a 6009 	strh.w	r6, [sl, r9]
 801f568:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f56a:	4460      	add	r0, ip
 801f56c:	f108 38ff 	add.w	r8, r8, #4294967295
 801f570:	440a      	add	r2, r1
 801f572:	e757      	b.n	801f424 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f574:	b005      	add	sp, #20
 801f576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f57a:	bf00      	nop
 801f57c:	fffff800 	.word	0xfffff800

0801f580 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f584:	b087      	sub	sp, #28
 801f586:	468b      	mov	fp, r1
 801f588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f58c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f58e:	9204      	str	r2, [sp, #16]
 801f590:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f594:	6841      	ldr	r1, [r0, #4]
 801f596:	9205      	str	r2, [sp, #20]
 801f598:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f59c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f5a0:	fb01 2404 	mla	r4, r1, r4, r2
 801f5a4:	6802      	ldr	r2, [r0, #0]
 801f5a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f5aa:	f8dc 2000 	ldr.w	r2, [ip]
 801f5ae:	9201      	str	r2, [sp, #4]
 801f5b0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f5b4:	3204      	adds	r2, #4
 801f5b6:	9202      	str	r2, [sp, #8]
 801f5b8:	f1bb 0f00 	cmp.w	fp, #0
 801f5bc:	dc03      	bgt.n	801f5c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f5be:	9a04      	ldr	r2, [sp, #16]
 801f5c0:	2a00      	cmp	r2, #0
 801f5c2:	f340 8138 	ble.w	801f836 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f5c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f5c8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f5cc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5d2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801f5d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	dd0e      	ble.n	801f5fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5de:	1402      	asrs	r2, r0, #16
 801f5e0:	d405      	bmi.n	801f5ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f5e2:	42ba      	cmp	r2, r7
 801f5e4:	da03      	bge.n	801f5ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f5e6:	140a      	asrs	r2, r1, #16
 801f5e8:	d401      	bmi.n	801f5ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f5ea:	42b2      	cmp	r2, r6
 801f5ec:	db07      	blt.n	801f5fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f5ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f5f0:	3b01      	subs	r3, #1
 801f5f2:	3402      	adds	r4, #2
 801f5f4:	4410      	add	r0, r2
 801f5f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f5f8:	4411      	add	r1, r2
 801f5fa:	e7ee      	b.n	801f5da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f5fc:	d019      	beq.n	801f632 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f5fe:	1e5a      	subs	r2, r3, #1
 801f600:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f602:	fb05 0502 	mla	r5, r5, r2, r0
 801f606:	142d      	asrs	r5, r5, #16
 801f608:	d409      	bmi.n	801f61e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f60a:	42bd      	cmp	r5, r7
 801f60c:	da07      	bge.n	801f61e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f60e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f610:	fb05 1202 	mla	r2, r5, r2, r1
 801f614:	1412      	asrs	r2, r2, #16
 801f616:	d402      	bmi.n	801f61e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f618:	42b2      	cmp	r2, r6
 801f61a:	f2c0 80ac 	blt.w	801f776 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801f61e:	f04f 0e00 	mov.w	lr, #0
 801f622:	eb03 020e 	add.w	r2, r3, lr
 801f626:	2a00      	cmp	r2, #0
 801f628:	dc3e      	bgt.n	801f6a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f62a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f62e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f632:	f1bb 0f00 	cmp.w	fp, #0
 801f636:	f340 80fe 	ble.w	801f836 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f63a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f640:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f644:	f1bb 0b01 	subs.w	fp, fp, #1
 801f648:	eeb0 6a62 	vmov.f32	s12, s5
 801f64c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f650:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f654:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f658:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f65c:	eeb0 6a43 	vmov.f32	s12, s6
 801f660:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f664:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f668:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f66c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f670:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f674:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f678:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f67c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f680:	ee12 2a90 	vmov	r2, s5
 801f684:	eef0 2a47 	vmov.f32	s5, s14
 801f688:	fb92 f3f3 	sdiv	r3, r2, r3
 801f68c:	ee13 2a10 	vmov	r2, s6
 801f690:	9313      	str	r3, [sp, #76]	; 0x4c
 801f692:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f694:	eeb0 3a67 	vmov.f32	s6, s15
 801f698:	fb92 f3f3 	sdiv	r3, r2, r3
 801f69c:	9a04      	ldr	r2, [sp, #16]
 801f69e:	9314      	str	r3, [sp, #80]	; 0x50
 801f6a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f6a2:	bf08      	it	eq
 801f6a4:	4613      	moveq	r3, r2
 801f6a6:	e787      	b.n	801f5b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f6a8:	1406      	asrs	r6, r0, #16
 801f6aa:	d45d      	bmi.n	801f768 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6ac:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f6b0:	42b5      	cmp	r5, r6
 801f6b2:	dd59      	ble.n	801f768 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6b4:	140f      	asrs	r7, r1, #16
 801f6b6:	d457      	bmi.n	801f768 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801f6bc:	42ba      	cmp	r2, r7
 801f6be:	dd53      	ble.n	801f768 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6c0:	9a01      	ldr	r2, [sp, #4]
 801f6c2:	b22d      	sxth	r5, r5
 801f6c4:	fb07 2505 	mla	r5, r7, r5, r2
 801f6c8:	5daa      	ldrb	r2, [r5, r6]
 801f6ca:	9d02      	ldr	r5, [sp, #8]
 801f6cc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f6d0:	0e2e      	lsrs	r6, r5, #24
 801f6d2:	d049      	beq.n	801f768 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f6d4:	f06f 0201 	mvn.w	r2, #1
 801f6d8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f6dc:	fb02 f20e 	mul.w	r2, r2, lr
 801f6e0:	f834 8002 	ldrh.w	r8, [r4, r2]
 801f6e4:	9203      	str	r2, [sp, #12]
 801f6e6:	9a05      	ldr	r2, [sp, #20]
 801f6e8:	ea4f 2728 	mov.w	r7, r8, asr #8
 801f6ec:	4356      	muls	r6, r2
 801f6ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f6f2:	1c72      	adds	r2, r6, #1
 801f6f4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f6f8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f6fc:	b2ed      	uxtb	r5, r5
 801f6fe:	1212      	asrs	r2, r2, #8
 801f700:	fa1f f982 	uxth.w	r9, r2
 801f704:	43d2      	mvns	r2, r2
 801f706:	fb16 f609 	smulbb	r6, r6, r9
 801f70a:	b2d2      	uxtb	r2, r2
 801f70c:	fb15 f509 	smulbb	r5, r5, r9
 801f710:	fb07 6702 	mla	r7, r7, r2, r6
 801f714:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f718:	fb1a fa09 	smulbb	sl, sl, r9
 801f71c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f720:	b2bf      	uxth	r7, r7
 801f722:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f726:	fa5f f888 	uxtb.w	r8, r8
 801f72a:	fb06 a602 	mla	r6, r6, r2, sl
 801f72e:	fb08 5502 	mla	r5, r8, r2, r5
 801f732:	1c7a      	adds	r2, r7, #1
 801f734:	b2b6      	uxth	r6, r6
 801f736:	b2ad      	uxth	r5, r5
 801f738:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f73c:	9a03      	ldr	r2, [sp, #12]
 801f73e:	f105 0a01 	add.w	sl, r5, #1
 801f742:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f746:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f74a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f74e:	ea4a 0707 	orr.w	r7, sl, r7
 801f752:	f106 0a01 	add.w	sl, r6, #1
 801f756:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f75a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f75e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f762:	ea47 070a 	orr.w	r7, r7, sl
 801f766:	52a7      	strh	r7, [r4, r2]
 801f768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f76a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f76e:	4410      	add	r0, r2
 801f770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f772:	4411      	add	r1, r2
 801f774:	e755      	b.n	801f622 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801f776:	f04f 0800 	mov.w	r8, #0
 801f77a:	eba3 0208 	sub.w	r2, r3, r8
 801f77e:	2a00      	cmp	r2, #0
 801f780:	f77f af53 	ble.w	801f62a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801f784:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801f788:	140a      	asrs	r2, r1, #16
 801f78a:	9f01      	ldr	r7, [sp, #4]
 801f78c:	1405      	asrs	r5, r0, #16
 801f78e:	fb06 7202 	mla	r2, r6, r2, r7
 801f792:	5d52      	ldrb	r2, [r2, r5]
 801f794:	9d02      	ldr	r5, [sp, #8]
 801f796:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801f79a:	0e2e      	lsrs	r6, r5, #24
 801f79c:	d044      	beq.n	801f828 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801f79e:	9a05      	ldr	r2, [sp, #20]
 801f7a0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f7a4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801f7a8:	4356      	muls	r6, r2
 801f7aa:	ea4f 272e 	mov.w	r7, lr, asr #8
 801f7ae:	1c72      	adds	r2, r6, #1
 801f7b0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f7b4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801f7b8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f7bc:	b2ed      	uxtb	r5, r5
 801f7be:	1212      	asrs	r2, r2, #8
 801f7c0:	fa1f f982 	uxth.w	r9, r2
 801f7c4:	43d2      	mvns	r2, r2
 801f7c6:	fb16 f609 	smulbb	r6, r6, r9
 801f7ca:	b2d2      	uxtb	r2, r2
 801f7cc:	fb15 f509 	smulbb	r5, r5, r9
 801f7d0:	fb07 6702 	mla	r7, r7, r2, r6
 801f7d4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f7d8:	fb1a fa09 	smulbb	sl, sl, r9
 801f7dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f7e0:	b2bf      	uxth	r7, r7
 801f7e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f7e6:	fa5f fe8e 	uxtb.w	lr, lr
 801f7ea:	fb06 a602 	mla	r6, r6, r2, sl
 801f7ee:	fb0e 5502 	mla	r5, lr, r2, r5
 801f7f2:	1c7a      	adds	r2, r7, #1
 801f7f4:	b2b6      	uxth	r6, r6
 801f7f6:	b2ad      	uxth	r5, r5
 801f7f8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f7fc:	f105 0a01 	add.w	sl, r5, #1
 801f800:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f804:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f808:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f80c:	ea4a 0707 	orr.w	r7, sl, r7
 801f810:	f106 0a01 	add.w	sl, r6, #1
 801f814:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f818:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f81c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f820:	ea47 070a 	orr.w	r7, r7, sl
 801f824:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f82a:	f108 0801 	add.w	r8, r8, #1
 801f82e:	4410      	add	r0, r2
 801f830:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f832:	4411      	add	r1, r2
 801f834:	e7a1      	b.n	801f77a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f836:	b007      	add	sp, #28
 801f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f83c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f840:	b085      	sub	sp, #20
 801f842:	468b      	mov	fp, r1
 801f844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f848:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f84a:	9203      	str	r2, [sp, #12]
 801f84c:	6841      	ldr	r1, [r0, #4]
 801f84e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f852:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f856:	fb01 2404 	mla	r4, r1, r4, r2
 801f85a:	6802      	ldr	r2, [r0, #0]
 801f85c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f860:	f8de 2000 	ldr.w	r2, [lr]
 801f864:	9200      	str	r2, [sp, #0]
 801f866:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f86a:	3204      	adds	r2, #4
 801f86c:	9201      	str	r2, [sp, #4]
 801f86e:	f1bb 0f00 	cmp.w	fp, #0
 801f872:	dc03      	bgt.n	801f87c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f874:	9a03      	ldr	r2, [sp, #12]
 801f876:	2a00      	cmp	r2, #0
 801f878:	f340 8153 	ble.w	801fb22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f87c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f87e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f882:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f888:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f88c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f890:	2b00      	cmp	r3, #0
 801f892:	dd0e      	ble.n	801f8b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f894:	1408      	asrs	r0, r1, #16
 801f896:	d405      	bmi.n	801f8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f898:	42b8      	cmp	r0, r7
 801f89a:	da03      	bge.n	801f8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f89c:	1410      	asrs	r0, r2, #16
 801f89e:	d401      	bmi.n	801f8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f8a0:	42b0      	cmp	r0, r6
 801f8a2:	db07      	blt.n	801f8b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f8a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f8a6:	3b01      	subs	r3, #1
 801f8a8:	3402      	adds	r4, #2
 801f8aa:	4401      	add	r1, r0
 801f8ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f8ae:	4402      	add	r2, r0
 801f8b0:	e7ee      	b.n	801f890 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f8b2:	d017      	beq.n	801f8e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f8b4:	1e58      	subs	r0, r3, #1
 801f8b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f8b8:	fb05 1500 	mla	r5, r5, r0, r1
 801f8bc:	142d      	asrs	r5, r5, #16
 801f8be:	d409      	bmi.n	801f8d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f8c0:	42bd      	cmp	r5, r7
 801f8c2:	da07      	bge.n	801f8d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f8c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f8c6:	fb05 2000 	mla	r0, r5, r0, r2
 801f8ca:	1400      	asrs	r0, r0, #16
 801f8cc:	d402      	bmi.n	801f8d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f8ce:	42b0      	cmp	r0, r6
 801f8d0:	f2c0 80bc 	blt.w	801fa4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f8d4:	2600      	movs	r6, #0
 801f8d6:	1998      	adds	r0, r3, r6
 801f8d8:	2800      	cmp	r0, #0
 801f8da:	dc3e      	bgt.n	801f95a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f8e4:	f1bb 0f00 	cmp.w	fp, #0
 801f8e8:	f340 811b 	ble.w	801fb22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801f8ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8f6:	f1bb 0b01 	subs.w	fp, fp, #1
 801f8fa:	eeb0 6a62 	vmov.f32	s12, s5
 801f8fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f902:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f906:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f90a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f90e:	eeb0 6a43 	vmov.f32	s12, s6
 801f912:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f916:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f91a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f91e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f922:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f926:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f92a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f92e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f932:	ee12 2a90 	vmov	r2, s5
 801f936:	eef0 2a47 	vmov.f32	s5, s14
 801f93a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f93e:	ee13 2a10 	vmov	r2, s6
 801f942:	9311      	str	r3, [sp, #68]	; 0x44
 801f944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f946:	eeb0 3a67 	vmov.f32	s6, s15
 801f94a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f94e:	9a03      	ldr	r2, [sp, #12]
 801f950:	9312      	str	r3, [sp, #72]	; 0x48
 801f952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f954:	bf08      	it	eq
 801f956:	4613      	moveq	r3, r2
 801f958:	e789      	b.n	801f86e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f95a:	140f      	asrs	r7, r1, #16
 801f95c:	d426      	bmi.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f95e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f962:	42bd      	cmp	r5, r7
 801f964:	dd22      	ble.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f966:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f96a:	d41f      	bmi.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f96c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f970:	4560      	cmp	r0, ip
 801f972:	dd1b      	ble.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f974:	9800      	ldr	r0, [sp, #0]
 801f976:	b22d      	sxth	r5, r5
 801f978:	fb0c 0505 	mla	r5, ip, r5, r0
 801f97c:	5de8      	ldrb	r0, [r5, r7]
 801f97e:	9d01      	ldr	r5, [sp, #4]
 801f980:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f984:	0e07      	lsrs	r7, r0, #24
 801f986:	2fff      	cmp	r7, #255	; 0xff
 801f988:	d116      	bne.n	801f9b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f98a:	f06f 0501 	mvn.w	r5, #1
 801f98e:	fb05 f706 	mul.w	r7, r5, r6
 801f992:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f996:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f99a:	0945      	lsrs	r5, r0, #5
 801f99c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f9a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f9a4:	ea4c 0505 	orr.w	r5, ip, r5
 801f9a8:	4305      	orrs	r5, r0
 801f9aa:	53e5      	strh	r5, [r4, r7]
 801f9ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f9ae:	3e01      	subs	r6, #1
 801f9b0:	4401      	add	r1, r0
 801f9b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f9b4:	4402      	add	r2, r0
 801f9b6:	e78e      	b.n	801f8d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f9b8:	b2fd      	uxtb	r5, r7
 801f9ba:	2f00      	cmp	r7, #0
 801f9bc:	d0f6      	beq.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f9be:	f06f 0701 	mvn.w	r7, #1
 801f9c2:	fa1f f985 	uxth.w	r9, r5
 801f9c6:	43ed      	mvns	r5, r5
 801f9c8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f9cc:	4377      	muls	r7, r6
 801f9ce:	fb1a fa09 	smulbb	sl, sl, r9
 801f9d2:	b2ed      	uxtb	r5, r5
 801f9d4:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f9d8:	9702      	str	r7, [sp, #8]
 801f9da:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f9de:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f9e2:	fb17 f709 	smulbb	r7, r7, r9
 801f9e6:	b2c0      	uxtb	r0, r0
 801f9e8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f9ec:	fb10 f009 	smulbb	r0, r0, r9
 801f9f0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f9f4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f9f8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f9fc:	fa1f fc8c 	uxth.w	ip, ip
 801fa00:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa04:	fa5f f888 	uxtb.w	r8, r8
 801fa08:	fb07 a705 	mla	r7, r7, r5, sl
 801fa0c:	fb08 0005 	mla	r0, r8, r5, r0
 801fa10:	f10c 0501 	add.w	r5, ip, #1
 801fa14:	b2bf      	uxth	r7, r7
 801fa16:	b280      	uxth	r0, r0
 801fa18:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fa1c:	f100 0a01 	add.w	sl, r0, #1
 801fa20:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fa24:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fa28:	9802      	ldr	r0, [sp, #8]
 801fa2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fa2e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fa32:	f107 0a01 	add.w	sl, r7, #1
 801fa36:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fa3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fa3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fa42:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fa46:	f824 c000 	strh.w	ip, [r4, r0]
 801fa4a:	e7af      	b.n	801f9ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fa4c:	f04f 0800 	mov.w	r8, #0
 801fa50:	eba3 0008 	sub.w	r0, r3, r8
 801fa54:	2800      	cmp	r0, #0
 801fa56:	f77f af41 	ble.w	801f8dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fa5a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fa5e:	1410      	asrs	r0, r2, #16
 801fa60:	9f00      	ldr	r7, [sp, #0]
 801fa62:	140d      	asrs	r5, r1, #16
 801fa64:	fb06 7000 	mla	r0, r6, r0, r7
 801fa68:	5d40      	ldrb	r0, [r0, r5]
 801fa6a:	9d01      	ldr	r5, [sp, #4]
 801fa6c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fa70:	0e2e      	lsrs	r6, r5, #24
 801fa72:	2eff      	cmp	r6, #255	; 0xff
 801fa74:	d112      	bne.n	801fa9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801fa76:	482c      	ldr	r0, [pc, #176]	; (801fb28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801fa78:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fa7c:	0968      	lsrs	r0, r5, #5
 801fa7e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fa82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fa86:	4330      	orrs	r0, r6
 801fa88:	4328      	orrs	r0, r5
 801fa8a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801fa8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fa90:	f108 0801 	add.w	r8, r8, #1
 801fa94:	4401      	add	r1, r0
 801fa96:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fa98:	4402      	add	r2, r0
 801fa9a:	e7d9      	b.n	801fa50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fa9c:	b2f0      	uxtb	r0, r6
 801fa9e:	2e00      	cmp	r6, #0
 801faa0:	d0f5      	beq.n	801fa8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801faa2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801faa6:	fa1f f980 	uxth.w	r9, r0
 801faaa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801faae:	43c0      	mvns	r0, r0
 801fab0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fab4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fab8:	fb16 f609 	smulbb	r6, r6, r9
 801fabc:	b2c0      	uxtb	r0, r0
 801fabe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fac2:	b2ed      	uxtb	r5, r5
 801fac4:	fb1a fa09 	smulbb	sl, sl, r9
 801fac8:	fb07 6700 	mla	r7, r7, r0, r6
 801facc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fad0:	fb15 f509 	smulbb	r5, r5, r9
 801fad4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fad8:	b2bf      	uxth	r7, r7
 801fada:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fade:	fa5f fc8c 	uxtb.w	ip, ip
 801fae2:	fb06 a600 	mla	r6, r6, r0, sl
 801fae6:	fb0c 5500 	mla	r5, ip, r0, r5
 801faea:	1c78      	adds	r0, r7, #1
 801faec:	b2b6      	uxth	r6, r6
 801faee:	b2ad      	uxth	r5, r5
 801faf0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801faf4:	f105 0a01 	add.w	sl, r5, #1
 801faf8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fafc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fb00:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fb04:	ea4a 0707 	orr.w	r7, sl, r7
 801fb08:	f106 0a01 	add.w	sl, r6, #1
 801fb0c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fb10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fb14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fb18:	ea47 070a 	orr.w	r7, r7, sl
 801fb1c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fb20:	e7b5      	b.n	801fa8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fb22:	b005      	add	sp, #20
 801fb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb28:	fffff800 	.word	0xfffff800

0801fb2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb30:	b087      	sub	sp, #28
 801fb32:	468b      	mov	fp, r1
 801fb34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fb38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fb3a:	9204      	str	r2, [sp, #16]
 801fb3c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fb40:	6861      	ldr	r1, [r4, #4]
 801fb42:	9205      	str	r2, [sp, #20]
 801fb44:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801fb48:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801fb4c:	fb01 2000 	mla	r0, r1, r0, r2
 801fb50:	6822      	ldr	r2, [r4, #0]
 801fb52:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fb56:	f8de 2000 	ldr.w	r2, [lr]
 801fb5a:	9201      	str	r2, [sp, #4]
 801fb5c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fb60:	9202      	str	r2, [sp, #8]
 801fb62:	f1bb 0f00 	cmp.w	fp, #0
 801fb66:	dc03      	bgt.n	801fb70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fb68:	9a04      	ldr	r2, [sp, #16]
 801fb6a:	2a00      	cmp	r2, #0
 801fb6c:	f340 8142 	ble.w	801fdf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801fb70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fb76:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fb7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb7c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fb80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	dd0e      	ble.n	801fba6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801fb88:	140c      	asrs	r4, r1, #16
 801fb8a:	d405      	bmi.n	801fb98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fb8c:	42bc      	cmp	r4, r7
 801fb8e:	da03      	bge.n	801fb98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fb90:	1414      	asrs	r4, r2, #16
 801fb92:	d401      	bmi.n	801fb98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fb94:	42b4      	cmp	r4, r6
 801fb96:	db07      	blt.n	801fba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fb98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fb9a:	3b01      	subs	r3, #1
 801fb9c:	3002      	adds	r0, #2
 801fb9e:	4421      	add	r1, r4
 801fba0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fba2:	4422      	add	r2, r4
 801fba4:	e7ee      	b.n	801fb84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fba6:	d019      	beq.n	801fbdc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801fba8:	1e5c      	subs	r4, r3, #1
 801fbaa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fbac:	fb05 1504 	mla	r5, r5, r4, r1
 801fbb0:	142d      	asrs	r5, r5, #16
 801fbb2:	d409      	bmi.n	801fbc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbb4:	42bd      	cmp	r5, r7
 801fbb6:	da07      	bge.n	801fbc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fbba:	fb05 2404 	mla	r4, r5, r4, r2
 801fbbe:	1424      	asrs	r4, r4, #16
 801fbc0:	d402      	bmi.n	801fbc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801fbc2:	42b4      	cmp	r4, r6
 801fbc4:	f2c0 80b1 	blt.w	801fd2a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801fbc8:	f04f 0800 	mov.w	r8, #0
 801fbcc:	eb03 0408 	add.w	r4, r3, r8
 801fbd0:	2c00      	cmp	r4, #0
 801fbd2:	dc3e      	bgt.n	801fc52 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801fbd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fbd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fbdc:	f1bb 0f00 	cmp.w	fp, #0
 801fbe0:	f340 8108 	ble.w	801fdf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801fbe4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbee:	f1bb 0b01 	subs.w	fp, fp, #1
 801fbf2:	eeb0 6a62 	vmov.f32	s12, s5
 801fbf6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbfa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc02:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fc06:	eeb0 6a43 	vmov.f32	s12, s6
 801fc0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc0e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fc12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc2a:	ee12 2a90 	vmov	r2, s5
 801fc2e:	eef0 2a47 	vmov.f32	s5, s14
 801fc32:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc36:	ee13 2a10 	vmov	r2, s6
 801fc3a:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc3e:	eeb0 3a67 	vmov.f32	s6, s15
 801fc42:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc46:	9a04      	ldr	r2, [sp, #16]
 801fc48:	9314      	str	r3, [sp, #80]	; 0x50
 801fc4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc4c:	bf08      	it	eq
 801fc4e:	4613      	moveq	r3, r2
 801fc50:	e787      	b.n	801fb62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fc52:	140e      	asrs	r6, r1, #16
 801fc54:	d462      	bmi.n	801fd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc56:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fc5a:	42b5      	cmp	r5, r6
 801fc5c:	dd5e      	ble.n	801fd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc5e:	1417      	asrs	r7, r2, #16
 801fc60:	d45c      	bmi.n	801fd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc62:	f8de 400c 	ldr.w	r4, [lr, #12]
 801fc66:	42bc      	cmp	r4, r7
 801fc68:	dd58      	ble.n	801fd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc6a:	b22d      	sxth	r5, r5
 801fc6c:	9c02      	ldr	r4, [sp, #8]
 801fc6e:	fb07 6505 	mla	r5, r7, r5, r6
 801fc72:	5d66      	ldrb	r6, [r4, r5]
 801fc74:	2e00      	cmp	r6, #0
 801fc76:	d051      	beq.n	801fd1c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801fc78:	9c01      	ldr	r4, [sp, #4]
 801fc7a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801fc7e:	f06f 0401 	mvn.w	r4, #1
 801fc82:	fb04 f408 	mul.w	r4, r4, r8
 801fc86:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801fc8a:	5b05      	ldrh	r5, [r0, r4]
 801fc8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc90:	9403      	str	r4, [sp, #12]
 801fc92:	9c05      	ldr	r4, [sp, #20]
 801fc94:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fc98:	4366      	muls	r6, r4
 801fc9a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fc9e:	1c74      	adds	r4, r6, #1
 801fca0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801fca4:	122e      	asrs	r6, r5, #8
 801fca6:	1224      	asrs	r4, r4, #8
 801fca8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fcac:	00ed      	lsls	r5, r5, #3
 801fcae:	b2a7      	uxth	r7, r4
 801fcb0:	43e4      	mvns	r4, r4
 801fcb2:	b2ed      	uxtb	r5, r5
 801fcb4:	b2e4      	uxtb	r4, r4
 801fcb6:	fb16 f604 	smulbb	r6, r6, r4
 801fcba:	fb15 f504 	smulbb	r5, r5, r4
 801fcbe:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fcc2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801fcc6:	fb1a fa04 	smulbb	sl, sl, r4
 801fcca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801fcce:	fa1f fc8c 	uxth.w	ip, ip
 801fcd2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fcd6:	fa5f f989 	uxtb.w	r9, r9
 801fcda:	fb06 a607 	mla	r6, r6, r7, sl
 801fcde:	f10c 0401 	add.w	r4, ip, #1
 801fce2:	fb09 5507 	mla	r5, r9, r7, r5
 801fce6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fcea:	9c03      	ldr	r4, [sp, #12]
 801fcec:	b2ad      	uxth	r5, r5
 801fcee:	b2b6      	uxth	r6, r6
 801fcf0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fcf4:	f105 0a01 	add.w	sl, r5, #1
 801fcf8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fcfc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd00:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fd04:	f106 0a01 	add.w	sl, r6, #1
 801fd08:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fd0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fd10:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fd14:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fd18:	f820 c004 	strh.w	ip, [r0, r4]
 801fd1c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fd1e:	f108 38ff 	add.w	r8, r8, #4294967295
 801fd22:	4421      	add	r1, r4
 801fd24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fd26:	4422      	add	r2, r4
 801fd28:	e750      	b.n	801fbcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd2a:	f04f 0900 	mov.w	r9, #0
 801fd2e:	eba3 0409 	sub.w	r4, r3, r9
 801fd32:	2c00      	cmp	r4, #0
 801fd34:	f77f af4e 	ble.w	801fbd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fd38:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801fd3c:	140d      	asrs	r5, r1, #16
 801fd3e:	1414      	asrs	r4, r2, #16
 801fd40:	fb06 5404 	mla	r4, r6, r4, r5
 801fd44:	9d02      	ldr	r5, [sp, #8]
 801fd46:	5d2e      	ldrb	r6, [r5, r4]
 801fd48:	2e00      	cmp	r6, #0
 801fd4a:	d04c      	beq.n	801fde6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801fd4c:	9d01      	ldr	r5, [sp, #4]
 801fd4e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801fd52:	9c05      	ldr	r4, [sp, #20]
 801fd54:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801fd58:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801fd5c:	4366      	muls	r6, r4
 801fd5e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fd62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd66:	1c74      	adds	r4, r6, #1
 801fd68:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801fd6c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801fd70:	122e      	asrs	r6, r5, #8
 801fd72:	1224      	asrs	r4, r4, #8
 801fd74:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fd78:	00ed      	lsls	r5, r5, #3
 801fd7a:	b2a7      	uxth	r7, r4
 801fd7c:	43e4      	mvns	r4, r4
 801fd7e:	b2ed      	uxtb	r5, r5
 801fd80:	b2e4      	uxtb	r4, r4
 801fd82:	fb16 f604 	smulbb	r6, r6, r4
 801fd86:	fb15 f504 	smulbb	r5, r5, r4
 801fd8a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801fd8e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fd92:	fb1a fa04 	smulbb	sl, sl, r4
 801fd96:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fd9a:	fa1f fc8c 	uxth.w	ip, ip
 801fd9e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fda2:	fa5f f888 	uxtb.w	r8, r8
 801fda6:	fb06 a607 	mla	r6, r6, r7, sl
 801fdaa:	f10c 0401 	add.w	r4, ip, #1
 801fdae:	fb08 5507 	mla	r5, r8, r7, r5
 801fdb2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801fdb6:	b2ad      	uxth	r5, r5
 801fdb8:	b2b6      	uxth	r6, r6
 801fdba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fdbe:	f105 0a01 	add.w	sl, r5, #1
 801fdc2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fdc6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fdca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fdce:	f106 0a01 	add.w	sl, r6, #1
 801fdd2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fdd6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdda:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdde:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fde2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801fde6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fde8:	f109 0901 	add.w	r9, r9, #1
 801fdec:	4421      	add	r1, r4
 801fdee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fdf0:	4422      	add	r2, r4
 801fdf2:	e79c      	b.n	801fd2e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801fdf4:	b007      	add	sp, #28
 801fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fdfa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fdfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdfe:	b085      	sub	sp, #20
 801fe00:	468b      	mov	fp, r1
 801fe02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fe08:	9203      	str	r2, [sp, #12]
 801fe0a:	6861      	ldr	r1, [r4, #4]
 801fe0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fe10:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801fe14:	fb01 2000 	mla	r0, r1, r0, r2
 801fe18:	6822      	ldr	r2, [r4, #0]
 801fe1a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801fe1e:	f8d8 2000 	ldr.w	r2, [r8]
 801fe22:	9200      	str	r2, [sp, #0]
 801fe24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fe28:	9201      	str	r2, [sp, #4]
 801fe2a:	f1bb 0f00 	cmp.w	fp, #0
 801fe2e:	dc03      	bgt.n	801fe38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fe30:	9a03      	ldr	r2, [sp, #12]
 801fe32:	2a00      	cmp	r2, #0
 801fe34:	f340 8146 	ble.w	80200c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fe38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fe3a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fe3e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fe42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe44:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fe48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fe4c:	2b00      	cmp	r3, #0
 801fe4e:	dd0e      	ble.n	801fe6e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fe50:	140c      	asrs	r4, r1, #16
 801fe52:	d405      	bmi.n	801fe60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe54:	42bc      	cmp	r4, r7
 801fe56:	da03      	bge.n	801fe60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe58:	1414      	asrs	r4, r2, #16
 801fe5a:	d401      	bmi.n	801fe60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fe5c:	42b4      	cmp	r4, r6
 801fe5e:	db07      	blt.n	801fe70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fe62:	3b01      	subs	r3, #1
 801fe64:	3002      	adds	r0, #2
 801fe66:	4421      	add	r1, r4
 801fe68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fe6a:	4422      	add	r2, r4
 801fe6c:	e7ee      	b.n	801fe4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fe6e:	d017      	beq.n	801fea0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fe70:	1e5c      	subs	r4, r3, #1
 801fe72:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe74:	fb05 1504 	mla	r5, r5, r4, r1
 801fe78:	142d      	asrs	r5, r5, #16
 801fe7a:	d409      	bmi.n	801fe90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fe7c:	42bd      	cmp	r5, r7
 801fe7e:	da07      	bge.n	801fe90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fe80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fe82:	fb05 2404 	mla	r4, r5, r4, r2
 801fe86:	1424      	asrs	r4, r4, #16
 801fe88:	d402      	bmi.n	801fe90 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fe8a:	42b4      	cmp	r4, r6
 801fe8c:	f2c0 80b3 	blt.w	801fff6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801fe90:	2600      	movs	r6, #0
 801fe92:	199c      	adds	r4, r3, r6
 801fe94:	2c00      	cmp	r4, #0
 801fe96:	dc3e      	bgt.n	801ff16 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fe98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe9c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fea0:	f1bb 0f00 	cmp.w	fp, #0
 801fea4:	f340 810e 	ble.w	80200c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801fea8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801feac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801feae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801feb2:	f1bb 0b01 	subs.w	fp, fp, #1
 801feb6:	eeb0 6a62 	vmov.f32	s12, s5
 801feba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801febe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fec2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fec6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801feca:	eeb0 6a43 	vmov.f32	s12, s6
 801fece:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fed2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fed6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801feda:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fede:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fee2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fee6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801feea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801feee:	ee12 2a90 	vmov	r2, s5
 801fef2:	eef0 2a47 	vmov.f32	s5, s14
 801fef6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fefa:	ee13 2a10 	vmov	r2, s6
 801fefe:	9311      	str	r3, [sp, #68]	; 0x44
 801ff00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff02:	eeb0 3a67 	vmov.f32	s6, s15
 801ff06:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff0a:	9a03      	ldr	r2, [sp, #12]
 801ff0c:	9312      	str	r3, [sp, #72]	; 0x48
 801ff0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff10:	bf08      	it	eq
 801ff12:	4613      	moveq	r3, r2
 801ff14:	e789      	b.n	801fe2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ff16:	140f      	asrs	r7, r1, #16
 801ff18:	d418      	bmi.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff1a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ff1e:	42bd      	cmp	r5, r7
 801ff20:	dd14      	ble.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff22:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ff26:	d411      	bmi.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff28:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801ff2c:	4564      	cmp	r4, ip
 801ff2e:	dd0d      	ble.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff30:	b22d      	sxth	r5, r5
 801ff32:	9c01      	ldr	r4, [sp, #4]
 801ff34:	fb0c 7505 	mla	r5, ip, r5, r7
 801ff38:	5d64      	ldrb	r4, [r4, r5]
 801ff3a:	2cff      	cmp	r4, #255	; 0xff
 801ff3c:	d10c      	bne.n	801ff58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ff3e:	9c00      	ldr	r4, [sp, #0]
 801ff40:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801ff44:	f06f 0401 	mvn.w	r4, #1
 801ff48:	4374      	muls	r4, r6
 801ff4a:	5305      	strh	r5, [r0, r4]
 801ff4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ff4e:	3e01      	subs	r6, #1
 801ff50:	4421      	add	r1, r4
 801ff52:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ff54:	4422      	add	r2, r4
 801ff56:	e79c      	b.n	801fe92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ff58:	2c00      	cmp	r4, #0
 801ff5a:	d0f7      	beq.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ff5c:	9f00      	ldr	r7, [sp, #0]
 801ff5e:	fa1f fc84 	uxth.w	ip, r4
 801ff62:	43e4      	mvns	r4, r4
 801ff64:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801ff68:	f06f 0501 	mvn.w	r5, #1
 801ff6c:	b2e4      	uxtb	r4, r4
 801ff6e:	4375      	muls	r5, r6
 801ff70:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801ff74:	9502      	str	r5, [sp, #8]
 801ff76:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ff7a:	5b45      	ldrh	r5, [r0, r5]
 801ff7c:	122f      	asrs	r7, r5, #8
 801ff7e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ff82:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff86:	00ed      	lsls	r5, r5, #3
 801ff88:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ff8c:	fb17 f704 	smulbb	r7, r7, r4
 801ff90:	b2ed      	uxtb	r5, r5
 801ff92:	fb1a fa04 	smulbb	sl, sl, r4
 801ff96:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801ff9a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801ff9e:	fb15 f504 	smulbb	r5, r5, r4
 801ffa2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801ffa6:	fa1f fe8e 	uxth.w	lr, lr
 801ffaa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ffae:	fa5f f989 	uxtb.w	r9, r9
 801ffb2:	fb07 a70c 	mla	r7, r7, ip, sl
 801ffb6:	f10e 0401 	add.w	r4, lr, #1
 801ffba:	fb09 550c 	mla	r5, r9, ip, r5
 801ffbe:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801ffc2:	9c02      	ldr	r4, [sp, #8]
 801ffc4:	b2ad      	uxth	r5, r5
 801ffc6:	b2bf      	uxth	r7, r7
 801ffc8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ffcc:	f105 0a01 	add.w	sl, r5, #1
 801ffd0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ffd4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ffd8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801ffdc:	f107 0a01 	add.w	sl, r7, #1
 801ffe0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ffe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ffe8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ffec:	ea4e 0e0a 	orr.w	lr, lr, sl
 801fff0:	f820 e004 	strh.w	lr, [r0, r4]
 801fff4:	e7aa      	b.n	801ff4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801fff6:	f04f 0900 	mov.w	r9, #0
 801fffa:	eba3 0409 	sub.w	r4, r3, r9
 801fffe:	2c00      	cmp	r4, #0
 8020000:	f77f af4a 	ble.w	801fe98 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020004:	1414      	asrs	r4, r2, #16
 8020006:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802000a:	140d      	asrs	r5, r1, #16
 802000c:	fb06 5504 	mla	r5, r6, r4, r5
 8020010:	9c01      	ldr	r4, [sp, #4]
 8020012:	5d64      	ldrb	r4, [r4, r5]
 8020014:	2cff      	cmp	r4, #255	; 0xff
 8020016:	d10b      	bne.n	8020030 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020018:	9c00      	ldr	r4, [sp, #0]
 802001a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802001e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8020022:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020024:	f109 0901 	add.w	r9, r9, #1
 8020028:	4421      	add	r1, r4
 802002a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802002c:	4422      	add	r2, r4
 802002e:	e7e4      	b.n	801fffa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020030:	2c00      	cmp	r4, #0
 8020032:	d0f6      	beq.n	8020022 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020034:	9e00      	ldr	r6, [sp, #0]
 8020036:	b2a7      	uxth	r7, r4
 8020038:	43e4      	mvns	r4, r4
 802003a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802003e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020042:	b2e4      	uxtb	r4, r4
 8020044:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020048:	122e      	asrs	r6, r5, #8
 802004a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802004e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020052:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020056:	00ed      	lsls	r5, r5, #3
 8020058:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802005c:	fb16 f604 	smulbb	r6, r6, r4
 8020060:	b2ed      	uxtb	r5, r5
 8020062:	fb1a fa04 	smulbb	sl, sl, r4
 8020066:	fb0c 6c07 	mla	ip, ip, r7, r6
 802006a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802006e:	fb15 f504 	smulbb	r5, r5, r4
 8020072:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020076:	fa1f fc8c 	uxth.w	ip, ip
 802007a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802007e:	fa5f fe8e 	uxtb.w	lr, lr
 8020082:	fb06 a607 	mla	r6, r6, r7, sl
 8020086:	f10c 0401 	add.w	r4, ip, #1
 802008a:	fb0e 5507 	mla	r5, lr, r7, r5
 802008e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020092:	b2ad      	uxth	r5, r5
 8020094:	b2b6      	uxth	r6, r6
 8020096:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802009a:	f105 0a01 	add.w	sl, r5, #1
 802009e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80200a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80200a6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80200aa:	f106 0a01 	add.w	sl, r6, #1
 80200ae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80200b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80200b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80200ba:	ea4c 0c0a 	orr.w	ip, ip, sl
 80200be:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80200c2:	e7ae      	b.n	8020022 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80200c4:	b005      	add	sp, #20
 80200c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ce:	b085      	sub	sp, #20
 80200d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80200d2:	9203      	str	r2, [sp, #12]
 80200d4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80200d8:	9100      	str	r1, [sp, #0]
 80200da:	9201      	str	r2, [sp, #4]
 80200dc:	6841      	ldr	r1, [r0, #4]
 80200de:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80200e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80200e6:	fb01 2404 	mla	r4, r1, r4, r2
 80200ea:	6802      	ldr	r2, [r0, #0]
 80200ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80200f0:	f8de 2000 	ldr.w	r2, [lr]
 80200f4:	9202      	str	r2, [sp, #8]
 80200f6:	9a01      	ldr	r2, [sp, #4]
 80200f8:	43d6      	mvns	r6, r2
 80200fa:	b2f6      	uxtb	r6, r6
 80200fc:	9a00      	ldr	r2, [sp, #0]
 80200fe:	2a00      	cmp	r2, #0
 8020100:	dc03      	bgt.n	802010a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020102:	9a03      	ldr	r2, [sp, #12]
 8020104:	2a00      	cmp	r2, #0
 8020106:	f340 8124 	ble.w	8020352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802010a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802010c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8020110:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020116:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 802011a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802011e:	2b00      	cmp	r3, #0
 8020120:	dd0e      	ble.n	8020140 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020122:	1408      	asrs	r0, r1, #16
 8020124:	d405      	bmi.n	8020132 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020126:	4560      	cmp	r0, ip
 8020128:	da03      	bge.n	8020132 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802012a:	1410      	asrs	r0, r2, #16
 802012c:	d401      	bmi.n	8020132 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802012e:	42b8      	cmp	r0, r7
 8020130:	db07      	blt.n	8020142 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020132:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020134:	3b01      	subs	r3, #1
 8020136:	3402      	adds	r4, #2
 8020138:	4401      	add	r1, r0
 802013a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802013c:	4402      	add	r2, r0
 802013e:	e7ee      	b.n	802011e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020140:	d06e      	beq.n	8020220 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020142:	1e58      	subs	r0, r3, #1
 8020144:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020146:	fb05 1500 	mla	r5, r5, r0, r1
 802014a:	142d      	asrs	r5, r5, #16
 802014c:	d45c      	bmi.n	8020208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802014e:	4565      	cmp	r5, ip
 8020150:	da5a      	bge.n	8020208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020152:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020154:	fb05 2000 	mla	r0, r5, r0, r2
 8020158:	1400      	asrs	r0, r0, #16
 802015a:	d455      	bmi.n	8020208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 802015c:	42b8      	cmp	r0, r7
 802015e:	da53      	bge.n	8020208 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020160:	4699      	mov	r9, r3
 8020162:	46a2      	mov	sl, r4
 8020164:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8020168:	f1b9 0f00 	cmp.w	r9, #0
 802016c:	dd54      	ble.n	8020218 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802016e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020172:	140d      	asrs	r5, r1, #16
 8020174:	1410      	asrs	r0, r2, #16
 8020176:	f109 39ff 	add.w	r9, r9, #4294967295
 802017a:	fb07 5000 	mla	r0, r7, r0, r5
 802017e:	9d02      	ldr	r5, [sp, #8]
 8020180:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8020184:	f8ba 5000 	ldrh.w	r5, [sl]
 8020188:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802018c:	122f      	asrs	r7, r5, #8
 802018e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8020192:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020196:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802019a:	00ed      	lsls	r5, r5, #3
 802019c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80201a0:	fb17 f706 	smulbb	r7, r7, r6
 80201a4:	b2ed      	uxtb	r5, r5
 80201a6:	fb18 f806 	smulbb	r8, r8, r6
 80201aa:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80201ae:	10c7      	asrs	r7, r0, #3
 80201b0:	fb15 f506 	smulbb	r5, r5, r6
 80201b4:	00c0      	lsls	r0, r0, #3
 80201b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80201ba:	fa1f fc8c 	uxth.w	ip, ip
 80201be:	b2c0      	uxtb	r0, r0
 80201c0:	fb07 870b 	mla	r7, r7, fp, r8
 80201c4:	fb00 500b 	mla	r0, r0, fp, r5
 80201c8:	f10c 0501 	add.w	r5, ip, #1
 80201cc:	b2bf      	uxth	r7, r7
 80201ce:	b280      	uxth	r0, r0
 80201d0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80201d4:	f107 0801 	add.w	r8, r7, #1
 80201d8:	1c45      	adds	r5, r0, #1
 80201da:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80201de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80201e2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80201e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80201e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80201ec:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80201f0:	4401      	add	r1, r0
 80201f2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80201f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80201f8:	ea45 0c0c 	orr.w	ip, r5, ip
 80201fc:	4402      	add	r2, r0
 80201fe:	ea4c 0c08 	orr.w	ip, ip, r8
 8020202:	f82a cb02 	strh.w	ip, [sl], #2
 8020206:	e7af      	b.n	8020168 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020208:	f04f 0800 	mov.w	r8, #0
 802020c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8020210:	eb03 0008 	add.w	r0, r3, r8
 8020214:	2800      	cmp	r0, #0
 8020216:	dc41      	bgt.n	802029c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020218:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802021c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020220:	9b00      	ldr	r3, [sp, #0]
 8020222:	2b00      	cmp	r3, #0
 8020224:	f340 8095 	ble.w	8020352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802022c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802022e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020232:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020236:	eef0 6a62 	vmov.f32	s13, s5
 802023a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802023e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020242:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020246:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 802024a:	eef0 6a43 	vmov.f32	s13, s6
 802024e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020252:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8020256:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802025a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802025e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020262:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020266:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802026a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802026e:	ee12 2a90 	vmov	r2, s5
 8020272:	eef0 2a47 	vmov.f32	s5, s14
 8020276:	fb92 f3f3 	sdiv	r3, r2, r3
 802027a:	ee13 2a10 	vmov	r2, s6
 802027e:	9311      	str	r3, [sp, #68]	; 0x44
 8020280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020282:	eeb0 3a67 	vmov.f32	s6, s15
 8020286:	fb92 f3f3 	sdiv	r3, r2, r3
 802028a:	9312      	str	r3, [sp, #72]	; 0x48
 802028c:	9b00      	ldr	r3, [sp, #0]
 802028e:	9a03      	ldr	r2, [sp, #12]
 8020290:	3b01      	subs	r3, #1
 8020292:	9300      	str	r3, [sp, #0]
 8020294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020296:	bf08      	it	eq
 8020298:	4613      	moveq	r3, r2
 802029a:	e72f      	b.n	80200fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802029c:	140f      	asrs	r7, r1, #16
 802029e:	d451      	bmi.n	8020344 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80202a0:	f8de 5008 	ldr.w	r5, [lr, #8]
 80202a4:	42bd      	cmp	r5, r7
 80202a6:	dd4d      	ble.n	8020344 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80202a8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80202ac:	d44a      	bmi.n	8020344 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80202ae:	f8de 000c 	ldr.w	r0, [lr, #12]
 80202b2:	4560      	cmp	r0, ip
 80202b4:	dd46      	ble.n	8020344 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80202b6:	b22d      	sxth	r5, r5
 80202b8:	9802      	ldr	r0, [sp, #8]
 80202ba:	fb0c 7505 	mla	r5, ip, r5, r7
 80202be:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80202c2:	f06f 0501 	mvn.w	r5, #1
 80202c6:	fb05 fb08 	mul.w	fp, r5, r8
 80202ca:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80202ce:	f834 500b 	ldrh.w	r5, [r4, fp]
 80202d2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202d6:	122f      	asrs	r7, r5, #8
 80202d8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80202dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80202e0:	00ed      	lsls	r5, r5, #3
 80202e2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80202e6:	fb17 f706 	smulbb	r7, r7, r6
 80202ea:	b2ed      	uxtb	r5, r5
 80202ec:	fb19 f906 	smulbb	r9, r9, r6
 80202f0:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80202f4:	10c7      	asrs	r7, r0, #3
 80202f6:	fb15 f506 	smulbb	r5, r5, r6
 80202fa:	00c0      	lsls	r0, r0, #3
 80202fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020300:	fa1f fc8c 	uxth.w	ip, ip
 8020304:	b2c0      	uxtb	r0, r0
 8020306:	fb07 970a 	mla	r7, r7, sl, r9
 802030a:	fb00 500a 	mla	r0, r0, sl, r5
 802030e:	f10c 0501 	add.w	r5, ip, #1
 8020312:	b2bf      	uxth	r7, r7
 8020314:	b280      	uxth	r0, r0
 8020316:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802031a:	f107 0901 	add.w	r9, r7, #1
 802031e:	1c45      	adds	r5, r0, #1
 8020320:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020324:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020328:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802032c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020330:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020334:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020338:	ea45 0c0c 	orr.w	ip, r5, ip
 802033c:	ea4c 0c09 	orr.w	ip, ip, r9
 8020340:	f824 c00b 	strh.w	ip, [r4, fp]
 8020344:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020346:	f108 38ff 	add.w	r8, r8, #4294967295
 802034a:	4401      	add	r1, r0
 802034c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802034e:	4402      	add	r2, r0
 8020350:	e75e      	b.n	8020210 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020352:	b005      	add	sp, #20
 8020354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020358 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802035c:	b085      	sub	sp, #20
 802035e:	4693      	mov	fp, r2
 8020360:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020364:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020366:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020368:	6870      	ldr	r0, [r6, #4]
 802036a:	9101      	str	r1, [sp, #4]
 802036c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020370:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8020374:	fb00 2404 	mla	r4, r0, r4, r2
 8020378:	6832      	ldr	r2, [r6, #0]
 802037a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802037e:	682a      	ldr	r2, [r5, #0]
 8020380:	9202      	str	r2, [sp, #8]
 8020382:	9a01      	ldr	r2, [sp, #4]
 8020384:	2a00      	cmp	r2, #0
 8020386:	dc03      	bgt.n	8020390 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020388:	f1bb 0f00 	cmp.w	fp, #0
 802038c:	f340 809a 	ble.w	80204c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020392:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020396:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802039a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802039c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80203a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	dd0c      	ble.n	80203c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80203a8:	1406      	asrs	r6, r0, #16
 80203aa:	d405      	bmi.n	80203b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203ac:	454e      	cmp	r6, r9
 80203ae:	da03      	bge.n	80203b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203b0:	1416      	asrs	r6, r2, #16
 80203b2:	d401      	bmi.n	80203b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80203b4:	4546      	cmp	r6, r8
 80203b6:	db05      	blt.n	80203c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80203b8:	4470      	add	r0, lr
 80203ba:	4462      	add	r2, ip
 80203bc:	3b01      	subs	r3, #1
 80203be:	3402      	adds	r4, #2
 80203c0:	e7f0      	b.n	80203a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80203c2:	d00f      	beq.n	80203e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80203c4:	1e5e      	subs	r6, r3, #1
 80203c6:	fb0e 0706 	mla	r7, lr, r6, r0
 80203ca:	143f      	asrs	r7, r7, #16
 80203cc:	d541      	bpl.n	8020452 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80203ce:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80203d2:	4698      	mov	r8, r3
 80203d4:	9603      	str	r6, [sp, #12]
 80203d6:	f1b8 0f00 	cmp.w	r8, #0
 80203da:	dc56      	bgt.n	802048a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80203dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80203e4:	9b01      	ldr	r3, [sp, #4]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	dd6c      	ble.n	80204c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80203ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203f4:	eeb0 6a62 	vmov.f32	s12, s5
 80203f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020400:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020404:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020408:	eeb0 6a43 	vmov.f32	s12, s6
 802040c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020410:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020414:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020418:	ee61 7a27 	vmul.f32	s15, s2, s15
 802041c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020420:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020424:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020428:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802042c:	ee12 2a90 	vmov	r2, s5
 8020430:	eef0 2a47 	vmov.f32	s5, s14
 8020434:	fb92 fef3 	sdiv	lr, r2, r3
 8020438:	ee13 2a10 	vmov	r2, s6
 802043c:	eeb0 3a67 	vmov.f32	s6, s15
 8020440:	fb92 fcf3 	sdiv	ip, r2, r3
 8020444:	9b01      	ldr	r3, [sp, #4]
 8020446:	3b01      	subs	r3, #1
 8020448:	9301      	str	r3, [sp, #4]
 802044a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802044c:	bf08      	it	eq
 802044e:	465b      	moveq	r3, fp
 8020450:	e797      	b.n	8020382 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020452:	454f      	cmp	r7, r9
 8020454:	dabb      	bge.n	80203ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020456:	fb0c 2606 	mla	r6, ip, r6, r2
 802045a:	1436      	asrs	r6, r6, #16
 802045c:	d4b7      	bmi.n	80203ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802045e:	4546      	cmp	r6, r8
 8020460:	dab5      	bge.n	80203ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020462:	461e      	mov	r6, r3
 8020464:	46a0      	mov	r8, r4
 8020466:	2e00      	cmp	r6, #0
 8020468:	ddb8      	ble.n	80203dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802046a:	1417      	asrs	r7, r2, #16
 802046c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020470:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020474:	9902      	ldr	r1, [sp, #8]
 8020476:	4470      	add	r0, lr
 8020478:	4462      	add	r2, ip
 802047a:	fb0a 9707 	mla	r7, sl, r7, r9
 802047e:	3e01      	subs	r6, #1
 8020480:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020484:	f828 7b02 	strh.w	r7, [r8], #2
 8020488:	e7ed      	b.n	8020466 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802048a:	ea5f 4920 	movs.w	r9, r0, asr #16
 802048e:	d414      	bmi.n	80204ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020490:	68ae      	ldr	r6, [r5, #8]
 8020492:	454e      	cmp	r6, r9
 8020494:	dd11      	ble.n	80204ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020496:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802049a:	d40e      	bmi.n	80204ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802049c:	68ef      	ldr	r7, [r5, #12]
 802049e:	4557      	cmp	r7, sl
 80204a0:	dd0b      	ble.n	80204ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80204a2:	b236      	sxth	r6, r6
 80204a4:	f06f 0101 	mvn.w	r1, #1
 80204a8:	9f02      	ldr	r7, [sp, #8]
 80204aa:	fb0a 9606 	mla	r6, sl, r6, r9
 80204ae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80204b2:	fb01 f608 	mul.w	r6, r1, r8
 80204b6:	9903      	ldr	r1, [sp, #12]
 80204b8:	538f      	strh	r7, [r1, r6]
 80204ba:	4470      	add	r0, lr
 80204bc:	4462      	add	r2, ip
 80204be:	f108 38ff 	add.w	r8, r8, #4294967295
 80204c2:	e788      	b.n	80203d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80204c4:	b005      	add	sp, #20
 80204c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204ce:	b087      	sub	sp, #28
 80204d0:	468b      	mov	fp, r1
 80204d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80204d6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204d8:	9203      	str	r2, [sp, #12]
 80204da:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80204de:	6841      	ldr	r1, [r0, #4]
 80204e0:	9204      	str	r2, [sp, #16]
 80204e2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80204e6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80204ea:	fb01 2505 	mla	r5, r1, r5, r2
 80204ee:	6802      	ldr	r2, [r0, #0]
 80204f0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80204f4:	f8d9 2000 	ldr.w	r2, [r9]
 80204f8:	9201      	str	r2, [sp, #4]
 80204fa:	f1bb 0f00 	cmp.w	fp, #0
 80204fe:	dc03      	bgt.n	8020508 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020500:	9a03      	ldr	r2, [sp, #12]
 8020502:	2a00      	cmp	r2, #0
 8020504:	f340 8158 	ble.w	80207b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020508:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802050a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802050e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020514:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020518:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802051c:	2b00      	cmp	r3, #0
 802051e:	dd0e      	ble.n	802053e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020520:	1402      	asrs	r2, r0, #16
 8020522:	d405      	bmi.n	8020530 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020524:	42ba      	cmp	r2, r7
 8020526:	da03      	bge.n	8020530 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020528:	140a      	asrs	r2, r1, #16
 802052a:	d401      	bmi.n	8020530 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802052c:	42b2      	cmp	r2, r6
 802052e:	db07      	blt.n	8020540 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020532:	3b01      	subs	r3, #1
 8020534:	3502      	adds	r5, #2
 8020536:	4410      	add	r0, r2
 8020538:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802053a:	4411      	add	r1, r2
 802053c:	e7ee      	b.n	802051c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802053e:	d017      	beq.n	8020570 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020540:	1e5a      	subs	r2, r3, #1
 8020542:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020544:	fb04 0402 	mla	r4, r4, r2, r0
 8020548:	1424      	asrs	r4, r4, #16
 802054a:	d409      	bmi.n	8020560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802054c:	42bc      	cmp	r4, r7
 802054e:	da07      	bge.n	8020560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020550:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020552:	fb04 1202 	mla	r2, r4, r2, r1
 8020556:	1412      	asrs	r2, r2, #16
 8020558:	d402      	bmi.n	8020560 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802055a:	42b2      	cmp	r2, r6
 802055c:	f2c0 80bf 	blt.w	80206de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020560:	2700      	movs	r7, #0
 8020562:	19da      	adds	r2, r3, r7
 8020564:	2a00      	cmp	r2, #0
 8020566:	dc3e      	bgt.n	80205e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020568:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802056c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020570:	f1bb 0f00 	cmp.w	fp, #0
 8020574:	f340 8120 	ble.w	80207b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020578:	ee30 0a04 	vadd.f32	s0, s0, s8
 802057c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802057e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020582:	f1bb 0b01 	subs.w	fp, fp, #1
 8020586:	eeb0 6a62 	vmov.f32	s12, s5
 802058a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802058e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020592:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020596:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802059a:	eeb0 6a43 	vmov.f32	s12, s6
 802059e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205a2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80205a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205be:	ee12 2a90 	vmov	r2, s5
 80205c2:	eef0 2a47 	vmov.f32	s5, s14
 80205c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ca:	ee13 2a10 	vmov	r2, s6
 80205ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80205d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205d2:	eeb0 3a67 	vmov.f32	s6, s15
 80205d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80205da:	9a03      	ldr	r2, [sp, #12]
 80205dc:	9314      	str	r3, [sp, #80]	; 0x50
 80205de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205e0:	bf08      	it	eq
 80205e2:	4613      	moveq	r3, r2
 80205e4:	e789      	b.n	80204fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80205e6:	1406      	asrs	r6, r0, #16
 80205e8:	d42d      	bmi.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80205ea:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80205ee:	42b4      	cmp	r4, r6
 80205f0:	dd29      	ble.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80205f2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 80205f6:	d426      	bmi.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80205f8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80205fc:	4562      	cmp	r2, ip
 80205fe:	dd22      	ble.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020600:	b224      	sxth	r4, r4
 8020602:	9a01      	ldr	r2, [sp, #4]
 8020604:	fb0c 6404 	mla	r4, ip, r4, r6
 8020608:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 802060c:	0e22      	lsrs	r2, r4, #24
 802060e:	d01a      	beq.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020610:	9e04      	ldr	r6, [sp, #16]
 8020612:	4372      	muls	r2, r6
 8020614:	1c56      	adds	r6, r2, #1
 8020616:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802061a:	0a26      	lsrs	r6, r4, #8
 802061c:	1212      	asrs	r2, r2, #8
 802061e:	9605      	str	r6, [sp, #20]
 8020620:	2aff      	cmp	r2, #255	; 0xff
 8020622:	d116      	bne.n	8020652 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020624:	f06f 0201 	mvn.w	r2, #1
 8020628:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802062c:	fb02 fc07 	mul.w	ip, r2, r7
 8020630:	0962      	lsrs	r2, r4, #5
 8020632:	f026 0607 	bic.w	r6, r6, #7
 8020636:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802063a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802063e:	4316      	orrs	r6, r2
 8020640:	4326      	orrs	r6, r4
 8020642:	f825 600c 	strh.w	r6, [r5, ip]
 8020646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020648:	3f01      	subs	r7, #1
 802064a:	4410      	add	r0, r2
 802064c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802064e:	4411      	add	r1, r2
 8020650:	e787      	b.n	8020562 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020652:	f06f 0601 	mvn.w	r6, #1
 8020656:	fa1f fa82 	uxth.w	sl, r2
 802065a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 802065e:	43d2      	mvns	r2, r2
 8020660:	437e      	muls	r6, r7
 8020662:	b2e4      	uxtb	r4, r4
 8020664:	fb1c fc0a 	smulbb	ip, ip, sl
 8020668:	b2d2      	uxtb	r2, r2
 802066a:	f835 8006 	ldrh.w	r8, [r5, r6]
 802066e:	fb14 f40a 	smulbb	r4, r4, sl
 8020672:	9602      	str	r6, [sp, #8]
 8020674:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020678:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802067c:	fb16 f60a 	smulbb	r6, r6, sl
 8020680:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020684:	fb0e ce02 	mla	lr, lr, r2, ip
 8020688:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 802068c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020690:	fa1f fe8e 	uxth.w	lr, lr
 8020694:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020698:	fa5f f888 	uxtb.w	r8, r8
 802069c:	fb0c 6c02 	mla	ip, ip, r2, r6
 80206a0:	fb08 4402 	mla	r4, r8, r2, r4
 80206a4:	f10e 0201 	add.w	r2, lr, #1
 80206a8:	fa1f fc8c 	uxth.w	ip, ip
 80206ac:	b2a4      	uxth	r4, r4
 80206ae:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80206b2:	9a02      	ldr	r2, [sp, #8]
 80206b4:	1c66      	adds	r6, r4, #1
 80206b6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80206ba:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80206be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80206c2:	ea46 0e0e 	orr.w	lr, r6, lr
 80206c6:	f10c 0601 	add.w	r6, ip, #1
 80206ca:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80206ce:	0976      	lsrs	r6, r6, #5
 80206d0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80206d4:	ea4e 0e06 	orr.w	lr, lr, r6
 80206d8:	f825 e002 	strh.w	lr, [r5, r2]
 80206dc:	e7b3      	b.n	8020646 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80206de:	f04f 0800 	mov.w	r8, #0
 80206e2:	eba3 0208 	sub.w	r2, r3, r8
 80206e6:	2a00      	cmp	r2, #0
 80206e8:	f77f af3e 	ble.w	8020568 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80206ec:	1404      	asrs	r4, r0, #16
 80206ee:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 80206f2:	140a      	asrs	r2, r1, #16
 80206f4:	fb06 4202 	mla	r2, r6, r2, r4
 80206f8:	9c01      	ldr	r4, [sp, #4]
 80206fa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80206fe:	0e22      	lsrs	r2, r4, #24
 8020700:	d015      	beq.n	802072e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020702:	9e04      	ldr	r6, [sp, #16]
 8020704:	4372      	muls	r2, r6
 8020706:	1c56      	adds	r6, r2, #1
 8020708:	eb06 2222 	add.w	r2, r6, r2, asr #8
 802070c:	0a26      	lsrs	r6, r4, #8
 802070e:	1212      	asrs	r2, r2, #8
 8020710:	2aff      	cmp	r2, #255	; 0xff
 8020712:	d113      	bne.n	802073c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020714:	0962      	lsrs	r2, r4, #5
 8020716:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802071a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802071e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020722:	f026 0607 	bic.w	r6, r6, #7
 8020726:	4316      	orrs	r6, r2
 8020728:	4326      	orrs	r6, r4
 802072a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 802072e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020730:	f108 0801 	add.w	r8, r8, #1
 8020734:	4410      	add	r0, r2
 8020736:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020738:	4411      	add	r1, r2
 802073a:	e7d2      	b.n	80206e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802073c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020740:	fa1f fa82 	uxth.w	sl, r2
 8020744:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020748:	43d2      	mvns	r2, r2
 802074a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802074e:	fb17 f70a 	smulbb	r7, r7, sl
 8020752:	b2d2      	uxtb	r2, r2
 8020754:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020758:	b2e4      	uxtb	r4, r4
 802075a:	b2f6      	uxtb	r6, r6
 802075c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020760:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020764:	fb14 f40a 	smulbb	r4, r4, sl
 8020768:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802076c:	fa1f fc8c 	uxth.w	ip, ip
 8020770:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020774:	fb16 f60a 	smulbb	r6, r6, sl
 8020778:	fa5f fe8e 	uxtb.w	lr, lr
 802077c:	fb0e 4402 	mla	r4, lr, r2, r4
 8020780:	fb07 6702 	mla	r7, r7, r2, r6
 8020784:	f10c 0201 	add.w	r2, ip, #1
 8020788:	b2a4      	uxth	r4, r4
 802078a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802078e:	1c66      	adds	r6, r4, #1
 8020790:	b2bf      	uxth	r7, r7
 8020792:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020796:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 802079a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802079e:	ea46 0c0c 	orr.w	ip, r6, ip
 80207a2:	1c7e      	adds	r6, r7, #1
 80207a4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80207a8:	0976      	lsrs	r6, r6, #5
 80207aa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80207ae:	ea4c 0c06 	orr.w	ip, ip, r6
 80207b2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80207b6:	e7ba      	b.n	802072e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 80207b8:	b007      	add	sp, #28
 80207ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080207c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80207c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207c4:	b085      	sub	sp, #20
 80207c6:	468b      	mov	fp, r1
 80207c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80207cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80207ce:	9203      	str	r2, [sp, #12]
 80207d0:	6841      	ldr	r1, [r0, #4]
 80207d2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80207d6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80207da:	fb01 2404 	mla	r4, r1, r4, r2
 80207de:	6802      	ldr	r2, [r0, #0]
 80207e0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80207e4:	f8d8 2000 	ldr.w	r2, [r8]
 80207e8:	9201      	str	r2, [sp, #4]
 80207ea:	f1bb 0f00 	cmp.w	fp, #0
 80207ee:	dc03      	bgt.n	80207f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80207f0:	9a03      	ldr	r2, [sp, #12]
 80207f2:	2a00      	cmp	r2, #0
 80207f4:	f340 814f 	ble.w	8020a96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80207f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207fa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80207fe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020802:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020804:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020808:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802080c:	2b00      	cmp	r3, #0
 802080e:	dd0e      	ble.n	802082e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020810:	1408      	asrs	r0, r1, #16
 8020812:	d405      	bmi.n	8020820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020814:	42b8      	cmp	r0, r7
 8020816:	da03      	bge.n	8020820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020818:	1410      	asrs	r0, r2, #16
 802081a:	d401      	bmi.n	8020820 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802081c:	42b0      	cmp	r0, r6
 802081e:	db07      	blt.n	8020830 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020820:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020822:	3b01      	subs	r3, #1
 8020824:	3402      	adds	r4, #2
 8020826:	4401      	add	r1, r0
 8020828:	9812      	ldr	r0, [sp, #72]	; 0x48
 802082a:	4402      	add	r2, r0
 802082c:	e7ee      	b.n	802080c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802082e:	d017      	beq.n	8020860 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020830:	1e58      	subs	r0, r3, #1
 8020832:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020834:	fb05 1500 	mla	r5, r5, r0, r1
 8020838:	142d      	asrs	r5, r5, #16
 802083a:	d409      	bmi.n	8020850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802083c:	42bd      	cmp	r5, r7
 802083e:	da07      	bge.n	8020850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020840:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020842:	fb05 2000 	mla	r0, r5, r0, r2
 8020846:	1400      	asrs	r0, r0, #16
 8020848:	d402      	bmi.n	8020850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802084a:	42b0      	cmp	r0, r6
 802084c:	f2c0 80ba 	blt.w	80209c4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020850:	2600      	movs	r6, #0
 8020852:	1998      	adds	r0, r3, r6
 8020854:	2800      	cmp	r0, #0
 8020856:	dc3e      	bgt.n	80208d6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802085c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020860:	f1bb 0f00 	cmp.w	fp, #0
 8020864:	f340 8117 	ble.w	8020a96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020868:	ee30 0a04 	vadd.f32	s0, s0, s8
 802086c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802086e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020872:	f1bb 0b01 	subs.w	fp, fp, #1
 8020876:	eeb0 6a62 	vmov.f32	s12, s5
 802087a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802087e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020882:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020886:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802088a:	eeb0 6a43 	vmov.f32	s12, s6
 802088e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020892:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020896:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802089a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802089e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80208a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80208a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80208aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80208ae:	ee12 2a90 	vmov	r2, s5
 80208b2:	eef0 2a47 	vmov.f32	s5, s14
 80208b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80208ba:	ee13 2a10 	vmov	r2, s6
 80208be:	9311      	str	r3, [sp, #68]	; 0x44
 80208c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208c2:	eeb0 3a67 	vmov.f32	s6, s15
 80208c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80208ca:	9a03      	ldr	r2, [sp, #12]
 80208cc:	9312      	str	r3, [sp, #72]	; 0x48
 80208ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208d0:	bf08      	it	eq
 80208d2:	4613      	moveq	r3, r2
 80208d4:	e789      	b.n	80207ea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80208d6:	140f      	asrs	r7, r1, #16
 80208d8:	d424      	bmi.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80208da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80208de:	42bd      	cmp	r5, r7
 80208e0:	dd20      	ble.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80208e2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80208e6:	d41d      	bmi.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80208e8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 80208ec:	4560      	cmp	r0, ip
 80208ee:	dd19      	ble.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80208f0:	b22d      	sxth	r5, r5
 80208f2:	9801      	ldr	r0, [sp, #4]
 80208f4:	fb0c 7505 	mla	r5, ip, r5, r7
 80208f8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80208fc:	0e07      	lsrs	r7, r0, #24
 80208fe:	2fff      	cmp	r7, #255	; 0xff
 8020900:	d116      	bne.n	8020930 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020902:	f06f 0501 	mvn.w	r5, #1
 8020906:	fb05 f706 	mul.w	r7, r5, r6
 802090a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 802090e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020912:	0945      	lsrs	r5, r0, #5
 8020914:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020918:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802091c:	ea4c 0505 	orr.w	r5, ip, r5
 8020920:	4305      	orrs	r5, r0
 8020922:	53e5      	strh	r5, [r4, r7]
 8020924:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020926:	3e01      	subs	r6, #1
 8020928:	4401      	add	r1, r0
 802092a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802092c:	4402      	add	r2, r0
 802092e:	e790      	b.n	8020852 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020930:	b2fd      	uxtb	r5, r7
 8020932:	2f00      	cmp	r7, #0
 8020934:	d0f6      	beq.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020936:	f06f 0701 	mvn.w	r7, #1
 802093a:	fa1f f985 	uxth.w	r9, r5
 802093e:	43ed      	mvns	r5, r5
 8020940:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020944:	4377      	muls	r7, r6
 8020946:	fb1a fa09 	smulbb	sl, sl, r9
 802094a:	b2ed      	uxtb	r5, r5
 802094c:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020950:	9702      	str	r7, [sp, #8]
 8020952:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020956:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802095a:	fb17 f709 	smulbb	r7, r7, r9
 802095e:	b2c0      	uxtb	r0, r0
 8020960:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020964:	fb10 f009 	smulbb	r0, r0, r9
 8020968:	fb0c 7c05 	mla	ip, ip, r5, r7
 802096c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020970:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020974:	fa1f fc8c 	uxth.w	ip, ip
 8020978:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802097c:	fa5f fe8e 	uxtb.w	lr, lr
 8020980:	fb07 a705 	mla	r7, r7, r5, sl
 8020984:	fb0e 0005 	mla	r0, lr, r5, r0
 8020988:	f10c 0501 	add.w	r5, ip, #1
 802098c:	b2bf      	uxth	r7, r7
 802098e:	b280      	uxth	r0, r0
 8020990:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020994:	f100 0a01 	add.w	sl, r0, #1
 8020998:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802099c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80209a0:	9802      	ldr	r0, [sp, #8]
 80209a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80209a6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80209aa:	f107 0a01 	add.w	sl, r7, #1
 80209ae:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80209b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80209b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80209ba:	ea4c 0c0a 	orr.w	ip, ip, sl
 80209be:	f824 c000 	strh.w	ip, [r4, r0]
 80209c2:	e7af      	b.n	8020924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80209c4:	f04f 0e00 	mov.w	lr, #0
 80209c8:	eba3 000e 	sub.w	r0, r3, lr
 80209cc:	2800      	cmp	r0, #0
 80209ce:	f77f af43 	ble.w	8020858 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80209d2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80209d6:	140d      	asrs	r5, r1, #16
 80209d8:	1410      	asrs	r0, r2, #16
 80209da:	fb06 5000 	mla	r0, r6, r0, r5
 80209de:	9d01      	ldr	r5, [sp, #4]
 80209e0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80209e4:	0e2e      	lsrs	r6, r5, #24
 80209e6:	2eff      	cmp	r6, #255	; 0xff
 80209e8:	d112      	bne.n	8020a10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80209ea:	482c      	ldr	r0, [pc, #176]	; (8020a9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80209ec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80209f0:	0968      	lsrs	r0, r5, #5
 80209f2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80209f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80209fa:	4330      	orrs	r0, r6
 80209fc:	4328      	orrs	r0, r5
 80209fe:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020a02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a04:	f10e 0e01 	add.w	lr, lr, #1
 8020a08:	4401      	add	r1, r0
 8020a0a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020a0c:	4402      	add	r2, r0
 8020a0e:	e7db      	b.n	80209c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020a10:	b2f0      	uxtb	r0, r6
 8020a12:	2e00      	cmp	r6, #0
 8020a14:	d0f5      	beq.n	8020a02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020a16:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020a1a:	fa1f f980 	uxth.w	r9, r0
 8020a1e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020a22:	43c0      	mvns	r0, r0
 8020a24:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020a28:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020a2c:	fb16 f609 	smulbb	r6, r6, r9
 8020a30:	b2c0      	uxtb	r0, r0
 8020a32:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020a36:	b2ed      	uxtb	r5, r5
 8020a38:	fb1a fa09 	smulbb	sl, sl, r9
 8020a3c:	fb07 6700 	mla	r7, r7, r0, r6
 8020a40:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020a44:	fb15 f509 	smulbb	r5, r5, r9
 8020a48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020a4c:	b2bf      	uxth	r7, r7
 8020a4e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020a52:	fa5f fc8c 	uxtb.w	ip, ip
 8020a56:	fb06 a600 	mla	r6, r6, r0, sl
 8020a5a:	fb0c 5500 	mla	r5, ip, r0, r5
 8020a5e:	1c78      	adds	r0, r7, #1
 8020a60:	b2b6      	uxth	r6, r6
 8020a62:	b2ad      	uxth	r5, r5
 8020a64:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020a68:	f105 0a01 	add.w	sl, r5, #1
 8020a6c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020a70:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020a74:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020a78:	ea4a 0707 	orr.w	r7, sl, r7
 8020a7c:	f106 0a01 	add.w	sl, r6, #1
 8020a80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020a84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020a88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020a8c:	ea47 070a 	orr.w	r7, r7, sl
 8020a90:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020a94:	e7b5      	b.n	8020a02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020a96:	b005      	add	sp, #20
 8020a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a9c:	fffff800 	.word	0xfffff800

08020aa0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa4:	b087      	sub	sp, #28
 8020aa6:	468b      	mov	fp, r1
 8020aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020aac:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020aae:	9203      	str	r2, [sp, #12]
 8020ab0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020ab4:	6841      	ldr	r1, [r0, #4]
 8020ab6:	9204      	str	r2, [sp, #16]
 8020ab8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020abc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020ac0:	fb01 2404 	mla	r4, r1, r4, r2
 8020ac4:	6802      	ldr	r2, [r0, #0]
 8020ac6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020aca:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020ace:	3201      	adds	r2, #1
 8020ad0:	f022 0201 	bic.w	r2, r2, #1
 8020ad4:	9200      	str	r2, [sp, #0]
 8020ad6:	f8d9 2000 	ldr.w	r2, [r9]
 8020ada:	9201      	str	r2, [sp, #4]
 8020adc:	f1bb 0f00 	cmp.w	fp, #0
 8020ae0:	dc03      	bgt.n	8020aea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020ae2:	9a03      	ldr	r2, [sp, #12]
 8020ae4:	2a00      	cmp	r2, #0
 8020ae6:	f340 816a 	ble.w	8020dbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020aea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020aec:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020af0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020af6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020afa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	dd0e      	ble.n	8020b20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020b02:	1402      	asrs	r2, r0, #16
 8020b04:	d405      	bmi.n	8020b12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b06:	42ba      	cmp	r2, r7
 8020b08:	da03      	bge.n	8020b12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b0a:	140a      	asrs	r2, r1, #16
 8020b0c:	d401      	bmi.n	8020b12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020b0e:	42b2      	cmp	r2, r6
 8020b10:	db07      	blt.n	8020b22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020b12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b14:	3b01      	subs	r3, #1
 8020b16:	3402      	adds	r4, #2
 8020b18:	4410      	add	r0, r2
 8020b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b1c:	4411      	add	r1, r2
 8020b1e:	e7ee      	b.n	8020afe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020b20:	d017      	beq.n	8020b52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020b22:	1e5a      	subs	r2, r3, #1
 8020b24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020b26:	fb05 0502 	mla	r5, r5, r2, r0
 8020b2a:	142d      	asrs	r5, r5, #16
 8020b2c:	d409      	bmi.n	8020b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b2e:	42bd      	cmp	r5, r7
 8020b30:	da07      	bge.n	8020b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020b34:	fb05 1202 	mla	r2, r5, r2, r1
 8020b38:	1412      	asrs	r2, r2, #16
 8020b3a:	d402      	bmi.n	8020b42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020b3c:	42b2      	cmp	r2, r6
 8020b3e:	f2c0 80c8 	blt.w	8020cd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020b42:	2700      	movs	r7, #0
 8020b44:	19da      	adds	r2, r3, r7
 8020b46:	2a00      	cmp	r2, #0
 8020b48:	dc3e      	bgt.n	8020bc8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020b52:	f1bb 0f00 	cmp.w	fp, #0
 8020b56:	f340 8132 	ble.w	8020dbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020b5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b64:	f1bb 0b01 	subs.w	fp, fp, #1
 8020b68:	eeb0 6a62 	vmov.f32	s12, s5
 8020b6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b78:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020b7c:	eeb0 6a43 	vmov.f32	s12, s6
 8020b80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b84:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020b88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ba0:	ee12 2a90 	vmov	r2, s5
 8020ba4:	eef0 2a47 	vmov.f32	s5, s14
 8020ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bac:	ee13 2a10 	vmov	r2, s6
 8020bb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8020bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bb4:	eeb0 3a67 	vmov.f32	s6, s15
 8020bb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bbc:	9a03      	ldr	r2, [sp, #12]
 8020bbe:	9314      	str	r3, [sp, #80]	; 0x50
 8020bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bc2:	bf08      	it	eq
 8020bc4:	4613      	moveq	r3, r2
 8020bc6:	e789      	b.n	8020adc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020bc8:	1405      	asrs	r5, r0, #16
 8020bca:	d436      	bmi.n	8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020bcc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8020bd0:	42aa      	cmp	r2, r5
 8020bd2:	dd32      	ble.n	8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020bd4:	140e      	asrs	r6, r1, #16
 8020bd6:	d430      	bmi.n	8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020bd8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020bdc:	42b2      	cmp	r2, r6
 8020bde:	dd2c      	ble.n	8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020be0:	9a00      	ldr	r2, [sp, #0]
 8020be2:	fb06 5502 	mla	r5, r6, r2, r5
 8020be6:	9e01      	ldr	r6, [sp, #4]
 8020be8:	086a      	lsrs	r2, r5, #1
 8020bea:	5cb2      	ldrb	r2, [r6, r2]
 8020bec:	07ee      	lsls	r6, r5, #31
 8020bee:	bf54      	ite	pl
 8020bf0:	f002 020f 	andpl.w	r2, r2, #15
 8020bf4:	1112      	asrmi	r2, r2, #4
 8020bf6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020bfa:	b2d2      	uxtb	r2, r2
 8020bfc:	b1ea      	cbz	r2, 8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020bfe:	9d04      	ldr	r5, [sp, #16]
 8020c00:	436a      	muls	r2, r5
 8020c02:	1c55      	adds	r5, r2, #1
 8020c04:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020c08:	4d6e      	ldr	r5, [pc, #440]	; (8020dc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020c0a:	1212      	asrs	r2, r2, #8
 8020c0c:	682d      	ldr	r5, [r5, #0]
 8020c0e:	2aff      	cmp	r2, #255	; 0xff
 8020c10:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020c14:	9605      	str	r6, [sp, #20]
 8020c16:	d116      	bne.n	8020c46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020c18:	f06f 0201 	mvn.w	r2, #1
 8020c1c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020c20:	fb02 fc07 	mul.w	ip, r2, r7
 8020c24:	096a      	lsrs	r2, r5, #5
 8020c26:	f026 0607 	bic.w	r6, r6, #7
 8020c2a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020c2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020c32:	4316      	orrs	r6, r2
 8020c34:	432e      	orrs	r6, r5
 8020c36:	f824 600c 	strh.w	r6, [r4, ip]
 8020c3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c3c:	3f01      	subs	r7, #1
 8020c3e:	4410      	add	r0, r2
 8020c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c42:	4411      	add	r1, r2
 8020c44:	e77e      	b.n	8020b44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020c46:	f06f 0601 	mvn.w	r6, #1
 8020c4a:	fa1f fa82 	uxth.w	sl, r2
 8020c4e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020c52:	43d2      	mvns	r2, r2
 8020c54:	437e      	muls	r6, r7
 8020c56:	b2ed      	uxtb	r5, r5
 8020c58:	fb1c fc0a 	smulbb	ip, ip, sl
 8020c5c:	b2d2      	uxtb	r2, r2
 8020c5e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020c62:	fb15 f50a 	smulbb	r5, r5, sl
 8020c66:	9602      	str	r6, [sp, #8]
 8020c68:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020c6c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020c70:	fb16 f60a 	smulbb	r6, r6, sl
 8020c74:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020c78:	fb0e ce02 	mla	lr, lr, r2, ip
 8020c7c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020c80:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020c84:	fa1f fe8e 	uxth.w	lr, lr
 8020c88:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020c8c:	fa5f f888 	uxtb.w	r8, r8
 8020c90:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020c94:	fb08 5502 	mla	r5, r8, r2, r5
 8020c98:	f10e 0201 	add.w	r2, lr, #1
 8020c9c:	fa1f fc8c 	uxth.w	ip, ip
 8020ca0:	b2ad      	uxth	r5, r5
 8020ca2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020ca6:	9a02      	ldr	r2, [sp, #8]
 8020ca8:	1c6e      	adds	r6, r5, #1
 8020caa:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020cae:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8020cb2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020cb6:	ea46 0e0e 	orr.w	lr, r6, lr
 8020cba:	f10c 0601 	add.w	r6, ip, #1
 8020cbe:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020cc2:	0976      	lsrs	r6, r6, #5
 8020cc4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020cc8:	ea4e 0e06 	orr.w	lr, lr, r6
 8020ccc:	f824 e002 	strh.w	lr, [r4, r2]
 8020cd0:	e7b3      	b.n	8020c3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020cd2:	f04f 0800 	mov.w	r8, #0
 8020cd6:	eba3 0208 	sub.w	r2, r3, r8
 8020cda:	2a00      	cmp	r2, #0
 8020cdc:	f77f af35 	ble.w	8020b4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020ce0:	1402      	asrs	r2, r0, #16
 8020ce2:	9e00      	ldr	r6, [sp, #0]
 8020ce4:	140d      	asrs	r5, r1, #16
 8020ce6:	fb06 2505 	mla	r5, r6, r5, r2
 8020cea:	9e01      	ldr	r6, [sp, #4]
 8020cec:	086a      	lsrs	r2, r5, #1
 8020cee:	07ed      	lsls	r5, r5, #31
 8020cf0:	5cb2      	ldrb	r2, [r6, r2]
 8020cf2:	bf54      	ite	pl
 8020cf4:	f002 020f 	andpl.w	r2, r2, #15
 8020cf8:	1112      	asrmi	r2, r2, #4
 8020cfa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020cfe:	b2d2      	uxtb	r2, r2
 8020d00:	b1c2      	cbz	r2, 8020d34 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020d02:	9d04      	ldr	r5, [sp, #16]
 8020d04:	436a      	muls	r2, r5
 8020d06:	1c55      	adds	r5, r2, #1
 8020d08:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020d0c:	4d2d      	ldr	r5, [pc, #180]	; (8020dc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020d0e:	1212      	asrs	r2, r2, #8
 8020d10:	682e      	ldr	r6, [r5, #0]
 8020d12:	2aff      	cmp	r2, #255	; 0xff
 8020d14:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020d18:	d113      	bne.n	8020d42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020d1a:	0972      	lsrs	r2, r6, #5
 8020d1c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8020d20:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020d24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d28:	f025 0507 	bic.w	r5, r5, #7
 8020d2c:	4315      	orrs	r5, r2
 8020d2e:	4335      	orrs	r5, r6
 8020d30:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020d34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020d36:	f108 0801 	add.w	r8, r8, #1
 8020d3a:	4410      	add	r0, r2
 8020d3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d3e:	4411      	add	r1, r2
 8020d40:	e7c9      	b.n	8020cd6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020d42:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020d46:	fa1f fa82 	uxth.w	sl, r2
 8020d4a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020d4e:	43d2      	mvns	r2, r2
 8020d50:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020d54:	fb17 f70a 	smulbb	r7, r7, sl
 8020d58:	b2d2      	uxtb	r2, r2
 8020d5a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020d5e:	b2f6      	uxtb	r6, r6
 8020d60:	b2ed      	uxtb	r5, r5
 8020d62:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020d66:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020d6a:	fb16 f60a 	smulbb	r6, r6, sl
 8020d6e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020d72:	fa1f fc8c 	uxth.w	ip, ip
 8020d76:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020d7a:	fb15 f50a 	smulbb	r5, r5, sl
 8020d7e:	fa5f fe8e 	uxtb.w	lr, lr
 8020d82:	fb0e 6602 	mla	r6, lr, r2, r6
 8020d86:	fb07 5702 	mla	r7, r7, r2, r5
 8020d8a:	f10c 0201 	add.w	r2, ip, #1
 8020d8e:	b2b6      	uxth	r6, r6
 8020d90:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020d94:	1c75      	adds	r5, r6, #1
 8020d96:	b2bf      	uxth	r7, r7
 8020d98:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020d9c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020da0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020da4:	ea45 0c0c 	orr.w	ip, r5, ip
 8020da8:	1c7d      	adds	r5, r7, #1
 8020daa:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8020dae:	096d      	lsrs	r5, r5, #5
 8020db0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020db4:	ea4c 0c05 	orr.w	ip, ip, r5
 8020db8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020dbc:	e7ba      	b.n	8020d34 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020dbe:	b007      	add	sp, #28
 8020dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc4:	2400b8cc 	.word	0x2400b8cc

08020dc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dcc:	b087      	sub	sp, #28
 8020dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020dd2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80210dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020dd6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020dd8:	9101      	str	r1, [sp, #4]
 8020dda:	9205      	str	r2, [sp, #20]
 8020ddc:	6841      	ldr	r1, [r0, #4]
 8020dde:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8020de2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020de6:	fb01 2404 	mla	r4, r1, r4, r2
 8020dea:	6802      	ldr	r2, [r0, #0]
 8020dec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020df0:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020df4:	3201      	adds	r2, #1
 8020df6:	f022 0201 	bic.w	r2, r2, #1
 8020dfa:	9202      	str	r2, [sp, #8]
 8020dfc:	f8db 2000 	ldr.w	r2, [fp]
 8020e00:	9203      	str	r2, [sp, #12]
 8020e02:	9a01      	ldr	r2, [sp, #4]
 8020e04:	2a00      	cmp	r2, #0
 8020e06:	dc03      	bgt.n	8020e10 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e08:	9a05      	ldr	r2, [sp, #20]
 8020e0a:	2a00      	cmp	r2, #0
 8020e0c:	f340 8162 	ble.w	80210d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e12:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020e16:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020e1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020e1c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020e20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	dd0e      	ble.n	8020e46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020e28:	1402      	asrs	r2, r0, #16
 8020e2a:	d405      	bmi.n	8020e38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e2c:	42ba      	cmp	r2, r7
 8020e2e:	da03      	bge.n	8020e38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e30:	140a      	asrs	r2, r1, #16
 8020e32:	d401      	bmi.n	8020e38 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e34:	42b2      	cmp	r2, r6
 8020e36:	db07      	blt.n	8020e48 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020e38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020e3a:	3b01      	subs	r3, #1
 8020e3c:	3402      	adds	r4, #2
 8020e3e:	4410      	add	r0, r2
 8020e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020e42:	4411      	add	r1, r2
 8020e44:	e7ee      	b.n	8020e24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020e46:	d017      	beq.n	8020e78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020e48:	1e5a      	subs	r2, r3, #1
 8020e4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020e4c:	fb05 0502 	mla	r5, r5, r2, r0
 8020e50:	142d      	asrs	r5, r5, #16
 8020e52:	d409      	bmi.n	8020e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e54:	42bd      	cmp	r5, r7
 8020e56:	da07      	bge.n	8020e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e58:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020e5a:	fb05 1202 	mla	r2, r5, r2, r1
 8020e5e:	1412      	asrs	r2, r2, #16
 8020e60:	d402      	bmi.n	8020e68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e62:	42b2      	cmp	r2, r6
 8020e64:	f2c0 80c3 	blt.w	8020fee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020e68:	2500      	movs	r5, #0
 8020e6a:	195a      	adds	r2, r3, r5
 8020e6c:	2a00      	cmp	r2, #0
 8020e6e:	dc3f      	bgt.n	8020ef0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020e70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e78:	9b01      	ldr	r3, [sp, #4]
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	f340 812a 	ble.w	80210d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020e80:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020e86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e8a:	eeb0 6a62 	vmov.f32	s12, s5
 8020e8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020e92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e9a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020e9e:	eeb0 6a43 	vmov.f32	s12, s6
 8020ea2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ea6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020eaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020eae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020eb2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020eb6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020eba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ebe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ec2:	ee12 2a90 	vmov	r2, s5
 8020ec6:	eef0 2a47 	vmov.f32	s5, s14
 8020eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ece:	ee13 2a10 	vmov	r2, s6
 8020ed2:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ed6:	eeb0 3a67 	vmov.f32	s6, s15
 8020eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ede:	9314      	str	r3, [sp, #80]	; 0x50
 8020ee0:	9b01      	ldr	r3, [sp, #4]
 8020ee2:	9a05      	ldr	r2, [sp, #20]
 8020ee4:	3b01      	subs	r3, #1
 8020ee6:	9301      	str	r3, [sp, #4]
 8020ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020eea:	bf08      	it	eq
 8020eec:	4613      	moveq	r3, r2
 8020eee:	e788      	b.n	8020e02 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020ef0:	1406      	asrs	r6, r0, #16
 8020ef2:	d42c      	bmi.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020ef4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020ef8:	42b2      	cmp	r2, r6
 8020efa:	dd28      	ble.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020efc:	140f      	asrs	r7, r1, #16
 8020efe:	d426      	bmi.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f00:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020f04:	42ba      	cmp	r2, r7
 8020f06:	dd22      	ble.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f08:	9a02      	ldr	r2, [sp, #8]
 8020f0a:	fb07 6602 	mla	r6, r7, r2, r6
 8020f0e:	9f03      	ldr	r7, [sp, #12]
 8020f10:	0872      	lsrs	r2, r6, #1
 8020f12:	07f6      	lsls	r6, r6, #31
 8020f14:	5cba      	ldrb	r2, [r7, r2]
 8020f16:	bf54      	ite	pl
 8020f18:	f002 020f 	andpl.w	r2, r2, #15
 8020f1c:	1112      	asrmi	r2, r2, #4
 8020f1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020f22:	b2d2      	uxtb	r2, r2
 8020f24:	2aff      	cmp	r2, #255	; 0xff
 8020f26:	d118      	bne.n	8020f5a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020f28:	f06f 0601 	mvn.w	r6, #1
 8020f2c:	f8d8 2000 	ldr.w	r2, [r8]
 8020f30:	fb06 f705 	mul.w	r7, r6, r5
 8020f34:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020f38:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020f3c:	0956      	lsrs	r6, r2, #5
 8020f3e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020f42:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020f46:	ea4c 0606 	orr.w	r6, ip, r6
 8020f4a:	4316      	orrs	r6, r2
 8020f4c:	53e6      	strh	r6, [r4, r7]
 8020f4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020f50:	3d01      	subs	r5, #1
 8020f52:	4410      	add	r0, r2
 8020f54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020f56:	4411      	add	r1, r2
 8020f58:	e787      	b.n	8020e6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020f5a:	2a00      	cmp	r2, #0
 8020f5c:	d0f7      	beq.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020f5e:	f06f 0601 	mvn.w	r6, #1
 8020f62:	f8d8 c000 	ldr.w	ip, [r8]
 8020f66:	fa1f f982 	uxth.w	r9, r2
 8020f6a:	43d2      	mvns	r2, r2
 8020f6c:	436e      	muls	r6, r5
 8020f6e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020f72:	b2d2      	uxtb	r2, r2
 8020f74:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020f78:	fb1a fa09 	smulbb	sl, sl, r9
 8020f7c:	9604      	str	r6, [sp, #16]
 8020f7e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8020f82:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020f86:	fb16 f609 	smulbb	r6, r6, r9
 8020f8a:	fa5f fc8c 	uxtb.w	ip, ip
 8020f8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020f92:	fb1c fc09 	smulbb	ip, ip, r9
 8020f96:	fb07 6702 	mla	r7, r7, r2, r6
 8020f9a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020f9e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020fa2:	b2bf      	uxth	r7, r7
 8020fa4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fa8:	fa5f fe8e 	uxtb.w	lr, lr
 8020fac:	fb06 a602 	mla	r6, r6, r2, sl
 8020fb0:	fb0e cc02 	mla	ip, lr, r2, ip
 8020fb4:	1c7a      	adds	r2, r7, #1
 8020fb6:	b2b6      	uxth	r6, r6
 8020fb8:	fa1f fc8c 	uxth.w	ip, ip
 8020fbc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020fc0:	9a04      	ldr	r2, [sp, #16]
 8020fc2:	f10c 0a01 	add.w	sl, ip, #1
 8020fc6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020fca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020fce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020fd2:	ea4a 0707 	orr.w	r7, sl, r7
 8020fd6:	f106 0a01 	add.w	sl, r6, #1
 8020fda:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020fde:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020fe2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020fe6:	ea47 070a 	orr.w	r7, r7, sl
 8020fea:	52a7      	strh	r7, [r4, r2]
 8020fec:	e7af      	b.n	8020f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020fee:	f04f 0e00 	mov.w	lr, #0
 8020ff2:	eba3 020e 	sub.w	r2, r3, lr
 8020ff6:	2a00      	cmp	r2, #0
 8020ff8:	f77f af3a 	ble.w	8020e70 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020ffc:	1402      	asrs	r2, r0, #16
 8020ffe:	9e02      	ldr	r6, [sp, #8]
 8021000:	140d      	asrs	r5, r1, #16
 8021002:	fb06 2505 	mla	r5, r6, r5, r2
 8021006:	9e03      	ldr	r6, [sp, #12]
 8021008:	086a      	lsrs	r2, r5, #1
 802100a:	07ed      	lsls	r5, r5, #31
 802100c:	5cb2      	ldrb	r2, [r6, r2]
 802100e:	bf54      	ite	pl
 8021010:	f002 020f 	andpl.w	r2, r2, #15
 8021014:	1112      	asrmi	r2, r2, #4
 8021016:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802101a:	b2d2      	uxtb	r2, r2
 802101c:	2aff      	cmp	r2, #255	; 0xff
 802101e:	d115      	bne.n	802104c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021020:	f8d8 5000 	ldr.w	r5, [r8]
 8021024:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8021028:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802102c:	096a      	lsrs	r2, r5, #5
 802102e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021032:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021036:	4332      	orrs	r2, r6
 8021038:	432a      	orrs	r2, r5
 802103a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802103e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021040:	f10e 0e01 	add.w	lr, lr, #1
 8021044:	4410      	add	r0, r2
 8021046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021048:	4411      	add	r1, r2
 802104a:	e7d2      	b.n	8020ff2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802104c:	2a00      	cmp	r2, #0
 802104e:	d0f6      	beq.n	802103e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021050:	f8d8 7000 	ldr.w	r7, [r8]
 8021054:	fa1f f982 	uxth.w	r9, r2
 8021058:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802105c:	43d2      	mvns	r2, r2
 802105e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8021062:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8021066:	ea4f 262c 	mov.w	r6, ip, asr #8
 802106a:	fb15 f509 	smulbb	r5, r5, r9
 802106e:	b2d2      	uxtb	r2, r2
 8021070:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021074:	b2ff      	uxtb	r7, r7
 8021076:	fb1a fa09 	smulbb	sl, sl, r9
 802107a:	fb06 5602 	mla	r6, r6, r2, r5
 802107e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021082:	fb17 f709 	smulbb	r7, r7, r9
 8021086:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802108a:	b2b6      	uxth	r6, r6
 802108c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021090:	fa5f fc8c 	uxtb.w	ip, ip
 8021094:	fb05 a502 	mla	r5, r5, r2, sl
 8021098:	fb0c 7702 	mla	r7, ip, r2, r7
 802109c:	1c72      	adds	r2, r6, #1
 802109e:	b2ad      	uxth	r5, r5
 80210a0:	b2bf      	uxth	r7, r7
 80210a2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80210a6:	f107 0a01 	add.w	sl, r7, #1
 80210aa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80210ae:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80210b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80210b6:	ea4a 0606 	orr.w	r6, sl, r6
 80210ba:	f105 0a01 	add.w	sl, r5, #1
 80210be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80210c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80210c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80210ca:	ea46 060a 	orr.w	r6, r6, sl
 80210ce:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80210d2:	e7b4      	b.n	802103e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80210d4:	b007      	add	sp, #28
 80210d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210da:	bf00      	nop
 80210dc:	2400b8cc 	.word	0x2400b8cc

080210e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80210e0:	4770      	bx	lr

080210e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80210e2:	4770      	bx	lr

080210e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80210e4:	4770      	bx	lr

080210e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80210e6:	4770      	bx	lr

080210e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80210e8:	4770      	bx	lr

080210ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210ea:	4770      	bx	lr

080210ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80210ec:	4770      	bx	lr

080210ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210ee:	4770      	bx	lr

080210f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80210f0:	4770      	bx	lr

080210f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80210f2:	4770      	bx	lr

080210f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80210f4:	4770      	bx	lr

080210f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80210f6:	4770      	bx	lr

080210f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80210f8:	4770      	bx	lr

080210fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80210fa:	4770      	bx	lr

080210fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80210fc:	4770      	bx	lr

080210fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80210fe:	4770      	bx	lr

08021100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021100:	4770      	bx	lr

08021102 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021102:	4770      	bx	lr

08021104 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021104:	4770      	bx	lr

08021106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021106:	4770      	bx	lr

08021108 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021108:	4770      	bx	lr

0802110a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802110a:	4770      	bx	lr

0802110c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802110c:	4770      	bx	lr

0802110e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802110e:	4770      	bx	lr

08021110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021110:	4770      	bx	lr

08021112 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021112:	4770      	bx	lr

08021114 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021114:	4770      	bx	lr

08021116 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021116:	4770      	bx	lr

08021118 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8021118:	b508      	push	{r3, lr}
 802111a:	4b06      	ldr	r3, [pc, #24]	; (8021134 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802111c:	8818      	ldrh	r0, [r3, #0]
 802111e:	b928      	cbnz	r0, 802112c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8021120:	4b05      	ldr	r3, [pc, #20]	; (8021138 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8021122:	2150      	movs	r1, #80	; 0x50
 8021124:	4a05      	ldr	r2, [pc, #20]	; (802113c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8021126:	4806      	ldr	r0, [pc, #24]	; (8021140 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8021128:	f009 fbd4 	bl	802a8d4 <__assert_func>
 802112c:	0040      	lsls	r0, r0, #1
 802112e:	b280      	uxth	r0, r0
 8021130:	bd08      	pop	{r3, pc}
 8021132:	bf00      	nop
 8021134:	2400b8be 	.word	0x2400b8be
 8021138:	0802fb5f 	.word	0x0802fb5f
 802113c:	08030158 	.word	0x08030158
 8021140:	0802fba1 	.word	0x0802fba1

08021144 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021148:	b08b      	sub	sp, #44	; 0x2c
 802114a:	460f      	mov	r7, r1
 802114c:	4616      	mov	r6, r2
 802114e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021152:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8021156:	f1bb 0f00 	cmp.w	fp, #0
 802115a:	d049      	beq.n	80211f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802115c:	6810      	ldr	r0, [r2, #0]
 802115e:	ad06      	add	r5, sp, #24
 8021160:	6851      	ldr	r1, [r2, #4]
 8021162:	c503      	stmia	r5!, {r0, r1}
 8021164:	6818      	ldr	r0, [r3, #0]
 8021166:	ad08      	add	r5, sp, #32
 8021168:	6859      	ldr	r1, [r3, #4]
 802116a:	c503      	stmia	r5!, {r0, r1}
 802116c:	a806      	add	r0, sp, #24
 802116e:	f7fa f883 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021172:	4631      	mov	r1, r6
 8021174:	a808      	add	r0, sp, #32
 8021176:	f7fa f8a7 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802117a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802117e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021182:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021186:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802118a:	fb16 2103 	smlabb	r1, r6, r3, r2
 802118e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8021192:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8021196:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802119a:	4f5f      	ldr	r7, [pc, #380]	; (8021318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802119c:	440a      	add	r2, r1
 802119e:	6838      	ldr	r0, [r7, #0]
 80211a0:	46b9      	mov	r9, r7
 80211a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80211a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80211aa:	4413      	add	r3, r2
 80211ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80211b0:	6803      	ldr	r3, [r0, #0]
 80211b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211b4:	4798      	blx	r3
 80211b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80211ba:	d01c      	beq.n	80211f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80211bc:	f010 0f04 	tst.w	r0, #4
 80211c0:	d01d      	beq.n	80211fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80211c2:	f8d9 0000 	ldr.w	r0, [r9]
 80211c6:	2700      	movs	r7, #0
 80211c8:	b2ad      	uxth	r5, r5
 80211ca:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80211ce:	6801      	ldr	r1, [r0, #0]
 80211d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80211d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80211d8:	9501      	str	r5, [sp, #4]
 80211da:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80211de:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80211e2:	9402      	str	r4, [sp, #8]
 80211e4:	fa1f f488 	uxth.w	r4, r8
 80211e8:	9400      	str	r4, [sp, #0]
 80211ea:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80211ec:	4631      	mov	r1, r6
 80211ee:	47a0      	blx	r4
 80211f0:	b00b      	add	sp, #44	; 0x2c
 80211f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211f6:	b914      	cbnz	r4, 80211fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80211f8:	f010 0f01 	tst.w	r0, #1
 80211fc:	e7e0      	b.n	80211c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80211fe:	f8d9 0000 	ldr.w	r0, [r9]
 8021202:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8021206:	6803      	ldr	r3, [r0, #0]
 8021208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802120a:	4798      	blx	r3
 802120c:	4b43      	ldr	r3, [pc, #268]	; (802131c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802120e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021212:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021216:	881a      	ldrh	r2, [r3, #0]
 8021218:	469a      	mov	sl, r3
 802121a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802121e:	fb05 f502 	mul.w	r5, r5, r2
 8021222:	fb02 1404 	mla	r4, r2, r4, r1
 8021226:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802122a:	d059      	beq.n	80212e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802122c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8021230:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021234:	fa1f f28b 	uxth.w	r2, fp
 8021238:	469e      	mov	lr, r3
 802123a:	fa1f f989 	uxth.w	r9, r9
 802123e:	42ac      	cmp	r4, r5
 8021240:	d264      	bcs.n	802130c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021242:	eb04 0a07 	add.w	sl, r4, r7
 8021246:	4554      	cmp	r4, sl
 8021248:	d23d      	bcs.n	80212c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802124a:	8821      	ldrh	r1, [r4, #0]
 802124c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8021250:	1208      	asrs	r0, r1, #8
 8021252:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021256:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802125a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802125e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021262:	00c9      	lsls	r1, r1, #3
 8021264:	fb10 f009 	smulbb	r0, r0, r9
 8021268:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802126c:	b2c9      	uxtb	r1, r1
 802126e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021272:	10d8      	asrs	r0, r3, #3
 8021274:	fb1b fb09 	smulbb	fp, fp, r9
 8021278:	00db      	lsls	r3, r3, #3
 802127a:	fa1f fc8c 	uxth.w	ip, ip
 802127e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021282:	fb11 f109 	smulbb	r1, r1, r9
 8021286:	b2db      	uxtb	r3, r3
 8021288:	fb00 b002 	mla	r0, r0, r2, fp
 802128c:	f10c 0b01 	add.w	fp, ip, #1
 8021290:	fb03 1302 	mla	r3, r3, r2, r1
 8021294:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021298:	b29b      	uxth	r3, r3
 802129a:	b280      	uxth	r0, r0
 802129c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80212a0:	f103 0c01 	add.w	ip, r3, #1
 80212a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80212a8:	1c43      	adds	r3, r0, #1
 80212aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80212ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80212b2:	0940      	lsrs	r0, r0, #5
 80212b4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80212b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80212bc:	ea4c 0c00 	orr.w	ip, ip, r0
 80212c0:	f824 cb02 	strh.w	ip, [r4], #2
 80212c4:	e7bf      	b.n	8021246 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80212c6:	f8be 3000 	ldrh.w	r3, [lr]
 80212ca:	eba3 0308 	sub.w	r3, r3, r8
 80212ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80212d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80212d6:	eba3 0308 	sub.w	r3, r3, r8
 80212da:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80212de:	e7ae      	b.n	802123e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80212e0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80212e4:	f8d9 0000 	ldr.w	r0, [r9]
 80212e8:	42ac      	cmp	r4, r5
 80212ea:	6803      	ldr	r3, [r0, #0]
 80212ec:	d20e      	bcs.n	802130c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80212ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80212f2:	4632      	mov	r2, r6
 80212f4:	463b      	mov	r3, r7
 80212f6:	4621      	mov	r1, r4
 80212f8:	47c0      	blx	r8
 80212fa:	f8ba 3000 	ldrh.w	r3, [sl]
 80212fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021302:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021306:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802130a:	e7eb      	b.n	80212e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802130c:	4b02      	ldr	r3, [pc, #8]	; (8021318 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802130e:	6818      	ldr	r0, [r3, #0]
 8021310:	6803      	ldr	r3, [r0, #0]
 8021312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021314:	4798      	blx	r3
 8021316:	e76b      	b.n	80211f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021318:	2400b8c4 	.word	0x2400b8c4
 802131c:	2400b8be 	.word	0x2400b8be

08021320 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021320:	b510      	push	{r4, lr}
 8021322:	4604      	mov	r4, r0
 8021324:	2104      	movs	r1, #4
 8021326:	f009 faa6 	bl	802a876 <_ZdlPvj>
 802132a:	4620      	mov	r0, r4
 802132c:	bd10      	pop	{r4, pc}

0802132e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802132e:	b510      	push	{r4, lr}
 8021330:	4604      	mov	r4, r0
 8021332:	2104      	movs	r1, #4
 8021334:	f009 fa9f 	bl	802a876 <_ZdlPvj>
 8021338:	4620      	mov	r0, r4
 802133a:	bd10      	pop	{r4, pc}

0802133c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802133c:	b510      	push	{r4, lr}
 802133e:	4604      	mov	r4, r0
 8021340:	2104      	movs	r1, #4
 8021342:	f009 fa98 	bl	802a876 <_ZdlPvj>
 8021346:	4620      	mov	r0, r4
 8021348:	bd10      	pop	{r4, pc}

0802134a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802134a:	b510      	push	{r4, lr}
 802134c:	4604      	mov	r4, r0
 802134e:	2104      	movs	r1, #4
 8021350:	f009 fa91 	bl	802a876 <_ZdlPvj>
 8021354:	4620      	mov	r0, r4
 8021356:	bd10      	pop	{r4, pc}

08021358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021358:	b510      	push	{r4, lr}
 802135a:	4604      	mov	r4, r0
 802135c:	2104      	movs	r1, #4
 802135e:	f009 fa8a 	bl	802a876 <_ZdlPvj>
 8021362:	4620      	mov	r0, r4
 8021364:	bd10      	pop	{r4, pc}

08021366 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021366:	b510      	push	{r4, lr}
 8021368:	4604      	mov	r4, r0
 802136a:	2104      	movs	r1, #4
 802136c:	f009 fa83 	bl	802a876 <_ZdlPvj>
 8021370:	4620      	mov	r0, r4
 8021372:	bd10      	pop	{r4, pc}

08021374 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021374:	b510      	push	{r4, lr}
 8021376:	4604      	mov	r4, r0
 8021378:	2104      	movs	r1, #4
 802137a:	f009 fa7c 	bl	802a876 <_ZdlPvj>
 802137e:	4620      	mov	r0, r4
 8021380:	bd10      	pop	{r4, pc}

08021382 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021382:	b510      	push	{r4, lr}
 8021384:	4604      	mov	r4, r0
 8021386:	2104      	movs	r1, #4
 8021388:	f009 fa75 	bl	802a876 <_ZdlPvj>
 802138c:	4620      	mov	r0, r4
 802138e:	bd10      	pop	{r4, pc}

08021390 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021390:	b510      	push	{r4, lr}
 8021392:	4604      	mov	r4, r0
 8021394:	2104      	movs	r1, #4
 8021396:	f009 fa6e 	bl	802a876 <_ZdlPvj>
 802139a:	4620      	mov	r0, r4
 802139c:	bd10      	pop	{r4, pc}

0802139e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802139e:	b510      	push	{r4, lr}
 80213a0:	4604      	mov	r4, r0
 80213a2:	2104      	movs	r1, #4
 80213a4:	f009 fa67 	bl	802a876 <_ZdlPvj>
 80213a8:	4620      	mov	r0, r4
 80213aa:	bd10      	pop	{r4, pc}

080213ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80213ac:	b510      	push	{r4, lr}
 80213ae:	4604      	mov	r4, r0
 80213b0:	2104      	movs	r1, #4
 80213b2:	f009 fa60 	bl	802a876 <_ZdlPvj>
 80213b6:	4620      	mov	r0, r4
 80213b8:	bd10      	pop	{r4, pc}

080213ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80213ba:	b510      	push	{r4, lr}
 80213bc:	4604      	mov	r4, r0
 80213be:	2104      	movs	r1, #4
 80213c0:	f009 fa59 	bl	802a876 <_ZdlPvj>
 80213c4:	4620      	mov	r0, r4
 80213c6:	bd10      	pop	{r4, pc}

080213c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80213c8:	b510      	push	{r4, lr}
 80213ca:	4604      	mov	r4, r0
 80213cc:	2104      	movs	r1, #4
 80213ce:	f009 fa52 	bl	802a876 <_ZdlPvj>
 80213d2:	4620      	mov	r0, r4
 80213d4:	bd10      	pop	{r4, pc}

080213d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80213d6:	b510      	push	{r4, lr}
 80213d8:	4604      	mov	r4, r0
 80213da:	2104      	movs	r1, #4
 80213dc:	f009 fa4b 	bl	802a876 <_ZdlPvj>
 80213e0:	4620      	mov	r0, r4
 80213e2:	bd10      	pop	{r4, pc}

080213e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80213e4:	b510      	push	{r4, lr}
 80213e6:	4604      	mov	r4, r0
 80213e8:	2104      	movs	r1, #4
 80213ea:	f009 fa44 	bl	802a876 <_ZdlPvj>
 80213ee:	4620      	mov	r0, r4
 80213f0:	bd10      	pop	{r4, pc}

080213f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80213f2:	b510      	push	{r4, lr}
 80213f4:	4604      	mov	r4, r0
 80213f6:	2104      	movs	r1, #4
 80213f8:	f009 fa3d 	bl	802a876 <_ZdlPvj>
 80213fc:	4620      	mov	r0, r4
 80213fe:	bd10      	pop	{r4, pc}

08021400 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021400:	b510      	push	{r4, lr}
 8021402:	4604      	mov	r4, r0
 8021404:	2104      	movs	r1, #4
 8021406:	f009 fa36 	bl	802a876 <_ZdlPvj>
 802140a:	4620      	mov	r0, r4
 802140c:	bd10      	pop	{r4, pc}

0802140e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802140e:	b510      	push	{r4, lr}
 8021410:	4604      	mov	r4, r0
 8021412:	2104      	movs	r1, #4
 8021414:	f009 fa2f 	bl	802a876 <_ZdlPvj>
 8021418:	4620      	mov	r0, r4
 802141a:	bd10      	pop	{r4, pc}

0802141c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802141c:	b510      	push	{r4, lr}
 802141e:	4604      	mov	r4, r0
 8021420:	2104      	movs	r1, #4
 8021422:	f009 fa28 	bl	802a876 <_ZdlPvj>
 8021426:	4620      	mov	r0, r4
 8021428:	bd10      	pop	{r4, pc}

0802142a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802142a:	b510      	push	{r4, lr}
 802142c:	4604      	mov	r4, r0
 802142e:	2104      	movs	r1, #4
 8021430:	f009 fa21 	bl	802a876 <_ZdlPvj>
 8021434:	4620      	mov	r0, r4
 8021436:	bd10      	pop	{r4, pc}

08021438 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021438:	b510      	push	{r4, lr}
 802143a:	4604      	mov	r4, r0
 802143c:	2104      	movs	r1, #4
 802143e:	f009 fa1a 	bl	802a876 <_ZdlPvj>
 8021442:	4620      	mov	r0, r4
 8021444:	bd10      	pop	{r4, pc}

08021446 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021446:	b510      	push	{r4, lr}
 8021448:	4604      	mov	r4, r0
 802144a:	2104      	movs	r1, #4
 802144c:	f009 fa13 	bl	802a876 <_ZdlPvj>
 8021450:	4620      	mov	r0, r4
 8021452:	bd10      	pop	{r4, pc}

08021454 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021454:	b510      	push	{r4, lr}
 8021456:	4604      	mov	r4, r0
 8021458:	2104      	movs	r1, #4
 802145a:	f009 fa0c 	bl	802a876 <_ZdlPvj>
 802145e:	4620      	mov	r0, r4
 8021460:	bd10      	pop	{r4, pc}

08021462 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021462:	b510      	push	{r4, lr}
 8021464:	4604      	mov	r4, r0
 8021466:	2104      	movs	r1, #4
 8021468:	f009 fa05 	bl	802a876 <_ZdlPvj>
 802146c:	4620      	mov	r0, r4
 802146e:	bd10      	pop	{r4, pc}

08021470 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021470:	b510      	push	{r4, lr}
 8021472:	4604      	mov	r4, r0
 8021474:	2104      	movs	r1, #4
 8021476:	f009 f9fe 	bl	802a876 <_ZdlPvj>
 802147a:	4620      	mov	r0, r4
 802147c:	bd10      	pop	{r4, pc}

0802147e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802147e:	b510      	push	{r4, lr}
 8021480:	4604      	mov	r4, r0
 8021482:	2104      	movs	r1, #4
 8021484:	f009 f9f7 	bl	802a876 <_ZdlPvj>
 8021488:	4620      	mov	r0, r4
 802148a:	bd10      	pop	{r4, pc}

0802148c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802148c:	b510      	push	{r4, lr}
 802148e:	4604      	mov	r4, r0
 8021490:	2104      	movs	r1, #4
 8021492:	f009 f9f0 	bl	802a876 <_ZdlPvj>
 8021496:	4620      	mov	r0, r4
 8021498:	bd10      	pop	{r4, pc}

0802149a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802149a:	b510      	push	{r4, lr}
 802149c:	4604      	mov	r4, r0
 802149e:	2104      	movs	r1, #4
 80214a0:	f009 f9e9 	bl	802a876 <_ZdlPvj>
 80214a4:	4620      	mov	r0, r4
 80214a6:	bd10      	pop	{r4, pc}

080214a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80214a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214aa:	4606      	mov	r6, r0
 80214ac:	b087      	sub	sp, #28
 80214ae:	460c      	mov	r4, r1
 80214b0:	4617      	mov	r7, r2
 80214b2:	461d      	mov	r5, r3
 80214b4:	b333      	cbz	r3, 8021504 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80214b6:	4608      	mov	r0, r1
 80214b8:	f7f6 fb6f 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80214bc:	bb10      	cbnz	r0, 8021504 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80214be:	6820      	ldr	r0, [r4, #0]
 80214c0:	ab04      	add	r3, sp, #16
 80214c2:	6861      	ldr	r1, [r4, #4]
 80214c4:	4c1b      	ldr	r4, [pc, #108]	; (8021534 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80214c6:	c303      	stmia	r3!, {r0, r1}
 80214c8:	a804      	add	r0, sp, #16
 80214ca:	f7f9 fed5 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80214ce:	6820      	ldr	r0, [r4, #0]
 80214d0:	6803      	ldr	r3, [r0, #0]
 80214d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214d4:	4798      	blx	r3
 80214d6:	2dff      	cmp	r5, #255	; 0xff
 80214d8:	d016      	beq.n	8021508 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80214da:	f010 0f08 	tst.w	r0, #8
 80214de:	6820      	ldr	r0, [r4, #0]
 80214e0:	d015      	beq.n	802150e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80214e2:	2400      	movs	r4, #0
 80214e4:	6801      	ldr	r1, [r0, #0]
 80214e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80214ea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80214ee:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80214f2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80214f6:	9401      	str	r4, [sp, #4]
 80214f8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80214fc:	9400      	str	r4, [sp, #0]
 80214fe:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8021500:	4639      	mov	r1, r7
 8021502:	47a0      	blx	r4
 8021504:	b007      	add	sp, #28
 8021506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021508:	f010 0f02 	tst.w	r0, #2
 802150c:	e7e7      	b.n	80214de <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802150e:	6803      	ldr	r3, [r0, #0]
 8021510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021512:	4798      	blx	r3
 8021514:	4b08      	ldr	r3, [pc, #32]	; (8021538 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021516:	4601      	mov	r1, r0
 8021518:	4630      	mov	r0, r6
 802151a:	881a      	ldrh	r2, [r3, #0]
 802151c:	6833      	ldr	r3, [r6, #0]
 802151e:	e9cd 7500 	strd	r7, r5, [sp]
 8021522:	69dd      	ldr	r5, [r3, #28]
 8021524:	ab04      	add	r3, sp, #16
 8021526:	47a8      	blx	r5
 8021528:	6820      	ldr	r0, [r4, #0]
 802152a:	6803      	ldr	r3, [r0, #0]
 802152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802152e:	4798      	blx	r3
 8021530:	e7e8      	b.n	8021504 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021532:	bf00      	nop
 8021534:	2400b8c4 	.word	0x2400b8c4
 8021538:	2400b8be 	.word	0x2400b8be

0802153c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021540:	4f97      	ldr	r7, [pc, #604]	; (80217a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8021542:	4616      	mov	r6, r2
 8021544:	b08f      	sub	sp, #60	; 0x3c
 8021546:	4604      	mov	r4, r0
 8021548:	683a      	ldr	r2, [r7, #0]
 802154a:	4689      	mov	r9, r1
 802154c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8021550:	2a02      	cmp	r2, #2
 8021552:	d106      	bne.n	8021562 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8021554:	4b93      	ldr	r3, [pc, #588]	; (80217a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8021556:	f44f 7159 	mov.w	r1, #868	; 0x364
 802155a:	4a93      	ldr	r2, [pc, #588]	; (80217a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 802155c:	4893      	ldr	r0, [pc, #588]	; (80217ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 802155e:	f009 f9b9 	bl	802a8d4 <__assert_func>
 8021562:	ad0e      	add	r5, sp, #56	; 0x38
 8021564:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8021568:	4628      	mov	r0, r5
 802156a:	f7fd fad3 	bl	801eb14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802156e:	6823      	ldr	r3, [r4, #0]
 8021570:	4680      	mov	r8, r0
 8021572:	4620      	mov	r0, r4
 8021574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021576:	4798      	blx	r3
 8021578:	4580      	cmp	r8, r0
 802157a:	d004      	beq.n	8021586 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 802157c:	4b8c      	ldr	r3, [pc, #560]	; (80217b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 802157e:	f240 3166 	movw	r1, #870	; 0x366
 8021582:	4a89      	ldr	r2, [pc, #548]	; (80217a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021584:	e7ea      	b.n	802155c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021586:	4628      	mov	r0, r5
 8021588:	f7fd fa3a 	bl	801ea00 <_ZNK8touchgfx6Bitmap7getDataEv>
 802158c:	4680      	mov	r8, r0
 802158e:	b920      	cbnz	r0, 802159a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8021590:	4b88      	ldr	r3, [pc, #544]	; (80217b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8021592:	f44f 715a 	mov.w	r1, #872	; 0x368
 8021596:	4a84      	ldr	r2, [pc, #528]	; (80217a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021598:	e7e0      	b.n	802155c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802159a:	6830      	ldr	r0, [r6, #0]
 802159c:	ab06      	add	r3, sp, #24
 802159e:	6871      	ldr	r1, [r6, #4]
 80215a0:	f10d 0b20 	add.w	fp, sp, #32
 80215a4:	f9b6 a000 	ldrsh.w	sl, [r6]
 80215a8:	c303      	stmia	r3!, {r0, r1}
 80215aa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80215ae:	ab08      	add	r3, sp, #32
 80215b0:	f8d9 0000 	ldr.w	r0, [r9]
 80215b4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80215b8:	c303      	stmia	r3!, {r0, r1}
 80215ba:	4628      	mov	r0, r5
 80215bc:	f7fd f918 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80215c0:	4606      	mov	r6, r0
 80215c2:	4628      	mov	r0, r5
 80215c4:	4d7c      	ldr	r5, [pc, #496]	; (80217b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80215c6:	f7fd f94d 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80215ca:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 80215ce:	a806      	add	r0, sp, #24
 80215d0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80215d4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 80215d8:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 80215dc:	f7f9 fe4c 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215e0:	4658      	mov	r0, fp
 80215e2:	f7f9 fe49 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215e6:	a80a      	add	r0, sp, #40	; 0x28
 80215e8:	f7f9 fe46 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215ec:	4b73      	ldr	r3, [pc, #460]	; (80217bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80215ee:	2100      	movs	r1, #0
 80215f0:	f9b5 2000 	ldrsh.w	r2, [r5]
 80215f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80215f8:	4658      	mov	r0, fp
 80215fa:	910c      	str	r1, [sp, #48]	; 0x30
 80215fc:	a90c      	add	r1, sp, #48	; 0x30
 80215fe:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8021602:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021606:	f7f6 fa85 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 802160a:	4658      	mov	r0, fp
 802160c:	f7f6 fac5 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021610:	2800      	cmp	r0, #0
 8021612:	f040 809a 	bne.w	802174a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021616:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802161a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802161e:	4288      	cmp	r0, r1
 8021620:	db38      	blt.n	8021694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021622:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8021626:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802162a:	429a      	cmp	r2, r3
 802162c:	db32      	blt.n	8021694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 802162e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8021632:	4430      	add	r0, r6
 8021634:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021638:	4431      	add	r1, r6
 802163a:	b200      	sxth	r0, r0
 802163c:	b209      	sxth	r1, r1
 802163e:	4288      	cmp	r0, r1
 8021640:	dc28      	bgt.n	8021694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021642:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8021646:	440a      	add	r2, r1
 8021648:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802164c:	440b      	add	r3, r1
 802164e:	b212      	sxth	r2, r2
 8021650:	b21b      	sxth	r3, r3
 8021652:	429a      	cmp	r2, r3
 8021654:	dc1e      	bgt.n	8021694 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021656:	6823      	ldr	r3, [r4, #0]
 8021658:	4620      	mov	r0, r4
 802165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802165c:	4798      	blx	r3
 802165e:	4682      	mov	sl, r0
 8021660:	6838      	ldr	r0, [r7, #0]
 8021662:	6803      	ldr	r3, [r0, #0]
 8021664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021666:	4798      	blx	r3
 8021668:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 802166c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021670:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021674:	1a5b      	subs	r3, r3, r1
 8021676:	b29b      	uxth	r3, r3
 8021678:	b21c      	sxth	r4, r3
 802167a:	2c00      	cmp	r4, #0
 802167c:	dc0f      	bgt.n	802169e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 802167e:	bf18      	it	ne
 8021680:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8021684:	4644      	mov	r4, r8
 8021686:	bf1e      	ittt	ne
 8021688:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 802168c:	185b      	addne	r3, r3, r1
 802168e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8021692:	e009      	b.n	80216a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8021694:	4b4a      	ldr	r3, [pc, #296]	; (80217c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8021696:	f240 3176 	movw	r1, #886	; 0x376
 802169a:	4a43      	ldr	r2, [pc, #268]	; (80217a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 802169c:	e75e      	b.n	802155c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802169e:	1ad3      	subs	r3, r2, r3
 80216a0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80216a4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80216a8:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80216ac:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80216b0:	1b9b      	subs	r3, r3, r6
 80216b2:	b29b      	uxth	r3, r3
 80216b4:	b219      	sxth	r1, r3
 80216b6:	2900      	cmp	r1, #0
 80216b8:	dd4b      	ble.n	8021752 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 80216ba:	4351      	muls	r1, r2
 80216bc:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80216c0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80216c4:	1acb      	subs	r3, r1, r3
 80216c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80216ca:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80216ce:	2e00      	cmp	r6, #0
 80216d0:	dd3b      	ble.n	802174a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80216d2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	dd37      	ble.n	802174a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 80216da:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80216de:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80216e2:	fb0a f90c 	mul.w	r9, sl, ip
 80216e6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 80216ea:	4481      	add	r9, r0
 80216ec:	8828      	ldrh	r0, [r5, #0]
 80216ee:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 80216f2:	1a41      	subs	r1, r0, r1
 80216f4:	42ae      	cmp	r6, r5
 80216f6:	bfa8      	it	ge
 80216f8:	462e      	movge	r6, r5
 80216fa:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80216fe:	428e      	cmp	r6, r1
 8021700:	bfa8      	it	ge
 8021702:	460e      	movge	r6, r1
 8021704:	429d      	cmp	r5, r3
 8021706:	bfa8      	it	ge
 8021708:	461d      	movge	r5, r3
 802170a:	4b2c      	ldr	r3, [pc, #176]	; (80217bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 802170c:	881b      	ldrh	r3, [r3, #0]
 802170e:	eba3 030c 	sub.w	r3, r3, ip
 8021712:	429d      	cmp	r5, r3
 8021714:	bfa8      	it	ge
 8021716:	461d      	movge	r5, r3
 8021718:	42b0      	cmp	r0, r6
 802171a:	d12c      	bne.n	8021776 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 802171c:	4290      	cmp	r0, r2
 802171e:	d12a      	bne.n	8021776 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021720:	6838      	ldr	r0, [r7, #0]
 8021722:	9203      	str	r2, [sp, #12]
 8021724:	6803      	ldr	r3, [r0, #0]
 8021726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021728:	4798      	blx	r3
 802172a:	07c3      	lsls	r3, r0, #31
 802172c:	d51a      	bpl.n	8021764 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802172e:	9a03      	ldr	r2, [sp, #12]
 8021730:	6838      	ldr	r0, [r7, #0]
 8021732:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8021736:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 802173a:	6803      	ldr	r3, [r0, #0]
 802173c:	9200      	str	r2, [sp, #0]
 802173e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8021740:	4623      	mov	r3, r4
 8021742:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021746:	47a8      	blx	r5
 8021748:	4680      	mov	r8, r0
 802174a:	4640      	mov	r0, r8
 802174c:	b00f      	add	sp, #60	; 0x3c
 802174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021752:	bf1f      	itttt	ne
 8021754:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8021758:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 802175c:	185b      	addne	r3, r3, r1
 802175e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8021762:	e7b2      	b.n	80216ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8021764:	6838      	ldr	r0, [r7, #0]
 8021766:	464a      	mov	r2, r9
 8021768:	4621      	mov	r1, r4
 802176a:	6803      	ldr	r3, [r0, #0]
 802176c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 802176e:	fb05 f30a 	mul.w	r3, r5, sl
 8021772:	47b0      	blx	r6
 8021774:	e7e9      	b.n	802174a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021776:	4355      	muls	r5, r2
 8021778:	0076      	lsls	r6, r6, #1
 802177a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 802177e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8021782:	9303      	str	r3, [sp, #12]
 8021784:	9b03      	ldr	r3, [sp, #12]
 8021786:	429c      	cmp	r4, r3
 8021788:	d2df      	bcs.n	802174a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 802178a:	6838      	ldr	r0, [r7, #0]
 802178c:	464a      	mov	r2, r9
 802178e:	4621      	mov	r1, r4
 8021790:	44d1      	add	r9, sl
 8021792:	6803      	ldr	r3, [r0, #0]
 8021794:	445c      	add	r4, fp
 8021796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021798:	461d      	mov	r5, r3
 802179a:	4633      	mov	r3, r6
 802179c:	47a8      	blx	r5
 802179e:	e7f1      	b.n	8021784 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 80217a0:	2400b8c4 	.word	0x2400b8c4
 80217a4:	0802f957 	.word	0x0802f957
 80217a8:	08030208 	.word	0x08030208
 80217ac:	0802fa09 	.word	0x0802fa09
 80217b0:	0802fa3b 	.word	0x0802fa3b
 80217b4:	0802fa90 	.word	0x0802fa90
 80217b8:	2400b8be 	.word	0x2400b8be
 80217bc:	2400b8c0 	.word	0x2400b8c0
 80217c0:	0802face 	.word	0x0802face

080217c4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80217c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217c8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 80217cc:	4688      	mov	r8, r1
 80217ce:	4614      	mov	r4, r2
 80217d0:	461d      	mov	r5, r3
 80217d2:	9e08      	ldr	r6, [sp, #32]
 80217d4:	2f00      	cmp	r7, #0
 80217d6:	f000 80b4 	beq.w	8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80217da:	4618      	mov	r0, r3
 80217dc:	f7f6 f9dd 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	f040 80ae 	bne.w	8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80217e6:	f9b5 1000 	ldrsh.w	r1, [r5]
 80217ea:	2fff      	cmp	r7, #255	; 0xff
 80217ec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80217f0:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80217f4:	fb04 1303 	mla	r3, r4, r3, r1
 80217f8:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80217fc:	eba4 0200 	sub.w	r2, r4, r0
 8021800:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021804:	fb04 f505 	mul.w	r5, r4, r5
 8021808:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802180c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021810:	d04b      	beq.n	80218aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8021812:	b2bc      	uxth	r4, r7
 8021814:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8021818:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802181c:	fa5f f788 	uxtb.w	r7, r8
 8021820:	b2f3      	uxtb	r3, r6
 8021822:	0040      	lsls	r0, r0, #1
 8021824:	fb0e fe04 	mul.w	lr, lr, r4
 8021828:	4367      	muls	r7, r4
 802182a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802182e:	4363      	muls	r3, r4
 8021830:	fa1f fc8c 	uxth.w	ip, ip
 8021834:	42a9      	cmp	r1, r5
 8021836:	f080 8084 	bcs.w	8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802183a:	eb01 0900 	add.w	r9, r1, r0
 802183e:	4549      	cmp	r1, r9
 8021840:	d231      	bcs.n	80218a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021842:	880a      	ldrh	r2, [r1, #0]
 8021844:	1214      	asrs	r4, r2, #8
 8021846:	10d6      	asrs	r6, r2, #3
 8021848:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802184c:	00d2      	lsls	r2, r2, #3
 802184e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021852:	b2d2      	uxtb	r2, r2
 8021854:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021858:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802185c:	fb14 f40c 	smulbb	r4, r4, ip
 8021860:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021864:	fb12 f20c 	smulbb	r2, r2, ip
 8021868:	fb16 f60c 	smulbb	r6, r6, ip
 802186c:	4474      	add	r4, lr
 802186e:	441a      	add	r2, r3
 8021870:	b2a4      	uxth	r4, r4
 8021872:	443e      	add	r6, r7
 8021874:	b292      	uxth	r2, r2
 8021876:	f104 0a01 	add.w	sl, r4, #1
 802187a:	b2b6      	uxth	r6, r6
 802187c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021880:	f102 0a01 	add.w	sl, r2, #1
 8021884:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021888:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802188c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021890:	4322      	orrs	r2, r4
 8021892:	1c74      	adds	r4, r6, #1
 8021894:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021898:	0976      	lsrs	r6, r6, #5
 802189a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802189e:	4332      	orrs	r2, r6
 80218a0:	f821 2b02 	strh.w	r2, [r1], #2
 80218a4:	e7cb      	b.n	802183e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 80218a6:	4441      	add	r1, r8
 80218a8:	e7c4      	b.n	8021834 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 80218aa:	0973      	lsrs	r3, r6, #5
 80218ac:	4f26      	ldr	r7, [pc, #152]	; (8021948 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 80218ae:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80218b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80218b6:	ea08 0707 	and.w	r7, r8, r7
 80218ba:	433b      	orrs	r3, r7
 80218bc:	4333      	orrs	r3, r6
 80218be:	07e6      	lsls	r6, r4, #31
 80218c0:	b29b      	uxth	r3, r3
 80218c2:	d50b      	bpl.n	80218dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 80218c4:	0040      	lsls	r0, r0, #1
 80218c6:	0052      	lsls	r2, r2, #1
 80218c8:	42a9      	cmp	r1, r5
 80218ca:	d23a      	bcs.n	8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 80218cc:	180c      	adds	r4, r1, r0
 80218ce:	42a1      	cmp	r1, r4
 80218d0:	d202      	bcs.n	80218d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80218d2:	f821 3b02 	strh.w	r3, [r1], #2
 80218d6:	e7fa      	b.n	80218ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 80218d8:	4411      	add	r1, r2
 80218da:	e7f5      	b.n	80218c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80218dc:	078f      	lsls	r7, r1, #30
 80218de:	d008      	beq.n	80218f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80218e0:	0066      	lsls	r6, r4, #1
 80218e2:	460a      	mov	r2, r1
 80218e4:	42aa      	cmp	r2, r5
 80218e6:	d202      	bcs.n	80218ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80218e8:	8013      	strh	r3, [r2, #0]
 80218ea:	4432      	add	r2, r6
 80218ec:	e7fa      	b.n	80218e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80218ee:	3102      	adds	r1, #2
 80218f0:	3801      	subs	r0, #1
 80218f2:	07c6      	lsls	r6, r0, #31
 80218f4:	d50b      	bpl.n	802190e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80218f6:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80218fa:	0066      	lsls	r6, r4, #1
 80218fc:	3a01      	subs	r2, #1
 80218fe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021902:	42aa      	cmp	r2, r5
 8021904:	d202      	bcs.n	802190c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021906:	8013      	strh	r3, [r2, #0]
 8021908:	4432      	add	r2, r6
 802190a:	e7fa      	b.n	8021902 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 802190c:	3801      	subs	r0, #1
 802190e:	b1c0      	cbz	r0, 8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021910:	1040      	asrs	r0, r0, #1
 8021912:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021916:	0080      	lsls	r0, r0, #2
 8021918:	0064      	lsls	r4, r4, #1
 802191a:	42a9      	cmp	r1, r5
 802191c:	d211      	bcs.n	8021942 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802191e:	078a      	lsls	r2, r1, #30
 8021920:	d006      	beq.n	8021930 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021922:	4b0a      	ldr	r3, [pc, #40]	; (802194c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021924:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8021928:	4a09      	ldr	r2, [pc, #36]	; (8021950 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 802192a:	480a      	ldr	r0, [pc, #40]	; (8021954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 802192c:	f008 ffd2 	bl	802a8d4 <__assert_func>
 8021930:	180e      	adds	r6, r1, r0
 8021932:	460a      	mov	r2, r1
 8021934:	42b2      	cmp	r2, r6
 8021936:	d202      	bcs.n	802193e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021938:	f842 3b04 	str.w	r3, [r2], #4
 802193c:	e7fa      	b.n	8021934 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 802193e:	4421      	add	r1, r4
 8021940:	e7eb      	b.n	802191a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021946:	bf00      	nop
 8021948:	00fff800 	.word	0x00fff800
 802194c:	0802f808 	.word	0x0802f808
 8021950:	0802fe54 	.word	0x0802fe54
 8021954:	0802fa09 	.word	0x0802fa09

08021958 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021958:	2200      	movs	r2, #0
 802195a:	4910      	ldr	r1, [pc, #64]	; (802199c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 802195c:	6042      	str	r2, [r0, #4]
 802195e:	6001      	str	r1, [r0, #0]
 8021960:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021964:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021968:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802196c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021970:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021974:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021978:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802197c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021980:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021984:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021988:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 802198c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8021990:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021994:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021998:	4770      	bx	lr
 802199a:	bf00      	nop
 802199c:	0802fe0c 	.word	0x0802fe0c

080219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80219a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219a4:	b08d      	sub	sp, #52	; 0x34
 80219a6:	460d      	mov	r5, r1
 80219a8:	4604      	mov	r4, r0
 80219aa:	4699      	mov	r9, r3
 80219ac:	6808      	ldr	r0, [r1, #0]
 80219ae:	ab08      	add	r3, sp, #32
 80219b0:	6849      	ldr	r1, [r1, #4]
 80219b2:	c303      	stmia	r3!, {r0, r1}
 80219b4:	6810      	ldr	r0, [r2, #0]
 80219b6:	ab0a      	add	r3, sp, #40	; 0x28
 80219b8:	6851      	ldr	r1, [r2, #4]
 80219ba:	c303      	stmia	r3!, {r0, r1}
 80219bc:	a808      	add	r0, sp, #32
 80219be:	f7f9 fc5b 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219c2:	4629      	mov	r1, r5
 80219c4:	a80a      	add	r0, sp, #40	; 0x28
 80219c6:	4d67      	ldr	r5, [pc, #412]	; (8021b64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80219c8:	f7f9 fc7e 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219cc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80219d0:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80219d4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80219d8:	6828      	ldr	r0, [r5, #0]
 80219da:	fb11 2103 	smlabb	r1, r1, r3, r2
 80219de:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80219e2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80219e6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80219ea:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80219ee:	440a      	add	r2, r1
 80219f0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80219f4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80219f8:	4413      	add	r3, r2
 80219fa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80219fe:	6803      	ldr	r3, [r0, #0]
 8021a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a02:	4798      	blx	r3
 8021a04:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021a08:	d119      	bne.n	8021a3e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021a0a:	f010 0f20 	tst.w	r0, #32
 8021a0e:	6828      	ldr	r0, [r5, #0]
 8021a10:	d018      	beq.n	8021a44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021a12:	2500      	movs	r5, #0
 8021a14:	6801      	ldr	r1, [r0, #0]
 8021a16:	b2b6      	uxth	r6, r6
 8021a18:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021a1c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021a20:	9601      	str	r6, [sp, #4]
 8021a22:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021a26:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8021a2a:	9502      	str	r5, [sp, #8]
 8021a2c:	fa1f f588 	uxth.w	r5, r8
 8021a30:	9500      	str	r5, [sp, #0]
 8021a32:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8021a34:	4621      	mov	r1, r4
 8021a36:	47a8      	blx	r5
 8021a38:	b00d      	add	sp, #52	; 0x34
 8021a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021a42:	e7e4      	b.n	8021a0e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021a44:	6803      	ldr	r3, [r0, #0]
 8021a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a48:	4798      	blx	r3
 8021a4a:	4947      	ldr	r1, [pc, #284]	; (8021b68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8021a4c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021a50:	880b      	ldrh	r3, [r1, #0]
 8021a52:	468a      	mov	sl, r1
 8021a54:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8021a58:	fb03 5202 	mla	r2, r3, r2, r5
 8021a5c:	4373      	muls	r3, r6
 8021a5e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021a62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021a66:	9307      	str	r3, [sp, #28]
 8021a68:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021a6c:	9306      	str	r3, [sp, #24]
 8021a6e:	9b07      	ldr	r3, [sp, #28]
 8021a70:	4298      	cmp	r0, r3
 8021a72:	d270      	bcs.n	8021b56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021a74:	9b06      	ldr	r3, [sp, #24]
 8021a76:	4621      	mov	r1, r4
 8021a78:	eb00 0b03 	add.w	fp, r0, r3
 8021a7c:	4558      	cmp	r0, fp
 8021a7e:	d25d      	bcs.n	8021b3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021a80:	f851 4b04 	ldr.w	r4, [r1], #4
 8021a84:	0e23      	lsrs	r3, r4, #24
 8021a86:	d014      	beq.n	8021ab2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021a88:	2bff      	cmp	r3, #255	; 0xff
 8021a8a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8021a8e:	d112      	bne.n	8021ab6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021a90:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021a94:	d10f      	bne.n	8021ab6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021a96:	0963      	lsrs	r3, r4, #5
 8021a98:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021a9c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021aa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021aa4:	f02c 0c07 	bic.w	ip, ip, #7
 8021aa8:	ea43 0c0c 	orr.w	ip, r3, ip
 8021aac:	ea4c 0404 	orr.w	r4, ip, r4
 8021ab0:	8004      	strh	r4, [r0, #0]
 8021ab2:	3002      	adds	r0, #2
 8021ab4:	e7e2      	b.n	8021a7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021ab6:	fb09 f303 	mul.w	r3, r9, r3
 8021aba:	8807      	ldrh	r7, [r0, #0]
 8021abc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021ac0:	fa5f fc8c 	uxtb.w	ip, ip
 8021ac4:	1c5a      	adds	r2, r3, #1
 8021ac6:	123e      	asrs	r6, r7, #8
 8021ac8:	10fd      	asrs	r5, r7, #3
 8021aca:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8021ace:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021ad2:	00ff      	lsls	r7, r7, #3
 8021ad4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021ad8:	1212      	asrs	r2, r2, #8
 8021ada:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021ade:	b293      	uxth	r3, r2
 8021ae0:	43d2      	mvns	r2, r2
 8021ae2:	b2ff      	uxtb	r7, r7
 8021ae4:	fb1e fe03 	smulbb	lr, lr, r3
 8021ae8:	b2d2      	uxtb	r2, r2
 8021aea:	fb1c fc03 	smulbb	ip, ip, r3
 8021aee:	b2e4      	uxtb	r4, r4
 8021af0:	fb06 e602 	mla	r6, r6, r2, lr
 8021af4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021af8:	fb14 f403 	smulbb	r4, r4, r3
 8021afc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021b00:	b2b6      	uxth	r6, r6
 8021b02:	fb05 c502 	mla	r5, r5, r2, ip
 8021b06:	fb07 4702 	mla	r7, r7, r2, r4
 8021b0a:	f106 0e01 	add.w	lr, r6, #1
 8021b0e:	b2ad      	uxth	r5, r5
 8021b10:	b2bf      	uxth	r7, r7
 8021b12:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021b16:	f105 0c01 	add.w	ip, r5, #1
 8021b1a:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8021b1e:	1c7e      	adds	r6, r7, #1
 8021b20:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021b24:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021b28:	096d      	lsrs	r5, r5, #5
 8021b2a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021b2e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b32:	ea46 060e 	orr.w	r6, r6, lr
 8021b36:	432e      	orrs	r6, r5
 8021b38:	8006      	strh	r6, [r0, #0]
 8021b3a:	e7ba      	b.n	8021ab2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021b3c:	f8ba 3000 	ldrh.w	r3, [sl]
 8021b40:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8021b44:	eba3 0308 	sub.w	r3, r3, r8
 8021b48:	eba4 0408 	sub.w	r4, r4, r8
 8021b4c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b50:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021b54:	e78b      	b.n	8021a6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021b56:	4b03      	ldr	r3, [pc, #12]	; (8021b64 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021b58:	6818      	ldr	r0, [r3, #0]
 8021b5a:	6803      	ldr	r3, [r0, #0]
 8021b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b5e:	4798      	blx	r3
 8021b60:	e76a      	b.n	8021a38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021b62:	bf00      	nop
 8021b64:	2400b8c4 	.word	0x2400b8c4
 8021b68:	2400b8be 	.word	0x2400b8be

08021b6c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b70:	b085      	sub	sp, #20
 8021b72:	6810      	ldr	r0, [r2, #0]
 8021b74:	460c      	mov	r4, r1
 8021b76:	6851      	ldr	r1, [r2, #4]
 8021b78:	466d      	mov	r5, sp
 8021b7a:	4616      	mov	r6, r2
 8021b7c:	c503      	stmia	r5!, {r0, r1}
 8021b7e:	6818      	ldr	r0, [r3, #0]
 8021b80:	6859      	ldr	r1, [r3, #4]
 8021b82:	c503      	stmia	r5!, {r0, r1}
 8021b84:	4668      	mov	r0, sp
 8021b86:	4d2e      	ldr	r5, [pc, #184]	; (8021c40 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021b88:	f7f9 fb76 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b8c:	4631      	mov	r1, r6
 8021b8e:	a802      	add	r0, sp, #8
 8021b90:	4e2c      	ldr	r6, [pc, #176]	; (8021c44 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021b92:	f7f9 fb99 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b96:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021b9a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021b9e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021ba2:	6828      	ldr	r0, [r5, #0]
 8021ba4:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021ba8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8021bac:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021bb0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021bb4:	f8bd 1000 	ldrh.w	r1, [sp]
 8021bb8:	440a      	add	r2, r1
 8021bba:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021bbe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021bc2:	4413      	add	r3, r2
 8021bc4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021bc8:	6803      	ldr	r3, [r0, #0]
 8021bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bcc:	4798      	blx	r3
 8021bce:	8833      	ldrh	r3, [r6, #0]
 8021bd0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021bd4:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021bd8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021bdc:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021c48 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021be0:	fb03 1202 	mla	r2, r3, r2, r1
 8021be4:	fb08 f303 	mul.w	r3, r8, r3
 8021be8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021bec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021bf0:	4298      	cmp	r0, r3
 8021bf2:	d21d      	bcs.n	8021c30 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021bf4:	eb00 080c 	add.w	r8, r0, ip
 8021bf8:	4540      	cmp	r0, r8
 8021bfa:	d20f      	bcs.n	8021c1c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8021bfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8021c00:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021c04:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021c08:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021c0c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021c10:	ea42 0209 	orr.w	r2, r2, r9
 8021c14:	430a      	orrs	r2, r1
 8021c16:	f820 2b02 	strh.w	r2, [r0], #2
 8021c1a:	e7ed      	b.n	8021bf8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8021c1c:	8832      	ldrh	r2, [r6, #0]
 8021c1e:	1bd2      	subs	r2, r2, r7
 8021c20:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021c24:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021c28:	1bd2      	subs	r2, r2, r7
 8021c2a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8021c2e:	e7df      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021c30:	6828      	ldr	r0, [r5, #0]
 8021c32:	6803      	ldr	r3, [r0, #0]
 8021c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c36:	4798      	blx	r3
 8021c38:	b005      	add	sp, #20
 8021c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021c3e:	bf00      	nop
 8021c40:	2400b8c4 	.word	0x2400b8c4
 8021c44:	2400b8be 	.word	0x2400b8be
 8021c48:	fffff800 	.word	0xfffff800

08021c4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8021c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c50:	b08e      	sub	sp, #56	; 0x38
 8021c52:	460e      	mov	r6, r1
 8021c54:	4604      	mov	r4, r0
 8021c56:	461d      	mov	r5, r3
 8021c58:	6808      	ldr	r0, [r1, #0]
 8021c5a:	ab0a      	add	r3, sp, #40	; 0x28
 8021c5c:	6849      	ldr	r1, [r1, #4]
 8021c5e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8021e34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021c62:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021e38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021c66:	c303      	stmia	r3!, {r0, r1}
 8021c68:	6810      	ldr	r0, [r2, #0]
 8021c6a:	ab0c      	add	r3, sp, #48	; 0x30
 8021c6c:	6851      	ldr	r1, [r2, #4]
 8021c6e:	c303      	stmia	r3!, {r0, r1}
 8021c70:	a80a      	add	r0, sp, #40	; 0x28
 8021c72:	f7f9 fb01 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c76:	4631      	mov	r1, r6
 8021c78:	a80c      	add	r0, sp, #48	; 0x30
 8021c7a:	f7f9 fb25 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c7e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021c82:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021c86:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021c8a:	f8d8 0000 	ldr.w	r0, [r8]
 8021c8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c92:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021c96:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021c9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021c9e:	440c      	add	r4, r1
 8021ca0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021ca4:	440a      	add	r2, r1
 8021ca6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021caa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021cae:	4413      	add	r3, r2
 8021cb0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021cb4:	6803      	ldr	r3, [r0, #0]
 8021cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021cb8:	4798      	blx	r3
 8021cba:	2dff      	cmp	r5, #255	; 0xff
 8021cbc:	d124      	bne.n	8021d08 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8021cbe:	f010 0f01 	tst.w	r0, #1
 8021cc2:	f8d8 0000 	ldr.w	r0, [r8]
 8021cc6:	d022      	beq.n	8021d0e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021cc8:	2100      	movs	r1, #0
 8021cca:	f04f 0e01 	mov.w	lr, #1
 8021cce:	f8d0 c000 	ldr.w	ip, [r0]
 8021cd2:	b2b6      	uxth	r6, r6
 8021cd4:	f8cd e018 	str.w	lr, [sp, #24]
 8021cd8:	b2bf      	uxth	r7, r7
 8021cda:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021cde:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021ce2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8021ce6:	f8b9 e000 	ldrh.w	lr, [r9]
 8021cea:	9503      	str	r5, [sp, #12]
 8021cec:	9601      	str	r6, [sp, #4]
 8021cee:	9700      	str	r7, [sp, #0]
 8021cf0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021cf4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021cf8:	9102      	str	r1, [sp, #8]
 8021cfa:	4621      	mov	r1, r4
 8021cfc:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8021d00:	47a8      	blx	r5
 8021d02:	b00e      	add	sp, #56	; 0x38
 8021d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d08:	f010 0f04 	tst.w	r0, #4
 8021d0c:	e7d9      	b.n	8021cc2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8021d0e:	6803      	ldr	r3, [r0, #0]
 8021d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d12:	4798      	blx	r3
 8021d14:	f8b9 3000 	ldrh.w	r3, [r9]
 8021d18:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021d1c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8021d20:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021d24:	435e      	muls	r6, r3
 8021d26:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8021d2a:	2dff      	cmp	r5, #255	; 0xff
 8021d2c:	fb03 1202 	mla	r2, r3, r2, r1
 8021d30:	ebac 0c07 	sub.w	ip, ip, r7
 8021d34:	eba3 0707 	sub.w	r7, r3, r7
 8021d38:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021d3c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021d40:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021d44:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021d48:	d049      	beq.n	8021dde <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8021d4a:	43eb      	mvns	r3, r5
 8021d4c:	fa1f f985 	uxth.w	r9, r5
 8021d50:	b2db      	uxtb	r3, r3
 8021d52:	42b0      	cmp	r0, r6
 8021d54:	d266      	bcs.n	8021e24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021d56:	eb00 0a0e 	add.w	sl, r0, lr
 8021d5a:	4550      	cmp	r0, sl
 8021d5c:	4621      	mov	r1, r4
 8021d5e:	f104 0403 	add.w	r4, r4, #3
 8021d62:	d25b      	bcs.n	8021e1c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021d64:	8802      	ldrh	r2, [r0, #0]
 8021d66:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021d6a:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021d6e:	fb11 f109 	smulbb	r1, r1, r9
 8021d72:	10d5      	asrs	r5, r2, #3
 8021d74:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021d78:	00d2      	lsls	r2, r2, #3
 8021d7a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021d7e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8021d82:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021d86:	fb08 1803 	mla	r8, r8, r3, r1
 8021d8a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021d8e:	b2d2      	uxtb	r2, r2
 8021d90:	fb11 f109 	smulbb	r1, r1, r9
 8021d94:	fa1f f888 	uxth.w	r8, r8
 8021d98:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021d9c:	fb05 1503 	mla	r5, r5, r3, r1
 8021da0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021da4:	fb11 f109 	smulbb	r1, r1, r9
 8021da8:	b2ad      	uxth	r5, r5
 8021daa:	fb02 1203 	mla	r2, r2, r3, r1
 8021dae:	f108 0101 	add.w	r1, r8, #1
 8021db2:	b292      	uxth	r2, r2
 8021db4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021db8:	1c51      	adds	r1, r2, #1
 8021dba:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8021dbe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021dc2:	1c69      	adds	r1, r5, #1
 8021dc4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021dc8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021dcc:	096d      	lsrs	r5, r5, #5
 8021dce:	ea42 0208 	orr.w	r2, r2, r8
 8021dd2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021dd6:	432a      	orrs	r2, r5
 8021dd8:	f820 2b02 	strh.w	r2, [r0], #2
 8021ddc:	e7bd      	b.n	8021d5a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8021dde:	4a14      	ldr	r2, [pc, #80]	; (8021e30 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021de0:	42b0      	cmp	r0, r6
 8021de2:	d21f      	bcs.n	8021e24 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021de4:	eb00 050e 	add.w	r5, r0, lr
 8021de8:	42a8      	cmp	r0, r5
 8021dea:	4621      	mov	r1, r4
 8021dec:	f104 0403 	add.w	r4, r4, #3
 8021df0:	d210      	bcs.n	8021e14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021df2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021df6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8021dfa:	00db      	lsls	r3, r3, #3
 8021dfc:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021e00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021e04:	430b      	orrs	r3, r1
 8021e06:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021e0a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8021e0e:	f820 3b02 	strh.w	r3, [r0], #2
 8021e12:	e7e9      	b.n	8021de8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8021e14:	4438      	add	r0, r7
 8021e16:	eb01 040c 	add.w	r4, r1, ip
 8021e1a:	e7e1      	b.n	8021de0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8021e1c:	4438      	add	r0, r7
 8021e1e:	eb01 040c 	add.w	r4, r1, ip
 8021e22:	e796      	b.n	8021d52 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021e24:	4b03      	ldr	r3, [pc, #12]	; (8021e34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021e26:	6818      	ldr	r0, [r3, #0]
 8021e28:	6803      	ldr	r3, [r0, #0]
 8021e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e2c:	4798      	blx	r3
 8021e2e:	e768      	b.n	8021d02 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8021e30:	fffff800 	.word	0xfffff800
 8021e34:	2400b8c4 	.word	0x2400b8c4
 8021e38:	2400b8be 	.word	0x2400b8be

08021e3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021e3c:	b570      	push	{r4, r5, r6, lr}
 8021e3e:	9c04      	ldr	r4, [sp, #16]
 8021e40:	4605      	mov	r5, r0
 8021e42:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021e46:	4608      	mov	r0, r1
 8021e48:	4619      	mov	r1, r3
 8021e4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021e4e:	2a0d      	cmp	r2, #13
 8021e50:	d825      	bhi.n	8021e9e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8021e52:	e8df f002 	tbb	[pc, r2]
 8021e56:	1807      	.short	0x1807
 8021e58:	1d1d1d13 	.word	0x1d1d1d13
 8021e5c:	1d1d1d1d 	.word	0x1d1d1d1d
 8021e60:	1d1d1d1d 	.word	0x1d1d1d1d
 8021e64:	682a      	ldr	r2, [r5, #0]
 8021e66:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8021e6a:	68d6      	ldr	r6, [r2, #12]
 8021e6c:	4623      	mov	r3, r4
 8021e6e:	460a      	mov	r2, r1
 8021e70:	4601      	mov	r1, r0
 8021e72:	46b4      	mov	ip, r6
 8021e74:	4628      	mov	r0, r5
 8021e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021e7a:	4760      	bx	ip
 8021e7c:	4622      	mov	r2, r4
 8021e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021e82:	f7ff bd8d 	b.w	80219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021e86:	4622      	mov	r2, r4
 8021e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021e8c:	f7ff bede 	b.w	8021c4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021e90:	4b03      	ldr	r3, [pc, #12]	; (8021ea0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8021e92:	f240 315d 	movw	r1, #861	; 0x35d
 8021e96:	4a03      	ldr	r2, [pc, #12]	; (8021ea4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 8021e98:	4803      	ldr	r0, [pc, #12]	; (8021ea8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8021e9a:	f008 fd1b 	bl	802a8d4 <__assert_func>
 8021e9e:	bd70      	pop	{r4, r5, r6, pc}
 8021ea0:	0802fb2e 	.word	0x0802fb2e
 8021ea4:	0803028e 	.word	0x0803028e
 8021ea8:	0802fa09 	.word	0x0802fa09

08021eac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021eb0:	b093      	sub	sp, #76	; 0x4c
 8021eb2:	880e      	ldrh	r6, [r1, #0]
 8021eb4:	4681      	mov	r9, r0
 8021eb6:	4688      	mov	r8, r1
 8021eb8:	4615      	mov	r5, r2
 8021eba:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8021ebe:	b136      	cbz	r6, 8021ece <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8021ec0:	4b70      	ldr	r3, [pc, #448]	; (8022084 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8021ec2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8021ec6:	4a70      	ldr	r2, [pc, #448]	; (8022088 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8021ec8:	4870      	ldr	r0, [pc, #448]	; (802208c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8021eca:	f008 fd03 	bl	802a8d4 <__assert_func>
 8021ece:	6810      	ldr	r0, [r2, #0]
 8021ed0:	ac0e      	add	r4, sp, #56	; 0x38
 8021ed2:	6851      	ldr	r1, [r2, #4]
 8021ed4:	4f6e      	ldr	r7, [pc, #440]	; (8022090 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021ed6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8022094 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8021eda:	c403      	stmia	r4!, {r0, r1}
 8021edc:	6818      	ldr	r0, [r3, #0]
 8021ede:	ac10      	add	r4, sp, #64	; 0x40
 8021ee0:	6859      	ldr	r1, [r3, #4]
 8021ee2:	c403      	stmia	r4!, {r0, r1}
 8021ee4:	a80e      	add	r0, sp, #56	; 0x38
 8021ee6:	f7f9 f9c7 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021eea:	4629      	mov	r1, r5
 8021eec:	a810      	add	r0, sp, #64	; 0x40
 8021eee:	f7f9 f9eb 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021ef2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021ef6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021efa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021efe:	6838      	ldr	r0, [r7, #0]
 8021f00:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021f04:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021f08:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021f0c:	4489      	add	r9, r1
 8021f0e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021f12:	440a      	add	r2, r1
 8021f14:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021f18:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021f1c:	4413      	add	r3, r2
 8021f1e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021f22:	6803      	ldr	r3, [r0, #0]
 8021f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f26:	4798      	blx	r3
 8021f28:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021f2c:	6838      	ldr	r0, [r7, #0]
 8021f2e:	d01d      	beq.n	8021f6c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021f30:	210b      	movs	r1, #11
 8021f32:	6802      	ldr	r2, [r0, #0]
 8021f34:	b2a4      	uxth	r4, r4
 8021f36:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8021f3a:	9107      	str	r1, [sp, #28]
 8021f3c:	b2ad      	uxth	r5, r5
 8021f3e:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021f42:	f8bb 1000 	ldrh.w	r1, [fp]
 8021f46:	9502      	str	r5, [sp, #8]
 8021f48:	9106      	str	r1, [sp, #24]
 8021f4a:	2101      	movs	r1, #1
 8021f4c:	9401      	str	r4, [sp, #4]
 8021f4e:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021f52:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021f56:	9103      	str	r1, [sp, #12]
 8021f58:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8021f5c:	9100      	str	r1, [sp, #0]
 8021f5e:	4649      	mov	r1, r9
 8021f60:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8021f62:	4642      	mov	r2, r8
 8021f64:	47a0      	blx	r4
 8021f66:	b013      	add	sp, #76	; 0x4c
 8021f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f6c:	6803      	ldr	r3, [r0, #0]
 8021f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021f70:	4798      	blx	r3
 8021f72:	f8bb 3000 	ldrh.w	r3, [fp]
 8021f76:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8021f7a:	f04f 0e04 	mov.w	lr, #4
 8021f7e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021f82:	435d      	muls	r5, r3
 8021f84:	fb03 1202 	mla	r2, r3, r2, r1
 8021f88:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f8c:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8021f90:	920c      	str	r2, [sp, #48]	; 0x30
 8021f92:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021f96:	1b12      	subs	r2, r2, r4
 8021f98:	920d      	str	r2, [sp, #52]	; 0x34
 8021f9a:	0062      	lsls	r2, r4, #1
 8021f9c:	1b1c      	subs	r4, r3, r4
 8021f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8021fa0:	0063      	lsls	r3, r4, #1
 8021fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fa6:	4298      	cmp	r0, r3
 8021fa8:	d266      	bcs.n	8022078 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8021faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021fac:	eb00 0b03 	add.w	fp, r0, r3
 8021fb0:	4558      	cmp	r0, fp
 8021fb2:	d25c      	bcs.n	802206e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8021fb4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8021fb8:	fb1e e303 	smlabb	r3, lr, r3, lr
 8021fbc:	f858 2003 	ldr.w	r2, [r8, r3]
 8021fc0:	0e11      	lsrs	r1, r2, #24
 8021fc2:	d012      	beq.n	8021fea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8021fc4:	29ff      	cmp	r1, #255	; 0xff
 8021fc6:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021fca:	d110      	bne.n	8021fee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8021fcc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021fd0:	d10d      	bne.n	8021fee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8021fd2:	0953      	lsrs	r3, r2, #5
 8021fd4:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8021fd8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021fdc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021fe0:	f027 0707 	bic.w	r7, r7, #7
 8021fe4:	431f      	orrs	r7, r3
 8021fe6:	433a      	orrs	r2, r7
 8021fe8:	8002      	strh	r2, [r0, #0]
 8021fea:	3002      	adds	r0, #2
 8021fec:	e7e0      	b.n	8021fb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 8021fee:	fb0a f101 	mul.w	r1, sl, r1
 8021ff2:	8806      	ldrh	r6, [r0, #0]
 8021ff4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021ff8:	b2d2      	uxtb	r2, r2
 8021ffa:	1c4b      	adds	r3, r1, #1
 8021ffc:	1235      	asrs	r5, r6, #8
 8021ffe:	10f4      	asrs	r4, r6, #3
 8022000:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022004:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022008:	00f6      	lsls	r6, r6, #3
 802200a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802200e:	121b      	asrs	r3, r3, #8
 8022010:	b2f6      	uxtb	r6, r6
 8022012:	b299      	uxth	r1, r3
 8022014:	43db      	mvns	r3, r3
 8022016:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802201a:	fb1c fc01 	smulbb	ip, ip, r1
 802201e:	b2db      	uxtb	r3, r3
 8022020:	fb12 f201 	smulbb	r2, r2, r1
 8022024:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022028:	fb05 c503 	mla	r5, r5, r3, ip
 802202c:	b2ff      	uxtb	r7, r7
 802202e:	fb06 2203 	mla	r2, r6, r3, r2
 8022032:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022036:	fb17 f701 	smulbb	r7, r7, r1
 802203a:	b2ad      	uxth	r5, r5
 802203c:	b292      	uxth	r2, r2
 802203e:	fb04 7403 	mla	r4, r4, r3, r7
 8022042:	f105 0c01 	add.w	ip, r5, #1
 8022046:	1c57      	adds	r7, r2, #1
 8022048:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802204c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022050:	b2a4      	uxth	r4, r4
 8022052:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022056:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802205a:	433d      	orrs	r5, r7
 802205c:	1c67      	adds	r7, r4, #1
 802205e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022062:	0964      	lsrs	r4, r4, #5
 8022064:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022068:	4325      	orrs	r5, r4
 802206a:	8005      	strh	r5, [r0, #0]
 802206c:	e7bd      	b.n	8021fea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802206e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022070:	4418      	add	r0, r3
 8022072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022074:	4499      	add	r9, r3
 8022076:	e795      	b.n	8021fa4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8022078:	4b05      	ldr	r3, [pc, #20]	; (8022090 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802207a:	6818      	ldr	r0, [r3, #0]
 802207c:	6803      	ldr	r3, [r0, #0]
 802207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022080:	4798      	blx	r3
 8022082:	e770      	b.n	8021f66 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8022084:	0802f907 	.word	0x0802f907
 8022088:	0803005f 	.word	0x0803005f
 802208c:	0802fa09 	.word	0x0802fa09
 8022090:	2400b8c4 	.word	0x2400b8c4
 8022094:	2400b8be 	.word	0x2400b8be

08022098 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8022098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802209c:	4614      	mov	r4, r2
 802209e:	880a      	ldrh	r2, [r1, #0]
 80220a0:	b087      	sub	sp, #28
 80220a2:	4680      	mov	r8, r0
 80220a4:	2a02      	cmp	r2, #2
 80220a6:	460d      	mov	r5, r1
 80220a8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80220ac:	d006      	beq.n	80220bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80220ae:	4b63      	ldr	r3, [pc, #396]	; (802223c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80220b0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80220b4:	4a62      	ldr	r2, [pc, #392]	; (8022240 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80220b6:	4863      	ldr	r0, [pc, #396]	; (8022244 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80220b8:	f008 fc0c 	bl	802a8d4 <__assert_func>
 80220bc:	2e00      	cmp	r6, #0
 80220be:	f000 80b9 	beq.w	8022234 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80220c2:	6820      	ldr	r0, [r4, #0]
 80220c4:	af02      	add	r7, sp, #8
 80220c6:	6861      	ldr	r1, [r4, #4]
 80220c8:	c703      	stmia	r7!, {r0, r1}
 80220ca:	6818      	ldr	r0, [r3, #0]
 80220cc:	af04      	add	r7, sp, #16
 80220ce:	6859      	ldr	r1, [r3, #4]
 80220d0:	c703      	stmia	r7!, {r0, r1}
 80220d2:	a802      	add	r0, sp, #8
 80220d4:	f7f9 f8d0 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80220d8:	4621      	mov	r1, r4
 80220da:	a804      	add	r0, sp, #16
 80220dc:	f7f9 f8f4 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80220e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80220e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80220e8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80220ec:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80220f0:	fb14 2103 	smlabb	r1, r4, r3, r2
 80220f4:	eb08 0401 	add.w	r4, r8, r1
 80220f8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80220fc:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022100:	440a      	add	r2, r1
 8022102:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8022106:	f8ad 2010 	strh.w	r2, [sp, #16]
 802210a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802210e:	4413      	add	r3, r2
 8022110:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022114:	4b4c      	ldr	r3, [pc, #304]	; (8022248 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022116:	6818      	ldr	r0, [r3, #0]
 8022118:	6803      	ldr	r3, [r0, #0]
 802211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802211c:	4798      	blx	r3
 802211e:	4b4b      	ldr	r3, [pc, #300]	; (802224c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8022120:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022124:	2eff      	cmp	r6, #255	; 0xff
 8022126:	881a      	ldrh	r2, [r3, #0]
 8022128:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802212c:	fb02 c101 	mla	r1, r2, r1, ip
 8022130:	fb02 f207 	mul.w	r2, r2, r7
 8022134:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022138:	f105 0104 	add.w	r1, r5, #4
 802213c:	461d      	mov	r5, r3
 802213e:	d05a      	beq.n	80221f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8022140:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022144:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8022148:	b2b6      	uxth	r6, r6
 802214a:	9301      	str	r3, [sp, #4]
 802214c:	fa1f fe8e 	uxth.w	lr, lr
 8022150:	4282      	cmp	r2, r0
 8022152:	d96a      	bls.n	802222a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8022154:	eb00 0b0a 	add.w	fp, r0, sl
 8022158:	4583      	cmp	fp, r0
 802215a:	d940      	bls.n	80221de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 802215c:	8805      	ldrh	r5, [r0, #0]
 802215e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022162:	122f      	asrs	r7, r5, #8
 8022164:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022168:	ea4f 09e5 	mov.w	r9, r5, asr #3
 802216c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022170:	00ed      	lsls	r5, r5, #3
 8022172:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022176:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802217a:	fb17 f70e 	smulbb	r7, r7, lr
 802217e:	b2ed      	uxtb	r5, r5
 8022180:	fb19 f90e 	smulbb	r9, r9, lr
 8022184:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022188:	fb15 f50e 	smulbb	r5, r5, lr
 802218c:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022190:	10df      	asrs	r7, r3, #3
 8022192:	00db      	lsls	r3, r3, #3
 8022194:	fa1f fc8c 	uxth.w	ip, ip
 8022198:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802219c:	b2db      	uxtb	r3, r3
 802219e:	fb07 9706 	mla	r7, r7, r6, r9
 80221a2:	f10c 0901 	add.w	r9, ip, #1
 80221a6:	fb03 5306 	mla	r3, r3, r6, r5
 80221aa:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80221ae:	b29b      	uxth	r3, r3
 80221b0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80221b4:	b2bf      	uxth	r7, r7
 80221b6:	f103 0c01 	add.w	ip, r3, #1
 80221ba:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80221be:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80221c2:	ea4c 0c09 	orr.w	ip, ip, r9
 80221c6:	f107 0901 	add.w	r9, r7, #1
 80221ca:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80221ce:	097f      	lsrs	r7, r7, #5
 80221d0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80221d4:	ea4c 0c07 	orr.w	ip, ip, r7
 80221d8:	f820 cb02 	strh.w	ip, [r0], #2
 80221dc:	e7bc      	b.n	8022158 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80221de:	9b01      	ldr	r3, [sp, #4]
 80221e0:	881b      	ldrh	r3, [r3, #0]
 80221e2:	eba3 0308 	sub.w	r3, r3, r8
 80221e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80221ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80221ee:	eba3 0308 	sub.w	r3, r3, r8
 80221f2:	441c      	add	r4, r3
 80221f4:	e7ac      	b.n	8022150 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 80221f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80221fa:	4282      	cmp	r2, r0
 80221fc:	d915      	bls.n	802222a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80221fe:	eb00 060a 	add.w	r6, r0, sl
 8022202:	4286      	cmp	r6, r0
 8022204:	d906      	bls.n	8022214 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8022206:	f814 3b01 	ldrb.w	r3, [r4], #1
 802220a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802220e:	f820 3b02 	strh.w	r3, [r0], #2
 8022212:	e7f6      	b.n	8022202 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8022214:	882b      	ldrh	r3, [r5, #0]
 8022216:	eba3 0308 	sub.w	r3, r3, r8
 802221a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802221e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022222:	eba3 0308 	sub.w	r3, r3, r8
 8022226:	441c      	add	r4, r3
 8022228:	e7e7      	b.n	80221fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802222a:	4b07      	ldr	r3, [pc, #28]	; (8022248 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802222c:	6818      	ldr	r0, [r3, #0]
 802222e:	6803      	ldr	r3, [r0, #0]
 8022230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022232:	4798      	blx	r3
 8022234:	b007      	add	sp, #28
 8022236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802223a:	bf00      	nop
 802223c:	0802f837 	.word	0x0802f837
 8022240:	0802fec9 	.word	0x0802fec9
 8022244:	0802fa09 	.word	0x0802fa09
 8022248:	2400b8c4 	.word	0x2400b8c4
 802224c:	2400b8be 	.word	0x2400b8be

08022250 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022254:	f8b1 9000 	ldrh.w	r9, [r1]
 8022258:	b091      	sub	sp, #68	; 0x44
 802225a:	4604      	mov	r4, r0
 802225c:	460f      	mov	r7, r1
 802225e:	f1b9 0f01 	cmp.w	r9, #1
 8022262:	4690      	mov	r8, r2
 8022264:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8022268:	d006      	beq.n	8022278 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 802226a:	4b84      	ldr	r3, [pc, #528]	; (802247c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 802226c:	f240 212f 	movw	r1, #559	; 0x22f
 8022270:	4a83      	ldr	r2, [pc, #524]	; (8022480 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8022272:	4884      	ldr	r0, [pc, #528]	; (8022484 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8022274:	f008 fb2e 	bl	802a8d4 <__assert_func>
 8022278:	2d00      	cmp	r5, #0
 802227a:	d04f      	beq.n	802231c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802227c:	6810      	ldr	r0, [r2, #0]
 802227e:	ae0c      	add	r6, sp, #48	; 0x30
 8022280:	6851      	ldr	r1, [r2, #4]
 8022282:	f8df b208 	ldr.w	fp, [pc, #520]	; 802248c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8022286:	c603      	stmia	r6!, {r0, r1}
 8022288:	6818      	ldr	r0, [r3, #0]
 802228a:	ae0e      	add	r6, sp, #56	; 0x38
 802228c:	6859      	ldr	r1, [r3, #4]
 802228e:	c603      	stmia	r6!, {r0, r1}
 8022290:	a80c      	add	r0, sp, #48	; 0x30
 8022292:	f7f8 fff1 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022296:	4641      	mov	r1, r8
 8022298:	a80e      	add	r0, sp, #56	; 0x38
 802229a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8022490 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 802229e:	f7f9 f813 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222a2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80222a6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80222aa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80222ae:	f8db 0000 	ldr.w	r0, [fp]
 80222b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80222b6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80222ba:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80222be:	440c      	add	r4, r1
 80222c0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80222c4:	440a      	add	r2, r1
 80222c6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80222ca:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80222ce:	4413      	add	r3, r2
 80222d0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80222d4:	6803      	ldr	r3, [r0, #0]
 80222d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222d8:	4798      	blx	r3
 80222da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80222de:	f8db 0000 	ldr.w	r0, [fp]
 80222e2:	d01e      	beq.n	8022322 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 80222e4:	2200      	movs	r2, #0
 80222e6:	6801      	ldr	r1, [r0, #0]
 80222e8:	b2b6      	uxth	r6, r6
 80222ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80222ee:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80222f2:	220b      	movs	r2, #11
 80222f4:	9207      	str	r2, [sp, #28]
 80222f6:	f8b8 2000 	ldrh.w	r2, [r8]
 80222fa:	9504      	str	r5, [sp, #16]
 80222fc:	9601      	str	r6, [sp, #4]
 80222fe:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8022302:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8022306:	9203      	str	r2, [sp, #12]
 8022308:	fa1f f28a 	uxth.w	r2, sl
 802230c:	9202      	str	r2, [sp, #8]
 802230e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022312:	9200      	str	r2, [sp, #0]
 8022314:	463a      	mov	r2, r7
 8022316:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8022318:	4621      	mov	r1, r4
 802231a:	47a8      	blx	r5
 802231c:	b011      	add	sp, #68	; 0x44
 802231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022322:	6803      	ldr	r3, [r0, #0]
 8022324:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8022328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802232a:	4798      	blx	r3
 802232c:	f8b8 2000 	ldrh.w	r2, [r8]
 8022330:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022334:	2dff      	cmp	r5, #255	; 0xff
 8022336:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802233a:	fb0a fa02 	mul.w	sl, sl, r2
 802233e:	fb02 1303 	mla	r3, r2, r3, r1
 8022342:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022346:	d062      	beq.n	802240e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8022348:	ea6f 0c05 	mvn.w	ip, r5
 802234c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022350:	b2ad      	uxth	r5, r5
 8022352:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8022356:	fa5f fc8c 	uxtb.w	ip, ip
 802235a:	930a      	str	r3, [sp, #40]	; 0x28
 802235c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802235e:	4298      	cmp	r0, r3
 8022360:	f080 8085 	bcs.w	802246e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8022364:	eb00 0b09 	add.w	fp, r0, r9
 8022368:	4558      	cmp	r0, fp
 802236a:	d246      	bcs.n	80223fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 802236c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022370:	2303      	movs	r3, #3
 8022372:	2204      	movs	r2, #4
 8022374:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022378:	8803      	ldrh	r3, [r0, #0]
 802237a:	eb07 0a0e 	add.w	sl, r7, lr
 802237e:	1219      	asrs	r1, r3, #8
 8022380:	10da      	asrs	r2, r3, #3
 8022382:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022386:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802238a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802238e:	00db      	lsls	r3, r3, #3
 8022390:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022394:	fb18 f805 	smulbb	r8, r8, r5
 8022398:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802239c:	fb1e fe05 	smulbb	lr, lr, r5
 80223a0:	b2db      	uxtb	r3, r3
 80223a2:	fb01 810c 	mla	r1, r1, ip, r8
 80223a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80223aa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80223ae:	fb18 f805 	smulbb	r8, r8, r5
 80223b2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80223b6:	b289      	uxth	r1, r1
 80223b8:	fb02 820c 	mla	r2, r2, ip, r8
 80223bc:	fb03 e30c 	mla	r3, r3, ip, lr
 80223c0:	f101 0801 	add.w	r8, r1, #1
 80223c4:	b292      	uxth	r2, r2
 80223c6:	b29b      	uxth	r3, r3
 80223c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80223cc:	f102 0801 	add.w	r8, r2, #1
 80223d0:	f103 0e01 	add.w	lr, r3, #1
 80223d4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80223d8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80223dc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80223e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80223e4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80223e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80223ec:	ea4e 0101 	orr.w	r1, lr, r1
 80223f0:	ea41 0108 	orr.w	r1, r1, r8
 80223f4:	f820 1b02 	strh.w	r1, [r0], #2
 80223f8:	e7b6      	b.n	8022368 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 80223fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223fc:	881b      	ldrh	r3, [r3, #0]
 80223fe:	1b9b      	subs	r3, r3, r6
 8022400:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022404:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022408:	1b9b      	subs	r3, r3, r6
 802240a:	441c      	add	r4, r3
 802240c:	e7a6      	b.n	802235c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802240e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022412:	2203      	movs	r2, #3
 8022414:	2504      	movs	r5, #4
 8022416:	491c      	ldr	r1, [pc, #112]	; (8022488 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8022418:	4550      	cmp	r0, sl
 802241a:	d228      	bcs.n	802246e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802241c:	eb00 0c09 	add.w	ip, r0, r9
 8022420:	4560      	cmp	r0, ip
 8022422:	4623      	mov	r3, r4
 8022424:	d219      	bcs.n	802245a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022426:	f893 e000 	ldrb.w	lr, [r3]
 802242a:	3401      	adds	r4, #1
 802242c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022430:	eb07 0b0e 	add.w	fp, r7, lr
 8022434:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022438:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802243c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022440:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022444:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022448:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802244c:	ea43 030b 	orr.w	r3, r3, fp
 8022450:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022454:	f820 3b02 	strh.w	r3, [r0], #2
 8022458:	e7e2      	b.n	8022420 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 802245a:	f8b8 3000 	ldrh.w	r3, [r8]
 802245e:	1b9b      	subs	r3, r3, r6
 8022460:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022464:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022468:	1b9b      	subs	r3, r3, r6
 802246a:	441c      	add	r4, r3
 802246c:	e7d4      	b.n	8022418 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 802246e:	4b07      	ldr	r3, [pc, #28]	; (802248c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8022470:	6818      	ldr	r0, [r3, #0]
 8022472:	6803      	ldr	r3, [r0, #0]
 8022474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022476:	4798      	blx	r3
 8022478:	e750      	b.n	802231c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802247a:	bf00      	nop
 802247c:	0802f885 	.word	0x0802f885
 8022480:	0802ff52 	.word	0x0802ff52
 8022484:	0802fa09 	.word	0x0802fa09
 8022488:	fffff800 	.word	0xfffff800
 802248c:	2400b8c4 	.word	0x2400b8c4
 8022490:	2400b8be 	.word	0x2400b8be

08022494 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022494:	b430      	push	{r4, r5}
 8022496:	780d      	ldrb	r5, [r1, #0]
 8022498:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802249c:	2d01      	cmp	r5, #1
 802249e:	d00a      	beq.n	80224b6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80224a0:	d305      	bcc.n	80224ae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80224a2:	2d02      	cmp	r5, #2
 80224a4:	d10b      	bne.n	80224be <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80224a6:	9402      	str	r4, [sp, #8]
 80224a8:	bc30      	pop	{r4, r5}
 80224aa:	f7ff bdf5 	b.w	8022098 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80224ae:	9402      	str	r4, [sp, #8]
 80224b0:	bc30      	pop	{r4, r5}
 80224b2:	f7ff bcfb 	b.w	8021eac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80224b6:	9402      	str	r4, [sp, #8]
 80224b8:	bc30      	pop	{r4, r5}
 80224ba:	f7ff bec9 	b.w	8022250 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80224be:	bc30      	pop	{r4, r5}
 80224c0:	4770      	bx	lr
	...

080224c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80224c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224c8:	b087      	sub	sp, #28
 80224ca:	4604      	mov	r4, r0
 80224cc:	460e      	mov	r6, r1
 80224ce:	6810      	ldr	r0, [r2, #0]
 80224d0:	6851      	ldr	r1, [r2, #4]
 80224d2:	ad02      	add	r5, sp, #8
 80224d4:	4617      	mov	r7, r2
 80224d6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80224da:	f8df 9230 	ldr.w	r9, [pc, #560]	; 802270c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80224de:	c503      	stmia	r5!, {r0, r1}
 80224e0:	6818      	ldr	r0, [r3, #0]
 80224e2:	ad04      	add	r5, sp, #16
 80224e4:	6859      	ldr	r1, [r3, #4]
 80224e6:	c503      	stmia	r5!, {r0, r1}
 80224e8:	a802      	add	r0, sp, #8
 80224ea:	f7f8 fec5 	bl	801b278 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224ee:	4639      	mov	r1, r7
 80224f0:	a804      	add	r0, sp, #16
 80224f2:	f7f8 fee9 	bl	801b2c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224f6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80224fa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80224fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022502:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022506:	fb11 2103 	smlabb	r1, r1, r3, r2
 802250a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 802250e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022512:	440e      	add	r6, r1
 8022514:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022518:	440a      	add	r2, r1
 802251a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802251e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022522:	4413      	add	r3, r2
 8022524:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022528:	4b77      	ldr	r3, [pc, #476]	; (8022708 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802252a:	6818      	ldr	r0, [r3, #0]
 802252c:	6803      	ldr	r3, [r0, #0]
 802252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022530:	4798      	blx	r3
 8022532:	f8b9 b000 	ldrh.w	fp, [r9]
 8022536:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802253a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802253e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022542:	fb05 f50b 	mul.w	r5, r5, fp
 8022546:	fb0b 2303 	mla	r3, fp, r3, r2
 802254a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802254e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022552:	9300      	str	r3, [sp, #0]
 8022554:	d069      	beq.n	802262a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022556:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802255a:	4558      	cmp	r0, fp
 802255c:	f080 80cc 	bcs.w	80226f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022560:	9b00      	ldr	r3, [sp, #0]
 8022562:	4631      	mov	r1, r6
 8022564:	18c3      	adds	r3, r0, r3
 8022566:	9301      	str	r3, [sp, #4]
 8022568:	9b01      	ldr	r3, [sp, #4]
 802256a:	4298      	cmp	r0, r3
 802256c:	d24f      	bcs.n	802260e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802256e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022572:	2a00      	cmp	r2, #0
 8022574:	d048      	beq.n	8022608 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022576:	fb0a f202 	mul.w	r2, sl, r2
 802257a:	1c53      	adds	r3, r2, #1
 802257c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022580:	121b      	asrs	r3, r3, #8
 8022582:	d041      	beq.n	8022608 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022584:	8802      	ldrh	r2, [r0, #0]
 8022586:	b29e      	uxth	r6, r3
 8022588:	f8b4 c000 	ldrh.w	ip, [r4]
 802258c:	43db      	mvns	r3, r3
 802258e:	1215      	asrs	r5, r2, #8
 8022590:	b2db      	uxtb	r3, r3
 8022592:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022596:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802259a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802259e:	fb15 f503 	smulbb	r5, r5, r3
 80225a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80225a6:	00d2      	lsls	r2, r2, #3
 80225a8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80225ac:	fb07 5706 	mla	r7, r7, r6, r5
 80225b0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80225b4:	b2d2      	uxtb	r2, r2
 80225b6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80225ba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80225be:	fb1e fe03 	smulbb	lr, lr, r3
 80225c2:	b2bf      	uxth	r7, r7
 80225c4:	fb12 f203 	smulbb	r2, r2, r3
 80225c8:	fa5f fc8c 	uxtb.w	ip, ip
 80225cc:	fb05 e506 	mla	r5, r5, r6, lr
 80225d0:	f107 0e01 	add.w	lr, r7, #1
 80225d4:	fb0c 2c06 	mla	ip, ip, r6, r2
 80225d8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80225dc:	fa1f fc8c 	uxth.w	ip, ip
 80225e0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 80225e4:	b2ad      	uxth	r5, r5
 80225e6:	f10c 0701 	add.w	r7, ip, #1
 80225ea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80225ee:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80225f2:	ea47 070e 	orr.w	r7, r7, lr
 80225f6:	f105 0e01 	add.w	lr, r5, #1
 80225fa:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80225fe:	096d      	lsrs	r5, r5, #5
 8022600:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022604:	432f      	orrs	r7, r5
 8022606:	8007      	strh	r7, [r0, #0]
 8022608:	3002      	adds	r0, #2
 802260a:	3402      	adds	r4, #2
 802260c:	e7ac      	b.n	8022568 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 802260e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022612:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022616:	eba3 0308 	sub.w	r3, r3, r8
 802261a:	eba6 0608 	sub.w	r6, r6, r8
 802261e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022622:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022626:	440e      	add	r6, r1
 8022628:	e797      	b.n	802255a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 802262a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802262e:	42a8      	cmp	r0, r5
 8022630:	d262      	bcs.n	80226f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022632:	9b00      	ldr	r3, [sp, #0]
 8022634:	4631      	mov	r1, r6
 8022636:	eb00 0b03 	add.w	fp, r0, r3
 802263a:	4558      	cmp	r0, fp
 802263c:	d24e      	bcs.n	80226dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 802263e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022642:	b12b      	cbz	r3, 8022650 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022644:	2bff      	cmp	r3, #255	; 0xff
 8022646:	f8b4 e000 	ldrh.w	lr, [r4]
 802264a:	d104      	bne.n	8022656 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 802264c:	f8a0 e000 	strh.w	lr, [r0]
 8022650:	3002      	adds	r0, #2
 8022652:	3402      	adds	r4, #2
 8022654:	e7f1      	b.n	802263a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022656:	8802      	ldrh	r2, [r0, #0]
 8022658:	b29f      	uxth	r7, r3
 802265a:	43db      	mvns	r3, r3
 802265c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022660:	1216      	asrs	r6, r2, #8
 8022662:	b2db      	uxtb	r3, r3
 8022664:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022668:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802266c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022670:	00d2      	lsls	r2, r2, #3
 8022672:	fb16 f603 	smulbb	r6, r6, r3
 8022676:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802267a:	b2d2      	uxtb	r2, r2
 802267c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022680:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022684:	fb1a fa03 	smulbb	sl, sl, r3
 8022688:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802268c:	fa1f fc8c 	uxth.w	ip, ip
 8022690:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022694:	fb12 f303 	smulbb	r3, r2, r3
 8022698:	fa5f fe8e 	uxtb.w	lr, lr
 802269c:	fb06 a607 	mla	r6, r6, r7, sl
 80226a0:	f10c 0201 	add.w	r2, ip, #1
 80226a4:	fb0e 3307 	mla	r3, lr, r7, r3
 80226a8:	b2b6      	uxth	r6, r6
 80226aa:	b29b      	uxth	r3, r3
 80226ac:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80226b0:	f106 0a01 	add.w	sl, r6, #1
 80226b4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 80226b8:	f103 0c01 	add.w	ip, r3, #1
 80226bc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 80226c0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80226c4:	0976      	lsrs	r6, r6, #5
 80226c6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80226ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80226ce:	ea4c 0c02 	orr.w	ip, ip, r2
 80226d2:	ea4c 0c06 	orr.w	ip, ip, r6
 80226d6:	f8a0 c000 	strh.w	ip, [r0]
 80226da:	e7b9      	b.n	8022650 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80226dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80226e0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80226e4:	eba3 0308 	sub.w	r3, r3, r8
 80226e8:	eba6 0608 	sub.w	r6, r6, r8
 80226ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80226f0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80226f4:	440e      	add	r6, r1
 80226f6:	e79a      	b.n	802262e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80226f8:	4b03      	ldr	r3, [pc, #12]	; (8022708 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80226fa:	6818      	ldr	r0, [r3, #0]
 80226fc:	6803      	ldr	r3, [r0, #0]
 80226fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022700:	4798      	blx	r3
 8022702:	b007      	add	sp, #28
 8022704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022708:	2400b8c4 	.word	0x2400b8c4
 802270c:	2400b8be 	.word	0x2400b8be

08022710 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022714:	b089      	sub	sp, #36	; 0x24
 8022716:	4682      	mov	sl, r0
 8022718:	460f      	mov	r7, r1
 802271a:	4691      	mov	r9, r2
 802271c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8022720:	4698      	mov	r8, r3
 8022722:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022724:	2e00      	cmp	r6, #0
 8022726:	d03d      	beq.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022728:	4608      	mov	r0, r1
 802272a:	f7fc f861 	bl	801e7f0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802272e:	4605      	mov	r5, r0
 8022730:	4638      	mov	r0, r7
 8022732:	f7fc f897 	bl	801e864 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022736:	f8ad 000e 	strh.w	r0, [sp, #14]
 802273a:	4638      	mov	r0, r7
 802273c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022740:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022744:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022748:	f7fc f95a 	bl	801ea00 <_ZNK8touchgfx6Bitmap7getDataEv>
 802274c:	4605      	mov	r5, r0
 802274e:	4638      	mov	r0, r7
 8022750:	f7fc f988 	bl	801ea64 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022754:	4681      	mov	r9, r0
 8022756:	4638      	mov	r0, r7
 8022758:	f7fc f9dc 	bl	801eb14 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802275c:	280b      	cmp	r0, #11
 802275e:	f200 816f 	bhi.w	8022a40 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8022762:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022766:	00c3      	.short	0x00c3
 8022768:	000c00b4 	.word	0x000c00b4
 802276c:	016d016d 	.word	0x016d016d
 8022770:	016d016d 	.word	0x016d016d
 8022774:	016d016d 	.word	0x016d016d
 8022778:	016d016d 	.word	0x016d016d
 802277c:	00bb      	.short	0x00bb
 802277e:	4bb3      	ldr	r3, [pc, #716]	; (8022a4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8022780:	6818      	ldr	r0, [r3, #0]
 8022782:	6803      	ldr	r3, [r0, #0]
 8022784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022786:	4798      	blx	r3
 8022788:	2eff      	cmp	r6, #255	; 0xff
 802278a:	d121      	bne.n	80227d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802278c:	0683      	lsls	r3, r0, #26
 802278e:	d41f      	bmi.n	80227d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022790:	4638      	mov	r0, r7
 8022792:	f7fc f8fb 	bl	801e98c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022796:	b940      	cbnz	r0, 80227aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8022798:	4623      	mov	r3, r4
 802279a:	aa02      	add	r2, sp, #8
 802279c:	4629      	mov	r1, r5
 802279e:	4650      	mov	r0, sl
 80227a0:	f7ff f9e4 	bl	8021b6c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80227a4:	b009      	add	sp, #36	; 0x24
 80227a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227aa:	f10d 0818 	add.w	r8, sp, #24
 80227ae:	4639      	mov	r1, r7
 80227b0:	af04      	add	r7, sp, #16
 80227b2:	4640      	mov	r0, r8
 80227b4:	f7fc f890 	bl	801e8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80227b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80227bc:	e887 0003 	stmia.w	r7, {r0, r1}
 80227c0:	4638      	mov	r0, r7
 80227c2:	4621      	mov	r1, r4
 80227c4:	f7f5 f9a6 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 80227c8:	4638      	mov	r0, r7
 80227ca:	f7f5 f9e6 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80227ce:	b130      	cbz	r0, 80227de <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 80227d0:	4633      	mov	r3, r6
 80227d2:	4622      	mov	r2, r4
 80227d4:	a902      	add	r1, sp, #8
 80227d6:	4628      	mov	r0, r5
 80227d8:	f7ff f8e2 	bl	80219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80227dc:	e7e2      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80227de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80227e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80227e6:	4293      	cmp	r3, r2
 80227e8:	dd12      	ble.n	8022810 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 80227ea:	1a9b      	subs	r3, r3, r2
 80227ec:	f9b4 0000 	ldrsh.w	r0, [r4]
 80227f0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80227f4:	f8ad 0018 	strh.w	r0, [sp, #24]
 80227f8:	4628      	mov	r0, r5
 80227fa:	f8ad 201a 	strh.w	r2, [sp, #26]
 80227fe:	4642      	mov	r2, r8
 8022800:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022804:	a902      	add	r1, sp, #8
 8022806:	f8ad 301e 	strh.w	r3, [sp, #30]
 802280a:	4633      	mov	r3, r6
 802280c:	f7ff f8c8 	bl	80219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022810:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022814:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022818:	4293      	cmp	r3, r2
 802281a:	dd12      	ble.n	8022842 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 802281c:	1a9b      	subs	r3, r3, r2
 802281e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022822:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022826:	f8ad 2018 	strh.w	r2, [sp, #24]
 802282a:	4642      	mov	r2, r8
 802282c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022830:	4628      	mov	r0, r5
 8022832:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022836:	23ff      	movs	r3, #255	; 0xff
 8022838:	f8ad 101e 	strh.w	r1, [sp, #30]
 802283c:	a902      	add	r1, sp, #8
 802283e:	f7ff f8af 	bl	80219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022842:	463b      	mov	r3, r7
 8022844:	aa02      	add	r2, sp, #8
 8022846:	4629      	mov	r1, r5
 8022848:	4650      	mov	r0, sl
 802284a:	f7ff f98f 	bl	8021b6c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802284e:	88a2      	ldrh	r2, [r4, #4]
 8022850:	8823      	ldrh	r3, [r4, #0]
 8022852:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022856:	4413      	add	r3, r2
 8022858:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802285c:	440a      	add	r2, r1
 802285e:	b29b      	uxth	r3, r3
 8022860:	b292      	uxth	r2, r2
 8022862:	b218      	sxth	r0, r3
 8022864:	b211      	sxth	r1, r2
 8022866:	4288      	cmp	r0, r1
 8022868:	dd12      	ble.n	8022890 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 802286a:	1a9b      	subs	r3, r3, r2
 802286c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022870:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022874:	4642      	mov	r2, r8
 8022876:	f8ad 1018 	strh.w	r1, [sp, #24]
 802287a:	a902      	add	r1, sp, #8
 802287c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022880:	23ff      	movs	r3, #255	; 0xff
 8022882:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022886:	4628      	mov	r0, r5
 8022888:	f8ad 601a 	strh.w	r6, [sp, #26]
 802288c:	f7ff f888 	bl	80219a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022890:	88e2      	ldrh	r2, [r4, #6]
 8022892:	8863      	ldrh	r3, [r4, #2]
 8022894:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022898:	4413      	add	r3, r2
 802289a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802289e:	440a      	add	r2, r1
 80228a0:	b29b      	uxth	r3, r3
 80228a2:	b292      	uxth	r2, r2
 80228a4:	b218      	sxth	r0, r3
 80228a6:	b211      	sxth	r1, r2
 80228a8:	4288      	cmp	r0, r1
 80228aa:	f77f af7b 	ble.w	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80228ae:	1a9b      	subs	r3, r3, r2
 80228b0:	f9b4 6000 	ldrsh.w	r6, [r4]
 80228b4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80228b8:	4642      	mov	r2, r8
 80228ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80228be:	23ff      	movs	r3, #255	; 0xff
 80228c0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80228c4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80228c8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80228cc:	e782      	b.n	80227d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 80228ce:	4633      	mov	r3, r6
 80228d0:	4622      	mov	r2, r4
 80228d2:	a902      	add	r1, sp, #8
 80228d4:	4628      	mov	r0, r5
 80228d6:	f7ff f9b9 	bl	8021c4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80228da:	e763      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80228dc:	9600      	str	r6, [sp, #0]
 80228de:	4623      	mov	r3, r4
 80228e0:	aa02      	add	r2, sp, #8
 80228e2:	4649      	mov	r1, r9
 80228e4:	4628      	mov	r0, r5
 80228e6:	f7ff fdd5 	bl	8022494 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80228ea:	e75b      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80228ec:	4638      	mov	r0, r7
 80228ee:	f7fc f84d 	bl	801e98c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80228f2:	b950      	cbnz	r0, 802290a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 80228f4:	f8da 3000 	ldr.w	r3, [sl]
 80228f8:	aa02      	add	r2, sp, #8
 80228fa:	4629      	mov	r1, r5
 80228fc:	e9cd 6000 	strd	r6, r0, [sp]
 8022900:	4650      	mov	r0, sl
 8022902:	68de      	ldr	r6, [r3, #12]
 8022904:	4623      	mov	r3, r4
 8022906:	47b0      	blx	r6
 8022908:	e74c      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802290a:	f10d 0818 	add.w	r8, sp, #24
 802290e:	4639      	mov	r1, r7
 8022910:	af04      	add	r7, sp, #16
 8022912:	4640      	mov	r0, r8
 8022914:	f7fb ffe0 	bl	801e8d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022918:	e898 0003 	ldmia.w	r8, {r0, r1}
 802291c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022920:	4638      	mov	r0, r7
 8022922:	4621      	mov	r1, r4
 8022924:	f7f5 f8f6 	bl	8017b14 <_ZN8touchgfx4RectaNERKS0_>
 8022928:	4638      	mov	r0, r7
 802292a:	f7f5 f936 	bl	8017b9a <_ZNK8touchgfx4Rect7isEmptyEv>
 802292e:	b138      	cbz	r0, 8022940 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022930:	4623      	mov	r3, r4
 8022932:	9600      	str	r6, [sp, #0]
 8022934:	aa02      	add	r2, sp, #8
 8022936:	4649      	mov	r1, r9
 8022938:	4628      	mov	r0, r5
 802293a:	f7ff fdc3 	bl	80224c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802293e:	e731      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022940:	f8da 3000 	ldr.w	r3, [sl]
 8022944:	aa02      	add	r2, sp, #8
 8022946:	4629      	mov	r1, r5
 8022948:	e9cd 6000 	strd	r6, r0, [sp]
 802294c:	4650      	mov	r0, sl
 802294e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022952:	463b      	mov	r3, r7
 8022954:	47d8      	blx	fp
 8022956:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802295a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802295e:	4293      	cmp	r3, r2
 8022960:	dd13      	ble.n	802298a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8022962:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022966:	1a9b      	subs	r3, r3, r2
 8022968:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802296c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022970:	4628      	mov	r0, r5
 8022972:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022976:	aa02      	add	r2, sp, #8
 8022978:	f8ad 101c 	strh.w	r1, [sp, #28]
 802297c:	4649      	mov	r1, r9
 802297e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022982:	4643      	mov	r3, r8
 8022984:	9600      	str	r6, [sp, #0]
 8022986:	f7ff fd9d 	bl	80224c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802298a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802298e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022992:	4293      	cmp	r3, r2
 8022994:	dd13      	ble.n	80229be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8022996:	1a9b      	subs	r3, r3, r2
 8022998:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802299c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80229a0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80229a4:	aa02      	add	r2, sp, #8
 80229a6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80229aa:	4628      	mov	r0, r5
 80229ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80229b0:	4643      	mov	r3, r8
 80229b2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80229b6:	4649      	mov	r1, r9
 80229b8:	9600      	str	r6, [sp, #0]
 80229ba:	f7ff fd83 	bl	80224c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80229be:	88a2      	ldrh	r2, [r4, #4]
 80229c0:	8823      	ldrh	r3, [r4, #0]
 80229c2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80229c6:	4413      	add	r3, r2
 80229c8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80229cc:	440a      	add	r2, r1
 80229ce:	b29b      	uxth	r3, r3
 80229d0:	b292      	uxth	r2, r2
 80229d2:	b218      	sxth	r0, r3
 80229d4:	b211      	sxth	r1, r2
 80229d6:	4288      	cmp	r0, r1
 80229d8:	dd13      	ble.n	8022a02 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 80229da:	1a9b      	subs	r3, r3, r2
 80229dc:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80229e0:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80229e4:	aa02      	add	r2, sp, #8
 80229e6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80229ea:	4649      	mov	r1, r9
 80229ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80229f0:	4643      	mov	r3, r8
 80229f2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80229f6:	4628      	mov	r0, r5
 80229f8:	9600      	str	r6, [sp, #0]
 80229fa:	f8ad 701a 	strh.w	r7, [sp, #26]
 80229fe:	f7ff fd61 	bl	80224c4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022a02:	88e2      	ldrh	r2, [r4, #6]
 8022a04:	8863      	ldrh	r3, [r4, #2]
 8022a06:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022a0a:	4413      	add	r3, r2
 8022a0c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022a10:	440a      	add	r2, r1
 8022a12:	b29b      	uxth	r3, r3
 8022a14:	b292      	uxth	r2, r2
 8022a16:	b218      	sxth	r0, r3
 8022a18:	b211      	sxth	r1, r2
 8022a1a:	4288      	cmp	r0, r1
 8022a1c:	f77f aec2 	ble.w	80227a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022a20:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022a24:	1a9b      	subs	r3, r3, r2
 8022a26:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022a2a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022a2e:	4643      	mov	r3, r8
 8022a30:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022a34:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022a38:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022a3c:	9600      	str	r6, [sp, #0]
 8022a3e:	e779      	b.n	8022934 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8022a40:	4b03      	ldr	r3, [pc, #12]	; (8022a50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8022a42:	21b4      	movs	r1, #180	; 0xb4
 8022a44:	4a03      	ldr	r2, [pc, #12]	; (8022a54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8022a46:	4804      	ldr	r0, [pc, #16]	; (8022a58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8022a48:	f007 ff44 	bl	802a8d4 <__assert_func>
 8022a4c:	2400b8c4 	.word	0x2400b8c4
 8022a50:	0802f8d3 	.word	0x0802f8d3
 8022a54:	0802ffdb 	.word	0x0802ffdb
 8022a58:	0802fa09 	.word	0x0802fa09

08022a5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8022a5c:	b508      	push	{r3, lr}
 8022a5e:	b180      	cbz	r0, 8022a82 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022a60:	2902      	cmp	r1, #2
 8022a62:	d014      	beq.n	8022a8e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8022a64:	2903      	cmp	r1, #3
 8022a66:	d01d      	beq.n	8022aa4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022a68:	2901      	cmp	r1, #1
 8022a6a:	d101      	bne.n	8022a70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022a6c:	2001      	movs	r0, #1
 8022a6e:	bd08      	pop	{r3, pc}
 8022a70:	4b0e      	ldr	r3, [pc, #56]	; (8022aac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022a72:	8818      	ldrh	r0, [r3, #0]
 8022a74:	b990      	cbnz	r0, 8022a9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022a76:	4b0e      	ldr	r3, [pc, #56]	; (8022ab0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022a78:	2150      	movs	r1, #80	; 0x50
 8022a7a:	4a0e      	ldr	r2, [pc, #56]	; (8022ab4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8022a7c:	480e      	ldr	r0, [pc, #56]	; (8022ab8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8022a7e:	f007 ff29 	bl	802a8d4 <__assert_func>
 8022a82:	2902      	cmp	r1, #2
 8022a84:	d00e      	beq.n	8022aa4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022a86:	2903      	cmp	r1, #3
 8022a88:	d0f2      	beq.n	8022a70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8022a8a:	2901      	cmp	r1, #1
 8022a8c:	d1ee      	bne.n	8022a6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8022a8e:	4b07      	ldr	r3, [pc, #28]	; (8022aac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022a90:	8818      	ldrh	r0, [r3, #0]
 8022a92:	2800      	cmp	r0, #0
 8022a94:	d0ef      	beq.n	8022a76 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8022a96:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022a9a:	e7e8      	b.n	8022a6e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022a9c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022aa0:	4240      	negs	r0, r0
 8022aa2:	e7e4      	b.n	8022a6e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8022aa8:	e7e1      	b.n	8022a6e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8022aaa:	bf00      	nop
 8022aac:	2400b8be 	.word	0x2400b8be
 8022ab0:	0802fb5f 	.word	0x0802fb5f
 8022ab4:	08030158 	.word	0x08030158
 8022ab8:	0802fba1 	.word	0x0802fba1

08022abc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8022abc:	b508      	push	{r3, lr}
 8022abe:	b180      	cbz	r0, 8022ae2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022ac0:	2902      	cmp	r1, #2
 8022ac2:	d014      	beq.n	8022aee <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8022ac4:	2903      	cmp	r1, #3
 8022ac6:	d018      	beq.n	8022afa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022ac8:	2901      	cmp	r1, #1
 8022aca:	d001      	beq.n	8022ad0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022acc:	2001      	movs	r0, #1
 8022ace:	e013      	b.n	8022af8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022ad0:	4b0e      	ldr	r3, [pc, #56]	; (8022b0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022ad2:	8818      	ldrh	r0, [r3, #0]
 8022ad4:	b970      	cbnz	r0, 8022af4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8022ad6:	4b0e      	ldr	r3, [pc, #56]	; (8022b10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8022ad8:	2150      	movs	r1, #80	; 0x50
 8022ada:	4a0e      	ldr	r2, [pc, #56]	; (8022b14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8022adc:	480e      	ldr	r0, [pc, #56]	; (8022b18 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8022ade:	f007 fef9 	bl	802a8d4 <__assert_func>
 8022ae2:	2902      	cmp	r1, #2
 8022ae4:	d009      	beq.n	8022afa <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022ae6:	2903      	cmp	r1, #3
 8022ae8:	d0f0      	beq.n	8022acc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8022aea:	2901      	cmp	r1, #1
 8022aec:	d1f0      	bne.n	8022ad0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8022aee:	f04f 30ff 	mov.w	r0, #4294967295
 8022af2:	e001      	b.n	8022af8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022af4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022af8:	bd08      	pop	{r3, pc}
 8022afa:	4b04      	ldr	r3, [pc, #16]	; (8022b0c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022afc:	8818      	ldrh	r0, [r3, #0]
 8022afe:	2800      	cmp	r0, #0
 8022b00:	d0e9      	beq.n	8022ad6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022b02:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022b06:	4240      	negs	r0, r0
 8022b08:	e7f6      	b.n	8022af8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022b0a:	bf00      	nop
 8022b0c:	2400b8be 	.word	0x2400b8be
 8022b10:	0802fb5f 	.word	0x0802fb5f
 8022b14:	08030158 	.word	0x08030158
 8022b18:	0802fba1 	.word	0x0802fba1

08022b1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8022b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b20:	b099      	sub	sp, #100	; 0x64
 8022b22:	910b      	str	r1, [sp, #44]	; 0x2c
 8022b24:	a914      	add	r1, sp, #80	; 0x50
 8022b26:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8022b2a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8022b2e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8022b32:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8022b36:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8022b3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8022b3e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8022b42:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8022b46:	930a      	str	r3, [sp, #40]	; 0x28
 8022b48:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022b4c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022b50:	9311      	str	r3, [sp, #68]	; 0x44
 8022b52:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8022b56:	7988      	ldrb	r0, [r1, #6]
 8022b58:	930c      	str	r3, [sp, #48]	; 0x30
 8022b5a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8022b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022b62:	4303      	orrs	r3, r0
 8022b64:	9309      	str	r3, [sp, #36]	; 0x24
 8022b66:	f000 81a1 	beq.w	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022b6a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022b6e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8022b72:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022b76:	ea59 0903 	orrs.w	r9, r9, r3
 8022b7a:	f000 8197 	beq.w	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022b7e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022b82:	b29b      	uxth	r3, r3
 8022b84:	2e00      	cmp	r6, #0
 8022b86:	f000 813a 	beq.w	8022dfe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8022b8a:	1af6      	subs	r6, r6, r3
 8022b8c:	b2b6      	uxth	r6, r6
 8022b8e:	0433      	lsls	r3, r6, #16
 8022b90:	d502      	bpl.n	8022b98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022b92:	1bad      	subs	r5, r5, r6
 8022b94:	2600      	movs	r6, #0
 8022b96:	b22d      	sxth	r5, r5
 8022b98:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022b9c:	a814      	add	r0, sp, #80	; 0x50
 8022b9e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8022ba2:	428d      	cmp	r5, r1
 8022ba4:	b28b      	uxth	r3, r1
 8022ba6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8022baa:	bfbf      	itttt	lt
 8022bac:	18f6      	addlt	r6, r6, r3
 8022bae:	1b75      	sublt	r5, r6, r5
 8022bb0:	b2ae      	uxthlt	r6, r5
 8022bb2:	460d      	movlt	r5, r1
 8022bb4:	8891      	ldrh	r1, [r2, #4]
 8022bb6:	440b      	add	r3, r1
 8022bb8:	4629      	mov	r1, r5
 8022bba:	b21b      	sxth	r3, r3
 8022bbc:	9310      	str	r3, [sp, #64]	; 0x40
 8022bbe:	88d3      	ldrh	r3, [r2, #6]
 8022bc0:	8852      	ldrh	r2, [r2, #2]
 8022bc2:	4413      	add	r3, r2
 8022bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022bc6:	b21b      	sxth	r3, r3
 8022bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8022bca:	4bbd      	ldr	r3, [pc, #756]	; (8022ec0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022bcc:	f893 b000 	ldrb.w	fp, [r3]
 8022bd0:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022bd4:	f1dc 0300 	rsbs	r3, ip, #0
 8022bd8:	eb43 030c 	adc.w	r3, r3, ip
 8022bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8022bde:	4653      	mov	r3, sl
 8022be0:	f7f8 f9ce 	bl	801af80 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022be4:	4629      	mov	r1, r5
 8022be6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8022bea:	4653      	mov	r3, sl
 8022bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022bee:	a814      	add	r0, sp, #80	; 0x50
 8022bf0:	f7f8 f9de 	bl	801afb0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022bf4:	a918      	add	r1, sp, #96	; 0x60
 8022bf6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022bfa:	a817      	add	r0, sp, #92	; 0x5c
 8022bfc:	f7f8 fafa 	bl	801b1f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022c00:	f1ba 0f00 	cmp.w	sl, #0
 8022c04:	f040 80fe 	bne.w	8022e04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022c08:	f1bb 0f01 	cmp.w	fp, #1
 8022c0c:	f040 8102 	bne.w	8022e14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8022c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022c12:	b153      	cbz	r3, 8022c2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022c14:	2408      	movs	r4, #8
 8022c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c18:	fb94 f3f8 	sdiv	r3, r4, r8
 8022c1c:	1e5c      	subs	r4, r3, #1
 8022c1e:	4414      	add	r4, r2
 8022c20:	fb94 f4f3 	sdiv	r4, r4, r3
 8022c24:	fb14 f403 	smulbb	r4, r4, r3
 8022c28:	b2a4      	uxth	r4, r4
 8022c2a:	b906      	cbnz	r6, 8022c2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8022c2c:	b16f      	cbz	r7, 8022c4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8022c2e:	fb07 6304 	mla	r3, r7, r4, r6
 8022c32:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022c34:	463a      	mov	r2, r7
 8022c36:	fb08 f303 	mul.w	r3, r8, r3
 8022c3a:	f003 0707 	and.w	r7, r3, #7
 8022c3e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022c42:	9328      	str	r3, [sp, #160]	; 0xa0
 8022c44:	eba9 0302 	sub.w	r3, r9, r2
 8022c48:	930d      	str	r3, [sp, #52]	; 0x34
 8022c4a:	4651      	mov	r1, sl
 8022c4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022c4e:	f7ff ff05 	bl	8022a5c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022c52:	4651      	mov	r1, sl
 8022c54:	4681      	mov	r9, r0
 8022c56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022c58:	f7ff ff30 	bl	8022abc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022c60:	4683      	mov	fp, r0
 8022c62:	eba3 0a02 	sub.w	sl, r3, r2
 8022c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022c68:	459a      	cmp	sl, r3
 8022c6a:	bfa8      	it	ge
 8022c6c:	469a      	movge	sl, r3
 8022c6e:	f1ba 0f00 	cmp.w	sl, #0
 8022c72:	f340 811b 	ble.w	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022c76:	1bad      	subs	r5, r5, r6
 8022c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c7a:	1b5d      	subs	r5, r3, r5
 8022c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c7e:	429d      	cmp	r5, r3
 8022c80:	bfd4      	ite	le
 8022c82:	ebc6 0605 	rsble	r6, r6, r5
 8022c86:	ebc6 0603 	rsbgt	r6, r6, r3
 8022c8a:	2e00      	cmp	r6, #0
 8022c8c:	f340 810e 	ble.w	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022c90:	1ba4      	subs	r4, r4, r6
 8022c92:	fb08 f304 	mul.w	r3, r8, r4
 8022c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	f040 810b 	bne.w	8022eb6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8022ca0:	4b88      	ldr	r3, [pc, #544]	; (8022ec4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8022ca2:	6818      	ldr	r0, [r3, #0]
 8022ca4:	6803      	ldr	r3, [r0, #0]
 8022ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022ca8:	4798      	blx	r3
 8022caa:	2301      	movs	r3, #1
 8022cac:	4a86      	ldr	r2, [pc, #536]	; (8022ec8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8022cae:	fa03 f308 	lsl.w	r3, r3, r8
 8022cb2:	8811      	ldrh	r1, [r2, #0]
 8022cb4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022cb8:	3b01      	subs	r3, #1
 8022cba:	b2db      	uxtb	r3, r3
 8022cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8022cbe:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8022cc2:	fb01 2303 	mla	r3, r1, r3, r2
 8022cc6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022cca:	930a      	str	r3, [sp, #40]	; 0x28
 8022ccc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cce:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022cd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8022cd4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cd6:	0a19      	lsrs	r1, r3, #8
 8022cd8:	b2cb      	uxtb	r3, r1
 8022cda:	9312      	str	r3, [sp, #72]	; 0x48
 8022cdc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cde:	b2db      	uxtb	r3, r3
 8022ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8022ce2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022ce4:	095a      	lsrs	r2, r3, #5
 8022ce6:	4b79      	ldr	r3, [pc, #484]	; (8022ecc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8022ce8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022cec:	400b      	ands	r3, r1
 8022cee:	4313      	orrs	r3, r2
 8022cf0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022cf2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022cf6:	4313      	orrs	r3, r2
 8022cf8:	b29b      	uxth	r3, r3
 8022cfa:	9310      	str	r3, [sp, #64]	; 0x40
 8022cfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022cfe:	781a      	ldrb	r2, [r3, #0]
 8022d00:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022d04:	fb06 b919 	mls	r9, r6, r9, fp
 8022d08:	413a      	asrs	r2, r7
 8022d0a:	fb03 fb06 	mul.w	fp, r3, r6
 8022d0e:	930d      	str	r3, [sp, #52]	; 0x34
 8022d10:	b2d2      	uxtb	r2, r2
 8022d12:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022d16:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8022d1a:	f0c0 80ea 	bcc.w	8022ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8022d1e:	46b6      	mov	lr, r6
 8022d20:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022d24:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022d28:	f0c0 80d2 	bcc.w	8022ed0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8022d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d2e:	4013      	ands	r3, r2
 8022d30:	d055      	beq.n	8022dde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8022d32:	20ff      	movs	r0, #255	; 0xff
 8022d34:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d36:	fb90 f1f1 	sdiv	r1, r0, r1
 8022d3a:	434b      	muls	r3, r1
 8022d3c:	2bfe      	cmp	r3, #254	; 0xfe
 8022d3e:	dd03      	ble.n	8022d48 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8022d40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022d42:	4281      	cmp	r1, r0
 8022d44:	f000 80b9 	beq.w	8022eba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022d48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022d4a:	f8bc 4000 	ldrh.w	r4, [ip]
 8022d4e:	fb11 f303 	smulbb	r3, r1, r3
 8022d52:	1220      	asrs	r0, r4, #8
 8022d54:	b29b      	uxth	r3, r3
 8022d56:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022d5a:	1c59      	adds	r1, r3, #1
 8022d5c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022d60:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022d64:	10e1      	asrs	r1, r4, #3
 8022d66:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d6a:	00e4      	lsls	r4, r4, #3
 8022d6c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022d70:	b29d      	uxth	r5, r3
 8022d72:	43db      	mvns	r3, r3
 8022d74:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022d78:	b2db      	uxtb	r3, r3
 8022d7a:	b2e4      	uxtb	r4, r4
 8022d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8022d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022d80:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022d84:	fb13 f905 	smulbb	r9, r3, r5
 8022d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d8a:	fb00 9003 	mla	r0, r0, r3, r9
 8022d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d90:	fb13 f905 	smulbb	r9, r3, r5
 8022d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d96:	b280      	uxth	r0, r0
 8022d98:	fb01 9103 	mla	r1, r1, r3, r9
 8022d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d9e:	fb13 f505 	smulbb	r5, r3, r5
 8022da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022da4:	b289      	uxth	r1, r1
 8022da6:	fb04 5403 	mla	r4, r4, r3, r5
 8022daa:	1c43      	adds	r3, r0, #1
 8022dac:	b2a4      	uxth	r4, r4
 8022dae:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022db2:	f104 0901 	add.w	r9, r4, #1
 8022db6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022dba:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022dbe:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022dc2:	ea49 0000 	orr.w	r0, r9, r0
 8022dc6:	f101 0901 	add.w	r9, r1, #1
 8022dca:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022dce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022dd2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022dd6:	ea40 0009 	orr.w	r0, r0, r9
 8022dda:	f8ac 0000 	strh.w	r0, [ip]
 8022dde:	4447      	add	r7, r8
 8022de0:	b2bf      	uxth	r7, r7
 8022de2:	2f07      	cmp	r7, #7
 8022de4:	bf89      	itett	hi
 8022de6:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8022de8:	fa42 f208 	asrls.w	r2, r2, r8
 8022dec:	2700      	movhi	r7, #0
 8022dee:	785a      	ldrbhi	r2, [r3, #1]
 8022df0:	bf8a      	itet	hi
 8022df2:	3301      	addhi	r3, #1
 8022df4:	b2d2      	uxtbls	r2, r2
 8022df6:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8022df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022dfa:	449c      	add	ip, r3
 8022dfc:	e792      	b.n	8022d24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8022dfe:	441d      	add	r5, r3
 8022e00:	b22d      	sxth	r5, r5
 8022e02:	e6c9      	b.n	8022b98 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022e04:	f1ba 0f01 	cmp.w	sl, #1
 8022e08:	f47f af02 	bne.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e0c:	f1bb 0f01 	cmp.w	fp, #1
 8022e10:	f47f aefe 	bne.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e14:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8022ec4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8022e18:	f8db 0000 	ldr.w	r0, [fp]
 8022e1c:	6803      	ldr	r3, [r0, #0]
 8022e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e20:	4798      	blx	r3
 8022e22:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022e26:	465a      	mov	r2, fp
 8022e28:	d006      	beq.n	8022e38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022e2a:	f1b8 0f04 	cmp.w	r8, #4
 8022e2e:	d140      	bne.n	8022eb2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e32:	3300      	adds	r3, #0
 8022e34:	bf18      	it	ne
 8022e36:	2301      	movne	r3, #1
 8022e38:	0580      	lsls	r0, r0, #22
 8022e3a:	d563      	bpl.n	8022f04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022e3c:	f1b8 0f08 	cmp.w	r8, #8
 8022e40:	d160      	bne.n	8022f04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022e42:	2b00      	cmp	r3, #0
 8022e44:	bf0c      	ite	eq
 8022e46:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8022e4a:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022e4e:	2e00      	cmp	r6, #0
 8022e50:	f47f aede 	bne.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e54:	2f00      	cmp	r7, #0
 8022e56:	f47f aedb 	bne.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022e5e:	18eb      	adds	r3, r5, r3
 8022e60:	4283      	cmp	r3, r0
 8022e62:	f73f aed5 	bgt.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e68:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022e6a:	444b      	add	r3, r9
 8022e6c:	4283      	cmp	r3, r0
 8022e6e:	f73f aecf 	bgt.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022e72:	f1b8 0f08 	cmp.w	r8, #8
 8022e76:	6810      	ldr	r0, [r2, #0]
 8022e78:	f04f 0600 	mov.w	r6, #0
 8022e7c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8022e80:	bf18      	it	ne
 8022e82:	3401      	addne	r4, #1
 8022e84:	6805      	ldr	r5, [r0, #0]
 8022e86:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022e8a:	bf18      	it	ne
 8022e8c:	f024 0401 	bicne.w	r4, r4, #1
 8022e90:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022e94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022e96:	bf18      	it	ne
 8022e98:	b2a4      	uxthne	r4, r4
 8022e9a:	9104      	str	r1, [sp, #16]
 8022e9c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022e9e:	e9cd 4900 	strd	r4, r9, [sp]
 8022ea2:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8022ea6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022ea8:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8022eaa:	47a0      	blx	r4
 8022eac:	b019      	add	sp, #100	; 0x64
 8022eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	e7c0      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 8022eb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022eb8:	e6f7      	b.n	8022caa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8022eba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022ebc:	e78d      	b.n	8022dda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8022ebe:	bf00      	nop
 8022ec0:	2400b8bc 	.word	0x2400b8bc
 8022ec4:	2400b8c4 	.word	0x2400b8c4
 8022ec8:	2400b8be 	.word	0x2400b8be
 8022ecc:	00fff800 	.word	0x00fff800
 8022ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ed2:	b153      	cbz	r3, 8022eea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8022ed4:	441f      	add	r7, r3
 8022ed6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ed8:	b2bf      	uxth	r7, r7
 8022eda:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8022ede:	f007 0707 	and.w	r7, r7, #7
 8022ee2:	781a      	ldrb	r2, [r3, #0]
 8022ee4:	9328      	str	r3, [sp, #160]	; 0xa0
 8022ee6:	413a      	asrs	r2, r7
 8022ee8:	b2d2      	uxtb	r2, r2
 8022eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022eec:	445b      	add	r3, fp
 8022eee:	930a      	str	r3, [sp, #40]	; 0x28
 8022ef0:	e711      	b.n	8022d16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8022ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	d1d9      	bne.n	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022ef8:	4b05      	ldr	r3, [pc, #20]	; (8022f10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 8022efa:	6818      	ldr	r0, [r3, #0]
 8022efc:	6803      	ldr	r3, [r0, #0]
 8022efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f00:	4798      	blx	r3
 8022f02:	e7d3      	b.n	8022eac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	f43f ae83 	beq.w	8022c10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022f0e:	e79e      	b.n	8022e4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022f10:	2400b8c4 	.word	0x2400b8c4

08022f14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022f14:	b538      	push	{r3, r4, r5, lr}
 8022f16:	4c15      	ldr	r4, [pc, #84]	; (8022f6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022f18:	4605      	mov	r5, r0
 8022f1a:	7823      	ldrb	r3, [r4, #0]
 8022f1c:	f3bf 8f5b 	dmb	ish
 8022f20:	07da      	lsls	r2, r3, #31
 8022f22:	d40b      	bmi.n	8022f3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022f24:	4620      	mov	r0, r4
 8022f26:	f007 fca8 	bl	802a87a <__cxa_guard_acquire>
 8022f2a:	b138      	cbz	r0, 8022f3c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022f2c:	4620      	mov	r0, r4
 8022f2e:	f007 fcb0 	bl	802a892 <__cxa_guard_release>
 8022f32:	4a0f      	ldr	r2, [pc, #60]	; (8022f70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022f34:	490f      	ldr	r1, [pc, #60]	; (8022f74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022f36:	4810      	ldr	r0, [pc, #64]	; (8022f78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022f38:	f007 fc98 	bl	802a86c <__aeabi_atexit>
 8022f3c:	4c0f      	ldr	r4, [pc, #60]	; (8022f7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022f3e:	7823      	ldrb	r3, [r4, #0]
 8022f40:	f3bf 8f5b 	dmb	ish
 8022f44:	07db      	lsls	r3, r3, #31
 8022f46:	d40b      	bmi.n	8022f60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022f48:	4620      	mov	r0, r4
 8022f4a:	f007 fc96 	bl	802a87a <__cxa_guard_acquire>
 8022f4e:	b138      	cbz	r0, 8022f60 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022f50:	4620      	mov	r0, r4
 8022f52:	f007 fc9e 	bl	802a892 <__cxa_guard_release>
 8022f56:	4a06      	ldr	r2, [pc, #24]	; (8022f70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022f58:	4909      	ldr	r1, [pc, #36]	; (8022f80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022f5a:	480a      	ldr	r0, [pc, #40]	; (8022f84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022f5c:	f007 fc86 	bl	802a86c <__aeabi_atexit>
 8022f60:	4b05      	ldr	r3, [pc, #20]	; (8022f78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022f62:	612b      	str	r3, [r5, #16]
 8022f64:	4b07      	ldr	r3, [pc, #28]	; (8022f84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022f66:	616b      	str	r3, [r5, #20]
 8022f68:	bd38      	pop	{r3, r4, r5, pc}
 8022f6a:	bf00      	nop
 8022f6c:	2400b990 	.word	0x2400b990
 8022f70:	24000000 	.word	0x24000000
 8022f74:	08021113 	.word	0x08021113
 8022f78:	24000098 	.word	0x24000098
 8022f7c:	2400b994 	.word	0x2400b994
 8022f80:	08021111 	.word	0x08021111
 8022f84:	2400009c 	.word	0x2400009c

08022f88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022f88:	b538      	push	{r3, r4, r5, lr}
 8022f8a:	4c15      	ldr	r4, [pc, #84]	; (8022fe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022f8c:	4605      	mov	r5, r0
 8022f8e:	7823      	ldrb	r3, [r4, #0]
 8022f90:	f3bf 8f5b 	dmb	ish
 8022f94:	07da      	lsls	r2, r3, #31
 8022f96:	d40b      	bmi.n	8022fb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022f98:	4620      	mov	r0, r4
 8022f9a:	f007 fc6e 	bl	802a87a <__cxa_guard_acquire>
 8022f9e:	b138      	cbz	r0, 8022fb0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022fa0:	4620      	mov	r0, r4
 8022fa2:	f007 fc76 	bl	802a892 <__cxa_guard_release>
 8022fa6:	4a0f      	ldr	r2, [pc, #60]	; (8022fe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022fa8:	490f      	ldr	r1, [pc, #60]	; (8022fe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022faa:	4810      	ldr	r0, [pc, #64]	; (8022fec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022fac:	f007 fc5e 	bl	802a86c <__aeabi_atexit>
 8022fb0:	4c0f      	ldr	r4, [pc, #60]	; (8022ff0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8022fb2:	7823      	ldrb	r3, [r4, #0]
 8022fb4:	f3bf 8f5b 	dmb	ish
 8022fb8:	07db      	lsls	r3, r3, #31
 8022fba:	d40b      	bmi.n	8022fd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022fbc:	4620      	mov	r0, r4
 8022fbe:	f007 fc5c 	bl	802a87a <__cxa_guard_acquire>
 8022fc2:	b138      	cbz	r0, 8022fd4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022fc4:	4620      	mov	r0, r4
 8022fc6:	f007 fc64 	bl	802a892 <__cxa_guard_release>
 8022fca:	4a06      	ldr	r2, [pc, #24]	; (8022fe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022fcc:	4909      	ldr	r1, [pc, #36]	; (8022ff4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022fce:	480a      	ldr	r0, [pc, #40]	; (8022ff8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022fd0:	f007 fc4c 	bl	802a86c <__aeabi_atexit>
 8022fd4:	4b05      	ldr	r3, [pc, #20]	; (8022fec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022fd6:	60ab      	str	r3, [r5, #8]
 8022fd8:	4b07      	ldr	r3, [pc, #28]	; (8022ff8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022fda:	60eb      	str	r3, [r5, #12]
 8022fdc:	bd38      	pop	{r3, r4, r5, pc}
 8022fde:	bf00      	nop
 8022fe0:	2400b968 	.word	0x2400b968
 8022fe4:	24000000 	.word	0x24000000
 8022fe8:	08021117 	.word	0x08021117
 8022fec:	24000070 	.word	0x24000070
 8022ff0:	2400b96c 	.word	0x2400b96c
 8022ff4:	08021115 	.word	0x08021115
 8022ff8:	24000074 	.word	0x24000074

08022ffc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8022ffc:	b510      	push	{r4, lr}
 8022ffe:	4604      	mov	r4, r0
 8023000:	f7ff ff88 	bl	8022f14 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023004:	4620      	mov	r0, r4
 8023006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802300a:	f7ff bfbd 	b.w	8022f88 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023010:	b538      	push	{r3, r4, r5, lr}
 8023012:	4c15      	ldr	r4, [pc, #84]	; (8023068 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023014:	4605      	mov	r5, r0
 8023016:	7823      	ldrb	r3, [r4, #0]
 8023018:	f3bf 8f5b 	dmb	ish
 802301c:	07da      	lsls	r2, r3, #31
 802301e:	d40b      	bmi.n	8023038 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023020:	4620      	mov	r0, r4
 8023022:	f007 fc2a 	bl	802a87a <__cxa_guard_acquire>
 8023026:	b138      	cbz	r0, 8023038 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023028:	4620      	mov	r0, r4
 802302a:	f007 fc32 	bl	802a892 <__cxa_guard_release>
 802302e:	4a0f      	ldr	r2, [pc, #60]	; (802306c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023030:	490f      	ldr	r1, [pc, #60]	; (8023070 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023032:	4810      	ldr	r0, [pc, #64]	; (8023074 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023034:	f007 fc1a 	bl	802a86c <__aeabi_atexit>
 8023038:	4c0f      	ldr	r4, [pc, #60]	; (8023078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802303a:	7823      	ldrb	r3, [r4, #0]
 802303c:	f3bf 8f5b 	dmb	ish
 8023040:	07db      	lsls	r3, r3, #31
 8023042:	d40b      	bmi.n	802305c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023044:	4620      	mov	r0, r4
 8023046:	f007 fc18 	bl	802a87a <__cxa_guard_acquire>
 802304a:	b138      	cbz	r0, 802305c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802304c:	4620      	mov	r0, r4
 802304e:	f007 fc20 	bl	802a892 <__cxa_guard_release>
 8023052:	4a06      	ldr	r2, [pc, #24]	; (802306c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023054:	4909      	ldr	r1, [pc, #36]	; (802307c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023056:	480a      	ldr	r0, [pc, #40]	; (8023080 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023058:	f007 fc08 	bl	802a86c <__aeabi_atexit>
 802305c:	4b05      	ldr	r3, [pc, #20]	; (8023074 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802305e:	622b      	str	r3, [r5, #32]
 8023060:	4b07      	ldr	r3, [pc, #28]	; (8023080 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023062:	626b      	str	r3, [r5, #36]	; 0x24
 8023064:	bd38      	pop	{r3, r4, r5, pc}
 8023066:	bf00      	nop
 8023068:	2400b998 	.word	0x2400b998
 802306c:	24000000 	.word	0x24000000
 8023070:	0802110b 	.word	0x0802110b
 8023074:	240000a0 	.word	0x240000a0
 8023078:	2400b99c 	.word	0x2400b99c
 802307c:	08021109 	.word	0x08021109
 8023080:	240000a4 	.word	0x240000a4

08023084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023084:	b538      	push	{r3, r4, r5, lr}
 8023086:	4c15      	ldr	r4, [pc, #84]	; (80230dc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023088:	4605      	mov	r5, r0
 802308a:	7823      	ldrb	r3, [r4, #0]
 802308c:	f3bf 8f5b 	dmb	ish
 8023090:	07da      	lsls	r2, r3, #31
 8023092:	d40b      	bmi.n	80230ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023094:	4620      	mov	r0, r4
 8023096:	f007 fbf0 	bl	802a87a <__cxa_guard_acquire>
 802309a:	b138      	cbz	r0, 80230ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802309c:	4620      	mov	r0, r4
 802309e:	f007 fbf8 	bl	802a892 <__cxa_guard_release>
 80230a2:	4a0f      	ldr	r2, [pc, #60]	; (80230e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80230a4:	490f      	ldr	r1, [pc, #60]	; (80230e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80230a6:	4810      	ldr	r0, [pc, #64]	; (80230e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80230a8:	f007 fbe0 	bl	802a86c <__aeabi_atexit>
 80230ac:	4c0f      	ldr	r4, [pc, #60]	; (80230ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80230ae:	7823      	ldrb	r3, [r4, #0]
 80230b0:	f3bf 8f5b 	dmb	ish
 80230b4:	07db      	lsls	r3, r3, #31
 80230b6:	d40b      	bmi.n	80230d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80230b8:	4620      	mov	r0, r4
 80230ba:	f007 fbde 	bl	802a87a <__cxa_guard_acquire>
 80230be:	b138      	cbz	r0, 80230d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80230c0:	4620      	mov	r0, r4
 80230c2:	f007 fbe6 	bl	802a892 <__cxa_guard_release>
 80230c6:	4a06      	ldr	r2, [pc, #24]	; (80230e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80230c8:	4909      	ldr	r1, [pc, #36]	; (80230f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80230ca:	480a      	ldr	r0, [pc, #40]	; (80230f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80230cc:	f007 fbce 	bl	802a86c <__aeabi_atexit>
 80230d0:	4b05      	ldr	r3, [pc, #20]	; (80230e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80230d2:	61ab      	str	r3, [r5, #24]
 80230d4:	4b07      	ldr	r3, [pc, #28]	; (80230f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80230d6:	61eb      	str	r3, [r5, #28]
 80230d8:	bd38      	pop	{r3, r4, r5, pc}
 80230da:	bf00      	nop
 80230dc:	2400b970 	.word	0x2400b970
 80230e0:	24000000 	.word	0x24000000
 80230e4:	0802110f 	.word	0x0802110f
 80230e8:	24000078 	.word	0x24000078
 80230ec:	2400b974 	.word	0x2400b974
 80230f0:	0802110d 	.word	0x0802110d
 80230f4:	2400007c 	.word	0x2400007c

080230f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80230f8:	b510      	push	{r4, lr}
 80230fa:	4604      	mov	r4, r0
 80230fc:	f7ff ff88 	bl	8023010 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023100:	4620      	mov	r0, r4
 8023102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023106:	f7ff bfbd 	b.w	8023084 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802310c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802310c:	b538      	push	{r3, r4, r5, lr}
 802310e:	4c15      	ldr	r4, [pc, #84]	; (8023164 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023110:	4605      	mov	r5, r0
 8023112:	7823      	ldrb	r3, [r4, #0]
 8023114:	f3bf 8f5b 	dmb	ish
 8023118:	07da      	lsls	r2, r3, #31
 802311a:	d40b      	bmi.n	8023134 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802311c:	4620      	mov	r0, r4
 802311e:	f007 fbac 	bl	802a87a <__cxa_guard_acquire>
 8023122:	b138      	cbz	r0, 8023134 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023124:	4620      	mov	r0, r4
 8023126:	f007 fbb4 	bl	802a892 <__cxa_guard_release>
 802312a:	4a0f      	ldr	r2, [pc, #60]	; (8023168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802312c:	490f      	ldr	r1, [pc, #60]	; (802316c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802312e:	4810      	ldr	r0, [pc, #64]	; (8023170 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023130:	f007 fb9c 	bl	802a86c <__aeabi_atexit>
 8023134:	4c0f      	ldr	r4, [pc, #60]	; (8023174 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023136:	7823      	ldrb	r3, [r4, #0]
 8023138:	f3bf 8f5b 	dmb	ish
 802313c:	07db      	lsls	r3, r3, #31
 802313e:	d40b      	bmi.n	8023158 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023140:	4620      	mov	r0, r4
 8023142:	f007 fb9a 	bl	802a87a <__cxa_guard_acquire>
 8023146:	b138      	cbz	r0, 8023158 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023148:	4620      	mov	r0, r4
 802314a:	f007 fba2 	bl	802a892 <__cxa_guard_release>
 802314e:	4a06      	ldr	r2, [pc, #24]	; (8023168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023150:	4909      	ldr	r1, [pc, #36]	; (8023178 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023152:	480a      	ldr	r0, [pc, #40]	; (802317c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023154:	f007 fb8a 	bl	802a86c <__aeabi_atexit>
 8023158:	4b05      	ldr	r3, [pc, #20]	; (8023170 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802315a:	632b      	str	r3, [r5, #48]	; 0x30
 802315c:	4b07      	ldr	r3, [pc, #28]	; (802317c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802315e:	636b      	str	r3, [r5, #52]	; 0x34
 8023160:	bd38      	pop	{r3, r4, r5, pc}
 8023162:	bf00      	nop
 8023164:	2400b9a8 	.word	0x2400b9a8
 8023168:	24000000 	.word	0x24000000
 802316c:	08021103 	.word	0x08021103
 8023170:	240000b0 	.word	0x240000b0
 8023174:	2400b9ac 	.word	0x2400b9ac
 8023178:	08021101 	.word	0x08021101
 802317c:	240000b4 	.word	0x240000b4

08023180 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023180:	b538      	push	{r3, r4, r5, lr}
 8023182:	4c15      	ldr	r4, [pc, #84]	; (80231d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023184:	4605      	mov	r5, r0
 8023186:	7823      	ldrb	r3, [r4, #0]
 8023188:	f3bf 8f5b 	dmb	ish
 802318c:	07da      	lsls	r2, r3, #31
 802318e:	d40b      	bmi.n	80231a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023190:	4620      	mov	r0, r4
 8023192:	f007 fb72 	bl	802a87a <__cxa_guard_acquire>
 8023196:	b138      	cbz	r0, 80231a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023198:	4620      	mov	r0, r4
 802319a:	f007 fb7a 	bl	802a892 <__cxa_guard_release>
 802319e:	4a0f      	ldr	r2, [pc, #60]	; (80231dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80231a0:	490f      	ldr	r1, [pc, #60]	; (80231e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80231a2:	4810      	ldr	r0, [pc, #64]	; (80231e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80231a4:	f007 fb62 	bl	802a86c <__aeabi_atexit>
 80231a8:	4c0f      	ldr	r4, [pc, #60]	; (80231e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80231aa:	7823      	ldrb	r3, [r4, #0]
 80231ac:	f3bf 8f5b 	dmb	ish
 80231b0:	07db      	lsls	r3, r3, #31
 80231b2:	d40b      	bmi.n	80231cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80231b4:	4620      	mov	r0, r4
 80231b6:	f007 fb60 	bl	802a87a <__cxa_guard_acquire>
 80231ba:	b138      	cbz	r0, 80231cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80231bc:	4620      	mov	r0, r4
 80231be:	f007 fb68 	bl	802a892 <__cxa_guard_release>
 80231c2:	4a06      	ldr	r2, [pc, #24]	; (80231dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80231c4:	4909      	ldr	r1, [pc, #36]	; (80231ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80231c6:	480a      	ldr	r0, [pc, #40]	; (80231f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80231c8:	f007 fb50 	bl	802a86c <__aeabi_atexit>
 80231cc:	4b05      	ldr	r3, [pc, #20]	; (80231e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80231ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80231d0:	4b07      	ldr	r3, [pc, #28]	; (80231f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80231d2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80231d4:	bd38      	pop	{r3, r4, r5, pc}
 80231d6:	bf00      	nop
 80231d8:	2400b978 	.word	0x2400b978
 80231dc:	24000000 	.word	0x24000000
 80231e0:	08021107 	.word	0x08021107
 80231e4:	24000080 	.word	0x24000080
 80231e8:	2400b97c 	.word	0x2400b97c
 80231ec:	08021105 	.word	0x08021105
 80231f0:	24000084 	.word	0x24000084

080231f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80231f4:	b510      	push	{r4, lr}
 80231f6:	4604      	mov	r4, r0
 80231f8:	f7ff ff88 	bl	802310c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80231fc:	4620      	mov	r0, r4
 80231fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023202:	f7ff bfbd 	b.w	8023180 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023208 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8023208:	b538      	push	{r3, r4, r5, lr}
 802320a:	4c15      	ldr	r4, [pc, #84]	; (8023260 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802320c:	4605      	mov	r5, r0
 802320e:	7823      	ldrb	r3, [r4, #0]
 8023210:	f3bf 8f5b 	dmb	ish
 8023214:	07da      	lsls	r2, r3, #31
 8023216:	d40b      	bmi.n	8023230 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023218:	4620      	mov	r0, r4
 802321a:	f007 fb2e 	bl	802a87a <__cxa_guard_acquire>
 802321e:	b138      	cbz	r0, 8023230 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023220:	4620      	mov	r0, r4
 8023222:	f007 fb36 	bl	802a892 <__cxa_guard_release>
 8023226:	4a0f      	ldr	r2, [pc, #60]	; (8023264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023228:	490f      	ldr	r1, [pc, #60]	; (8023268 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802322a:	4810      	ldr	r0, [pc, #64]	; (802326c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802322c:	f007 fb1e 	bl	802a86c <__aeabi_atexit>
 8023230:	4c0f      	ldr	r4, [pc, #60]	; (8023270 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023232:	7823      	ldrb	r3, [r4, #0]
 8023234:	f3bf 8f5b 	dmb	ish
 8023238:	07db      	lsls	r3, r3, #31
 802323a:	d40b      	bmi.n	8023254 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802323c:	4620      	mov	r0, r4
 802323e:	f007 fb1c 	bl	802a87a <__cxa_guard_acquire>
 8023242:	b138      	cbz	r0, 8023254 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023244:	4620      	mov	r0, r4
 8023246:	f007 fb24 	bl	802a892 <__cxa_guard_release>
 802324a:	4a06      	ldr	r2, [pc, #24]	; (8023264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802324c:	4909      	ldr	r1, [pc, #36]	; (8023274 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802324e:	480a      	ldr	r0, [pc, #40]	; (8023278 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023250:	f007 fb0c 	bl	802a86c <__aeabi_atexit>
 8023254:	4b05      	ldr	r3, [pc, #20]	; (802326c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023256:	652b      	str	r3, [r5, #80]	; 0x50
 8023258:	4b07      	ldr	r3, [pc, #28]	; (8023278 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802325a:	656b      	str	r3, [r5, #84]	; 0x54
 802325c:	bd38      	pop	{r3, r4, r5, pc}
 802325e:	bf00      	nop
 8023260:	2400b9b0 	.word	0x2400b9b0
 8023264:	24000000 	.word	0x24000000
 8023268:	080210f3 	.word	0x080210f3
 802326c:	240000b8 	.word	0x240000b8
 8023270:	2400b9b4 	.word	0x2400b9b4
 8023274:	080210f1 	.word	0x080210f1
 8023278:	240000bc 	.word	0x240000bc

0802327c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802327c:	b538      	push	{r3, r4, r5, lr}
 802327e:	4c15      	ldr	r4, [pc, #84]	; (80232d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023280:	4605      	mov	r5, r0
 8023282:	7823      	ldrb	r3, [r4, #0]
 8023284:	f3bf 8f5b 	dmb	ish
 8023288:	07da      	lsls	r2, r3, #31
 802328a:	d40b      	bmi.n	80232a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802328c:	4620      	mov	r0, r4
 802328e:	f007 faf4 	bl	802a87a <__cxa_guard_acquire>
 8023292:	b138      	cbz	r0, 80232a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023294:	4620      	mov	r0, r4
 8023296:	f007 fafc 	bl	802a892 <__cxa_guard_release>
 802329a:	4a0f      	ldr	r2, [pc, #60]	; (80232d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802329c:	490f      	ldr	r1, [pc, #60]	; (80232dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802329e:	4810      	ldr	r0, [pc, #64]	; (80232e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80232a0:	f007 fae4 	bl	802a86c <__aeabi_atexit>
 80232a4:	4c0f      	ldr	r4, [pc, #60]	; (80232e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80232a6:	7823      	ldrb	r3, [r4, #0]
 80232a8:	f3bf 8f5b 	dmb	ish
 80232ac:	07db      	lsls	r3, r3, #31
 80232ae:	d40b      	bmi.n	80232c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80232b0:	4620      	mov	r0, r4
 80232b2:	f007 fae2 	bl	802a87a <__cxa_guard_acquire>
 80232b6:	b138      	cbz	r0, 80232c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80232b8:	4620      	mov	r0, r4
 80232ba:	f007 faea 	bl	802a892 <__cxa_guard_release>
 80232be:	4a06      	ldr	r2, [pc, #24]	; (80232d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80232c0:	4909      	ldr	r1, [pc, #36]	; (80232e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80232c2:	480a      	ldr	r0, [pc, #40]	; (80232ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80232c4:	f007 fad2 	bl	802a86c <__aeabi_atexit>
 80232c8:	4b05      	ldr	r3, [pc, #20]	; (80232e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80232ca:	64ab      	str	r3, [r5, #72]	; 0x48
 80232cc:	4b07      	ldr	r3, [pc, #28]	; (80232ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80232ce:	64eb      	str	r3, [r5, #76]	; 0x4c
 80232d0:	bd38      	pop	{r3, r4, r5, pc}
 80232d2:	bf00      	nop
 80232d4:	2400b9b8 	.word	0x2400b9b8
 80232d8:	24000000 	.word	0x24000000
 80232dc:	080210f7 	.word	0x080210f7
 80232e0:	240000c0 	.word	0x240000c0
 80232e4:	2400b9bc 	.word	0x2400b9bc
 80232e8:	080210f5 	.word	0x080210f5
 80232ec:	240000c4 	.word	0x240000c4

080232f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80232f0:	b538      	push	{r3, r4, r5, lr}
 80232f2:	4c15      	ldr	r4, [pc, #84]	; (8023348 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80232f4:	4605      	mov	r5, r0
 80232f6:	7823      	ldrb	r3, [r4, #0]
 80232f8:	f3bf 8f5b 	dmb	ish
 80232fc:	07da      	lsls	r2, r3, #31
 80232fe:	d40b      	bmi.n	8023318 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023300:	4620      	mov	r0, r4
 8023302:	f007 faba 	bl	802a87a <__cxa_guard_acquire>
 8023306:	b138      	cbz	r0, 8023318 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023308:	4620      	mov	r0, r4
 802330a:	f007 fac2 	bl	802a892 <__cxa_guard_release>
 802330e:	4a0f      	ldr	r2, [pc, #60]	; (802334c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023310:	490f      	ldr	r1, [pc, #60]	; (8023350 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023312:	4810      	ldr	r0, [pc, #64]	; (8023354 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023314:	f007 faaa 	bl	802a86c <__aeabi_atexit>
 8023318:	4c0f      	ldr	r4, [pc, #60]	; (8023358 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802331a:	7823      	ldrb	r3, [r4, #0]
 802331c:	f3bf 8f5b 	dmb	ish
 8023320:	07db      	lsls	r3, r3, #31
 8023322:	d40b      	bmi.n	802333c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023324:	4620      	mov	r0, r4
 8023326:	f007 faa8 	bl	802a87a <__cxa_guard_acquire>
 802332a:	b138      	cbz	r0, 802333c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802332c:	4620      	mov	r0, r4
 802332e:	f007 fab0 	bl	802a892 <__cxa_guard_release>
 8023332:	4a06      	ldr	r2, [pc, #24]	; (802334c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023334:	4909      	ldr	r1, [pc, #36]	; (802335c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8023336:	480a      	ldr	r0, [pc, #40]	; (8023360 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023338:	f007 fa98 	bl	802a86c <__aeabi_atexit>
 802333c:	4b05      	ldr	r3, [pc, #20]	; (8023354 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802333e:	642b      	str	r3, [r5, #64]	; 0x40
 8023340:	4b07      	ldr	r3, [pc, #28]	; (8023360 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023342:	646b      	str	r3, [r5, #68]	; 0x44
 8023344:	bd38      	pop	{r3, r4, r5, pc}
 8023346:	bf00      	nop
 8023348:	2400b980 	.word	0x2400b980
 802334c:	24000000 	.word	0x24000000
 8023350:	080210fb 	.word	0x080210fb
 8023354:	24000088 	.word	0x24000088
 8023358:	2400b984 	.word	0x2400b984
 802335c:	080210f9 	.word	0x080210f9
 8023360:	2400008c 	.word	0x2400008c

08023364 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023364:	b538      	push	{r3, r4, r5, lr}
 8023366:	4c15      	ldr	r4, [pc, #84]	; (80233bc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8023368:	4605      	mov	r5, r0
 802336a:	7823      	ldrb	r3, [r4, #0]
 802336c:	f3bf 8f5b 	dmb	ish
 8023370:	07da      	lsls	r2, r3, #31
 8023372:	d40b      	bmi.n	802338c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023374:	4620      	mov	r0, r4
 8023376:	f007 fa80 	bl	802a87a <__cxa_guard_acquire>
 802337a:	b138      	cbz	r0, 802338c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802337c:	4620      	mov	r0, r4
 802337e:	f007 fa88 	bl	802a892 <__cxa_guard_release>
 8023382:	4a0f      	ldr	r2, [pc, #60]	; (80233c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023384:	490f      	ldr	r1, [pc, #60]	; (80233c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023386:	4810      	ldr	r0, [pc, #64]	; (80233c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023388:	f007 fa70 	bl	802a86c <__aeabi_atexit>
 802338c:	4c0f      	ldr	r4, [pc, #60]	; (80233cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802338e:	7823      	ldrb	r3, [r4, #0]
 8023390:	f3bf 8f5b 	dmb	ish
 8023394:	07db      	lsls	r3, r3, #31
 8023396:	d40b      	bmi.n	80233b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023398:	4620      	mov	r0, r4
 802339a:	f007 fa6e 	bl	802a87a <__cxa_guard_acquire>
 802339e:	b138      	cbz	r0, 80233b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80233a0:	4620      	mov	r0, r4
 80233a2:	f007 fa76 	bl	802a892 <__cxa_guard_release>
 80233a6:	4a06      	ldr	r2, [pc, #24]	; (80233c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80233a8:	4909      	ldr	r1, [pc, #36]	; (80233d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80233aa:	480a      	ldr	r0, [pc, #40]	; (80233d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80233ac:	f007 fa5e 	bl	802a86c <__aeabi_atexit>
 80233b0:	4b05      	ldr	r3, [pc, #20]	; (80233c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80233b2:	63ab      	str	r3, [r5, #56]	; 0x38
 80233b4:	4b07      	ldr	r3, [pc, #28]	; (80233d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80233b6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80233b8:	bd38      	pop	{r3, r4, r5, pc}
 80233ba:	bf00      	nop
 80233bc:	2400b9a0 	.word	0x2400b9a0
 80233c0:	24000000 	.word	0x24000000
 80233c4:	080210ff 	.word	0x080210ff
 80233c8:	240000a8 	.word	0x240000a8
 80233cc:	2400b9a4 	.word	0x2400b9a4
 80233d0:	080210fd 	.word	0x080210fd
 80233d4:	240000ac 	.word	0x240000ac

080233d8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80233d8:	b510      	push	{r4, lr}
 80233da:	4604      	mov	r4, r0
 80233dc:	f7ff ff14 	bl	8023208 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80233e0:	4620      	mov	r0, r4
 80233e2:	f7ff ff85 	bl	80232f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80233e6:	4620      	mov	r0, r4
 80233e8:	f7ff ff48 	bl	802327c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80233ec:	4620      	mov	r0, r4
 80233ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233f2:	f7ff bfb7 	b.w	8023364 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080233f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80233f8:	b538      	push	{r3, r4, r5, lr}
 80233fa:	4c15      	ldr	r4, [pc, #84]	; (8023450 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80233fc:	4605      	mov	r5, r0
 80233fe:	7823      	ldrb	r3, [r4, #0]
 8023400:	f3bf 8f5b 	dmb	ish
 8023404:	07da      	lsls	r2, r3, #31
 8023406:	d40b      	bmi.n	8023420 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023408:	4620      	mov	r0, r4
 802340a:	f007 fa36 	bl	802a87a <__cxa_guard_acquire>
 802340e:	b138      	cbz	r0, 8023420 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023410:	4620      	mov	r0, r4
 8023412:	f007 fa3e 	bl	802a892 <__cxa_guard_release>
 8023416:	4a0f      	ldr	r2, [pc, #60]	; (8023454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023418:	490f      	ldr	r1, [pc, #60]	; (8023458 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802341a:	4810      	ldr	r0, [pc, #64]	; (802345c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802341c:	f007 fa26 	bl	802a86c <__aeabi_atexit>
 8023420:	4c0f      	ldr	r4, [pc, #60]	; (8023460 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023422:	7823      	ldrb	r3, [r4, #0]
 8023424:	f3bf 8f5b 	dmb	ish
 8023428:	07db      	lsls	r3, r3, #31
 802342a:	d40b      	bmi.n	8023444 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802342c:	4620      	mov	r0, r4
 802342e:	f007 fa24 	bl	802a87a <__cxa_guard_acquire>
 8023432:	b138      	cbz	r0, 8023444 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023434:	4620      	mov	r0, r4
 8023436:	f007 fa2c 	bl	802a892 <__cxa_guard_release>
 802343a:	4a06      	ldr	r2, [pc, #24]	; (8023454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802343c:	4909      	ldr	r1, [pc, #36]	; (8023464 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802343e:	480a      	ldr	r0, [pc, #40]	; (8023468 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023440:	f007 fa14 	bl	802a86c <__aeabi_atexit>
 8023444:	4b05      	ldr	r3, [pc, #20]	; (802345c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023446:	662b      	str	r3, [r5, #96]	; 0x60
 8023448:	4b07      	ldr	r3, [pc, #28]	; (8023468 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802344a:	666b      	str	r3, [r5, #100]	; 0x64
 802344c:	bd38      	pop	{r3, r4, r5, pc}
 802344e:	bf00      	nop
 8023450:	2400b988 	.word	0x2400b988
 8023454:	24000000 	.word	0x24000000
 8023458:	080210eb 	.word	0x080210eb
 802345c:	24000090 	.word	0x24000090
 8023460:	2400b98c 	.word	0x2400b98c
 8023464:	080210e9 	.word	0x080210e9
 8023468:	24000094 	.word	0x24000094

0802346c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802346c:	b538      	push	{r3, r4, r5, lr}
 802346e:	4c15      	ldr	r4, [pc, #84]	; (80234c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023470:	4605      	mov	r5, r0
 8023472:	7823      	ldrb	r3, [r4, #0]
 8023474:	f3bf 8f5b 	dmb	ish
 8023478:	07da      	lsls	r2, r3, #31
 802347a:	d40b      	bmi.n	8023494 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802347c:	4620      	mov	r0, r4
 802347e:	f007 f9fc 	bl	802a87a <__cxa_guard_acquire>
 8023482:	b138      	cbz	r0, 8023494 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023484:	4620      	mov	r0, r4
 8023486:	f007 fa04 	bl	802a892 <__cxa_guard_release>
 802348a:	4a0f      	ldr	r2, [pc, #60]	; (80234c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802348c:	490f      	ldr	r1, [pc, #60]	; (80234cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802348e:	4810      	ldr	r0, [pc, #64]	; (80234d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023490:	f007 f9ec 	bl	802a86c <__aeabi_atexit>
 8023494:	4c0f      	ldr	r4, [pc, #60]	; (80234d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023496:	7823      	ldrb	r3, [r4, #0]
 8023498:	f3bf 8f5b 	dmb	ish
 802349c:	07db      	lsls	r3, r3, #31
 802349e:	d40b      	bmi.n	80234b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80234a0:	4620      	mov	r0, r4
 80234a2:	f007 f9ea 	bl	802a87a <__cxa_guard_acquire>
 80234a6:	b138      	cbz	r0, 80234b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80234a8:	4620      	mov	r0, r4
 80234aa:	f007 f9f2 	bl	802a892 <__cxa_guard_release>
 80234ae:	4a06      	ldr	r2, [pc, #24]	; (80234c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80234b0:	4909      	ldr	r1, [pc, #36]	; (80234d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80234b2:	480a      	ldr	r0, [pc, #40]	; (80234dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80234b4:	f007 f9da 	bl	802a86c <__aeabi_atexit>
 80234b8:	4b05      	ldr	r3, [pc, #20]	; (80234d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80234ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80234bc:	4b07      	ldr	r3, [pc, #28]	; (80234dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80234be:	65eb      	str	r3, [r5, #92]	; 0x5c
 80234c0:	bd38      	pop	{r3, r4, r5, pc}
 80234c2:	bf00      	nop
 80234c4:	2400b960 	.word	0x2400b960
 80234c8:	24000000 	.word	0x24000000
 80234cc:	080210ef 	.word	0x080210ef
 80234d0:	24000068 	.word	0x24000068
 80234d4:	2400b964 	.word	0x2400b964
 80234d8:	080210ed 	.word	0x080210ed
 80234dc:	2400006c 	.word	0x2400006c

080234e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80234e0:	b510      	push	{r4, lr}
 80234e2:	4604      	mov	r4, r0
 80234e4:	f7ff ff88 	bl	80233f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80234e8:	4620      	mov	r0, r4
 80234ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234ee:	f7ff bfbd 	b.w	802346c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080234f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80234f4:	b538      	push	{r3, r4, r5, lr}
 80234f6:	4c15      	ldr	r4, [pc, #84]	; (802354c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80234f8:	4605      	mov	r5, r0
 80234fa:	7823      	ldrb	r3, [r4, #0]
 80234fc:	f3bf 8f5b 	dmb	ish
 8023500:	07da      	lsls	r2, r3, #31
 8023502:	d40b      	bmi.n	802351c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023504:	4620      	mov	r0, r4
 8023506:	f007 f9b8 	bl	802a87a <__cxa_guard_acquire>
 802350a:	b138      	cbz	r0, 802351c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802350c:	4620      	mov	r0, r4
 802350e:	f007 f9c0 	bl	802a892 <__cxa_guard_release>
 8023512:	4a0f      	ldr	r2, [pc, #60]	; (8023550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023514:	490f      	ldr	r1, [pc, #60]	; (8023554 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023516:	4810      	ldr	r0, [pc, #64]	; (8023558 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023518:	f007 f9a8 	bl	802a86c <__aeabi_atexit>
 802351c:	4c0f      	ldr	r4, [pc, #60]	; (802355c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802351e:	7823      	ldrb	r3, [r4, #0]
 8023520:	f3bf 8f5b 	dmb	ish
 8023524:	07db      	lsls	r3, r3, #31
 8023526:	d40b      	bmi.n	8023540 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023528:	4620      	mov	r0, r4
 802352a:	f007 f9a6 	bl	802a87a <__cxa_guard_acquire>
 802352e:	b138      	cbz	r0, 8023540 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023530:	4620      	mov	r0, r4
 8023532:	f007 f9ae 	bl	802a892 <__cxa_guard_release>
 8023536:	4a06      	ldr	r2, [pc, #24]	; (8023550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023538:	4909      	ldr	r1, [pc, #36]	; (8023560 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802353a:	480a      	ldr	r0, [pc, #40]	; (8023564 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802353c:	f007 f996 	bl	802a86c <__aeabi_atexit>
 8023540:	4b05      	ldr	r3, [pc, #20]	; (8023558 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023542:	672b      	str	r3, [r5, #112]	; 0x70
 8023544:	4b07      	ldr	r3, [pc, #28]	; (8023564 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023546:	676b      	str	r3, [r5, #116]	; 0x74
 8023548:	bd38      	pop	{r3, r4, r5, pc}
 802354a:	bf00      	nop
 802354c:	2400b958 	.word	0x2400b958
 8023550:	24000000 	.word	0x24000000
 8023554:	080210e3 	.word	0x080210e3
 8023558:	24000060 	.word	0x24000060
 802355c:	2400b95c 	.word	0x2400b95c
 8023560:	080210e1 	.word	0x080210e1
 8023564:	24000064 	.word	0x24000064

08023568 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023568:	b538      	push	{r3, r4, r5, lr}
 802356a:	4c15      	ldr	r4, [pc, #84]	; (80235c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802356c:	4605      	mov	r5, r0
 802356e:	7823      	ldrb	r3, [r4, #0]
 8023570:	f3bf 8f5b 	dmb	ish
 8023574:	07da      	lsls	r2, r3, #31
 8023576:	d40b      	bmi.n	8023590 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023578:	4620      	mov	r0, r4
 802357a:	f007 f97e 	bl	802a87a <__cxa_guard_acquire>
 802357e:	b138      	cbz	r0, 8023590 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023580:	4620      	mov	r0, r4
 8023582:	f007 f986 	bl	802a892 <__cxa_guard_release>
 8023586:	4a0f      	ldr	r2, [pc, #60]	; (80235c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023588:	490f      	ldr	r1, [pc, #60]	; (80235c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802358a:	4810      	ldr	r0, [pc, #64]	; (80235cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802358c:	f007 f96e 	bl	802a86c <__aeabi_atexit>
 8023590:	4c0f      	ldr	r4, [pc, #60]	; (80235d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023592:	7823      	ldrb	r3, [r4, #0]
 8023594:	f3bf 8f5b 	dmb	ish
 8023598:	07db      	lsls	r3, r3, #31
 802359a:	d40b      	bmi.n	80235b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802359c:	4620      	mov	r0, r4
 802359e:	f007 f96c 	bl	802a87a <__cxa_guard_acquire>
 80235a2:	b138      	cbz	r0, 80235b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80235a4:	4620      	mov	r0, r4
 80235a6:	f007 f974 	bl	802a892 <__cxa_guard_release>
 80235aa:	4a06      	ldr	r2, [pc, #24]	; (80235c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80235ac:	4909      	ldr	r1, [pc, #36]	; (80235d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80235ae:	480a      	ldr	r0, [pc, #40]	; (80235d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80235b0:	f007 f95c 	bl	802a86c <__aeabi_atexit>
 80235b4:	4b05      	ldr	r3, [pc, #20]	; (80235cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80235b6:	66ab      	str	r3, [r5, #104]	; 0x68
 80235b8:	4b07      	ldr	r3, [pc, #28]	; (80235d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80235ba:	66eb      	str	r3, [r5, #108]	; 0x6c
 80235bc:	bd38      	pop	{r3, r4, r5, pc}
 80235be:	bf00      	nop
 80235c0:	2400b950 	.word	0x2400b950
 80235c4:	24000000 	.word	0x24000000
 80235c8:	080210e7 	.word	0x080210e7
 80235cc:	24000058 	.word	0x24000058
 80235d0:	2400b954 	.word	0x2400b954
 80235d4:	080210e5 	.word	0x080210e5
 80235d8:	2400005c 	.word	0x2400005c

080235dc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80235dc:	b510      	push	{r4, lr}
 80235de:	4604      	mov	r4, r0
 80235e0:	f7ff ff88 	bl	80234f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80235e4:	4620      	mov	r0, r4
 80235e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235ea:	f7ff bfbd 	b.w	8023568 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080235ee <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80235ee:	b510      	push	{r4, lr}
 80235f0:	4604      	mov	r4, r0
 80235f2:	f7ff fff3 	bl	80235dc <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80235f6:	4620      	mov	r0, r4
 80235f8:	f7ff ff72 	bl	80234e0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80235fc:	4620      	mov	r0, r4
 80235fe:	f7ff fdf9 	bl	80231f4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023602:	4620      	mov	r0, r4
 8023604:	f7ff fcfa 	bl	8022ffc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023608:	4620      	mov	r0, r4
 802360a:	f7ff fd75 	bl	80230f8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802360e:	4620      	mov	r0, r4
 8023610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023614:	f7ff bee0 	b.w	80233d8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023618 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802361c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8023620:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023624:	f1be 0f00 	cmp.w	lr, #0
 8023628:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802362c:	fb0e 4708 	mla	r7, lr, r8, r4
 8023630:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8023634:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8023638:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 802363c:	eb02 0a07 	add.w	sl, r2, r7
 8023640:	8808      	ldrh	r0, [r1, #0]
 8023642:	db37      	blt.n	80236b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023644:	45f3      	cmp	fp, lr
 8023646:	dd35      	ble.n	80236b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023648:	2c00      	cmp	r4, #0
 802364a:	db31      	blt.n	80236b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 802364c:	45a0      	cmp	r8, r4
 802364e:	dd2f      	ble.n	80236b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023650:	5dd2      	ldrb	r2, [r2, r7]
 8023652:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8023656:	1c62      	adds	r2, r4, #1
 8023658:	d42f      	bmi.n	80236ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802365a:	4590      	cmp	r8, r2
 802365c:	dd2d      	ble.n	80236ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 802365e:	b366      	cbz	r6, 80236ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023660:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023664:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023668:	f11e 0e01 	adds.w	lr, lr, #1
 802366c:	d429      	bmi.n	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 802366e:	45f3      	cmp	fp, lr
 8023670:	dd27      	ble.n	80236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023672:	f1bc 0f00 	cmp.w	ip, #0
 8023676:	f000 80a1 	beq.w	80237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 802367a:	2c00      	cmp	r4, #0
 802367c:	db1f      	blt.n	80236be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802367e:	45a0      	cmp	r8, r4
 8023680:	dd1d      	ble.n	80236be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023682:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8023686:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802368a:	3401      	adds	r4, #1
 802368c:	d41c      	bmi.n	80236c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 802368e:	45a0      	cmp	r8, r4
 8023690:	dd1a      	ble.n	80236c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023692:	b1de      	cbz	r6, 80236cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8023694:	44d0      	add	r8, sl
 8023696:	f898 2001 	ldrb.w	r2, [r8, #1]
 802369a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802369e:	2e0f      	cmp	r6, #15
 80236a0:	d915      	bls.n	80236ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 80236a2:	4b49      	ldr	r3, [pc, #292]	; (80237c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 80236a4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80236a8:	4a48      	ldr	r2, [pc, #288]	; (80237cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 80236aa:	4849      	ldr	r0, [pc, #292]	; (80237d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 80236ac:	f007 f912 	bl	802a8d4 <__assert_func>
 80236b0:	4681      	mov	r9, r0
 80236b2:	e7d0      	b.n	8023656 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 80236b4:	4607      	mov	r7, r0
 80236b6:	4681      	mov	r9, r0
 80236b8:	e7d6      	b.n	8023668 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80236ba:	4607      	mov	r7, r0
 80236bc:	e7d4      	b.n	8023668 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 80236be:	4686      	mov	lr, r0
 80236c0:	e7e3      	b.n	802368a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 80236c2:	4603      	mov	r3, r0
 80236c4:	4686      	mov	lr, r0
 80236c6:	e7ea      	b.n	802369e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80236c8:	4603      	mov	r3, r0
 80236ca:	e7e8      	b.n	802369e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 80236cc:	4603      	mov	r3, r0
 80236ce:	f1bc 0f0f 	cmp.w	ip, #15
 80236d2:	d8e6      	bhi.n	80236a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80236d4:	fb16 f80c 	smulbb	r8, r6, ip
 80236d8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80236dc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80236e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80236e4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80236e8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80236ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80236f0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80236f4:	ea44 0909 	orr.w	r9, r4, r9
 80236f8:	f1cc 0410 	rsb	r4, ip, #16
 80236fc:	041a      	lsls	r2, r3, #16
 80236fe:	ea4a 0707 	orr.w	r7, sl, r7
 8023702:	1ba4      	subs	r4, r4, r6
 8023704:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023708:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802370c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023710:	4377      	muls	r7, r6
 8023712:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023716:	4313      	orrs	r3, r2
 8023718:	ea4f 420e 	mov.w	r2, lr, lsl #16
 802371c:	fb04 7409 	mla	r4, r4, r9, r7
 8023720:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8023724:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023728:	b2af      	uxth	r7, r5
 802372a:	fb08 4303 	mla	r3, r8, r3, r4
 802372e:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8023732:	43ed      	mvns	r5, r5
 8023734:	10c6      	asrs	r6, r0, #3
 8023736:	4322      	orrs	r2, r4
 8023738:	b2ed      	uxtb	r5, r5
 802373a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802373e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023742:	fb16 f605 	smulbb	r6, r6, r5
 8023746:	0d53      	lsrs	r3, r2, #21
 8023748:	0952      	lsrs	r2, r2, #5
 802374a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802374e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023752:	431a      	orrs	r2, r3
 8023754:	b293      	uxth	r3, r2
 8023756:	1202      	asrs	r2, r0, #8
 8023758:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802375c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023760:	00dc      	lsls	r4, r3, #3
 8023762:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023766:	fb12 f205 	smulbb	r2, r2, r5
 802376a:	b2e4      	uxtb	r4, r4
 802376c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023770:	10da      	asrs	r2, r3, #3
 8023772:	00c3      	lsls	r3, r0, #3
 8023774:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023778:	fa1f fc8c 	uxth.w	ip, ip
 802377c:	b2db      	uxtb	r3, r3
 802377e:	fb02 6207 	mla	r2, r2, r7, r6
 8023782:	fb13 f305 	smulbb	r3, r3, r5
 8023786:	b296      	uxth	r6, r2
 8023788:	fb04 3307 	mla	r3, r4, r7, r3
 802378c:	b29a      	uxth	r2, r3
 802378e:	f10c 0301 	add.w	r3, ip, #1
 8023792:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023796:	1c53      	adds	r3, r2, #1
 8023798:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802379c:	1c72      	adds	r2, r6, #1
 802379e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80237a2:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80237a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80237aa:	0952      	lsrs	r2, r2, #5
 80237ac:	ea43 030c 	orr.w	r3, r3, ip
 80237b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80237b4:	4313      	orrs	r3, r2
 80237b6:	800b      	strh	r3, [r1, #0]
 80237b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237bc:	2e0f      	cmp	r6, #15
 80237be:	f63f af70 	bhi.w	80236a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 80237c2:	4603      	mov	r3, r0
 80237c4:	4686      	mov	lr, r0
 80237c6:	e785      	b.n	80236d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 80237c8:	0802fb1d 	.word	0x0802fb1d
 80237cc:	08030193 	.word	0x08030193
 80237d0:	0802fba1 	.word	0x0802fba1

080237d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237d8:	ed2d 8b08 	vpush	{d8-d11}
 80237dc:	b099      	sub	sp, #100	; 0x64
 80237de:	eeb0 aa40 	vmov.f32	s20, s0
 80237e2:	eef0 9a60 	vmov.f32	s19, s1
 80237e6:	9215      	str	r2, [sp, #84]	; 0x54
 80237e8:	eeb0 9a41 	vmov.f32	s18, s2
 80237ec:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80237ee:	eeb0 8a62 	vmov.f32	s16, s5
 80237f2:	9309      	str	r3, [sp, #36]	; 0x24
 80237f4:	eef0 8a43 	vmov.f32	s17, s6
 80237f8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80237fc:	eef0 ba44 	vmov.f32	s23, s8
 8023800:	9016      	str	r0, [sp, #88]	; 0x58
 8023802:	eeb0 ba64 	vmov.f32	s22, s9
 8023806:	930d      	str	r3, [sp, #52]	; 0x34
 8023808:	eef0 aa45 	vmov.f32	s21, s10
 802380c:	6850      	ldr	r0, [r2, #4]
 802380e:	910c      	str	r1, [sp, #48]	; 0x30
 8023810:	6812      	ldr	r2, [r2, #0]
 8023812:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023816:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 802381a:	fb00 1303 	mla	r3, r0, r3, r1
 802381e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023822:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023824:	681b      	ldr	r3, [r3, #0]
 8023826:	930b      	str	r3, [sp, #44]	; 0x2c
 8023828:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802382a:	685e      	ldr	r6, [r3, #4]
 802382c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802382e:	3604      	adds	r6, #4
 8023830:	43db      	mvns	r3, r3
 8023832:	b2db      	uxtb	r3, r3
 8023834:	930a      	str	r3, [sp, #40]	; 0x28
 8023836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023838:	2b00      	cmp	r3, #0
 802383a:	dc03      	bgt.n	8023844 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802383c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802383e:	2b00      	cmp	r3, #0
 8023840:	f340 8225 	ble.w	8023c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023844:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023846:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802384a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802384e:	1e48      	subs	r0, r1, #1
 8023850:	1e57      	subs	r7, r2, #1
 8023852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023854:	2b00      	cmp	r3, #0
 8023856:	f340 80e3 	ble.w	8023a20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 802385a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802385e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023862:	d406      	bmi.n	8023872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023864:	4584      	cmp	ip, r0
 8023866:	da04      	bge.n	8023872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023868:	2b00      	cmp	r3, #0
 802386a:	db02      	blt.n	8023872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802386c:	42bb      	cmp	r3, r7
 802386e:	f2c0 80d8 	blt.w	8023a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023872:	f11c 0c01 	adds.w	ip, ip, #1
 8023876:	f100 80c9 	bmi.w	8023a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802387a:	4561      	cmp	r1, ip
 802387c:	f2c0 80c6 	blt.w	8023a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023880:	3301      	adds	r3, #1
 8023882:	f100 80c3 	bmi.w	8023a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023886:	429a      	cmp	r2, r3
 8023888:	f2c0 80c0 	blt.w	8023a0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802388c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023890:	4647      	mov	r7, r8
 8023892:	f1bb 0f00 	cmp.w	fp, #0
 8023896:	f340 80e3 	ble.w	8023a60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802389a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 802389c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80238a0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80238a2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80238a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80238aa:	ea5f 422a 	movs.w	r2, sl, asr #16
 80238ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80238b2:	689b      	ldr	r3, [r3, #8]
 80238b4:	f100 8121 	bmi.w	8023afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80238b8:	f103 39ff 	add.w	r9, r3, #4294967295
 80238bc:	454a      	cmp	r2, r9
 80238be:	f280 811c 	bge.w	8023afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80238c2:	f1bc 0f00 	cmp.w	ip, #0
 80238c6:	f2c0 8118 	blt.w	8023afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80238ca:	f10e 39ff 	add.w	r9, lr, #4294967295
 80238ce:	45cc      	cmp	ip, r9
 80238d0:	f280 8113 	bge.w	8023afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80238d4:	b21b      	sxth	r3, r3
 80238d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80238d8:	fb0c 2203 	mla	r2, ip, r3, r2
 80238dc:	eb04 0902 	add.w	r9, r4, r2
 80238e0:	5ca2      	ldrb	r2, [r4, r2]
 80238e2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80238e6:	2800      	cmp	r0, #0
 80238e8:	f000 80fe 	beq.w	8023ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80238ec:	f899 2001 	ldrb.w	r2, [r9, #1]
 80238f0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80238f4:	9211      	str	r2, [sp, #68]	; 0x44
 80238f6:	b151      	cbz	r1, 802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80238f8:	eb09 0203 	add.w	r2, r9, r3
 80238fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023900:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023904:	930f      	str	r3, [sp, #60]	; 0x3c
 8023906:	7853      	ldrb	r3, [r2, #1]
 8023908:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802390c:	9312      	str	r3, [sp, #72]	; 0x48
 802390e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023910:	fb10 f201 	smulbb	r2, r0, r1
 8023914:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023916:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802391a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802391e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023922:	10d2      	asrs	r2, r2, #3
 8023924:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023928:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802392c:	ea4c 0c03 	orr.w	ip, ip, r3
 8023930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023932:	041b      	lsls	r3, r3, #16
 8023934:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023938:	4323      	orrs	r3, r4
 802393a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802393c:	4353      	muls	r3, r2
 802393e:	fb09 330c 	mla	r3, r9, ip, r3
 8023942:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023946:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802394a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802394e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023952:	f1c1 0c10 	rsb	ip, r1, #16
 8023956:	ebac 0c00 	sub.w	ip, ip, r0
 802395a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802395e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023962:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023968:	0418      	lsls	r0, r3, #16
 802396a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802396e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023972:	4318      	orrs	r0, r3
 8023974:	fb02 c200 	mla	r2, r2, r0, ip
 8023978:	8838      	ldrh	r0, [r7, #0]
 802397a:	0d53      	lsrs	r3, r2, #21
 802397c:	0952      	lsrs	r2, r2, #5
 802397e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023982:	1201      	asrs	r1, r0, #8
 8023984:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023988:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802398c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023990:	00c0      	lsls	r0, r0, #3
 8023992:	431a      	orrs	r2, r3
 8023994:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8023998:	fb11 f104 	smulbb	r1, r1, r4
 802399c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80239a0:	b292      	uxth	r2, r2
 80239a2:	fb1e fe04 	smulbb	lr, lr, r4
 80239a6:	b2c0      	uxtb	r0, r0
 80239a8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80239ac:	fb10 f004 	smulbb	r0, r0, r4
 80239b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80239b4:	fb0c 1c03 	mla	ip, ip, r3, r1
 80239b8:	10d1      	asrs	r1, r2, #3
 80239ba:	00d2      	lsls	r2, r2, #3
 80239bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80239c0:	fa1f fc8c 	uxth.w	ip, ip
 80239c4:	b2d2      	uxtb	r2, r2
 80239c6:	fb01 e103 	mla	r1, r1, r3, lr
 80239ca:	fb02 0303 	mla	r3, r2, r3, r0
 80239ce:	b289      	uxth	r1, r1
 80239d0:	b29a      	uxth	r2, r3
 80239d2:	f10c 0301 	add.w	r3, ip, #1
 80239d6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80239da:	1c53      	adds	r3, r2, #1
 80239dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80239e0:	1c4a      	adds	r2, r1, #1
 80239e2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80239e6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80239ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80239ee:	0949      	lsrs	r1, r1, #5
 80239f0:	ea43 030c 	orr.w	r3, r3, ip
 80239f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80239f8:	430b      	orrs	r3, r1
 80239fa:	803b      	strh	r3, [r7, #0]
 80239fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80239fe:	3702      	adds	r7, #2
 8023a00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023a04:	449a      	add	sl, r3
 8023a06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a08:	441d      	add	r5, r3
 8023a0a:	e742      	b.n	8023892 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023a0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023a0e:	f108 0802 	add.w	r8, r8, #2
 8023a12:	449a      	add	sl, r3
 8023a14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023a16:	441d      	add	r5, r3
 8023a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a1a:	3b01      	subs	r3, #1
 8023a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a1e:	e718      	b.n	8023852 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023a20:	d023      	beq.n	8023a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a24:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023a26:	3b01      	subs	r3, #1
 8023a28:	fb00 a003 	mla	r0, r0, r3, sl
 8023a2c:	1400      	asrs	r0, r0, #16
 8023a2e:	f53f af2d 	bmi.w	802388c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a32:	3901      	subs	r1, #1
 8023a34:	4288      	cmp	r0, r1
 8023a36:	f6bf af29 	bge.w	802388c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a3a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8023a3c:	fb01 5303 	mla	r3, r1, r3, r5
 8023a40:	141b      	asrs	r3, r3, #16
 8023a42:	f53f af23 	bmi.w	802388c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a46:	3a01      	subs	r2, #1
 8023a48:	4293      	cmp	r3, r2
 8023a4a:	f6bf af1f 	bge.w	802388c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023a4e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023a52:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8023a56:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8023a5a:	f1be 0f00 	cmp.w	lr, #0
 8023a5e:	dc6c      	bgt.n	8023b3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a62:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023a66:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8023a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a6c:	2b00      	cmp	r3, #0
 8023a6e:	f340 810e 	ble.w	8023c8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a76:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023a78:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023a7c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023a80:	eef0 6a48 	vmov.f32	s13, s16
 8023a84:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023a88:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023a8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a90:	ee16 aa90 	vmov	sl, s13
 8023a94:	eef0 6a68 	vmov.f32	s13, s17
 8023a98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a9c:	ee16 5a90 	vmov	r5, s13
 8023aa0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023aa4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023aa8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023aac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023ab0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ab4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ab8:	ee18 2a10 	vmov	r2, s16
 8023abc:	eeb0 8a47 	vmov.f32	s16, s14
 8023ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ac4:	ee18 2a90 	vmov	r2, s17
 8023ac8:	932d      	str	r3, [sp, #180]	; 0xb4
 8023aca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023acc:	eef0 8a67 	vmov.f32	s17, s15
 8023ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ad4:	932e      	str	r3, [sp, #184]	; 0xb8
 8023ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ad8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023ada:	3b01      	subs	r3, #1
 8023adc:	930c      	str	r3, [sp, #48]	; 0x30
 8023ade:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023ae0:	bf08      	it	eq
 8023ae2:	4613      	moveq	r3, r2
 8023ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8023ae6:	e6a6      	b.n	8023836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023ae8:	2900      	cmp	r1, #0
 8023aea:	f43f af10 	beq.w	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023aee:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023af2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023af8:	e709      	b.n	802390e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023afa:	f112 0901 	adds.w	r9, r2, #1
 8023afe:	f53f af7d 	bmi.w	80239fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b02:	454b      	cmp	r3, r9
 8023b04:	f6ff af7a 	blt.w	80239fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b08:	f11c 0901 	adds.w	r9, ip, #1
 8023b0c:	f53f af76 	bmi.w	80239fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b10:	45ce      	cmp	lr, r9
 8023b12:	f6ff af73 	blt.w	80239fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023b18:	b21b      	sxth	r3, r3
 8023b1a:	9202      	str	r2, [sp, #8]
 8023b1c:	fa0f f28e 	sxth.w	r2, lr
 8023b20:	9300      	str	r3, [sp, #0]
 8023b22:	4633      	mov	r3, r6
 8023b24:	9201      	str	r2, [sp, #4]
 8023b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023b28:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023b2c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023b30:	4639      	mov	r1, r7
 8023b32:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023b34:	f7ff fd70 	bl	8023618 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023b38:	e760      	b.n	80239fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023b3a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023b3c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023b40:	1429      	asrs	r1, r5, #16
 8023b42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023b48:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8023b4c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023b50:	fb03 2101 	mla	r1, r3, r1, r2
 8023b54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023b56:	440a      	add	r2, r1
 8023b58:	5c61      	ldrb	r1, [r4, r1]
 8023b5a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8023b5e:	f1bc 0f00 	cmp.w	ip, #0
 8023b62:	f000 808c 	beq.w	8023c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8023b66:	7857      	ldrb	r7, [r2, #1]
 8023b68:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8023b6c:	9413      	str	r4, [sp, #76]	; 0x4c
 8023b6e:	b140      	cbz	r0, 8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023b70:	18d7      	adds	r7, r2, r3
 8023b72:	5cd3      	ldrb	r3, [r2, r3]
 8023b74:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023b78:	9310      	str	r3, [sp, #64]	; 0x40
 8023b7a:	787b      	ldrb	r3, [r7, #1]
 8023b7c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023b80:	9314      	str	r3, [sp, #80]	; 0x50
 8023b82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023b84:	fb1c f200 	smulbb	r2, ip, r0
 8023b88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023b8a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023b8e:	041f      	lsls	r7, r3, #16
 8023b90:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023b94:	10d2      	asrs	r2, r2, #3
 8023b96:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8023b9a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8023b9e:	431f      	orrs	r7, r3
 8023ba0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023ba4:	9317      	str	r3, [sp, #92]	; 0x5c
 8023ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023ba8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023baa:	041b      	lsls	r3, r3, #16
 8023bac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023bb0:	ea43 030b 	orr.w	r3, r3, fp
 8023bb4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023bb8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023bbc:	4353      	muls	r3, r2
 8023bbe:	fb04 3707 	mla	r7, r4, r7, r3
 8023bc2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023bc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023bc8:	ea43 0b01 	orr.w	fp, r3, r1
 8023bcc:	f1c0 0110 	rsb	r1, r0, #16
 8023bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bd2:	eba1 0c0c 	sub.w	ip, r1, ip
 8023bd6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023bda:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023bde:	fb0c 770b 	mla	r7, ip, fp, r7
 8023be2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023be6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8023bea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023bee:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023bf2:	fb02 770c 	mla	r7, r2, ip, r7
 8023bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023bf8:	0d79      	lsrs	r1, r7, #21
 8023bfa:	8812      	ldrh	r2, [r2, #0]
 8023bfc:	097f      	lsrs	r7, r7, #5
 8023bfe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023c02:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023c06:	430f      	orrs	r7, r1
 8023c08:	1211      	asrs	r1, r2, #8
 8023c0a:	b2bb      	uxth	r3, r7
 8023c0c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023c10:	10d7      	asrs	r7, r2, #3
 8023c12:	fb11 f104 	smulbb	r1, r1, r4
 8023c16:	1218      	asrs	r0, r3, #8
 8023c18:	00d2      	lsls	r2, r2, #3
 8023c1a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023c1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023c22:	fb17 f704 	smulbb	r7, r7, r4
 8023c26:	b2d2      	uxtb	r2, r2
 8023c28:	fb00 1009 	mla	r0, r0, r9, r1
 8023c2c:	10d9      	asrs	r1, r3, #3
 8023c2e:	fb12 f204 	smulbb	r2, r2, r4
 8023c32:	00db      	lsls	r3, r3, #3
 8023c34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023c38:	b280      	uxth	r0, r0
 8023c3a:	b2db      	uxtb	r3, r3
 8023c3c:	fb01 7109 	mla	r1, r1, r9, r7
 8023c40:	fb03 2309 	mla	r3, r3, r9, r2
 8023c44:	1c42      	adds	r2, r0, #1
 8023c46:	b289      	uxth	r1, r1
 8023c48:	b29b      	uxth	r3, r3
 8023c4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023c4e:	1c4f      	adds	r7, r1, #1
 8023c50:	1c5a      	adds	r2, r3, #1
 8023c52:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023c56:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8023c5a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c60:	0949      	lsrs	r1, r1, #5
 8023c62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023c66:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023c6a:	4310      	orrs	r0, r2
 8023c6c:	4308      	orrs	r0, r1
 8023c6e:	f823 0b02 	strh.w	r0, [r3], #2
 8023c72:	930e      	str	r3, [sp, #56]	; 0x38
 8023c74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023c76:	449a      	add	sl, r3
 8023c78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023c7a:	441d      	add	r5, r3
 8023c7c:	e6ed      	b.n	8023a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8023c7e:	2800      	cmp	r0, #0
 8023c80:	f43f af7f 	beq.w	8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023c84:	5cd3      	ldrb	r3, [r2, r3]
 8023c86:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8023c8c:	e779      	b.n	8023b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023c8e:	b019      	add	sp, #100	; 0x64
 8023c90:	ecbd 8b08 	vpop	{d8-d11}
 8023c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023c9c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8023ca0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8023ca4:	2e00      	cmp	r6, #0
 8023ca6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023caa:	fb06 570e 	mla	r7, r6, lr, r5
 8023cae:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8023cb2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8023cb6:	eb02 0807 	add.w	r8, r2, r7
 8023cba:	8808      	ldrh	r0, [r1, #0]
 8023cbc:	db38      	blt.n	8023d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023cbe:	45b1      	cmp	r9, r6
 8023cc0:	dd36      	ble.n	8023d30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023cc2:	2d00      	cmp	r5, #0
 8023cc4:	db32      	blt.n	8023d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023cc6:	45ae      	cmp	lr, r5
 8023cc8:	dd30      	ble.n	8023d2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023cca:	5dd2      	ldrb	r2, [r2, r7]
 8023ccc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023cd0:	1c6a      	adds	r2, r5, #1
 8023cd2:	d430      	bmi.n	8023d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023cd4:	4596      	cmp	lr, r2
 8023cd6:	dd2e      	ble.n	8023d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023cd8:	b36c      	cbz	r4, 8023d36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023cda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023cde:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8023ce2:	3601      	adds	r6, #1
 8023ce4:	d42b      	bmi.n	8023d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023ce6:	45b1      	cmp	r9, r6
 8023ce8:	dd29      	ble.n	8023d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023cea:	f1bc 0f00 	cmp.w	ip, #0
 8023cee:	d028      	beq.n	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8023cf0:	2d00      	cmp	r5, #0
 8023cf2:	db22      	blt.n	8023d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023cf4:	45ae      	cmp	lr, r5
 8023cf6:	dd20      	ble.n	8023d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023cf8:	f818 600e 	ldrb.w	r6, [r8, lr]
 8023cfc:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8023d00:	3501      	adds	r5, #1
 8023d02:	d407      	bmi.n	8023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023d04:	45ae      	cmp	lr, r5
 8023d06:	dd05      	ble.n	8023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023d08:	b134      	cbz	r4, 8023d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023d0a:	44c6      	add	lr, r8
 8023d0c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023d10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023d14:	2c0f      	cmp	r4, #15
 8023d16:	d802      	bhi.n	8023d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023d18:	f1bc 0f0f 	cmp.w	ip, #15
 8023d1c:	d914      	bls.n	8023d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8023d1e:	4b26      	ldr	r3, [pc, #152]	; (8023db8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8023d20:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023d24:	4a25      	ldr	r2, [pc, #148]	; (8023dbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8023d26:	4826      	ldr	r0, [pc, #152]	; (8023dc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8023d28:	f006 fdd4 	bl	802a8d4 <__assert_func>
 8023d2c:	4607      	mov	r7, r0
 8023d2e:	e7cf      	b.n	8023cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8023d30:	4602      	mov	r2, r0
 8023d32:	4607      	mov	r7, r0
 8023d34:	e7d5      	b.n	8023ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023d36:	4602      	mov	r2, r0
 8023d38:	e7d3      	b.n	8023ce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023d3a:	4606      	mov	r6, r0
 8023d3c:	e7e0      	b.n	8023d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8023d3e:	4606      	mov	r6, r0
 8023d40:	e7e8      	b.n	8023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023d42:	2c0f      	cmp	r4, #15
 8023d44:	d8eb      	bhi.n	8023d1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023d46:	4606      	mov	r6, r0
 8023d48:	fb14 f30c 	smulbb	r3, r4, ip
 8023d4c:	043d      	lsls	r5, r7, #16
 8023d4e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023d52:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023d56:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8023d5a:	10db      	asrs	r3, r3, #3
 8023d5c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023d60:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023d64:	432f      	orrs	r7, r5
 8023d66:	f1cc 0510 	rsb	r5, ip, #16
 8023d6a:	ea4e 0202 	orr.w	r2, lr, r2
 8023d6e:	1b2d      	subs	r5, r5, r4
 8023d70:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023d74:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023d78:	4354      	muls	r4, r2
 8023d7a:	fb05 4507 	mla	r5, r5, r7, r4
 8023d7e:	0404      	lsls	r4, r0, #16
 8023d80:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023d84:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023d88:	4320      	orrs	r0, r4
 8023d8a:	fb03 5400 	mla	r4, r3, r0, r5
 8023d8e:	0430      	lsls	r0, r6, #16
 8023d90:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8023d94:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8023d98:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023d9c:	4330      	orrs	r0, r6
 8023d9e:	fb03 4000 	mla	r0, r3, r0, r4
 8023da2:	0d43      	lsrs	r3, r0, #21
 8023da4:	0940      	lsrs	r0, r0, #5
 8023da6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023daa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023dae:	4318      	orrs	r0, r3
 8023db0:	8008      	strh	r0, [r1, #0]
 8023db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023db6:	bf00      	nop
 8023db8:	0802fb1d 	.word	0x0802fb1d
 8023dbc:	08030193 	.word	0x08030193
 8023dc0:	0802fba1 	.word	0x0802fba1

08023dc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dc8:	ed2d 8b0a 	vpush	{d8-d12}
 8023dcc:	b093      	sub	sp, #76	; 0x4c
 8023dce:	eeb0 aa40 	vmov.f32	s20, s0
 8023dd2:	eef0 9a60 	vmov.f32	s19, s1
 8023dd6:	920f      	str	r2, [sp, #60]	; 0x3c
 8023dd8:	eeb0 9a41 	vmov.f32	s18, s2
 8023ddc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023dde:	eeb0 8a62 	vmov.f32	s16, s5
 8023de2:	9010      	str	r0, [sp, #64]	; 0x40
 8023de4:	eef0 8a43 	vmov.f32	s17, s6
 8023de8:	6850      	ldr	r0, [r2, #4]
 8023dea:	eeb0 ca44 	vmov.f32	s24, s8
 8023dee:	9108      	str	r1, [sp, #32]
 8023df0:	eef0 ba64 	vmov.f32	s23, s9
 8023df4:	9306      	str	r3, [sp, #24]
 8023df6:	eeb0 ba45 	vmov.f32	s22, s10
 8023dfa:	6812      	ldr	r2, [r2, #0]
 8023dfc:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023e00:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023e04:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023e08:	fb00 1303 	mla	r3, r0, r3, r1
 8023e0c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023e10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e12:	681b      	ldr	r3, [r3, #0]
 8023e14:	9307      	str	r3, [sp, #28]
 8023e16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e18:	685f      	ldr	r7, [r3, #4]
 8023e1a:	3704      	adds	r7, #4
 8023e1c:	9b08      	ldr	r3, [sp, #32]
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	dc03      	bgt.n	8023e2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	f340 81b2 	ble.w	802418e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023e2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e34:	1e48      	subs	r0, r1, #1
 8023e36:	f102 3cff 	add.w	ip, r2, #4294967295
 8023e3a:	9b06      	ldr	r3, [sp, #24]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	f340 80a9 	ble.w	8023f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023e42:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023e46:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023e4a:	d406      	bmi.n	8023e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023e4c:	4586      	cmp	lr, r0
 8023e4e:	da04      	bge.n	8023e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	db02      	blt.n	8023e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023e54:	4563      	cmp	r3, ip
 8023e56:	f2c0 809e 	blt.w	8023f96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8023e5a:	f11e 0e01 	adds.w	lr, lr, #1
 8023e5e:	f100 808f 	bmi.w	8023f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e62:	4571      	cmp	r1, lr
 8023e64:	f2c0 808c 	blt.w	8023f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e68:	3301      	adds	r3, #1
 8023e6a:	f100 8089 	bmi.w	8023f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e6e:	429a      	cmp	r2, r3
 8023e70:	f2c0 8086 	blt.w	8023f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023e74:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023e78:	46c8      	mov	r8, r9
 8023e7a:	f1bb 0f00 	cmp.w	fp, #0
 8023e7e:	f340 80a6 	ble.w	8023fce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023e82:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023e84:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023e88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023e8a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023e8e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023e92:	1422      	asrs	r2, r4, #16
 8023e94:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023e98:	689b      	ldr	r3, [r3, #8]
 8023e9a:	f100 80e3 	bmi.w	8024064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023e9e:	f103 3aff 	add.w	sl, r3, #4294967295
 8023ea2:	4552      	cmp	r2, sl
 8023ea4:	f280 80de 	bge.w	8024064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023ea8:	f1bc 0f00 	cmp.w	ip, #0
 8023eac:	f2c0 80da 	blt.w	8024064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023eb0:	f10e 3aff 	add.w	sl, lr, #4294967295
 8023eb4:	45d4      	cmp	ip, sl
 8023eb6:	f280 80d5 	bge.w	8024064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023eba:	b21b      	sxth	r3, r3
 8023ebc:	9d07      	ldr	r5, [sp, #28]
 8023ebe:	fb0c 2203 	mla	r2, ip, r3, r2
 8023ec2:	eb05 0a02 	add.w	sl, r5, r2
 8023ec6:	5caa      	ldrb	r2, [r5, r2]
 8023ec8:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023ecc:	2800      	cmp	r0, #0
 8023ece:	f000 80c0 	beq.w	8024052 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8023ed2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023ed6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023eda:	920b      	str	r2, [sp, #44]	; 0x2c
 8023edc:	b151      	cbz	r1, 8023ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023ede:	eb0a 0203 	add.w	r2, sl, r3
 8023ee2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023ee6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023eea:	9309      	str	r3, [sp, #36]	; 0x24
 8023eec:	7853      	ldrb	r3, [r2, #1]
 8023eee:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8023ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ef6:	fb10 f201 	smulbb	r2, r0, r1
 8023efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023efc:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023f00:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023f04:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023f08:	10d2      	asrs	r2, r2, #3
 8023f0a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023f0e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023f12:	ea4c 0c03 	orr.w	ip, ip, r3
 8023f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f18:	041b      	lsls	r3, r3, #16
 8023f1a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023f1e:	432b      	orrs	r3, r5
 8023f20:	4353      	muls	r3, r2
 8023f22:	fb0a 330c 	mla	r3, sl, ip, r3
 8023f26:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023f2a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023f2e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023f32:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023f36:	f1c1 0c10 	rsb	ip, r1, #16
 8023f3a:	ebac 0c00 	sub.w	ip, ip, r0
 8023f3e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023f42:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023f46:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f4c:	0418      	lsls	r0, r3, #16
 8023f4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023f52:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023f56:	4318      	orrs	r0, r3
 8023f58:	fb02 c200 	mla	r2, r2, r0, ip
 8023f5c:	0d53      	lsrs	r3, r2, #21
 8023f5e:	0952      	lsrs	r2, r2, #5
 8023f60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023f68:	431a      	orrs	r2, r3
 8023f6a:	f8a8 2000 	strh.w	r2, [r8]
 8023f6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023f70:	f108 0802 	add.w	r8, r8, #2
 8023f74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023f78:	441c      	add	r4, r3
 8023f7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023f7c:	441e      	add	r6, r3
 8023f7e:	e77c      	b.n	8023e7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023f82:	f109 0902 	add.w	r9, r9, #2
 8023f86:	441c      	add	r4, r3
 8023f88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023f8a:	441e      	add	r6, r3
 8023f8c:	9b06      	ldr	r3, [sp, #24]
 8023f8e:	3b01      	subs	r3, #1
 8023f90:	9306      	str	r3, [sp, #24]
 8023f92:	e752      	b.n	8023e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023f94:	d020      	beq.n	8023fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8023f96:	9b06      	ldr	r3, [sp, #24]
 8023f98:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023f9a:	3b01      	subs	r3, #1
 8023f9c:	fb00 4003 	mla	r0, r0, r3, r4
 8023fa0:	1400      	asrs	r0, r0, #16
 8023fa2:	f53f af67 	bmi.w	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023fa6:	3901      	subs	r1, #1
 8023fa8:	4288      	cmp	r0, r1
 8023faa:	f6bf af63 	bge.w	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023fae:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023fb0:	fb01 6303 	mla	r3, r1, r3, r6
 8023fb4:	141b      	asrs	r3, r3, #16
 8023fb6:	f53f af5d 	bmi.w	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023fba:	3a01      	subs	r2, #1
 8023fbc:	4293      	cmp	r3, r2
 8023fbe:	f6bf af59 	bge.w	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023fc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023fc6:	46ca      	mov	sl, r9
 8023fc8:	f1b8 0f00 	cmp.w	r8, #0
 8023fcc:	dc67      	bgt.n	802409e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8023fce:	9b06      	ldr	r3, [sp, #24]
 8023fd0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023fd4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023fd8:	9b08      	ldr	r3, [sp, #32]
 8023fda:	2b00      	cmp	r3, #0
 8023fdc:	f340 80d7 	ble.w	802418e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023fe0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023fe6:	ee79 9aab 	vadd.f32	s19, s19, s23
 8023fea:	eef0 6a48 	vmov.f32	s13, s16
 8023fee:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023ff2:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023ff6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ffa:	ee16 4a90 	vmov	r4, s13
 8023ffe:	eef0 6a68 	vmov.f32	s13, s17
 8024002:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024006:	ee16 6a90 	vmov	r6, s13
 802400a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802400e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024012:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024016:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802401a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802401e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024022:	ee18 2a10 	vmov	r2, s16
 8024026:	eeb0 8a47 	vmov.f32	s16, s14
 802402a:	fb92 f3f3 	sdiv	r3, r2, r3
 802402e:	ee18 2a90 	vmov	r2, s17
 8024032:	9329      	str	r3, [sp, #164]	; 0xa4
 8024034:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024036:	eef0 8a67 	vmov.f32	s17, s15
 802403a:	fb92 f3f3 	sdiv	r3, r2, r3
 802403e:	932a      	str	r3, [sp, #168]	; 0xa8
 8024040:	9b08      	ldr	r3, [sp, #32]
 8024042:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024044:	3b01      	subs	r3, #1
 8024046:	9308      	str	r3, [sp, #32]
 8024048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802404a:	bf08      	it	eq
 802404c:	4613      	moveq	r3, r2
 802404e:	9306      	str	r3, [sp, #24]
 8024050:	e6e4      	b.n	8023e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024052:	2900      	cmp	r1, #0
 8024054:	f43f af4e 	beq.w	8023ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024058:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802405c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024060:	9309      	str	r3, [sp, #36]	; 0x24
 8024062:	e747      	b.n	8023ef4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024064:	f112 0a01 	adds.w	sl, r2, #1
 8024068:	d481      	bmi.n	8023f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802406a:	4553      	cmp	r3, sl
 802406c:	f6ff af7f 	blt.w	8023f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024070:	f11c 0a01 	adds.w	sl, ip, #1
 8024074:	f53f af7b 	bmi.w	8023f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024078:	45d6      	cmp	lr, sl
 802407a:	f6ff af78 	blt.w	8023f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802407e:	b21b      	sxth	r3, r3
 8024080:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024084:	fa0f f28e 	sxth.w	r2, lr
 8024088:	9300      	str	r3, [sp, #0]
 802408a:	463b      	mov	r3, r7
 802408c:	9201      	str	r2, [sp, #4]
 802408e:	9a07      	ldr	r2, [sp, #28]
 8024090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024094:	4641      	mov	r1, r8
 8024096:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024098:	f7ff fdfe 	bl	8023c98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802409c:	e767      	b.n	8023f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802409e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80240a0:	1422      	asrs	r2, r4, #16
 80240a2:	1431      	asrs	r1, r6, #16
 80240a4:	9d07      	ldr	r5, [sp, #28]
 80240a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80240aa:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80240ae:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80240b2:	fb03 2101 	mla	r1, r3, r1, r2
 80240b6:	9a07      	ldr	r2, [sp, #28]
 80240b8:	440a      	add	r2, r1
 80240ba:	5c69      	ldrb	r1, [r5, r1]
 80240bc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80240c0:	f1be 0f00 	cmp.w	lr, #0
 80240c4:	d05c      	beq.n	8024180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80240c6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80240ca:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80240ce:	950d      	str	r5, [sp, #52]	; 0x34
 80240d0:	b150      	cbz	r0, 80240e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80240d2:	eb02 0c03 	add.w	ip, r2, r3
 80240d6:	5cd3      	ldrb	r3, [r2, r3]
 80240d8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80240dc:	930a      	str	r3, [sp, #40]	; 0x28
 80240de:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80240e2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80240e6:	930e      	str	r3, [sp, #56]	; 0x38
 80240e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240ea:	fb1e f200 	smulbb	r2, lr, r0
 80240ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80240f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80240f4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80240f8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80240fc:	10d2      	asrs	r2, r2, #3
 80240fe:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8024102:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024106:	ea4c 0c03 	orr.w	ip, ip, r3
 802410a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802410e:	9311      	str	r3, [sp, #68]	; 0x44
 8024110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024112:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024114:	041b      	lsls	r3, r3, #16
 8024116:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802411a:	ea43 030b 	orr.w	r3, r3, fp
 802411e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024122:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024126:	4353      	muls	r3, r2
 8024128:	fb05 3c0c 	mla	ip, r5, ip, r3
 802412c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024130:	ea43 0b01 	orr.w	fp, r3, r1
 8024134:	f1c0 0110 	rsb	r1, r0, #16
 8024138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802413a:	eba1 0e0e 	sub.w	lr, r1, lr
 802413e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8024142:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024146:	fb0e cc0b 	mla	ip, lr, fp, ip
 802414a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802414e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8024152:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024156:	ea4b 0e0e 	orr.w	lr, fp, lr
 802415a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802415e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8024162:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024166:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802416a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802416e:	ea43 0c0c 	orr.w	ip, r3, ip
 8024172:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024174:	441c      	add	r4, r3
 8024176:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024178:	f82a cb02 	strh.w	ip, [sl], #2
 802417c:	441e      	add	r6, r3
 802417e:	e723      	b.n	8023fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024180:	2800      	cmp	r0, #0
 8024182:	d0b1      	beq.n	80240e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024184:	5cd3      	ldrb	r3, [r2, r3]
 8024186:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802418a:	930a      	str	r3, [sp, #40]	; 0x28
 802418c:	e7ac      	b.n	80240e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802418e:	b013      	add	sp, #76	; 0x4c
 8024190:	ecbd 8b0a 	vpop	{d8-d12}
 8024194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024198 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8024198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802419c:	468b      	mov	fp, r1
 802419e:	8809      	ldrh	r1, [r1, #0]
 80241a0:	b089      	sub	sp, #36	; 0x24
 80241a2:	10cd      	asrs	r5, r1, #3
 80241a4:	ea4f 2921 	mov.w	r9, r1, asr #8
 80241a8:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80241ac:	00c9      	lsls	r1, r1, #3
 80241ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80241b2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80241b6:	9202      	str	r2, [sp, #8]
 80241b8:	b2c9      	uxtb	r1, r1
 80241ba:	9500      	str	r5, [sp, #0]
 80241bc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80241c0:	9101      	str	r1, [sp, #4]
 80241c2:	9900      	ldr	r1, [sp, #0]
 80241c4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80241c8:	0209      	lsls	r1, r1, #8
 80241ca:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80241ce:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80241d2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80241d6:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80241da:	fb04 650e 	mla	r5, r4, lr, r6
 80241de:	2c00      	cmp	r4, #0
 80241e0:	eb02 0805 	add.w	r8, r2, r5
 80241e4:	9a01      	ldr	r2, [sp, #4]
 80241e6:	ea41 0102 	orr.w	r1, r1, r2
 80241ea:	9107      	str	r1, [sp, #28]
 80241ec:	db43      	blt.n	8024276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80241ee:	45a2      	cmp	sl, r4
 80241f0:	dd41      	ble.n	8024276 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80241f2:	2e00      	cmp	r6, #0
 80241f4:	db3d      	blt.n	8024272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80241f6:	45b6      	cmp	lr, r6
 80241f8:	dd3b      	ble.n	8024272 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 80241fa:	9a02      	ldr	r2, [sp, #8]
 80241fc:	5d55      	ldrb	r5, [r2, r5]
 80241fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024202:	441d      	add	r5, r3
 8024204:	1c72      	adds	r2, r6, #1
 8024206:	d439      	bmi.n	802427c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024208:	4596      	cmp	lr, r2
 802420a:	dd37      	ble.n	802427c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802420c:	2f00      	cmp	r7, #0
 802420e:	d035      	beq.n	802427c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024210:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024214:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024218:	4419      	add	r1, r3
 802421a:	3401      	adds	r4, #1
 802421c:	d432      	bmi.n	8024284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802421e:	45a2      	cmp	sl, r4
 8024220:	dd30      	ble.n	8024284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024222:	b378      	cbz	r0, 8024284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024224:	2e00      	cmp	r6, #0
 8024226:	db2b      	blt.n	8024280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8024228:	45b6      	cmp	lr, r6
 802422a:	dd29      	ble.n	8024280 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802422c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8024230:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024234:	441c      	add	r4, r3
 8024236:	3601      	adds	r6, #1
 8024238:	d427      	bmi.n	802428a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802423a:	45b6      	cmp	lr, r6
 802423c:	dd25      	ble.n	802428a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802423e:	b327      	cbz	r7, 802428a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8024240:	44c6      	add	lr, r8
 8024242:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024246:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802424a:	4413      	add	r3, r2
 802424c:	782a      	ldrb	r2, [r5, #0]
 802424e:	2f0f      	cmp	r7, #15
 8024250:	9202      	str	r2, [sp, #8]
 8024252:	780a      	ldrb	r2, [r1, #0]
 8024254:	9203      	str	r2, [sp, #12]
 8024256:	7822      	ldrb	r2, [r4, #0]
 8024258:	9204      	str	r2, [sp, #16]
 802425a:	781a      	ldrb	r2, [r3, #0]
 802425c:	9205      	str	r2, [sp, #20]
 802425e:	d801      	bhi.n	8024264 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8024260:	280f      	cmp	r0, #15
 8024262:	d914      	bls.n	802428e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8024264:	4b3f      	ldr	r3, [pc, #252]	; (8024364 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8024266:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802426a:	4a3f      	ldr	r2, [pc, #252]	; (8024368 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 802426c:	483f      	ldr	r0, [pc, #252]	; (802436c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802426e:	f006 fb31 	bl	802a8d4 <__assert_func>
 8024272:	ad07      	add	r5, sp, #28
 8024274:	e7c6      	b.n	8024204 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8024276:	a907      	add	r1, sp, #28
 8024278:	460d      	mov	r5, r1
 802427a:	e7ce      	b.n	802421a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802427c:	a907      	add	r1, sp, #28
 802427e:	e7cc      	b.n	802421a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8024280:	ac07      	add	r4, sp, #28
 8024282:	e7d8      	b.n	8024236 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8024284:	ab07      	add	r3, sp, #28
 8024286:	461c      	mov	r4, r3
 8024288:	e7e0      	b.n	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802428a:	ab07      	add	r3, sp, #28
 802428c:	e7de      	b.n	802424c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802428e:	b2ba      	uxth	r2, r7
 8024290:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024294:	b280      	uxth	r0, r0
 8024296:	7849      	ldrb	r1, [r1, #1]
 8024298:	78ae      	ldrb	r6, [r5, #2]
 802429a:	fa1f f78c 	uxth.w	r7, ip
 802429e:	fb02 fa00 	mul.w	sl, r2, r0
 80242a2:	0112      	lsls	r2, r2, #4
 80242a4:	786d      	ldrb	r5, [r5, #1]
 80242a6:	ea6f 0c0c 	mvn.w	ip, ip
 80242aa:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80242ae:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80242b2:	eba2 020a 	sub.w	r2, r2, sl
 80242b6:	fa5f fc8c 	uxtb.w	ip, ip
 80242ba:	b280      	uxth	r0, r0
 80242bc:	fb19 f90c 	smulbb	r9, r9, ip
 80242c0:	b292      	uxth	r2, r2
 80242c2:	ebae 0e00 	sub.w	lr, lr, r0
 80242c6:	4351      	muls	r1, r2
 80242c8:	fa1f fe8e 	uxth.w	lr, lr
 80242cc:	fb02 f808 	mul.w	r8, r2, r8
 80242d0:	fb0e 1505 	mla	r5, lr, r5, r1
 80242d4:	7861      	ldrb	r1, [r4, #1]
 80242d6:	fb0e 8806 	mla	r8, lr, r6, r8
 80242da:	78a6      	ldrb	r6, [r4, #2]
 80242dc:	fb00 5501 	mla	r5, r0, r1, r5
 80242e0:	7859      	ldrb	r1, [r3, #1]
 80242e2:	fb00 8806 	mla	r8, r0, r6, r8
 80242e6:	789e      	ldrb	r6, [r3, #2]
 80242e8:	9b00      	ldr	r3, [sp, #0]
 80242ea:	fb0a 5101 	mla	r1, sl, r1, r5
 80242ee:	fb0a 8606 	mla	r6, sl, r6, r8
 80242f2:	fb13 f50c 	smulbb	r5, r3, ip
 80242f6:	9b03      	ldr	r3, [sp, #12]
 80242f8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80242fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024300:	435a      	muls	r2, r3
 8024302:	9b02      	ldr	r3, [sp, #8]
 8024304:	fb06 9607 	mla	r6, r6, r7, r9
 8024308:	fb0e 2203 	mla	r2, lr, r3, r2
 802430c:	9b04      	ldr	r3, [sp, #16]
 802430e:	b2b6      	uxth	r6, r6
 8024310:	fb01 5107 	mla	r1, r1, r7, r5
 8024314:	fb00 2003 	mla	r0, r0, r3, r2
 8024318:	9b05      	ldr	r3, [sp, #20]
 802431a:	f106 0901 	add.w	r9, r6, #1
 802431e:	b289      	uxth	r1, r1
 8024320:	fb0a 0a03 	mla	sl, sl, r3, r0
 8024324:	9b01      	ldr	r3, [sp, #4]
 8024326:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802432a:	1c4d      	adds	r5, r1, #1
 802432c:	fb13 fc0c 	smulbb	ip, r3, ip
 8024330:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024334:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8024338:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802433c:	fb0a c707 	mla	r7, sl, r7, ip
 8024340:	0949      	lsrs	r1, r1, #5
 8024342:	b2bf      	uxth	r7, r7
 8024344:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024348:	1c7e      	adds	r6, r7, #1
 802434a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802434e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8024352:	ea46 0609 	orr.w	r6, r6, r9
 8024356:	430e      	orrs	r6, r1
 8024358:	f8ab 6000 	strh.w	r6, [fp]
 802435c:	b009      	add	sp, #36	; 0x24
 802435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024362:	bf00      	nop
 8024364:	0802fb1d 	.word	0x0802fb1d
 8024368:	080300ea 	.word	0x080300ea
 802436c:	0802fba1 	.word	0x0802fba1

08024370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024374:	ed2d 8b08 	vpush	{d8-d11}
 8024378:	b095      	sub	sp, #84	; 0x54
 802437a:	eeb0 aa40 	vmov.f32	s20, s0
 802437e:	eef0 9a60 	vmov.f32	s19, s1
 8024382:	9212      	str	r2, [sp, #72]	; 0x48
 8024384:	eeb0 9a41 	vmov.f32	s18, s2
 8024388:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802438a:	eeb0 8a62 	vmov.f32	s16, s5
 802438e:	9309      	str	r3, [sp, #36]	; 0x24
 8024390:	eef0 8a43 	vmov.f32	s17, s6
 8024394:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8024398:	eef0 ba44 	vmov.f32	s23, s8
 802439c:	9013      	str	r0, [sp, #76]	; 0x4c
 802439e:	eeb0 ba64 	vmov.f32	s22, s9
 80243a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80243a4:	eef0 aa45 	vmov.f32	s21, s10
 80243a8:	6850      	ldr	r0, [r2, #4]
 80243aa:	910e      	str	r1, [sp, #56]	; 0x38
 80243ac:	6812      	ldr	r2, [r2, #0]
 80243ae:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80243b2:	fb00 1303 	mla	r3, r0, r3, r1
 80243b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80243ba:	930a      	str	r3, [sp, #40]	; 0x28
 80243bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243be:	681b      	ldr	r3, [r3, #0]
 80243c0:	930d      	str	r3, [sp, #52]	; 0x34
 80243c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243c4:	685c      	ldr	r4, [r3, #4]
 80243c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243c8:	3404      	adds	r4, #4
 80243ca:	43db      	mvns	r3, r3
 80243cc:	b2db      	uxtb	r3, r3
 80243ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80243d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80243d2:	2b00      	cmp	r3, #0
 80243d4:	dc03      	bgt.n	80243de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80243d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80243d8:	2b00      	cmp	r3, #0
 80243da:	f340 8255 	ble.w	8024888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 80243de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80243e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243e8:	1e48      	subs	r0, r1, #1
 80243ea:	1e55      	subs	r5, r2, #1
 80243ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	f340 80f9 	ble.w	80245e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80243f4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80243f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243f8:	1436      	asrs	r6, r6, #16
 80243fa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80243fe:	d406      	bmi.n	802440e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024400:	4286      	cmp	r6, r0
 8024402:	da04      	bge.n	802440e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024404:	2b00      	cmp	r3, #0
 8024406:	db02      	blt.n	802440e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024408:	42ab      	cmp	r3, r5
 802440a:	f2c0 80ed 	blt.w	80245e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802440e:	3601      	adds	r6, #1
 8024410:	f100 80da 	bmi.w	80245c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024414:	42b1      	cmp	r1, r6
 8024416:	f2c0 80d7 	blt.w	80245c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802441a:	3301      	adds	r3, #1
 802441c:	f100 80d4 	bmi.w	80245c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024420:	429a      	cmp	r2, r3
 8024422:	f2c0 80d1 	blt.w	80245c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024428:	9311      	str	r3, [sp, #68]	; 0x44
 802442a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802442c:	930c      	str	r3, [sp, #48]	; 0x30
 802442e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024430:	2b00      	cmp	r3, #0
 8024432:	f340 80fa 	ble.w	802462a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024436:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024438:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802443a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802443c:	68c6      	ldr	r6, [r0, #12]
 802443e:	141d      	asrs	r5, r3, #16
 8024440:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024442:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024446:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024448:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802444a:	1400      	asrs	r0, r0, #16
 802444c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024450:	6892      	ldr	r2, [r2, #8]
 8024452:	f100 813e 	bmi.w	80246d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024456:	1e57      	subs	r7, r2, #1
 8024458:	42b8      	cmp	r0, r7
 802445a:	f280 813a 	bge.w	80246d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802445e:	2d00      	cmp	r5, #0
 8024460:	f2c0 8137 	blt.w	80246d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024464:	1e77      	subs	r7, r6, #1
 8024466:	42bd      	cmp	r5, r7
 8024468:	f280 8133 	bge.w	80246d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802446c:	b212      	sxth	r2, r2
 802446e:	fb05 0002 	mla	r0, r5, r2, r0
 8024472:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024474:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024478:	182e      	adds	r6, r5, r0
 802447a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802447e:	eb04 050a 	add.w	r5, r4, sl
 8024482:	2b00      	cmp	r3, #0
 8024484:	f000 8117 	beq.w	80246b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024488:	f896 c001 	ldrb.w	ip, [r6, #1]
 802448c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024490:	44a4      	add	ip, r4
 8024492:	2900      	cmp	r1, #0
 8024494:	f000 8117 	beq.w	80246c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024498:	18b0      	adds	r0, r6, r2
 802449a:	5cb2      	ldrb	r2, [r6, r2]
 802449c:	7840      	ldrb	r0, [r0, #1]
 802449e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80244a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80244a6:	4422      	add	r2, r4
 80244a8:	4420      	add	r0, r4
 80244aa:	b29b      	uxth	r3, r3
 80244ac:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80244b0:	b289      	uxth	r1, r1
 80244b2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80244b6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80244b8:	fb03 f901 	mul.w	r9, r3, r1
 80244bc:	011b      	lsls	r3, r3, #4
 80244be:	f8b6 e000 	ldrh.w	lr, [r6]
 80244c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80244c6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80244ca:	eba3 0309 	sub.w	r3, r3, r9
 80244ce:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80244d2:	b289      	uxth	r1, r1
 80244d4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80244d8:	b29b      	uxth	r3, r3
 80244da:	eba8 0801 	sub.w	r8, r8, r1
 80244de:	435f      	muls	r7, r3
 80244e0:	fa1f f888 	uxth.w	r8, r8
 80244e4:	9310      	str	r3, [sp, #64]	; 0x40
 80244e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244e8:	fb08 770b 	mla	r7, r8, fp, r7
 80244ec:	f892 b002 	ldrb.w	fp, [r2, #2]
 80244f0:	fb01 770b 	mla	r7, r1, fp, r7
 80244f4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80244f8:	fb09 770b 	mla	r7, r9, fp, r7
 80244fc:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024500:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024504:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024508:	fb1b fb03 	smulbb	fp, fp, r3
 802450c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802450e:	fb07 b706 	mla	r7, r7, r6, fp
 8024512:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024516:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802451a:	f89c c000 	ldrb.w	ip, [ip]
 802451e:	b2bf      	uxth	r7, r7
 8024520:	435d      	muls	r5, r3
 8024522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024524:	fb08 550b 	mla	r5, r8, fp, r5
 8024528:	f892 b001 	ldrb.w	fp, [r2, #1]
 802452c:	fb01 550b 	mla	r5, r1, fp, r5
 8024530:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024534:	fb09 550b 	mla	r5, r9, fp, r5
 8024538:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802453c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024540:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024544:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024548:	fa5f fe8e 	uxtb.w	lr, lr
 802454c:	fb1b fb03 	smulbb	fp, fp, r3
 8024550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024552:	fb03 f30c 	mul.w	r3, r3, ip
 8024556:	f892 c000 	ldrb.w	ip, [r2]
 802455a:	fb05 b506 	mla	r5, r5, r6, fp
 802455e:	fb08 330a 	mla	r3, r8, sl, r3
 8024562:	b2ad      	uxth	r5, r5
 8024564:	fb01 330c 	mla	r3, r1, ip, r3
 8024568:	f890 c000 	ldrb.w	ip, [r0]
 802456c:	f105 0b01 	add.w	fp, r5, #1
 8024570:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024576:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802457a:	fb1e fe03 	smulbb	lr, lr, r3
 802457e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024582:	1c7b      	adds	r3, r7, #1
 8024584:	096d      	lsrs	r5, r5, #5
 8024586:	fb0c e606 	mla	r6, ip, r6, lr
 802458a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802458e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024592:	b2b6      	uxth	r6, r6
 8024594:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024598:	1c77      	adds	r7, r6, #1
 802459a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802459e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80245a2:	431f      	orrs	r7, r3
 80245a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80245a6:	433d      	orrs	r5, r7
 80245a8:	801d      	strh	r5, [r3, #0]
 80245aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80245ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80245ae:	3302      	adds	r3, #2
 80245b0:	930c      	str	r3, [sp, #48]	; 0x30
 80245b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80245b4:	4413      	add	r3, r2
 80245b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80245b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80245ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245bc:	4413      	add	r3, r2
 80245be:	9328      	str	r3, [sp, #160]	; 0xa0
 80245c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80245c2:	3b01      	subs	r3, #1
 80245c4:	9311      	str	r3, [sp, #68]	; 0x44
 80245c6:	e732      	b.n	802442e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80245c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80245ca:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80245cc:	4433      	add	r3, r6
 80245ce:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80245d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80245d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245d4:	4433      	add	r3, r6
 80245d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80245d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245da:	3b01      	subs	r3, #1
 80245dc:	9309      	str	r3, [sp, #36]	; 0x24
 80245de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245e0:	3302      	adds	r3, #2
 80245e2:	930a      	str	r3, [sp, #40]	; 0x28
 80245e4:	e702      	b.n	80243ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80245e6:	d027      	beq.n	8024638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80245e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80245ec:	3b01      	subs	r3, #1
 80245ee:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80245f0:	fb00 5003 	mla	r0, r0, r3, r5
 80245f4:	1400      	asrs	r0, r0, #16
 80245f6:	f53f af16 	bmi.w	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80245fa:	3901      	subs	r1, #1
 80245fc:	4288      	cmp	r0, r1
 80245fe:	f6bf af12 	bge.w	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024602:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024604:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024606:	fb01 0303 	mla	r3, r1, r3, r0
 802460a:	141b      	asrs	r3, r3, #16
 802460c:	f53f af0b 	bmi.w	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024610:	3a01      	subs	r2, #1
 8024612:	4293      	cmp	r3, r2
 8024614:	f6bf af07 	bge.w	8024426 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802461a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 802461e:	9311      	str	r3, [sp, #68]	; 0x44
 8024620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024622:	930c      	str	r3, [sp, #48]	; 0x30
 8024624:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024626:	2b00      	cmp	r3, #0
 8024628:	dc70      	bgt.n	802470c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802462a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802462c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802462e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024632:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024636:	930a      	str	r3, [sp, #40]	; 0x28
 8024638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802463a:	2b00      	cmp	r3, #0
 802463c:	f340 8124 	ble.w	8024888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024644:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024646:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802464a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802464e:	eef0 6a48 	vmov.f32	s13, s16
 8024652:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024656:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802465a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802465e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8024662:	eef0 6a68 	vmov.f32	s13, s17
 8024666:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802466a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 802466e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024672:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024676:	ee37 8a48 	vsub.f32	s16, s14, s16
 802467a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802467e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024682:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024686:	ee18 2a10 	vmov	r2, s16
 802468a:	eeb0 8a47 	vmov.f32	s16, s14
 802468e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024692:	ee18 2a90 	vmov	r2, s17
 8024696:	9329      	str	r3, [sp, #164]	; 0xa4
 8024698:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802469a:	eef0 8a67 	vmov.f32	s17, s15
 802469e:	fb92 f3f3 	sdiv	r3, r2, r3
 80246a2:	932a      	str	r3, [sp, #168]	; 0xa8
 80246a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80246a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80246a8:	3b01      	subs	r3, #1
 80246aa:	930e      	str	r3, [sp, #56]	; 0x38
 80246ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80246ae:	bf08      	it	eq
 80246b0:	4613      	moveq	r3, r2
 80246b2:	9309      	str	r3, [sp, #36]	; 0x24
 80246b4:	e68c      	b.n	80243d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80246b6:	b149      	cbz	r1, 80246cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80246b8:	5cb2      	ldrb	r2, [r6, r2]
 80246ba:	4628      	mov	r0, r5
 80246bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80246c0:	4422      	add	r2, r4
 80246c2:	46ac      	mov	ip, r5
 80246c4:	e6f1      	b.n	80244aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80246c6:	4628      	mov	r0, r5
 80246c8:	462a      	mov	r2, r5
 80246ca:	e6ee      	b.n	80244aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80246cc:	4628      	mov	r0, r5
 80246ce:	462a      	mov	r2, r5
 80246d0:	e7f7      	b.n	80246c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80246d2:	1c47      	adds	r7, r0, #1
 80246d4:	f53f af69 	bmi.w	80245aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80246d8:	42ba      	cmp	r2, r7
 80246da:	f6ff af66 	blt.w	80245aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80246de:	1c6f      	adds	r7, r5, #1
 80246e0:	f53f af63 	bmi.w	80245aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80246e4:	42be      	cmp	r6, r7
 80246e6:	f6ff af60 	blt.w	80245aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 80246ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80246ec:	b236      	sxth	r6, r6
 80246ee:	b212      	sxth	r2, r2
 80246f0:	9002      	str	r0, [sp, #8]
 80246f2:	9601      	str	r6, [sp, #4]
 80246f4:	9200      	str	r2, [sp, #0]
 80246f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80246f8:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80246fc:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024700:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024704:	4623      	mov	r3, r4
 8024706:	f7ff fd47 	bl	8024198 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 802470a:	e74e      	b.n	80245aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802470c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802470e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024710:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024714:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8024716:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024718:	1400      	asrs	r0, r0, #16
 802471a:	142d      	asrs	r5, r5, #16
 802471c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802471e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024722:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024726:	fb02 5000 	mla	r0, r2, r0, r5
 802472a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802472c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024730:	182e      	adds	r6, r5, r0
 8024732:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024736:	eb04 0509 	add.w	r5, r4, r9
 802473a:	2b00      	cmp	r3, #0
 802473c:	f000 8096 	beq.w	802486c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024740:	7877      	ldrb	r7, [r6, #1]
 8024742:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024746:	4427      	add	r7, r4
 8024748:	2900      	cmp	r1, #0
 802474a:	f000 8097 	beq.w	802487c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802474e:	18b0      	adds	r0, r6, r2
 8024750:	5cb2      	ldrb	r2, [r6, r2]
 8024752:	7840      	ldrb	r0, [r0, #1]
 8024754:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024758:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802475c:	4422      	add	r2, r4
 802475e:	4420      	add	r0, r4
 8024760:	b29b      	uxth	r3, r3
 8024762:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024764:	b289      	uxth	r1, r1
 8024766:	f895 b002 	ldrb.w	fp, [r5, #2]
 802476a:	f8b6 c000 	ldrh.w	ip, [r6]
 802476e:	fb03 f801 	mul.w	r8, r3, r1
 8024772:	011b      	lsls	r3, r3, #4
 8024774:	78be      	ldrb	r6, [r7, #2]
 8024776:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802477a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802477e:	eba3 0308 	sub.w	r3, r3, r8
 8024782:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024786:	b289      	uxth	r1, r1
 8024788:	b29b      	uxth	r3, r3
 802478a:	ebae 0e01 	sub.w	lr, lr, r1
 802478e:	435e      	muls	r6, r3
 8024790:	fa1f fe8e 	uxth.w	lr, lr
 8024794:	9310      	str	r3, [sp, #64]	; 0x40
 8024796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024798:	fb0e 660b 	mla	r6, lr, fp, r6
 802479c:	f892 b002 	ldrb.w	fp, [r2, #2]
 80247a0:	fb01 660b 	mla	r6, r1, fp, r6
 80247a4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80247a8:	fb08 660b 	mla	r6, r8, fp, r6
 80247ac:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 80247b0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80247b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80247b8:	fb1b fb03 	smulbb	fp, fp, r3
 80247bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247be:	fb06 b60a 	mla	r6, r6, sl, fp
 80247c2:	f895 b001 	ldrb.w	fp, [r5, #1]
 80247c6:	787d      	ldrb	r5, [r7, #1]
 80247c8:	783f      	ldrb	r7, [r7, #0]
 80247ca:	b2b6      	uxth	r6, r6
 80247cc:	435d      	muls	r5, r3
 80247ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80247d0:	fb0e 550b 	mla	r5, lr, fp, r5
 80247d4:	f892 b001 	ldrb.w	fp, [r2, #1]
 80247d8:	fb01 550b 	mla	r5, r1, fp, r5
 80247dc:	f890 b001 	ldrb.w	fp, [r0, #1]
 80247e0:	fb08 550b 	mla	r5, r8, fp, r5
 80247e4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80247e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80247ec:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80247f0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80247f4:	fa5f fc8c 	uxtb.w	ip, ip
 80247f8:	fb1b fb03 	smulbb	fp, fp, r3
 80247fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247fe:	437b      	muls	r3, r7
 8024800:	7817      	ldrb	r7, [r2, #0]
 8024802:	fb05 b50a 	mla	r5, r5, sl, fp
 8024806:	fb0e 3309 	mla	r3, lr, r9, r3
 802480a:	b2ad      	uxth	r5, r5
 802480c:	fb01 3307 	mla	r3, r1, r7, r3
 8024810:	7807      	ldrb	r7, [r0, #0]
 8024812:	f105 0b01 	add.w	fp, r5, #1
 8024816:	fb08 3707 	mla	r7, r8, r7, r3
 802481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802481c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024820:	fb1c fc03 	smulbb	ip, ip, r3
 8024824:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024828:	1c73      	adds	r3, r6, #1
 802482a:	096d      	lsrs	r5, r5, #5
 802482c:	fb07 c70a 	mla	r7, r7, sl, ip
 8024830:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024834:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024838:	b2bf      	uxth	r7, r7
 802483a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802483c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024840:	1c7a      	adds	r2, r7, #1
 8024842:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024846:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802484a:	4316      	orrs	r6, r2
 802484c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802484e:	432e      	orrs	r6, r5
 8024850:	f823 6b02 	strh.w	r6, [r3], #2
 8024854:	930c      	str	r3, [sp, #48]	; 0x30
 8024856:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024858:	4413      	add	r3, r2
 802485a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802485c:	9327      	str	r3, [sp, #156]	; 0x9c
 802485e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024860:	4413      	add	r3, r2
 8024862:	9328      	str	r3, [sp, #160]	; 0xa0
 8024864:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024866:	3b01      	subs	r3, #1
 8024868:	9311      	str	r3, [sp, #68]	; 0x44
 802486a:	e6db      	b.n	8024624 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802486c:	b149      	cbz	r1, 8024882 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 802486e:	5cb2      	ldrb	r2, [r6, r2]
 8024870:	4628      	mov	r0, r5
 8024872:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024876:	4422      	add	r2, r4
 8024878:	462f      	mov	r7, r5
 802487a:	e771      	b.n	8024760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802487c:	4628      	mov	r0, r5
 802487e:	462a      	mov	r2, r5
 8024880:	e76e      	b.n	8024760 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024882:	4628      	mov	r0, r5
 8024884:	462a      	mov	r2, r5
 8024886:	e7f7      	b.n	8024878 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024888:	b015      	add	sp, #84	; 0x54
 802488a:	ecbd 8b08 	vpop	{d8-d11}
 802488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024894 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024898:	880e      	ldrh	r6, [r1, #0]
 802489a:	b085      	sub	sp, #20
 802489c:	4691      	mov	r9, r2
 802489e:	0230      	lsls	r0, r6, #8
 80248a0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80248a4:	9101      	str	r1, [sp, #4]
 80248a6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80248aa:	0170      	lsls	r0, r6, #5
 80248ac:	00f6      	lsls	r6, r6, #3
 80248ae:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80248b2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80248b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80248ba:	b2f6      	uxtb	r6, r6
 80248bc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80248c0:	ea4b 0000 	orr.w	r0, fp, r0
 80248c4:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80248c8:	4306      	orrs	r6, r0
 80248ca:	fb05 7a0c 	mla	sl, r5, ip, r7
 80248ce:	2d00      	cmp	r5, #0
 80248d0:	9603      	str	r6, [sp, #12]
 80248d2:	eb09 0e0a 	add.w	lr, r9, sl
 80248d6:	db42      	blt.n	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80248d8:	45a8      	cmp	r8, r5
 80248da:	dd40      	ble.n	802495e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 80248dc:	2f00      	cmp	r7, #0
 80248de:	db3c      	blt.n	802495a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80248e0:	45bc      	cmp	ip, r7
 80248e2:	dd3a      	ble.n	802495a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 80248e4:	f819 600a 	ldrb.w	r6, [r9, sl]
 80248e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80248ec:	441e      	add	r6, r3
 80248ee:	1c78      	adds	r0, r7, #1
 80248f0:	d438      	bmi.n	8024964 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80248f2:	4584      	cmp	ip, r0
 80248f4:	dd36      	ble.n	8024964 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80248f6:	b3aa      	cbz	r2, 8024964 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 80248f8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80248fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024900:	4418      	add	r0, r3
 8024902:	3501      	adds	r5, #1
 8024904:	d432      	bmi.n	802496c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024906:	45a8      	cmp	r8, r5
 8024908:	dd30      	ble.n	802496c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802490a:	b37c      	cbz	r4, 802496c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802490c:	2f00      	cmp	r7, #0
 802490e:	db2b      	blt.n	8024968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024910:	45bc      	cmp	ip, r7
 8024912:	dd29      	ble.n	8024968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024914:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802491c:	441d      	add	r5, r3
 802491e:	3701      	adds	r7, #1
 8024920:	d427      	bmi.n	8024972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024922:	45bc      	cmp	ip, r7
 8024924:	dd25      	ble.n	8024972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024926:	b322      	cbz	r2, 8024972 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024928:	44f4      	add	ip, lr
 802492a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802492e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024932:	443b      	add	r3, r7
 8024934:	781f      	ldrb	r7, [r3, #0]
 8024936:	2a0f      	cmp	r2, #15
 8024938:	f896 9000 	ldrb.w	r9, [r6]
 802493c:	f890 a000 	ldrb.w	sl, [r0]
 8024940:	4639      	mov	r1, r7
 8024942:	f895 8000 	ldrb.w	r8, [r5]
 8024946:	d801      	bhi.n	802494c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024948:	2c0f      	cmp	r4, #15
 802494a:	d914      	bls.n	8024976 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 802494c:	4b2c      	ldr	r3, [pc, #176]	; (8024a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 802494e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024952:	4a2c      	ldr	r2, [pc, #176]	; (8024a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024954:	482c      	ldr	r0, [pc, #176]	; (8024a08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024956:	f005 ffbd 	bl	802a8d4 <__assert_func>
 802495a:	ae03      	add	r6, sp, #12
 802495c:	e7c7      	b.n	80248ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 802495e:	a803      	add	r0, sp, #12
 8024960:	4606      	mov	r6, r0
 8024962:	e7ce      	b.n	8024902 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024964:	a803      	add	r0, sp, #12
 8024966:	e7cc      	b.n	8024902 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024968:	ad03      	add	r5, sp, #12
 802496a:	e7d8      	b.n	802491e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 802496c:	ab03      	add	r3, sp, #12
 802496e:	461d      	mov	r5, r3
 8024970:	e7e0      	b.n	8024934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024972:	ab03      	add	r3, sp, #12
 8024974:	e7de      	b.n	8024934 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024976:	b292      	uxth	r2, r2
 8024978:	f890 c002 	ldrb.w	ip, [r0, #2]
 802497c:	b2a4      	uxth	r4, r4
 802497e:	f896 b002 	ldrb.w	fp, [r6, #2]
 8024982:	7840      	ldrb	r0, [r0, #1]
 8024984:	fb02 fe04 	mul.w	lr, r2, r4
 8024988:	0112      	lsls	r2, r2, #4
 802498a:	7876      	ldrb	r6, [r6, #1]
 802498c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024990:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024994:	eba2 020e 	sub.w	r2, r2, lr
 8024998:	b2a4      	uxth	r4, r4
 802499a:	b292      	uxth	r2, r2
 802499c:	1b3f      	subs	r7, r7, r4
 802499e:	fb02 fc0c 	mul.w	ip, r2, ip
 80249a2:	b2bf      	uxth	r7, r7
 80249a4:	fb07 cc0b 	mla	ip, r7, fp, ip
 80249a8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80249ac:	fb04 cc0b 	mla	ip, r4, fp, ip
 80249b0:	f893 b002 	ldrb.w	fp, [r3, #2]
 80249b4:	785b      	ldrb	r3, [r3, #1]
 80249b6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80249ba:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80249be:	fb02 fc0a 	mul.w	ip, r2, sl
 80249c2:	4342      	muls	r2, r0
 80249c4:	7868      	ldrb	r0, [r5, #1]
 80249c6:	fb07 cc09 	mla	ip, r7, r9, ip
 80249ca:	fb07 2206 	mla	r2, r7, r6, r2
 80249ce:	fb04 cc08 	mla	ip, r4, r8, ip
 80249d2:	fb04 2400 	mla	r4, r4, r0, r2
 80249d6:	fb0e cc01 	mla	ip, lr, r1, ip
 80249da:	fb0e 4e03 	mla	lr, lr, r3, r4
 80249de:	9b01      	ldr	r3, [sp, #4]
 80249e0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80249e4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80249e8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80249ec:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80249f0:	ea4c 0c0e 	orr.w	ip, ip, lr
 80249f4:	f8a3 c000 	strh.w	ip, [r3]
 80249f8:	b005      	add	sp, #20
 80249fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249fe:	bf00      	nop
 8024a00:	0802fb1d 	.word	0x0802fb1d
 8024a04:	080300ea 	.word	0x080300ea
 8024a08:	0802fba1 	.word	0x0802fba1

08024a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a10:	ed2d 8b08 	vpush	{d8-d11}
 8024a14:	b08f      	sub	sp, #60	; 0x3c
 8024a16:	eeb0 aa40 	vmov.f32	s20, s0
 8024a1a:	eef0 9a60 	vmov.f32	s19, s1
 8024a1e:	920c      	str	r2, [sp, #48]	; 0x30
 8024a20:	eeb0 9a41 	vmov.f32	s18, s2
 8024a24:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024a26:	eeb0 8a62 	vmov.f32	s16, s5
 8024a2a:	900d      	str	r0, [sp, #52]	; 0x34
 8024a2c:	eef0 8a43 	vmov.f32	s17, s6
 8024a30:	6850      	ldr	r0, [r2, #4]
 8024a32:	eef0 ba44 	vmov.f32	s23, s8
 8024a36:	910a      	str	r1, [sp, #40]	; 0x28
 8024a38:	eeb0 ba64 	vmov.f32	s22, s9
 8024a3c:	9306      	str	r3, [sp, #24]
 8024a3e:	eef0 aa45 	vmov.f32	s21, s10
 8024a42:	6812      	ldr	r2, [r2, #0]
 8024a44:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024a48:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8024a4c:	fb00 1303 	mla	r3, r0, r3, r1
 8024a50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a54:	9307      	str	r3, [sp, #28]
 8024a56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a58:	681b      	ldr	r3, [r3, #0]
 8024a5a:	9308      	str	r3, [sp, #32]
 8024a5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a5e:	685c      	ldr	r4, [r3, #4]
 8024a60:	3404      	adds	r4, #4
 8024a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	dc03      	bgt.n	8024a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a6a:	2b00      	cmp	r3, #0
 8024a6c:	f340 81d5 	ble.w	8024e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024a70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a76:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a7a:	1e48      	subs	r0, r1, #1
 8024a7c:	1e56      	subs	r6, r2, #1
 8024a7e:	9b06      	ldr	r3, [sp, #24]
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	f340 80b6 	ble.w	8024bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024a86:	ea5f 472b 	movs.w	r7, fp, asr #16
 8024a8a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024a8e:	d406      	bmi.n	8024a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a90:	4287      	cmp	r7, r0
 8024a92:	da04      	bge.n	8024a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a94:	2b00      	cmp	r3, #0
 8024a96:	db02      	blt.n	8024a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024a98:	42b3      	cmp	r3, r6
 8024a9a:	f2c0 80ab 	blt.w	8024bf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024a9e:	3701      	adds	r7, #1
 8024aa0:	f100 809c 	bmi.w	8024bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024aa4:	42b9      	cmp	r1, r7
 8024aa6:	f2c0 8099 	blt.w	8024bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024aaa:	3301      	adds	r3, #1
 8024aac:	f100 8096 	bmi.w	8024bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024ab0:	429a      	cmp	r2, r3
 8024ab2:	f2c0 8093 	blt.w	8024bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024ab6:	9b06      	ldr	r3, [sp, #24]
 8024ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8024aba:	9b07      	ldr	r3, [sp, #28]
 8024abc:	9309      	str	r3, [sp, #36]	; 0x24
 8024abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ac0:	2b00      	cmp	r3, #0
 8024ac2:	f340 80b4 	ble.w	8024c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024ac6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024ac8:	142e      	asrs	r6, r5, #16
 8024aca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024acc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024ad0:	68c7      	ldr	r7, [r0, #12]
 8024ad2:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024ad6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024ada:	6892      	ldr	r2, [r2, #8]
 8024adc:	f100 80fb 	bmi.w	8024cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024ae0:	f102 3cff 	add.w	ip, r2, #4294967295
 8024ae4:	4560      	cmp	r0, ip
 8024ae6:	f280 80f6 	bge.w	8024cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024aea:	2e00      	cmp	r6, #0
 8024aec:	f2c0 80f3 	blt.w	8024cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024af0:	f107 3cff 	add.w	ip, r7, #4294967295
 8024af4:	4566      	cmp	r6, ip
 8024af6:	f280 80ee 	bge.w	8024cd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024afa:	b212      	sxth	r2, r2
 8024afc:	fb06 0002 	mla	r0, r6, r2, r0
 8024b00:	9e08      	ldr	r6, [sp, #32]
 8024b02:	1837      	adds	r7, r6, r0
 8024b04:	5c30      	ldrb	r0, [r6, r0]
 8024b06:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8024b0a:	eb04 0c08 	add.w	ip, r4, r8
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	f000 80d3 	beq.w	8024cba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024b14:	787e      	ldrb	r6, [r7, #1]
 8024b16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024b1a:	4426      	add	r6, r4
 8024b1c:	2900      	cmp	r1, #0
 8024b1e:	f000 80d4 	beq.w	8024cca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8024b22:	18b8      	adds	r0, r7, r2
 8024b24:	5cba      	ldrb	r2, [r7, r2]
 8024b26:	7840      	ldrb	r0, [r0, #1]
 8024b28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b30:	4422      	add	r2, r4
 8024b32:	4420      	add	r0, r4
 8024b34:	b29b      	uxth	r3, r3
 8024b36:	78b7      	ldrb	r7, [r6, #2]
 8024b38:	b289      	uxth	r1, r1
 8024b3a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024b3e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024b42:	fb03 f901 	mul.w	r9, r3, r1
 8024b46:	011b      	lsls	r3, r3, #4
 8024b48:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024b4c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024b50:	eba3 0309 	sub.w	r3, r3, r9
 8024b54:	b289      	uxth	r1, r1
 8024b56:	b29b      	uxth	r3, r3
 8024b58:	ebae 0e01 	sub.w	lr, lr, r1
 8024b5c:	435f      	muls	r7, r3
 8024b5e:	fa1f fe8e 	uxth.w	lr, lr
 8024b62:	fb0e 770a 	mla	r7, lr, sl, r7
 8024b66:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024b6a:	fb01 770a 	mla	r7, r1, sl, r7
 8024b6e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024b72:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024b76:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024b7a:	f896 8000 	ldrb.w	r8, [r6]
 8024b7e:	7876      	ldrb	r6, [r6, #1]
 8024b80:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024b84:	fb03 f808 	mul.w	r8, r3, r8
 8024b88:	4373      	muls	r3, r6
 8024b8a:	fb0e 8807 	mla	r8, lr, r7, r8
 8024b8e:	7817      	ldrb	r7, [r2, #0]
 8024b90:	fb0e 330c 	mla	r3, lr, ip, r3
 8024b94:	fb01 8807 	mla	r8, r1, r7, r8
 8024b98:	7807      	ldrb	r7, [r0, #0]
 8024b9a:	fb09 8707 	mla	r7, r9, r7, r8
 8024b9e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024ba2:	ea47 070a 	orr.w	r7, r7, sl
 8024ba6:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024baa:	fb01 310a 	mla	r1, r1, sl, r3
 8024bae:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bb4:	fb09 1a0a 	mla	sl, r9, sl, r1
 8024bb8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024bbc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024bc0:	ea47 070a 	orr.w	r7, r7, sl
 8024bc4:	801f      	strh	r7, [r3, #0]
 8024bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bc8:	3302      	adds	r3, #2
 8024bca:	9309      	str	r3, [sp, #36]	; 0x24
 8024bcc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bce:	449b      	add	fp, r3
 8024bd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024bd2:	441d      	add	r5, r3
 8024bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bd6:	3b01      	subs	r3, #1
 8024bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8024bda:	e770      	b.n	8024abe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8024bdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bde:	449b      	add	fp, r3
 8024be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024be2:	441d      	add	r5, r3
 8024be4:	9b06      	ldr	r3, [sp, #24]
 8024be6:	3b01      	subs	r3, #1
 8024be8:	9306      	str	r3, [sp, #24]
 8024bea:	9b07      	ldr	r3, [sp, #28]
 8024bec:	3302      	adds	r3, #2
 8024bee:	9307      	str	r3, [sp, #28]
 8024bf0:	e745      	b.n	8024a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024bf2:	d023      	beq.n	8024c3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024bf4:	9b06      	ldr	r3, [sp, #24]
 8024bf6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024bf8:	3b01      	subs	r3, #1
 8024bfa:	fb00 b003 	mla	r0, r0, r3, fp
 8024bfe:	1400      	asrs	r0, r0, #16
 8024c00:	f53f af59 	bmi.w	8024ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c04:	3901      	subs	r1, #1
 8024c06:	4288      	cmp	r0, r1
 8024c08:	f6bf af55 	bge.w	8024ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c0c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024c0e:	fb01 5303 	mla	r3, r1, r3, r5
 8024c12:	141b      	asrs	r3, r3, #16
 8024c14:	f53f af4f 	bmi.w	8024ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c18:	3a01      	subs	r2, #1
 8024c1a:	4293      	cmp	r3, r2
 8024c1c:	f6bf af4b 	bge.w	8024ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024c20:	9b06      	ldr	r3, [sp, #24]
 8024c22:	9309      	str	r3, [sp, #36]	; 0x24
 8024c24:	9b07      	ldr	r3, [sp, #28]
 8024c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c2a:	2b00      	cmp	r3, #0
 8024c2c:	dc70      	bgt.n	8024d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8024c2e:	9b06      	ldr	r3, [sp, #24]
 8024c30:	9a07      	ldr	r2, [sp, #28]
 8024c32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024c36:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c3a:	9307      	str	r3, [sp, #28]
 8024c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c3e:	2b00      	cmp	r3, #0
 8024c40:	f340 80eb 	ble.w	8024e1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024c4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024c52:	eef0 6a48 	vmov.f32	s13, s16
 8024c56:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024c5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024c5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c62:	ee16 ba90 	vmov	fp, s13
 8024c66:	eef0 6a68 	vmov.f32	s13, s17
 8024c6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c6e:	ee16 5a90 	vmov	r5, s13
 8024c72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024c76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024c7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024c7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024c82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024c86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024c8a:	ee18 2a10 	vmov	r2, s16
 8024c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8024c92:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c96:	ee18 2a90 	vmov	r2, s17
 8024c9a:	9323      	str	r3, [sp, #140]	; 0x8c
 8024c9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024c9e:	eef0 8a67 	vmov.f32	s17, s15
 8024ca2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ca6:	9324      	str	r3, [sp, #144]	; 0x90
 8024ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024cac:	3b01      	subs	r3, #1
 8024cae:	930a      	str	r3, [sp, #40]	; 0x28
 8024cb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024cb2:	bf08      	it	eq
 8024cb4:	4613      	moveq	r3, r2
 8024cb6:	9306      	str	r3, [sp, #24]
 8024cb8:	e6d3      	b.n	8024a62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024cba:	b149      	cbz	r1, 8024cd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8024cbc:	5cba      	ldrb	r2, [r7, r2]
 8024cbe:	4660      	mov	r0, ip
 8024cc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cc4:	4422      	add	r2, r4
 8024cc6:	4666      	mov	r6, ip
 8024cc8:	e734      	b.n	8024b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024cca:	4660      	mov	r0, ip
 8024ccc:	4662      	mov	r2, ip
 8024cce:	e731      	b.n	8024b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024cd0:	4660      	mov	r0, ip
 8024cd2:	4662      	mov	r2, ip
 8024cd4:	e7f7      	b.n	8024cc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024cd6:	f110 0c01 	adds.w	ip, r0, #1
 8024cda:	f53f af74 	bmi.w	8024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024cde:	4562      	cmp	r2, ip
 8024ce0:	f6ff af71 	blt.w	8024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024ce4:	f116 0c01 	adds.w	ip, r6, #1
 8024ce8:	f53f af6d 	bmi.w	8024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024cec:	4567      	cmp	r7, ip
 8024cee:	f6ff af6a 	blt.w	8024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024cf2:	b23f      	sxth	r7, r7
 8024cf4:	b212      	sxth	r2, r2
 8024cf6:	9701      	str	r7, [sp, #4]
 8024cf8:	9200      	str	r2, [sp, #0]
 8024cfa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024cfe:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024d02:	4623      	mov	r3, r4
 8024d04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024d06:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024d0a:	f7ff fdc3 	bl	8024894 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8024d0e:	e75a      	b.n	8024bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024d10:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024d12:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024d16:	1428      	asrs	r0, r5, #16
 8024d18:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024d1c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024d20:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d24:	fb02 6000 	mla	r0, r2, r0, r6
 8024d28:	9e08      	ldr	r6, [sp, #32]
 8024d2a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024d2e:	1837      	adds	r7, r6, r0
 8024d30:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024d34:	eb04 0c08 	add.w	ip, r4, r8
 8024d38:	2b00      	cmp	r3, #0
 8024d3a:	d060      	beq.n	8024dfe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8024d3c:	787e      	ldrb	r6, [r7, #1]
 8024d3e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024d42:	4426      	add	r6, r4
 8024d44:	2900      	cmp	r1, #0
 8024d46:	d062      	beq.n	8024e0e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024d48:	18b8      	adds	r0, r7, r2
 8024d4a:	5cba      	ldrb	r2, [r7, r2]
 8024d4c:	7840      	ldrb	r0, [r0, #1]
 8024d4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d56:	4422      	add	r2, r4
 8024d58:	4420      	add	r0, r4
 8024d5a:	b29b      	uxth	r3, r3
 8024d5c:	78b7      	ldrb	r7, [r6, #2]
 8024d5e:	b289      	uxth	r1, r1
 8024d60:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024d64:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024d68:	fb03 f901 	mul.w	r9, r3, r1
 8024d6c:	011b      	lsls	r3, r3, #4
 8024d6e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024d72:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024d76:	eba3 0309 	sub.w	r3, r3, r9
 8024d7a:	b289      	uxth	r1, r1
 8024d7c:	b29b      	uxth	r3, r3
 8024d7e:	ebae 0e01 	sub.w	lr, lr, r1
 8024d82:	435f      	muls	r7, r3
 8024d84:	fa1f fe8e 	uxth.w	lr, lr
 8024d88:	fb0e 770a 	mla	r7, lr, sl, r7
 8024d8c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024d90:	fb01 770a 	mla	r7, r1, sl, r7
 8024d94:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024d98:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024d9c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024da0:	f896 8000 	ldrb.w	r8, [r6]
 8024da4:	7876      	ldrb	r6, [r6, #1]
 8024da6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024daa:	fb03 f808 	mul.w	r8, r3, r8
 8024dae:	4373      	muls	r3, r6
 8024db0:	7856      	ldrb	r6, [r2, #1]
 8024db2:	fb0e 8807 	mla	r8, lr, r7, r8
 8024db6:	7817      	ldrb	r7, [r2, #0]
 8024db8:	fb0e 330c 	mla	r3, lr, ip, r3
 8024dbc:	fb01 8807 	mla	r8, r1, r7, r8
 8024dc0:	7807      	ldrb	r7, [r0, #0]
 8024dc2:	fb01 3306 	mla	r3, r1, r6, r3
 8024dc6:	fb09 8707 	mla	r7, r9, r7, r8
 8024dca:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024dce:	ea47 070a 	orr.w	r7, r7, sl
 8024dd2:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024dd6:	fb09 3a0a 	mla	sl, r9, sl, r3
 8024dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024ddc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024de0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024de4:	ea47 070a 	orr.w	r7, r7, sl
 8024de8:	f823 7b02 	strh.w	r7, [r3], #2
 8024dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8024dee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024df0:	449b      	add	fp, r3
 8024df2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024df4:	441d      	add	r5, r3
 8024df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024df8:	3b01      	subs	r3, #1
 8024dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8024dfc:	e714      	b.n	8024c28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8024dfe:	b149      	cbz	r1, 8024e14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8024e00:	5cba      	ldrb	r2, [r7, r2]
 8024e02:	4660      	mov	r0, ip
 8024e04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024e08:	4422      	add	r2, r4
 8024e0a:	4666      	mov	r6, ip
 8024e0c:	e7a5      	b.n	8024d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024e0e:	4660      	mov	r0, ip
 8024e10:	4662      	mov	r2, ip
 8024e12:	e7a2      	b.n	8024d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024e14:	4660      	mov	r0, ip
 8024e16:	4662      	mov	r2, ip
 8024e18:	e7f7      	b.n	8024e0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8024e1a:	b00f      	add	sp, #60	; 0x3c
 8024e1c:	ecbd 8b08 	vpop	{d8-d11}
 8024e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024e24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e28:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8024e2c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024e30:	2c00      	cmp	r4, #0
 8024e32:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8024e36:	fb04 560c 	mla	r6, r4, ip, r5
 8024e3a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8024e3e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8024e42:	eb02 0e06 	add.w	lr, r2, r6
 8024e46:	db3d      	blt.n	8024ec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024e48:	45a0      	cmp	r8, r4
 8024e4a:	dd3b      	ble.n	8024ec4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024e4c:	2d00      	cmp	r5, #0
 8024e4e:	db37      	blt.n	8024ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024e50:	45ac      	cmp	ip, r5
 8024e52:	dd35      	ble.n	8024ec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024e54:	5d92      	ldrb	r2, [r2, r6]
 8024e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024e5a:	1c6e      	adds	r6, r5, #1
 8024e5c:	d435      	bmi.n	8024eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024e5e:	45b4      	cmp	ip, r6
 8024e60:	dd33      	ble.n	8024eca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024e62:	b3a0      	cbz	r0, 8024ece <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8024e64:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024e68:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024e6c:	3401      	adds	r4, #1
 8024e6e:	d432      	bmi.n	8024ed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024e70:	45a0      	cmp	r8, r4
 8024e72:	dd30      	ble.n	8024ed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024e74:	b397      	cbz	r7, 8024edc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8024e76:	2d00      	cmp	r5, #0
 8024e78:	db2b      	blt.n	8024ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024e7a:	45ac      	cmp	ip, r5
 8024e7c:	dd29      	ble.n	8024ed2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8024e7e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024e82:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024e86:	3501      	adds	r5, #1
 8024e88:	d42b      	bmi.n	8024ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024e8a:	45ac      	cmp	ip, r5
 8024e8c:	dd29      	ble.n	8024ee2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8024e8e:	b350      	cbz	r0, 8024ee6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8024e90:	44f4      	add	ip, lr
 8024e92:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024e96:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024e9a:	280f      	cmp	r0, #15
 8024e9c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024ea0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024ea4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024ea8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024eac:	d801      	bhi.n	8024eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8024eae:	2f0f      	cmp	r7, #15
 8024eb0:	d91b      	bls.n	8024eea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8024eb2:	4b8d      	ldr	r3, [pc, #564]	; (80250e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8024eb4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024eb8:	4a8c      	ldr	r2, [pc, #560]	; (80250ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 8024eba:	488d      	ldr	r0, [pc, #564]	; (80250f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8024ebc:	f005 fd0a 	bl	802a8d4 <__assert_func>
 8024ec0:	2200      	movs	r2, #0
 8024ec2:	e7ca      	b.n	8024e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8024ec4:	2600      	movs	r6, #0
 8024ec6:	4632      	mov	r2, r6
 8024ec8:	e7d0      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024eca:	2600      	movs	r6, #0
 8024ecc:	e7ce      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024ece:	4606      	mov	r6, r0
 8024ed0:	e7cc      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024ed2:	2400      	movs	r4, #0
 8024ed4:	e7d7      	b.n	8024e86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8024ed6:	2300      	movs	r3, #0
 8024ed8:	461c      	mov	r4, r3
 8024eda:	e7de      	b.n	8024e9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024edc:	463b      	mov	r3, r7
 8024ede:	463c      	mov	r4, r7
 8024ee0:	e7db      	b.n	8024e9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024ee2:	2300      	movs	r3, #0
 8024ee4:	e7d9      	b.n	8024e9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024ee6:	4603      	mov	r3, r0
 8024ee8:	e7d7      	b.n	8024e9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024eea:	b280      	uxth	r0, r0
 8024eec:	b2bf      	uxth	r7, r7
 8024eee:	fb07 fe00 	mul.w	lr, r7, r0
 8024ef2:	0100      	lsls	r0, r0, #4
 8024ef4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024ef8:	eba0 0c0e 	sub.w	ip, r0, lr
 8024efc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024f00:	b2bf      	uxth	r7, r7
 8024f02:	fa1f fc8c 	uxth.w	ip, ip
 8024f06:	1bed      	subs	r5, r5, r7
 8024f08:	fb0a f00c 	mul.w	r0, sl, ip
 8024f0c:	b2ad      	uxth	r5, r5
 8024f0e:	fb0b 0005 	mla	r0, fp, r5, r0
 8024f12:	fb07 0009 	mla	r0, r7, r9, r0
 8024f16:	fb0e 0008 	mla	r0, lr, r8, r0
 8024f1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024f1e:	9001      	str	r0, [sp, #4]
 8024f20:	2800      	cmp	r0, #0
 8024f22:	f000 80de 	beq.w	80250e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024f26:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024f2a:	d018      	beq.n	8024f5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8024f2c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024f30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024f34:	fb0b f000 	mul.w	r0, fp, r0
 8024f38:	fb0b fb02 	mul.w	fp, fp, r2
 8024f3c:	0a02      	lsrs	r2, r0, #8
 8024f3e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024f42:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f46:	4402      	add	r2, r0
 8024f48:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024f4c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024f50:	0a12      	lsrs	r2, r2, #8
 8024f52:	0a00      	lsrs	r0, r0, #8
 8024f54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f58:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024f5c:	4302      	orrs	r2, r0
 8024f5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024f62:	d01a      	beq.n	8024f9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8024f64:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024f68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024f6c:	fb0a f000 	mul.w	r0, sl, r0
 8024f70:	fb0a fa06 	mul.w	sl, sl, r6
 8024f74:	0a06      	lsrs	r6, r0, #8
 8024f76:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024f7a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f7e:	4406      	add	r6, r0
 8024f80:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024f84:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024f88:	0a36      	lsrs	r6, r6, #8
 8024f8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f8e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f96:	ea46 060a 	orr.w	r6, r6, sl
 8024f9a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024f9e:	d01b      	beq.n	8024fd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8024fa0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024fa4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024fa8:	fb09 fa0a 	mul.w	sl, r9, sl
 8024fac:	fb09 f004 	mul.w	r0, r9, r4
 8024fb0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024fb4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fb8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8024fbc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024fc0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024fc4:	4454      	add	r4, sl
 8024fc6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024fca:	0a24      	lsrs	r4, r4, #8
 8024fcc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024fd0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024fd4:	ea44 0409 	orr.w	r4, r4, r9
 8024fd8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024fdc:	d01b      	beq.n	8025016 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8024fde:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024fe2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fe6:	fb08 f909 	mul.w	r9, r8, r9
 8024fea:	fb08 f003 	mul.w	r0, r8, r3
 8024fee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024ff2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024ff6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8024ffa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024ffe:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025002:	444b      	add	r3, r9
 8025004:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025008:	0a1b      	lsrs	r3, r3, #8
 802500a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802500e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025012:	ea43 0308 	orr.w	r3, r3, r8
 8025016:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802501a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802501e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8025022:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025026:	fb0c f808 	mul.w	r8, ip, r8
 802502a:	8808      	ldrh	r0, [r1, #0]
 802502c:	fb0c f606 	mul.w	r6, ip, r6
 8025030:	fb05 8909 	mla	r9, r5, r9, r8
 8025034:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025038:	fb05 6502 	mla	r5, r5, r2, r6
 802503c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025040:	fb07 9908 	mla	r9, r7, r8, r9
 8025044:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8025048:	fb07 5704 	mla	r7, r7, r4, r5
 802504c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8025050:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025054:	b2b6      	uxth	r6, r6
 8025056:	fb0e 9808 	mla	r8, lr, r8, r9
 802505a:	9a01      	ldr	r2, [sp, #4]
 802505c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8025060:	1205      	asrs	r5, r0, #8
 8025062:	4372      	muls	r2, r6
 8025064:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025068:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802506c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025070:	1c53      	adds	r3, r2, #1
 8025072:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8025076:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802507a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802507e:	ea48 0e0e 	orr.w	lr, r8, lr
 8025082:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8025086:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802508a:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802508e:	b2db      	uxtb	r3, r3
 8025090:	fb12 f206 	smulbb	r2, r2, r6
 8025094:	fa5f fe8e 	uxtb.w	lr, lr
 8025098:	fb14 f406 	smulbb	r4, r4, r6
 802509c:	fb05 2503 	mla	r5, r5, r3, r2
 80250a0:	10c2      	asrs	r2, r0, #3
 80250a2:	fb1e fe06 	smulbb	lr, lr, r6
 80250a6:	00c0      	lsls	r0, r0, #3
 80250a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80250ac:	b2ad      	uxth	r5, r5
 80250ae:	b2c0      	uxtb	r0, r0
 80250b0:	fb02 4203 	mla	r2, r2, r3, r4
 80250b4:	fb00 e303 	mla	r3, r0, r3, lr
 80250b8:	b294      	uxth	r4, r2
 80250ba:	b298      	uxth	r0, r3
 80250bc:	1c6b      	adds	r3, r5, #1
 80250be:	1c62      	adds	r2, r4, #1
 80250c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80250c4:	1c43      	adds	r3, r0, #1
 80250c6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80250ca:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80250ce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80250d2:	0952      	lsrs	r2, r2, #5
 80250d4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80250d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80250dc:	432b      	orrs	r3, r5
 80250de:	4313      	orrs	r3, r2
 80250e0:	800b      	strh	r3, [r1, #0]
 80250e2:	b003      	add	sp, #12
 80250e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250e8:	0802fb1d 	.word	0x0802fb1d
 80250ec:	080300ea 	.word	0x080300ea
 80250f0:	0802fba1 	.word	0x0802fba1

080250f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80250f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250f8:	ed2d 8b08 	vpush	{d8-d11}
 80250fc:	b09f      	sub	sp, #124	; 0x7c
 80250fe:	eeb0 aa40 	vmov.f32	s20, s0
 8025102:	eef0 9a60 	vmov.f32	s19, s1
 8025106:	921b      	str	r2, [sp, #108]	; 0x6c
 8025108:	eeb0 9a41 	vmov.f32	s18, s2
 802510c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802510e:	eeb0 8a62 	vmov.f32	s16, s5
 8025112:	9309      	str	r3, [sp, #36]	; 0x24
 8025114:	eef0 8a43 	vmov.f32	s17, s6
 8025118:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802511c:	eef0 ba44 	vmov.f32	s23, s8
 8025120:	901d      	str	r0, [sp, #116]	; 0x74
 8025122:	eeb0 ba64 	vmov.f32	s22, s9
 8025126:	931c      	str	r3, [sp, #112]	; 0x70
 8025128:	eef0 aa45 	vmov.f32	s21, s10
 802512c:	6850      	ldr	r0, [r2, #4]
 802512e:	9119      	str	r1, [sp, #100]	; 0x64
 8025130:	6812      	ldr	r2, [r2, #0]
 8025132:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8025134:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8025138:	fb00 1303 	mla	r3, r0, r3, r1
 802513c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025140:	930c      	str	r3, [sp, #48]	; 0x30
 8025142:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025144:	681b      	ldr	r3, [r3, #0]
 8025146:	9312      	str	r3, [sp, #72]	; 0x48
 8025148:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802514a:	685e      	ldr	r6, [r3, #4]
 802514c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025150:	3604      	adds	r6, #4
 8025152:	930d      	str	r3, [sp, #52]	; 0x34
 8025154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025156:	2b00      	cmp	r3, #0
 8025158:	dc03      	bgt.n	8025162 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802515a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802515c:	2b00      	cmp	r3, #0
 802515e:	f340 8387 	ble.w	8025870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025162:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025164:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025168:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802516c:	1e48      	subs	r0, r1, #1
 802516e:	1e57      	subs	r7, r2, #1
 8025170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025172:	2b00      	cmp	r3, #0
 8025174:	f340 8194 	ble.w	80254a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8025178:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802517a:	142b      	asrs	r3, r5, #16
 802517c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025180:	d406      	bmi.n	8025190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025182:	4584      	cmp	ip, r0
 8025184:	da04      	bge.n	8025190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025186:	2b00      	cmp	r3, #0
 8025188:	db02      	blt.n	8025190 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802518a:	42bb      	cmp	r3, r7
 802518c:	f2c0 8189 	blt.w	80254a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025190:	f11c 0c01 	adds.w	ip, ip, #1
 8025194:	f100 8177 	bmi.w	8025486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025198:	4561      	cmp	r1, ip
 802519a:	f2c0 8174 	blt.w	8025486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802519e:	3301      	adds	r3, #1
 80251a0:	f100 8171 	bmi.w	8025486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80251a4:	429a      	cmp	r2, r3
 80251a6:	f2c0 816e 	blt.w	8025486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80251aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80251ae:	931a      	str	r3, [sp, #104]	; 0x68
 80251b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80251b2:	2b00      	cmp	r3, #0
 80251b4:	f340 8193 	ble.w	80254de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80251b8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80251ba:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80251be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80251c2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80251c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80251c8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80251cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80251ce:	141b      	asrs	r3, r3, #16
 80251d0:	f100 81d6 	bmi.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80251d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80251d8:	4543      	cmp	r3, r8
 80251da:	f280 81d1 	bge.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80251de:	f1bc 0f00 	cmp.w	ip, #0
 80251e2:	f2c0 81cd 	blt.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80251e6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80251ea:	45c4      	cmp	ip, r8
 80251ec:	f280 81c8 	bge.w	8025580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80251f0:	b200      	sxth	r0, r0
 80251f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80251f4:	fb0c 3300 	mla	r3, ip, r0, r3
 80251f8:	eb04 0803 	add.w	r8, r4, r3
 80251fc:	5ce3      	ldrb	r3, [r4, r3]
 80251fe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025202:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025206:	2a00      	cmp	r2, #0
 8025208:	f000 81af 	beq.w	802556a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802520c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025210:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025214:	940e      	str	r4, [sp, #56]	; 0x38
 8025216:	0e24      	lsrs	r4, r4, #24
 8025218:	9415      	str	r4, [sp, #84]	; 0x54
 802521a:	b179      	cbz	r1, 802523c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802521c:	eb08 0c00 	add.w	ip, r8, r0
 8025220:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025224:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025228:	900a      	str	r0, [sp, #40]	; 0x28
 802522a:	0e00      	lsrs	r0, r0, #24
 802522c:	9013      	str	r0, [sp, #76]	; 0x4c
 802522e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025232:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025236:	900f      	str	r0, [sp, #60]	; 0x3c
 8025238:	0e00      	lsrs	r0, r0, #24
 802523a:	9016      	str	r0, [sp, #88]	; 0x58
 802523c:	b292      	uxth	r2, r2
 802523e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025240:	b289      	uxth	r1, r1
 8025242:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025244:	fb02 f901 	mul.w	r9, r2, r1
 8025248:	0112      	lsls	r2, r2, #4
 802524a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802524e:	eba2 0809 	sub.w	r8, r2, r9
 8025252:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025256:	b289      	uxth	r1, r1
 8025258:	fa1f f888 	uxth.w	r8, r8
 802525c:	1a52      	subs	r2, r2, r1
 802525e:	fb08 f000 	mul.w	r0, r8, r0
 8025262:	b292      	uxth	r2, r2
 8025264:	fb02 000e 	mla	r0, r2, lr, r0
 8025268:	fb01 0004 	mla	r0, r1, r4, r0
 802526c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802526e:	fb09 0004 	mla	r0, r9, r4, r0
 8025272:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025276:	2800      	cmp	r0, #0
 8025278:	f000 80fa 	beq.w	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802527c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025280:	d01b      	beq.n	80252ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025282:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025286:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802528a:	fb0e fa0a 	mul.w	sl, lr, sl
 802528e:	fb0e fe03 	mul.w	lr, lr, r3
 8025292:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025296:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802529a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802529e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252a2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80252a6:	4453      	add	r3, sl
 80252a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252ac:	0a1b      	lsrs	r3, r3, #8
 80252ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80252b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252b6:	ea43 030c 	orr.w	r3, r3, ip
 80252ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252bc:	2cff      	cmp	r4, #255	; 0xff
 80252be:	d021      	beq.n	8025304 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80252c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80252c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80252c6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252c8:	fb04 fb0b 	mul.w	fp, r4, fp
 80252cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80252ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252d2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80252d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80252d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80252dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80252e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80252e8:	44de      	add	lr, fp
 80252ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252fe:	ea4e 040a 	orr.w	r4, lr, sl
 8025302:	940e      	str	r4, [sp, #56]	; 0x38
 8025304:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025306:	2cff      	cmp	r4, #255	; 0xff
 8025308:	d021      	beq.n	802534e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802530a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802530c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025310:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025312:	fb04 fb0b 	mul.w	fp, r4, fp
 8025316:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025318:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802531c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802531e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025322:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025326:	fb04 fa0a 	mul.w	sl, r4, sl
 802532a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802532e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025332:	44de      	add	lr, fp
 8025334:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025338:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802533c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025340:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025344:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025348:	ea4e 040a 	orr.w	r4, lr, sl
 802534c:	940a      	str	r4, [sp, #40]	; 0x28
 802534e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025350:	2cff      	cmp	r4, #255	; 0xff
 8025352:	d021      	beq.n	8025398 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8025354:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025356:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802535a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802535c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025360:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025362:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025366:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025368:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802536c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025370:	fb04 fa0a 	mul.w	sl, r4, sl
 8025374:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025378:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802537c:	44de      	add	lr, fp
 802537e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025382:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025386:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802538a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802538e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025392:	ea4e 040a 	orr.w	r4, lr, sl
 8025396:	940f      	str	r4, [sp, #60]	; 0x3c
 8025398:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802539a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802539e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80253a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80253a8:	fb08 fc0c 	mul.w	ip, r8, ip
 80253ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 80253b0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80253b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80253b6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80253ba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80253be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80253c0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80253c4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80253c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253ca:	fb08 f80e 	mul.w	r8, r8, lr
 80253ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253d2:	fb02 8303 	mla	r3, r2, r3, r8
 80253d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80253d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80253dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80253e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80253e2:	fb01 330a 	mla	r3, r1, sl, r3
 80253e6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80253ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80253ec:	fb09 3901 	mla	r9, r9, r1, r3
 80253f0:	883b      	ldrh	r3, [r7, #0]
 80253f2:	4342      	muls	r2, r0
 80253f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80253f8:	1c50      	adds	r0, r2, #1
 80253fa:	1219      	asrs	r1, r3, #8
 80253fc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025400:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025404:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025408:	ea4c 0c09 	orr.w	ip, ip, r9
 802540c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025410:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025414:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025418:	b2c0      	uxtb	r0, r0
 802541a:	fb12 f204 	smulbb	r2, r2, r4
 802541e:	fa5f fc8c 	uxtb.w	ip, ip
 8025422:	fb1e fe04 	smulbb	lr, lr, r4
 8025426:	fb01 2100 	mla	r1, r1, r0, r2
 802542a:	10da      	asrs	r2, r3, #3
 802542c:	fb1c fc04 	smulbb	ip, ip, r4
 8025430:	00db      	lsls	r3, r3, #3
 8025432:	b289      	uxth	r1, r1
 8025434:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025438:	b2db      	uxtb	r3, r3
 802543a:	fb02 e200 	mla	r2, r2, r0, lr
 802543e:	fb03 c300 	mla	r3, r3, r0, ip
 8025442:	b292      	uxth	r2, r2
 8025444:	fa1f fc83 	uxth.w	ip, r3
 8025448:	1c4b      	adds	r3, r1, #1
 802544a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802544e:	f10c 0301 	add.w	r3, ip, #1
 8025452:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025456:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802545a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802545e:	430b      	orrs	r3, r1
 8025460:	1c51      	adds	r1, r2, #1
 8025462:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025466:	0952      	lsrs	r2, r2, #5
 8025468:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802546c:	4313      	orrs	r3, r2
 802546e:	803b      	strh	r3, [r7, #0]
 8025470:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025472:	3702      	adds	r7, #2
 8025474:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025476:	441a      	add	r2, r3
 8025478:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802547a:	441d      	add	r5, r3
 802547c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802547e:	9231      	str	r2, [sp, #196]	; 0xc4
 8025480:	3b01      	subs	r3, #1
 8025482:	931a      	str	r3, [sp, #104]	; 0x68
 8025484:	e694      	b.n	80251b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8025486:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025488:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802548a:	441c      	add	r4, r3
 802548c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802548e:	441d      	add	r5, r3
 8025490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025492:	9431      	str	r4, [sp, #196]	; 0xc4
 8025494:	3b01      	subs	r3, #1
 8025496:	9309      	str	r3, [sp, #36]	; 0x24
 8025498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802549a:	3302      	adds	r3, #2
 802549c:	930c      	str	r3, [sp, #48]	; 0x30
 802549e:	e667      	b.n	8025170 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80254a0:	d024      	beq.n	80254ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80254a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254a4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80254a6:	3b01      	subs	r3, #1
 80254a8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80254aa:	fb00 4003 	mla	r0, r0, r3, r4
 80254ae:	1400      	asrs	r0, r0, #16
 80254b0:	f53f ae7b 	bmi.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80254b4:	3901      	subs	r1, #1
 80254b6:	4288      	cmp	r0, r1
 80254b8:	f6bf ae77 	bge.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80254bc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80254be:	fb01 5303 	mla	r3, r1, r3, r5
 80254c2:	141b      	asrs	r3, r3, #16
 80254c4:	f53f ae71 	bmi.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80254c8:	3a01      	subs	r2, #1
 80254ca:	4293      	cmp	r3, r2
 80254cc:	f6bf ae6d 	bge.w	80251aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80254d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80254d4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80254d8:	f1bb 0f00 	cmp.w	fp, #0
 80254dc:	dc70      	bgt.n	80255c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80254de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254e0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80254e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80254e6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80254ea:	930c      	str	r3, [sp, #48]	; 0x30
 80254ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80254ee:	2b00      	cmp	r3, #0
 80254f0:	f340 81be 	ble.w	8025870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80254f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80254f8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80254fa:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80254fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025502:	eef0 6a48 	vmov.f32	s13, s16
 8025506:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802550a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802550e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025512:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8025516:	eef0 6a68 	vmov.f32	s13, s17
 802551a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802551e:	ee16 5a90 	vmov	r5, s13
 8025522:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025526:	ee69 7a27 	vmul.f32	s15, s18, s15
 802552a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802552e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025532:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025536:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802553a:	ee18 2a10 	vmov	r2, s16
 802553e:	eeb0 8a47 	vmov.f32	s16, s14
 8025542:	fb92 f3f3 	sdiv	r3, r2, r3
 8025546:	ee18 2a90 	vmov	r2, s17
 802554a:	9333      	str	r3, [sp, #204]	; 0xcc
 802554c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802554e:	eef0 8a67 	vmov.f32	s17, s15
 8025552:	fb92 f3f3 	sdiv	r3, r2, r3
 8025556:	9334      	str	r3, [sp, #208]	; 0xd0
 8025558:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802555a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802555c:	3b01      	subs	r3, #1
 802555e:	9319      	str	r3, [sp, #100]	; 0x64
 8025560:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025562:	bf08      	it	eq
 8025564:	4613      	moveq	r3, r2
 8025566:	9309      	str	r3, [sp, #36]	; 0x24
 8025568:	e5f4      	b.n	8025154 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802556a:	2900      	cmp	r1, #0
 802556c:	f43f ae66 	beq.w	802523c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025570:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025574:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025578:	900a      	str	r0, [sp, #40]	; 0x28
 802557a:	0e00      	lsrs	r0, r0, #24
 802557c:	9013      	str	r0, [sp, #76]	; 0x4c
 802557e:	e65d      	b.n	802523c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025580:	f113 0801 	adds.w	r8, r3, #1
 8025584:	f53f af74 	bmi.w	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025588:	4540      	cmp	r0, r8
 802558a:	f6ff af71 	blt.w	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802558e:	f11c 0801 	adds.w	r8, ip, #1
 8025592:	f53f af6d 	bmi.w	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025596:	45c6      	cmp	lr, r8
 8025598:	f6ff af6a 	blt.w	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802559c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802559e:	b200      	sxth	r0, r0
 80255a0:	9302      	str	r3, [sp, #8]
 80255a2:	fa0f f38e 	sxth.w	r3, lr
 80255a6:	9000      	str	r0, [sp, #0]
 80255a8:	9301      	str	r3, [sp, #4]
 80255aa:	4633      	mov	r3, r6
 80255ac:	981d      	ldr	r0, [sp, #116]	; 0x74
 80255ae:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80255b2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80255b6:	4639      	mov	r1, r7
 80255b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80255ba:	f7ff fc33 	bl	8024e24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80255be:	e757      	b.n	8025470 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80255c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80255c2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80255c6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80255c8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80255cc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80255ce:	1427      	asrs	r7, r4, #16
 80255d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80255d6:	142b      	asrs	r3, r5, #16
 80255d8:	fb01 7303 	mla	r3, r1, r3, r7
 80255dc:	18e7      	adds	r7, r4, r3
 80255de:	5ce3      	ldrb	r3, [r4, r3]
 80255e0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80255e4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80255e8:	2a00      	cmp	r2, #0
 80255ea:	f000 8137 	beq.w	802585c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 80255ee:	f897 e001 	ldrb.w	lr, [r7, #1]
 80255f2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80255f6:	9410      	str	r4, [sp, #64]	; 0x40
 80255f8:	0e24      	lsrs	r4, r4, #24
 80255fa:	9417      	str	r4, [sp, #92]	; 0x5c
 80255fc:	b170      	cbz	r0, 802561c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 80255fe:	eb07 0e01 	add.w	lr, r7, r1
 8025602:	5c79      	ldrb	r1, [r7, r1]
 8025604:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025608:	910b      	str	r1, [sp, #44]	; 0x2c
 802560a:	0e09      	lsrs	r1, r1, #24
 802560c:	9114      	str	r1, [sp, #80]	; 0x50
 802560e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025612:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025616:	9111      	str	r1, [sp, #68]	; 0x44
 8025618:	0e09      	lsrs	r1, r1, #24
 802561a:	9118      	str	r1, [sp, #96]	; 0x60
 802561c:	b292      	uxth	r2, r2
 802561e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025620:	b280      	uxth	r0, r0
 8025622:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025624:	fb02 f800 	mul.w	r8, r2, r0
 8025628:	0112      	lsls	r2, r2, #4
 802562a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802562e:	eba2 0e08 	sub.w	lr, r2, r8
 8025632:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025636:	b280      	uxth	r0, r0
 8025638:	fa1f fe8e 	uxth.w	lr, lr
 802563c:	1a12      	subs	r2, r2, r0
 802563e:	fb0e f101 	mul.w	r1, lr, r1
 8025642:	b292      	uxth	r2, r2
 8025644:	fb02 110c 	mla	r1, r2, ip, r1
 8025648:	fb00 1104 	mla	r1, r0, r4, r1
 802564c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802564e:	fb08 1104 	mla	r1, r8, r4, r1
 8025652:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025656:	2900      	cmp	r1, #0
 8025658:	f000 80f5 	beq.w	8025846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 802565c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025660:	d019      	beq.n	8025696 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8025662:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802566a:	fb0c fa0a 	mul.w	sl, ip, sl
 802566e:	fb0c fc03 	mul.w	ip, ip, r3
 8025672:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025676:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802567a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802567e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025682:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025686:	4453      	add	r3, sl
 8025688:	0a3f      	lsrs	r7, r7, #8
 802568a:	0a1b      	lsrs	r3, r3, #8
 802568c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025690:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025694:	433b      	orrs	r3, r7
 8025696:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025698:	2cff      	cmp	r4, #255	; 0xff
 802569a:	d020      	beq.n	80256de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802569c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802569e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80256a2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80256a4:	4367      	muls	r7, r4
 80256a6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80256a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80256ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80256b0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80256b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80256b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80256be:	44bc      	add	ip, r7
 80256c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80256c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80256cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80256d8:	ea4c 040a 	orr.w	r4, ip, sl
 80256dc:	9410      	str	r4, [sp, #64]	; 0x40
 80256de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80256e0:	2cff      	cmp	r4, #255	; 0xff
 80256e2:	d020      	beq.n	8025726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 80256e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80256e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80256ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80256ec:	4367      	muls	r7, r4
 80256ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80256f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80256f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80256f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80256fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80256fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025702:	fb04 fa0a 	mul.w	sl, r4, sl
 8025706:	44bc      	add	ip, r7
 8025708:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802570c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025710:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025714:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025718:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802571c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025720:	ea4c 040a 	orr.w	r4, ip, sl
 8025724:	940b      	str	r4, [sp, #44]	; 0x2c
 8025726:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025728:	2cff      	cmp	r4, #255	; 0xff
 802572a:	d020      	beq.n	802576e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 802572c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802572e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025732:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025734:	4367      	muls	r7, r4
 8025736:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025738:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802573c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025740:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025742:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025746:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802574a:	fb04 fa0a 	mul.w	sl, r4, sl
 802574e:	44bc      	add	ip, r7
 8025750:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025754:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025758:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802575c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025764:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025768:	ea4c 040a 	orr.w	r4, ip, sl
 802576c:	9411      	str	r4, [sp, #68]	; 0x44
 802576e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025770:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025778:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802577c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802577e:	fb0e f707 	mul.w	r7, lr, r7
 8025782:	fb02 770c 	mla	r7, r2, ip, r7
 8025786:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802578a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802578c:	fb00 770c 	mla	r7, r0, ip, r7
 8025790:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025794:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025796:	fb08 770c 	mla	r7, r8, ip, r7
 802579a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802579e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257a0:	fb0e fe0c 	mul.w	lr, lr, ip
 80257a4:	0a3f      	lsrs	r7, r7, #8
 80257a6:	fb02 e303 	mla	r3, r2, r3, lr
 80257aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80257ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80257b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80257b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80257b6:	fb00 330a 	mla	r3, r0, sl, r3
 80257ba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80257be:	f8b9 0000 	ldrh.w	r0, [r9]
 80257c2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80257c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80257c8:	1202      	asrs	r2, r0, #8
 80257ca:	434b      	muls	r3, r1
 80257cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80257d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80257d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80257d8:	1c59      	adds	r1, r3, #1
 80257da:	ea47 070c 	orr.w	r7, r7, ip
 80257de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80257e2:	0c3b      	lsrs	r3, r7, #16
 80257e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80257e8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80257ec:	b2ff      	uxtb	r7, r7
 80257ee:	fb13 f304 	smulbb	r3, r3, r4
 80257f2:	b2c9      	uxtb	r1, r1
 80257f4:	fb1c fc04 	smulbb	ip, ip, r4
 80257f8:	fb02 3201 	mla	r2, r2, r1, r3
 80257fc:	10c3      	asrs	r3, r0, #3
 80257fe:	fb17 f704 	smulbb	r7, r7, r4
 8025802:	00c0      	lsls	r0, r0, #3
 8025804:	b292      	uxth	r2, r2
 8025806:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802580a:	b2c0      	uxtb	r0, r0
 802580c:	fb03 c301 	mla	r3, r3, r1, ip
 8025810:	f102 0c01 	add.w	ip, r2, #1
 8025814:	fb00 7001 	mla	r0, r0, r1, r7
 8025818:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802581c:	b280      	uxth	r0, r0
 802581e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8025822:	b29b      	uxth	r3, r3
 8025824:	1c42      	adds	r2, r0, #1
 8025826:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802582a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802582e:	ea42 020c 	orr.w	r2, r2, ip
 8025832:	f103 0c01 	add.w	ip, r3, #1
 8025836:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802583a:	095b      	lsrs	r3, r3, #5
 802583c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025840:	431a      	orrs	r2, r3
 8025842:	f8a9 2000 	strh.w	r2, [r9]
 8025846:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025848:	f109 0902 	add.w	r9, r9, #2
 802584c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802584e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025852:	441a      	add	r2, r3
 8025854:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025856:	9231      	str	r2, [sp, #196]	; 0xc4
 8025858:	441d      	add	r5, r3
 802585a:	e63d      	b.n	80254d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 802585c:	2800      	cmp	r0, #0
 802585e:	f43f aedd 	beq.w	802561c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025862:	5c79      	ldrb	r1, [r7, r1]
 8025864:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025868:	910b      	str	r1, [sp, #44]	; 0x2c
 802586a:	0e09      	lsrs	r1, r1, #24
 802586c:	9114      	str	r1, [sp, #80]	; 0x50
 802586e:	e6d5      	b.n	802561c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025870:	b01f      	add	sp, #124	; 0x7c
 8025872:	ecbd 8b08 	vpop	{d8-d11}
 8025876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802587c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025880:	880e      	ldrh	r6, [r1, #0]
 8025882:	b085      	sub	sp, #20
 8025884:	4691      	mov	r9, r2
 8025886:	ea4f 2826 	mov.w	r8, r6, asr #8
 802588a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 802588e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8025892:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8025896:	ea4f 08e6 	mov.w	r8, r6, asr #3
 802589a:	00f6      	lsls	r6, r6, #3
 802589c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80258a0:	9200      	str	r2, [sp, #0]
 80258a2:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 80258a6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80258aa:	9201      	str	r2, [sp, #4]
 80258ac:	b2f2      	uxtb	r2, r6
 80258ae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80258b2:	9202      	str	r2, [sp, #8]
 80258b4:	fb04 560c 	mla	r6, r4, ip, r5
 80258b8:	2c00      	cmp	r4, #0
 80258ba:	eb09 0806 	add.w	r8, r9, r6
 80258be:	db3f      	blt.n	8025940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80258c0:	45a6      	cmp	lr, r4
 80258c2:	dd3d      	ble.n	8025940 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 80258c4:	2d00      	cmp	r5, #0
 80258c6:	db39      	blt.n	802593c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80258c8:	45ac      	cmp	ip, r5
 80258ca:	dd37      	ble.n	802593c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 80258cc:	f819 2006 	ldrb.w	r2, [r9, r6]
 80258d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80258d4:	1c6e      	adds	r6, r5, #1
 80258d6:	d436      	bmi.n	8025946 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80258d8:	45b4      	cmp	ip, r6
 80258da:	dd34      	ble.n	8025946 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 80258dc:	b3a8      	cbz	r0, 802594a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 80258de:	f898 6001 	ldrb.w	r6, [r8, #1]
 80258e2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80258e6:	3401      	adds	r4, #1
 80258e8:	d433      	bmi.n	8025952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80258ea:	45a6      	cmp	lr, r4
 80258ec:	dd31      	ble.n	8025952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80258ee:	b39f      	cbz	r7, 8025958 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 80258f0:	2d00      	cmp	r5, #0
 80258f2:	eb08 0e0c 	add.w	lr, r8, ip
 80258f6:	db2a      	blt.n	802594e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80258f8:	45ac      	cmp	ip, r5
 80258fa:	dd28      	ble.n	802594e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 80258fc:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025900:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025904:	3501      	adds	r5, #1
 8025906:	d42a      	bmi.n	802595e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025908:	45ac      	cmp	ip, r5
 802590a:	dd28      	ble.n	802595e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 802590c:	b348      	cbz	r0, 8025962 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 802590e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025912:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025916:	280f      	cmp	r0, #15
 8025918:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802591c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025920:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025924:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025928:	d801      	bhi.n	802592e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 802592a:	2f0f      	cmp	r7, #15
 802592c:	d91b      	bls.n	8025966 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 802592e:	4b7e      	ldr	r3, [pc, #504]	; (8025b28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025930:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025934:	4a7d      	ldr	r2, [pc, #500]	; (8025b2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025936:	487e      	ldr	r0, [pc, #504]	; (8025b30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025938:	f004 ffcc 	bl	802a8d4 <__assert_func>
 802593c:	2200      	movs	r2, #0
 802593e:	e7c9      	b.n	80258d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025940:	2600      	movs	r6, #0
 8025942:	4632      	mov	r2, r6
 8025944:	e7cf      	b.n	80258e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025946:	2600      	movs	r6, #0
 8025948:	e7cd      	b.n	80258e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802594a:	4606      	mov	r6, r0
 802594c:	e7cb      	b.n	80258e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802594e:	2400      	movs	r4, #0
 8025950:	e7d8      	b.n	8025904 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8025952:	2300      	movs	r3, #0
 8025954:	461c      	mov	r4, r3
 8025956:	e7de      	b.n	8025916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025958:	463b      	mov	r3, r7
 802595a:	463c      	mov	r4, r7
 802595c:	e7db      	b.n	8025916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802595e:	2300      	movs	r3, #0
 8025960:	e7d9      	b.n	8025916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025962:	4603      	mov	r3, r0
 8025964:	e7d7      	b.n	8025916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025966:	b280      	uxth	r0, r0
 8025968:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802596c:	b2bf      	uxth	r7, r7
 802596e:	fb00 fe07 	mul.w	lr, r0, r7
 8025972:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8025976:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802597a:	eba0 0c0e 	sub.w	ip, r0, lr
 802597e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025982:	b2bf      	uxth	r7, r7
 8025984:	fa1f fc8c 	uxth.w	ip, ip
 8025988:	eba5 0507 	sub.w	r5, r5, r7
 802598c:	fb0c f00a 	mul.w	r0, ip, sl
 8025990:	b2ad      	uxth	r5, r5
 8025992:	fb05 000b 	mla	r0, r5, fp, r0
 8025996:	fb07 0009 	mla	r0, r7, r9, r0
 802599a:	fb0e 0008 	mla	r0, lr, r8, r0
 802599e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80259a2:	9003      	str	r0, [sp, #12]
 80259a4:	d018      	beq.n	80259d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 80259a6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80259aa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80259ae:	fb0b f000 	mul.w	r0, fp, r0
 80259b2:	fb0b fb02 	mul.w	fp, fp, r2
 80259b6:	0a02      	lsrs	r2, r0, #8
 80259b8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80259bc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259c0:	4402      	add	r2, r0
 80259c2:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80259c6:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80259ca:	0a12      	lsrs	r2, r2, #8
 80259cc:	0a00      	lsrs	r0, r0, #8
 80259ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80259d2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80259d6:	4302      	orrs	r2, r0
 80259d8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80259dc:	d019      	beq.n	8025a12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 80259de:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80259e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80259e6:	fb0a fb0b 	mul.w	fp, sl, fp
 80259ea:	fb0a fa06 	mul.w	sl, sl, r6
 80259ee:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80259f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80259f6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80259fa:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80259fe:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025a02:	445e      	add	r6, fp
 8025a04:	0a00      	lsrs	r0, r0, #8
 8025a06:	0a36      	lsrs	r6, r6, #8
 8025a08:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025a0c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025a10:	4306      	orrs	r6, r0
 8025a12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025a16:	d019      	beq.n	8025a4c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8025a18:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025a1c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025a20:	fb09 fa0a 	mul.w	sl, r9, sl
 8025a24:	fb09 f904 	mul.w	r9, r9, r4
 8025a28:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025a2c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025a30:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8025a34:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025a38:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8025a3c:	4454      	add	r4, sl
 8025a3e:	0a00      	lsrs	r0, r0, #8
 8025a40:	0a24      	lsrs	r4, r4, #8
 8025a42:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025a46:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025a4a:	4304      	orrs	r4, r0
 8025a4c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a50:	d019      	beq.n	8025a86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8025a52:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025a56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025a5a:	fb08 f909 	mul.w	r9, r8, r9
 8025a5e:	fb08 f803 	mul.w	r8, r8, r3
 8025a62:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025a66:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025a6a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8025a6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a72:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025a76:	444b      	add	r3, r9
 8025a78:	0a00      	lsrs	r0, r0, #8
 8025a7a:	0a1b      	lsrs	r3, r3, #8
 8025a7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025a80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025a84:	4303      	orrs	r3, r0
 8025a86:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025a8a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025a8e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025a92:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025a96:	fb0c f808 	mul.w	r8, ip, r8
 8025a9a:	fb0c f606 	mul.w	r6, ip, r6
 8025a9e:	fb05 8800 	mla	r8, r5, r0, r8
 8025aa2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8025aa6:	fb05 6202 	mla	r2, r5, r2, r6
 8025aaa:	9d00      	ldr	r5, [sp, #0]
 8025aac:	fb07 8800 	mla	r8, r7, r0, r8
 8025ab0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8025ab4:	fb0e 8000 	mla	r0, lr, r0, r8
 8025ab8:	0a00      	lsrs	r0, r0, #8
 8025aba:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8025abe:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8025ac2:	fb07 2700 	mla	r7, r7, r0, r2
 8025ac6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8025aca:	9b03      	ldr	r3, [sp, #12]
 8025acc:	fb0e 7000 	mla	r0, lr, r0, r7
 8025ad0:	9a02      	ldr	r2, [sp, #8]
 8025ad2:	43dc      	mvns	r4, r3
 8025ad4:	9b01      	ldr	r3, [sp, #4]
 8025ad6:	0a00      	lsrs	r0, r0, #8
 8025ad8:	b2e4      	uxtb	r4, r4
 8025ada:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025ade:	4363      	muls	r3, r4
 8025ae0:	4365      	muls	r5, r4
 8025ae2:	ea48 0000 	orr.w	r0, r8, r0
 8025ae6:	4362      	muls	r2, r4
 8025ae8:	1c5e      	adds	r6, r3, #1
 8025aea:	4614      	mov	r4, r2
 8025aec:	1c6a      	adds	r2, r5, #1
 8025aee:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025af2:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025af6:	0a03      	lsrs	r3, r0, #8
 8025af8:	0c02      	lsrs	r2, r0, #16
 8025afa:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8025afe:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025b02:	00db      	lsls	r3, r3, #3
 8025b04:	0212      	lsls	r2, r2, #8
 8025b06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025b0a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8025b0e:	4313      	orrs	r3, r2
 8025b10:	1c62      	adds	r2, r4, #1
 8025b12:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025b16:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025b1a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8025b1e:	4318      	orrs	r0, r3
 8025b20:	8008      	strh	r0, [r1, #0]
 8025b22:	b005      	add	sp, #20
 8025b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b28:	0802fb1d 	.word	0x0802fb1d
 8025b2c:	080300ea 	.word	0x080300ea
 8025b30:	0802fba1 	.word	0x0802fba1

08025b34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b38:	ed2d 8b08 	vpush	{d8-d11}
 8025b3c:	b09b      	sub	sp, #108	; 0x6c
 8025b3e:	eeb0 aa40 	vmov.f32	s20, s0
 8025b42:	eef0 9a60 	vmov.f32	s19, s1
 8025b46:	9218      	str	r2, [sp, #96]	; 0x60
 8025b48:	eeb0 9a41 	vmov.f32	s18, s2
 8025b4c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025b4e:	eeb0 8a62 	vmov.f32	s16, s5
 8025b52:	9019      	str	r0, [sp, #100]	; 0x64
 8025b54:	eef0 8a43 	vmov.f32	s17, s6
 8025b58:	6850      	ldr	r0, [r2, #4]
 8025b5a:	eef0 ba44 	vmov.f32	s23, s8
 8025b5e:	9116      	str	r1, [sp, #88]	; 0x58
 8025b60:	eeb0 ba64 	vmov.f32	s22, s9
 8025b64:	9307      	str	r3, [sp, #28]
 8025b66:	eef0 aa45 	vmov.f32	s21, s10
 8025b6a:	6812      	ldr	r2, [r2, #0]
 8025b6c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8025b6e:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025b72:	fb00 1303 	mla	r3, r0, r3, r1
 8025b76:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8025b7c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025b7e:	681b      	ldr	r3, [r3, #0]
 8025b80:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b82:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025b84:	685e      	ldr	r6, [r3, #4]
 8025b86:	3604      	adds	r6, #4
 8025b88:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	dc03      	bgt.n	8025b96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025b8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025b90:	2b00      	cmp	r3, #0
 8025b92:	f340 8373 	ble.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025b96:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025b98:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b9c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025ba0:	1e48      	subs	r0, r1, #1
 8025ba2:	1e57      	subs	r7, r2, #1
 8025ba4:	9b07      	ldr	r3, [sp, #28]
 8025ba6:	2b00      	cmp	r3, #0
 8025ba8:	f340 818f 	ble.w	8025eca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8025bac:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025bae:	142b      	asrs	r3, r5, #16
 8025bb0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025bb4:	d406      	bmi.n	8025bc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bb6:	4584      	cmp	ip, r0
 8025bb8:	da04      	bge.n	8025bc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	db02      	blt.n	8025bc4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025bbe:	42bb      	cmp	r3, r7
 8025bc0:	f2c0 8184 	blt.w	8025ecc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025bc4:	f11c 0c01 	adds.w	ip, ip, #1
 8025bc8:	f100 8172 	bmi.w	8025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bcc:	4561      	cmp	r1, ip
 8025bce:	f2c0 816f 	blt.w	8025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bd2:	3301      	adds	r3, #1
 8025bd4:	f100 816c 	bmi.w	8025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bd8:	429a      	cmp	r2, r3
 8025bda:	f2c0 8169 	blt.w	8025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bde:	9b07      	ldr	r3, [sp, #28]
 8025be0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025be2:	9317      	str	r3, [sp, #92]	; 0x5c
 8025be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	f340 818e 	ble.w	8025f08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8025bec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025bee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025bf2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025bf6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025bfa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025bfc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025c00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025c02:	141b      	asrs	r3, r3, #16
 8025c04:	f100 81d1 	bmi.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c08:	f101 38ff 	add.w	r8, r1, #4294967295
 8025c0c:	4543      	cmp	r3, r8
 8025c0e:	f280 81cc 	bge.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c12:	f1bc 0f00 	cmp.w	ip, #0
 8025c16:	f2c0 81c8 	blt.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c1a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025c1e:	45c4      	cmp	ip, r8
 8025c20:	f280 81c3 	bge.w	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025c24:	b209      	sxth	r1, r1
 8025c26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025c28:	fb0c 3301 	mla	r3, ip, r1, r3
 8025c2c:	eb04 0803 	add.w	r8, r4, r3
 8025c30:	5ce3      	ldrb	r3, [r4, r3]
 8025c32:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025c36:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025c3a:	2a00      	cmp	r2, #0
 8025c3c:	f000 81aa 	beq.w	8025f94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025c40:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025c44:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025c48:	940b      	str	r4, [sp, #44]	; 0x2c
 8025c4a:	0e24      	lsrs	r4, r4, #24
 8025c4c:	9412      	str	r4, [sp, #72]	; 0x48
 8025c4e:	b178      	cbz	r0, 8025c70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025c50:	eb08 0c01 	add.w	ip, r8, r1
 8025c54:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025c58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c5c:	9108      	str	r1, [sp, #32]
 8025c5e:	0e09      	lsrs	r1, r1, #24
 8025c60:	9110      	str	r1, [sp, #64]	; 0x40
 8025c62:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025c66:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c6a:	910c      	str	r1, [sp, #48]	; 0x30
 8025c6c:	0e09      	lsrs	r1, r1, #24
 8025c6e:	9113      	str	r1, [sp, #76]	; 0x4c
 8025c70:	b292      	uxth	r2, r2
 8025c72:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025c74:	b280      	uxth	r0, r0
 8025c76:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025c78:	fb02 f900 	mul.w	r9, r2, r0
 8025c7c:	0112      	lsls	r2, r2, #4
 8025c7e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025c82:	eba2 0809 	sub.w	r8, r2, r9
 8025c86:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025c8a:	b280      	uxth	r0, r0
 8025c8c:	fa1f f888 	uxth.w	r8, r8
 8025c90:	1a12      	subs	r2, r2, r0
 8025c92:	fb08 f101 	mul.w	r1, r8, r1
 8025c96:	b292      	uxth	r2, r2
 8025c98:	fb02 110e 	mla	r1, r2, lr, r1
 8025c9c:	fb00 1104 	mla	r1, r0, r4, r1
 8025ca0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025ca2:	fb09 1104 	mla	r1, r9, r4, r1
 8025ca6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025caa:	2900      	cmp	r1, #0
 8025cac:	f000 80f5 	beq.w	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025cb0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025cb4:	d01b      	beq.n	8025cee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025cb6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025cba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025cbe:	fb0e fa0a 	mul.w	sl, lr, sl
 8025cc2:	fb0e fe03 	mul.w	lr, lr, r3
 8025cc6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025cca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025cce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025cd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025cd6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025cda:	4453      	add	r3, sl
 8025cdc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025ce0:	0a1b      	lsrs	r3, r3, #8
 8025ce2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025ce6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025cea:	ea43 030c 	orr.w	r3, r3, ip
 8025cee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025cf0:	2cff      	cmp	r4, #255	; 0xff
 8025cf2:	d021      	beq.n	8025d38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025cf4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025cf6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025cfa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025cfc:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025d02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d06:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d10:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025d1c:	44de      	add	lr, fp
 8025d1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d32:	ea4e 040a 	orr.w	r4, lr, sl
 8025d36:	940b      	str	r4, [sp, #44]	; 0x2c
 8025d38:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025d3a:	2cff      	cmp	r4, #255	; 0xff
 8025d3c:	d021      	beq.n	8025d82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8025d3e:	9c08      	ldr	r4, [sp, #32]
 8025d40:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025d44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025d46:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d4a:	9c08      	ldr	r4, [sp, #32]
 8025d4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d50:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025d52:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025d56:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025d5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d62:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025d66:	44de      	add	lr, fp
 8025d68:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025d6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025d70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025d78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d7c:	ea4e 040a 	orr.w	r4, lr, sl
 8025d80:	9408      	str	r4, [sp, #32]
 8025d82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025d84:	2cff      	cmp	r4, #255	; 0xff
 8025d86:	d021      	beq.n	8025dcc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025d88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025d8a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025d8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025d90:	fb04 fb0b 	mul.w	fp, r4, fp
 8025d94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025d96:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025d9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025da0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025da4:	fb04 fa0a 	mul.w	sl, r4, sl
 8025da8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025db0:	44de      	add	lr, fp
 8025db2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025db6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025dba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025dbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025dc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025dc6:	ea4e 040a 	orr.w	r4, lr, sl
 8025dca:	940c      	str	r4, [sp, #48]	; 0x30
 8025dcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025dce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025dd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025dd6:	43c9      	mvns	r1, r1
 8025dd8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025ddc:	9c08      	ldr	r4, [sp, #32]
 8025dde:	fb08 fc0c 	mul.w	ip, r8, ip
 8025de2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025de6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025dea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025dec:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025df0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025df4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025df6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025dfa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025dfe:	fb08 f80e 	mul.w	r8, r8, lr
 8025e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e06:	fa5f fe81 	uxtb.w	lr, r1
 8025e0a:	fb02 8303 	mla	r3, r2, r3, r8
 8025e0e:	9a08      	ldr	r2, [sp, #32]
 8025e10:	f8b7 8000 	ldrh.w	r8, [r7]
 8025e14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025e18:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025e22:	fb00 330a 	mla	r3, r0, sl, r3
 8025e26:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8025e2a:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025e2e:	fb09 3900 	mla	r9, r9, r0, r3
 8025e32:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025e36:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025e3a:	b2c9      	uxtb	r1, r1
 8025e3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e40:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025e44:	fb02 f20e 	mul.w	r2, r2, lr
 8025e48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025e4c:	fb00 f00e 	mul.w	r0, r0, lr
 8025e50:	1c53      	adds	r3, r2, #1
 8025e52:	fb01 f10e 	mul.w	r1, r1, lr
 8025e56:	ea4c 0c09 	orr.w	ip, ip, r9
 8025e5a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025e5e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025e62:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025e66:	4a60      	ldr	r2, [pc, #384]	; (8025fe8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025e68:	b2db      	uxtb	r3, r3
 8025e6a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8025e6e:	1c43      	adds	r3, r0, #1
 8025e70:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025e74:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025e78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025e7c:	00db      	lsls	r3, r3, #3
 8025e7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e82:	4313      	orrs	r3, r2
 8025e84:	1c4a      	adds	r2, r1, #1
 8025e86:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025e8a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025e8e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8025e96:	f8a7 c000 	strh.w	ip, [r7]
 8025e9a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025e9c:	3702      	adds	r7, #2
 8025e9e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025ea0:	441a      	add	r2, r3
 8025ea2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025ea4:	441d      	add	r5, r3
 8025ea6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025ea8:	922d      	str	r2, [sp, #180]	; 0xb4
 8025eaa:	3b01      	subs	r3, #1
 8025eac:	9317      	str	r3, [sp, #92]	; 0x5c
 8025eae:	e699      	b.n	8025be4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8025eb0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025eb2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025eb4:	441c      	add	r4, r3
 8025eb6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025eb8:	441d      	add	r5, r3
 8025eba:	9b07      	ldr	r3, [sp, #28]
 8025ebc:	942d      	str	r4, [sp, #180]	; 0xb4
 8025ebe:	3b01      	subs	r3, #1
 8025ec0:	9307      	str	r3, [sp, #28]
 8025ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ec4:	3302      	adds	r3, #2
 8025ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8025ec8:	e66c      	b.n	8025ba4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025eca:	d024      	beq.n	8025f16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025ecc:	9b07      	ldr	r3, [sp, #28]
 8025ece:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025ed0:	3b01      	subs	r3, #1
 8025ed2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8025ed8:	1400      	asrs	r0, r0, #16
 8025eda:	f53f ae80 	bmi.w	8025bde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ede:	3901      	subs	r1, #1
 8025ee0:	4288      	cmp	r0, r1
 8025ee2:	f6bf ae7c 	bge.w	8025bde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ee6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025ee8:	fb01 5303 	mla	r3, r1, r3, r5
 8025eec:	141b      	asrs	r3, r3, #16
 8025eee:	f53f ae76 	bmi.w	8025bde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025ef2:	3a01      	subs	r2, #1
 8025ef4:	4293      	cmp	r3, r2
 8025ef6:	f6bf ae72 	bge.w	8025bde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025efa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025efe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025f02:	f1bb 0f00 	cmp.w	fp, #0
 8025f06:	dc71      	bgt.n	8025fec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025f08:	9b07      	ldr	r3, [sp, #28]
 8025f0a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f10:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025f14:	930a      	str	r3, [sp, #40]	; 0x28
 8025f16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	f340 81af 	ble.w	802627c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8025f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f24:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025f28:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025f2c:	eef0 6a48 	vmov.f32	s13, s16
 8025f30:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025f34:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025f38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f3c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025f40:	eef0 6a68 	vmov.f32	s13, s17
 8025f44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f48:	ee16 5a90 	vmov	r5, s13
 8025f4c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025f50:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025f54:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025f58:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025f5c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025f60:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025f64:	ee18 2a10 	vmov	r2, s16
 8025f68:	eeb0 8a47 	vmov.f32	s16, s14
 8025f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f70:	ee18 2a90 	vmov	r2, s17
 8025f74:	932f      	str	r3, [sp, #188]	; 0xbc
 8025f76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f78:	eef0 8a67 	vmov.f32	s17, s15
 8025f7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f80:	9330      	str	r3, [sp, #192]	; 0xc0
 8025f82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025f84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025f86:	3b01      	subs	r3, #1
 8025f88:	9316      	str	r3, [sp, #88]	; 0x58
 8025f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025f8c:	bf08      	it	eq
 8025f8e:	4613      	moveq	r3, r2
 8025f90:	9307      	str	r3, [sp, #28]
 8025f92:	e5f9      	b.n	8025b88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8025f94:	2800      	cmp	r0, #0
 8025f96:	f43f ae6b 	beq.w	8025c70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025f9a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025f9e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025fa2:	9108      	str	r1, [sp, #32]
 8025fa4:	0e09      	lsrs	r1, r1, #24
 8025fa6:	9110      	str	r1, [sp, #64]	; 0x40
 8025fa8:	e662      	b.n	8025c70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025faa:	f113 0801 	adds.w	r8, r3, #1
 8025fae:	f53f af74 	bmi.w	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025fb2:	4541      	cmp	r1, r8
 8025fb4:	f6ff af71 	blt.w	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025fb8:	f11c 0801 	adds.w	r8, ip, #1
 8025fbc:	f53f af6d 	bmi.w	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025fc0:	45c6      	cmp	lr, r8
 8025fc2:	f6ff af6a 	blt.w	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025fc6:	b209      	sxth	r1, r1
 8025fc8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8025fcc:	fa0f f38e 	sxth.w	r3, lr
 8025fd0:	9100      	str	r1, [sp, #0]
 8025fd2:	4639      	mov	r1, r7
 8025fd4:	9301      	str	r3, [sp, #4]
 8025fd6:	4633      	mov	r3, r6
 8025fd8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8025fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025fde:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025fe0:	f7ff fc4c 	bl	802587c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025fe4:	e759      	b.n	8025e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025fe6:	bf00      	nop
 8025fe8:	fffff800 	.word	0xfffff800
 8025fec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025fee:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025ff2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025ff4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025ff8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025ffa:	1427      	asrs	r7, r4, #16
 8025ffc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ffe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026002:	142b      	asrs	r3, r5, #16
 8026004:	fb01 7303 	mla	r3, r1, r3, r7
 8026008:	18e7      	adds	r7, r4, r3
 802600a:	5ce3      	ldrb	r3, [r4, r3]
 802600c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026010:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026014:	2a00      	cmp	r2, #0
 8026016:	f000 8127 	beq.w	8026268 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802601a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802601e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026022:	940d      	str	r4, [sp, #52]	; 0x34
 8026024:	0e24      	lsrs	r4, r4, #24
 8026026:	9414      	str	r4, [sp, #80]	; 0x50
 8026028:	b170      	cbz	r0, 8026048 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802602a:	eb07 0e01 	add.w	lr, r7, r1
 802602e:	5c79      	ldrb	r1, [r7, r1]
 8026030:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026034:	9109      	str	r1, [sp, #36]	; 0x24
 8026036:	0e09      	lsrs	r1, r1, #24
 8026038:	9111      	str	r1, [sp, #68]	; 0x44
 802603a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802603e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026042:	910e      	str	r1, [sp, #56]	; 0x38
 8026044:	0e09      	lsrs	r1, r1, #24
 8026046:	9115      	str	r1, [sp, #84]	; 0x54
 8026048:	b292      	uxth	r2, r2
 802604a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802604c:	b280      	uxth	r0, r0
 802604e:	fb02 f800 	mul.w	r8, r2, r0
 8026052:	0112      	lsls	r2, r2, #4
 8026054:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026058:	eba2 0e08 	sub.w	lr, r2, r8
 802605c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026062:	b280      	uxth	r0, r0
 8026064:	fa1f fe8e 	uxth.w	lr, lr
 8026068:	1a09      	subs	r1, r1, r0
 802606a:	fb0e f202 	mul.w	r2, lr, r2
 802606e:	b289      	uxth	r1, r1
 8026070:	fb01 220c 	mla	r2, r1, ip, r2
 8026074:	fb00 2204 	mla	r2, r0, r4, r2
 8026078:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802607a:	fb08 2204 	mla	r2, r8, r4, r2
 802607e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026082:	2a00      	cmp	r2, #0
 8026084:	f000 80e5 	beq.w	8026252 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026088:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802608c:	d019      	beq.n	80260c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 802608e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026092:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026096:	fb0c fa0a 	mul.w	sl, ip, sl
 802609a:	fb0c fc03 	mul.w	ip, ip, r3
 802609e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80260a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80260a6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80260aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260ae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80260b2:	4453      	add	r3, sl
 80260b4:	0a3f      	lsrs	r7, r7, #8
 80260b6:	0a1b      	lsrs	r3, r3, #8
 80260b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80260bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260c0:	433b      	orrs	r3, r7
 80260c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80260c4:	2cff      	cmp	r4, #255	; 0xff
 80260c6:	d020      	beq.n	802610a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80260c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80260ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80260ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80260d0:	4367      	muls	r7, r4
 80260d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80260d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80260d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80260dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80260de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80260e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80260ea:	44bc      	add	ip, r7
 80260ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80260f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80260f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80260f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80260fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026100:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026104:	ea4c 040a 	orr.w	r4, ip, sl
 8026108:	940d      	str	r4, [sp, #52]	; 0x34
 802610a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802610c:	2cff      	cmp	r4, #255	; 0xff
 802610e:	d020      	beq.n	8026152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8026110:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026112:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026116:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026118:	4367      	muls	r7, r4
 802611a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802611c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026120:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026124:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026126:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802612a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802612e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026132:	44bc      	add	ip, r7
 8026134:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026138:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802613c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026140:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026144:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026148:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802614c:	ea4c 040a 	orr.w	r4, ip, sl
 8026150:	9409      	str	r4, [sp, #36]	; 0x24
 8026152:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026154:	2cff      	cmp	r4, #255	; 0xff
 8026156:	d020      	beq.n	802619a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8026158:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802615a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802615e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026160:	4367      	muls	r7, r4
 8026162:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026164:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026168:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802616c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802616e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026172:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026176:	fb04 fa0a 	mul.w	sl, r4, sl
 802617a:	44bc      	add	ip, r7
 802617c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026184:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802618c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026190:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026194:	ea4c 040a 	orr.w	r4, ip, sl
 8026198:	940e      	str	r4, [sp, #56]	; 0x38
 802619a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802619c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80261a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261a4:	43d2      	mvns	r2, r2
 80261a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80261aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80261ac:	b2d2      	uxtb	r2, r2
 80261ae:	fb0e f707 	mul.w	r7, lr, r7
 80261b2:	fb01 770c 	mla	r7, r1, ip, r7
 80261b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80261ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80261bc:	fb00 770c 	mla	r7, r0, ip, r7
 80261c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80261c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80261c6:	fb08 770c 	mla	r7, r8, ip, r7
 80261ca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80261ce:	fb0e fe0c 	mul.w	lr, lr, ip
 80261d2:	0a3f      	lsrs	r7, r7, #8
 80261d4:	fb01 e303 	mla	r3, r1, r3, lr
 80261d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80261da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80261de:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80261e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80261e4:	fb00 330a 	mla	r3, r0, sl, r3
 80261e8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80261ec:	fb08 3c0c 	mla	ip, r8, ip, r3
 80261f0:	f8b9 3000 	ldrh.w	r3, [r9]
 80261f4:	1218      	asrs	r0, r3, #8
 80261f6:	10d9      	asrs	r1, r3, #3
 80261f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026200:	00db      	lsls	r3, r3, #3
 8026202:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026206:	4350      	muls	r0, r2
 8026208:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802620c:	b2db      	uxtb	r3, r3
 802620e:	4351      	muls	r1, r2
 8026210:	ea47 070c 	orr.w	r7, r7, ip
 8026214:	4353      	muls	r3, r2
 8026216:	1c42      	adds	r2, r0, #1
 8026218:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802621c:	0c3a      	lsrs	r2, r7, #16
 802621e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026222:	4a19      	ldr	r2, [pc, #100]	; (8026288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8026224:	b2c0      	uxtb	r0, r0
 8026226:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802622a:	1c4a      	adds	r2, r1, #1
 802622c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026230:	0a3a      	lsrs	r2, r7, #8
 8026232:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026236:	00c9      	lsls	r1, r1, #3
 8026238:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802623c:	4301      	orrs	r1, r0
 802623e:	1c58      	adds	r0, r3, #1
 8026240:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026244:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026248:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802624c:	4308      	orrs	r0, r1
 802624e:	f8a9 0000 	strh.w	r0, [r9]
 8026252:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026254:	f109 0902 	add.w	r9, r9, #2
 8026258:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802625a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802625e:	441a      	add	r2, r3
 8026260:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026262:	922d      	str	r2, [sp, #180]	; 0xb4
 8026264:	441d      	add	r5, r3
 8026266:	e64c      	b.n	8025f02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8026268:	2800      	cmp	r0, #0
 802626a:	f43f aeed 	beq.w	8026048 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802626e:	5c79      	ldrb	r1, [r7, r1]
 8026270:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026274:	9109      	str	r1, [sp, #36]	; 0x24
 8026276:	0e09      	lsrs	r1, r1, #24
 8026278:	9111      	str	r1, [sp, #68]	; 0x44
 802627a:	e6e5      	b.n	8026048 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802627c:	b01b      	add	sp, #108	; 0x6c
 802627e:	ecbd 8b08 	vpop	{d8-d11}
 8026282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026286:	bf00      	nop
 8026288:	fffff800 	.word	0xfffff800

0802628c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026290:	b085      	sub	sp, #20
 8026292:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026296:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802629a:	9103      	str	r1, [sp, #12]
 802629c:	2d00      	cmp	r5, #0
 802629e:	fb05 7106 	mla	r1, r5, r6, r7
 80262a2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80262a6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80262aa:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80262ae:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80262b2:	eb03 0901 	add.w	r9, r3, r1
 80262b6:	9401      	str	r4, [sp, #4]
 80262b8:	f2c0 80c0 	blt.w	802643c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80262bc:	45a8      	cmp	r8, r5
 80262be:	f340 80bd 	ble.w	802643c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80262c2:	2f00      	cmp	r7, #0
 80262c4:	f2c0 80b6 	blt.w	8026434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80262c8:	42be      	cmp	r6, r7
 80262ca:	f340 80b3 	ble.w	8026434 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80262ce:	f813 c001 	ldrb.w	ip, [r3, r1]
 80262d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80262d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80262da:	d019      	beq.n	8026310 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80262dc:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80262e0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80262e4:	435a      	muls	r2, r3
 80262e6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80262ea:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80262ee:	fb0c f403 	mul.w	r4, ip, r3
 80262f2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80262f6:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80262fa:	441a      	add	r2, r3
 80262fc:	f104 0320 	add.w	r3, r4, #32
 8026300:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026304:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026308:	0a1b      	lsrs	r3, r3, #8
 802630a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802630e:	4319      	orrs	r1, r3
 8026310:	b289      	uxth	r1, r1
 8026312:	1c7b      	adds	r3, r7, #1
 8026314:	f100 8097 	bmi.w	8026446 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8026318:	429e      	cmp	r6, r3
 802631a:	f340 8094 	ble.w	8026446 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802631e:	2800      	cmp	r0, #0
 8026320:	f000 8094 	beq.w	802644c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8026324:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026328:	9b01      	ldr	r3, [sp, #4]
 802632a:	2cff      	cmp	r4, #255	; 0xff
 802632c:	885b      	ldrh	r3, [r3, #2]
 802632e:	d01b      	beq.n	8026368 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8026330:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8026334:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026338:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802633c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026340:	fb0a f202 	mul.w	r2, sl, r2
 8026344:	fb04 fa03 	mul.w	sl, r4, r3
 8026348:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802634c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026350:	441a      	add	r2, r3
 8026352:	f10a 0320 	add.w	r3, sl, #32
 8026356:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802635a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802635e:	0a1b      	lsrs	r3, r3, #8
 8026360:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026364:	ea4b 0303 	orr.w	r3, fp, r3
 8026368:	b29b      	uxth	r3, r3
 802636a:	3501      	adds	r5, #1
 802636c:	d474      	bmi.n	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 802636e:	45a8      	cmp	r8, r5
 8026370:	dd72      	ble.n	8026458 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8026372:	f1be 0f00 	cmp.w	lr, #0
 8026376:	f000 8120 	beq.w	80265ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 802637a:	2f00      	cmp	r7, #0
 802637c:	db69      	blt.n	8026452 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 802637e:	42be      	cmp	r6, r7
 8026380:	dd67      	ble.n	8026452 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8026382:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026386:	9a01      	ldr	r2, [sp, #4]
 8026388:	2dff      	cmp	r5, #255	; 0xff
 802638a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802638e:	d01c      	beq.n	80263ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8026390:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026394:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026398:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802639c:	fb08 f802 	mul.w	r8, r8, r2
 80263a0:	fb05 fa0b 	mul.w	sl, r5, fp
 80263a4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80263a8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80263ac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80263b0:	4490      	add	r8, r2
 80263b2:	f10a 0220 	add.w	r2, sl, #32
 80263b6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80263ba:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80263be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80263c6:	ea4b 0b0a 	orr.w	fp, fp, sl
 80263ca:	fa1f fb8b 	uxth.w	fp, fp
 80263ce:	3701      	adds	r7, #1
 80263d0:	d447      	bmi.n	8026462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80263d2:	42be      	cmp	r6, r7
 80263d4:	dd45      	ble.n	8026462 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 80263d6:	2800      	cmp	r0, #0
 80263d8:	d046      	beq.n	8026468 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 80263da:	3601      	adds	r6, #1
 80263dc:	9a01      	ldr	r2, [sp, #4]
 80263de:	f819 7006 	ldrb.w	r7, [r9, r6]
 80263e2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80263e6:	2fff      	cmp	r7, #255	; 0xff
 80263e8:	d01a      	beq.n	8026420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 80263ea:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80263ee:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80263f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80263f6:	fb08 f806 	mul.w	r8, r8, r6
 80263fa:	fb07 f902 	mul.w	r9, r7, r2
 80263fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026402:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026406:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802640a:	44b0      	add	r8, r6
 802640c:	f109 0620 	add.w	r6, r9, #32
 8026410:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026414:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026418:	0a36      	lsrs	r6, r6, #8
 802641a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802641e:	4332      	orrs	r2, r6
 8026420:	b292      	uxth	r2, r2
 8026422:	280f      	cmp	r0, #15
 8026424:	d922      	bls.n	802646c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8026426:	4b69      	ldr	r3, [pc, #420]	; (80265cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8026428:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802642c:	4a68      	ldr	r2, [pc, #416]	; (80265d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802642e:	4869      	ldr	r0, [pc, #420]	; (80265d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8026430:	f004 fa50 	bl	802a8d4 <__assert_func>
 8026434:	f04f 0c00 	mov.w	ip, #0
 8026438:	4661      	mov	r1, ip
 802643a:	e76a      	b.n	8026312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 802643c:	2400      	movs	r4, #0
 802643e:	46a4      	mov	ip, r4
 8026440:	4623      	mov	r3, r4
 8026442:	4621      	mov	r1, r4
 8026444:	e791      	b.n	802636a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026446:	2400      	movs	r4, #0
 8026448:	4623      	mov	r3, r4
 802644a:	e78e      	b.n	802636a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802644c:	4604      	mov	r4, r0
 802644e:	4603      	mov	r3, r0
 8026450:	e78b      	b.n	802636a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026452:	2500      	movs	r5, #0
 8026454:	46ab      	mov	fp, r5
 8026456:	e7ba      	b.n	80263ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8026458:	2700      	movs	r7, #0
 802645a:	463d      	mov	r5, r7
 802645c:	463a      	mov	r2, r7
 802645e:	46bb      	mov	fp, r7
 8026460:	e7df      	b.n	8026422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026462:	2700      	movs	r7, #0
 8026464:	463a      	mov	r2, r7
 8026466:	e7dc      	b.n	8026422 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026468:	4607      	mov	r7, r0
 802646a:	4602      	mov	r2, r0
 802646c:	f1be 0f0f 	cmp.w	lr, #15
 8026470:	d8d9      	bhi.n	8026426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026472:	b286      	uxth	r6, r0
 8026474:	fa1f f98e 	uxth.w	r9, lr
 8026478:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802647c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026480:	fb06 f809 	mul.w	r8, r6, r9
 8026484:	0136      	lsls	r6, r6, #4
 8026486:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802648a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802648e:	9601      	str	r6, [sp, #4]
 8026490:	ea4a 0101 	orr.w	r1, sl, r1
 8026494:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026498:	fa1f f689 	uxth.w	r6, r9
 802649c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80264a0:	fb10 f90e 	smulbb	r9, r0, lr
 80264a4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80264a8:	9602      	str	r6, [sp, #8]
 80264aa:	460e      	mov	r6, r1
 80264ac:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80264b0:	f1ce 0110 	rsb	r1, lr, #16
 80264b4:	ea4a 0303 	orr.w	r3, sl, r3
 80264b8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80264bc:	1a09      	subs	r1, r1, r0
 80264be:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80264c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80264c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80264ca:	4343      	muls	r3, r0
 80264cc:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80264d0:	9801      	ldr	r0, [sp, #4]
 80264d2:	ea4a 0202 	orr.w	r2, sl, r2
 80264d6:	fb01 3106 	mla	r1, r1, r6, r3
 80264da:	9e02      	ldr	r6, [sp, #8]
 80264dc:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80264e0:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80264e4:	fb09 1302 	mla	r3, r9, r2, r1
 80264e8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80264ec:	1b80      	subs	r0, r0, r6
 80264ee:	9e01      	ldr	r6, [sp, #4]
 80264f0:	9a03      	ldr	r2, [sp, #12]
 80264f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80264f6:	eba6 0608 	sub.w	r6, r6, r8
 80264fa:	b280      	uxth	r0, r0
 80264fc:	8811      	ldrh	r1, [r2, #0]
 80264fe:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026502:	b2b6      	uxth	r6, r6
 8026504:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8026508:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802650c:	4374      	muls	r4, r6
 802650e:	b292      	uxth	r2, r2
 8026510:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026514:	fb0c 4400 	mla	r4, ip, r0, r4
 8026518:	9802      	ldr	r0, [sp, #8]
 802651a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 802651e:	fb00 4505 	mla	r5, r0, r5, r4
 8026522:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026526:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802652a:	1208      	asrs	r0, r1, #8
 802652c:	fb08 5707 	mla	r7, r8, r7, r5
 8026530:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026534:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026538:	10cd      	asrs	r5, r1, #3
 802653a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802653e:	ea43 0e0e 	orr.w	lr, r3, lr
 8026542:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026546:	4357      	muls	r7, r2
 8026548:	fa1f f38e 	uxth.w	r3, lr
 802654c:	f107 0801 	add.w	r8, r7, #1
 8026550:	121c      	asrs	r4, r3, #8
 8026552:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8026556:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802655a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802655e:	b2ff      	uxtb	r7, r7
 8026560:	fb10 f007 	smulbb	r0, r0, r7
 8026564:	fb15 f507 	smulbb	r5, r5, r7
 8026568:	fb04 0402 	mla	r4, r4, r2, r0
 802656c:	10d8      	asrs	r0, r3, #3
 802656e:	00db      	lsls	r3, r3, #3
 8026570:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026574:	b2a4      	uxth	r4, r4
 8026576:	fb00 5002 	mla	r0, r0, r2, r5
 802657a:	b2dd      	uxtb	r5, r3
 802657c:	00cb      	lsls	r3, r1, #3
 802657e:	b280      	uxth	r0, r0
 8026580:	b2db      	uxtb	r3, r3
 8026582:	fb13 f307 	smulbb	r3, r3, r7
 8026586:	fb05 3202 	mla	r2, r5, r2, r3
 802658a:	1c63      	adds	r3, r4, #1
 802658c:	b292      	uxth	r2, r2
 802658e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026592:	1c53      	adds	r3, r2, #1
 8026594:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026598:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802659c:	1c42      	adds	r2, r0, #1
 802659e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80265a2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80265a6:	9a03      	ldr	r2, [sp, #12]
 80265a8:	0940      	lsrs	r0, r0, #5
 80265aa:	4323      	orrs	r3, r4
 80265ac:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80265b0:	4303      	orrs	r3, r0
 80265b2:	8013      	strh	r3, [r2, #0]
 80265b4:	b005      	add	sp, #20
 80265b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265ba:	280f      	cmp	r0, #15
 80265bc:	f63f af33 	bhi.w	8026426 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80265c0:	4677      	mov	r7, lr
 80265c2:	4675      	mov	r5, lr
 80265c4:	4672      	mov	r2, lr
 80265c6:	46f3      	mov	fp, lr
 80265c8:	e753      	b.n	8026472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 80265ca:	bf00      	nop
 80265cc:	0802fb1d 	.word	0x0802fb1d
 80265d0:	080300ea 	.word	0x080300ea
 80265d4:	0802fba1 	.word	0x0802fba1

080265d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80265d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265dc:	ed2d 8b08 	vpush	{d8-d11}
 80265e0:	b097      	sub	sp, #92	; 0x5c
 80265e2:	eeb0 aa40 	vmov.f32	s20, s0
 80265e6:	eef0 9a60 	vmov.f32	s19, s1
 80265ea:	9214      	str	r2, [sp, #80]	; 0x50
 80265ec:	eeb0 9a41 	vmov.f32	s18, s2
 80265f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80265f2:	eeb0 8a62 	vmov.f32	s16, s5
 80265f6:	9308      	str	r3, [sp, #32]
 80265f8:	eef0 8a43 	vmov.f32	s17, s6
 80265fc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8026600:	eef0 ba44 	vmov.f32	s23, s8
 8026604:	9015      	str	r0, [sp, #84]	; 0x54
 8026606:	eeb0 ba64 	vmov.f32	s22, s9
 802660a:	9312      	str	r3, [sp, #72]	; 0x48
 802660c:	eef0 aa45 	vmov.f32	s21, s10
 8026610:	6850      	ldr	r0, [r2, #4]
 8026612:	9111      	str	r1, [sp, #68]	; 0x44
 8026614:	6812      	ldr	r2, [r2, #0]
 8026616:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802661a:	fb00 1303 	mla	r3, r0, r3, r1
 802661e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026622:	9309      	str	r3, [sp, #36]	; 0x24
 8026624:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	930b      	str	r3, [sp, #44]	; 0x2c
 802662a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802662c:	685b      	ldr	r3, [r3, #4]
 802662e:	930c      	str	r3, [sp, #48]	; 0x30
 8026630:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026634:	930a      	str	r3, [sp, #40]	; 0x28
 8026636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026638:	2b00      	cmp	r3, #0
 802663a:	dc03      	bgt.n	8026644 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802663c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802663e:	2b00      	cmp	r3, #0
 8026640:	f340 83cd 	ble.w	8026dde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026644:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026646:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802664a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802664e:	1e48      	subs	r0, r1, #1
 8026650:	1e55      	subs	r5, r2, #1
 8026652:	9b08      	ldr	r3, [sp, #32]
 8026654:	2b00      	cmp	r3, #0
 8026656:	f340 81a5 	ble.w	80269a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802665a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 802665c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802665e:	1436      	asrs	r6, r6, #16
 8026660:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026664:	d406      	bmi.n	8026674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026666:	4286      	cmp	r6, r0
 8026668:	da04      	bge.n	8026674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802666a:	2b00      	cmp	r3, #0
 802666c:	db02      	blt.n	8026674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802666e:	42ab      	cmp	r3, r5
 8026670:	f2c0 8199 	blt.w	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8026674:	3601      	adds	r6, #1
 8026676:	f100 8186 	bmi.w	8026986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802667a:	42b1      	cmp	r1, r6
 802667c:	f2c0 8183 	blt.w	8026986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026680:	3301      	adds	r3, #1
 8026682:	f100 8180 	bmi.w	8026986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026686:	429a      	cmp	r2, r3
 8026688:	f2c0 817d 	blt.w	8026986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802668c:	9b08      	ldr	r3, [sp, #32]
 802668e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026694:	9313      	str	r3, [sp, #76]	; 0x4c
 8026696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026698:	2b00      	cmp	r3, #0
 802669a:	f340 81a6 	ble.w	80269ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802669e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266a0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80266a2:	1418      	asrs	r0, r3, #16
 80266a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266a6:	142d      	asrs	r5, r5, #16
 80266a8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80266ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266ae:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80266b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80266b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80266b8:	f100 81fa 	bmi.w	8026ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80266bc:	f102 3eff 	add.w	lr, r2, #4294967295
 80266c0:	4575      	cmp	r5, lr
 80266c2:	f280 81f5 	bge.w	8026ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80266c6:	2800      	cmp	r0, #0
 80266c8:	f2c0 81f2 	blt.w	8026ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80266cc:	f103 3eff 	add.w	lr, r3, #4294967295
 80266d0:	4570      	cmp	r0, lr
 80266d2:	f280 81ed 	bge.w	8026ab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80266d6:	b212      	sxth	r2, r2
 80266d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80266da:	fa1f fe81 	uxth.w	lr, r1
 80266de:	fb00 5002 	mla	r0, r0, r2, r5
 80266e2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80266e6:	eb03 0a00 	add.w	sl, r3, r0
 80266ea:	f813 9000 	ldrb.w	r9, [r3, r0]
 80266ee:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80266f2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80266f6:	b29b      	uxth	r3, r3
 80266f8:	f1bc 0f00 	cmp.w	ip, #0
 80266fc:	f000 81bb 	beq.w	8026a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026700:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026704:	eb0a 0b02 	add.w	fp, sl, r2
 8026708:	fa1f fa8c 	uxth.w	sl, ip
 802670c:	940d      	str	r4, [sp, #52]	; 0x34
 802670e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026712:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026716:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802671a:	eba5 050e 	sub.w	r5, r5, lr
 802671e:	940e      	str	r4, [sp, #56]	; 0x38
 8026720:	fa1f fa8a 	uxth.w	sl, sl
 8026724:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026726:	b2ad      	uxth	r5, r5
 8026728:	eba3 030a 	sub.w	r3, r3, sl
 802672c:	fb08 f505 	mul.w	r5, r8, r5
 8026730:	b29b      	uxth	r3, r3
 8026732:	fb09 5303 	mla	r3, r9, r3, r5
 8026736:	fb0a 3304 	mla	r3, sl, r4, r3
 802673a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802673c:	fb0e 3304 	mla	r3, lr, r4, r3
 8026740:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026744:	2b00      	cmp	r3, #0
 8026746:	f000 8111 	beq.w	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802674a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802674c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026750:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026754:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026758:	f000 8192 	beq.w	8026a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802675c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026760:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026764:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026768:	fb0a fe0e 	mul.w	lr, sl, lr
 802676c:	fb09 f000 	mul.w	r0, r9, r0
 8026770:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026774:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026778:	f100 0b20 	add.w	fp, r0, #32
 802677c:	44ce      	add	lr, r9
 802677e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026782:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026786:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802678a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802678e:	ea4e 0909 	orr.w	r9, lr, r9
 8026792:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026796:	8868      	ldrh	r0, [r5, #2]
 8026798:	d019      	beq.n	80267ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802679a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802679e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80267a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80267a6:	fb0a fe0e 	mul.w	lr, sl, lr
 80267aa:	fb08 f800 	mul.w	r8, r8, r0
 80267ae:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80267b2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80267b6:	f108 0b20 	add.w	fp, r8, #32
 80267ba:	4486      	add	lr, r0
 80267bc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80267c0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80267c4:	0a00      	lsrs	r0, r0, #8
 80267c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80267ca:	ea4e 0000 	orr.w	r0, lr, r0
 80267ce:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80267d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80267d6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80267da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80267de:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80267e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80267e6:	ea4e 0909 	orr.w	r9, lr, r9
 80267ea:	ea4a 0000 	orr.w	r0, sl, r0
 80267ee:	f1bc 0f00 	cmp.w	ip, #0
 80267f2:	f000 8147 	beq.w	8026a84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 80267f6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80267fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267fc:	3a01      	subs	r2, #1
 80267fe:	2cff      	cmp	r4, #255	; 0xff
 8026800:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026804:	f102 0202 	add.w	r2, r2, #2
 8026808:	eb05 0e02 	add.w	lr, r5, r2
 802680c:	5aaa      	ldrh	r2, [r5, r2]
 802680e:	d018      	beq.n	8026842 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026810:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026814:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026818:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802681c:	fb04 fa02 	mul.w	sl, r4, r2
 8026820:	fb08 f805 	mul.w	r8, r8, r5
 8026824:	f10a 0520 	add.w	r5, sl, #32
 8026828:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802682c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026830:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026834:	4442      	add	r2, r8
 8026836:	0a2d      	lsrs	r5, r5, #8
 8026838:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802683c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026840:	432a      	orrs	r2, r5
 8026842:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026844:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026848:	2cff      	cmp	r4, #255	; 0xff
 802684a:	d01a      	beq.n	8026882 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 802684c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026850:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026854:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026858:	fb04 fa05 	mul.w	sl, r4, r5
 802685c:	fb08 f80e 	mul.w	r8, r8, lr
 8026860:	f10a 0e20 	add.w	lr, sl, #32
 8026864:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026868:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802686c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026870:	4445      	add	r5, r8
 8026872:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026876:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802687a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802687e:	ea45 050e 	orr.w	r5, r5, lr
 8026882:	fb1c fe01 	smulbb	lr, ip, r1
 8026886:	f1cc 0810 	rsb	r8, ip, #16
 802688a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802688e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026892:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026896:	eba8 0801 	sub.w	r8, r8, r1
 802689a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802689e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80268a2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80268a6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80268aa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80268ae:	ea4a 0202 	orr.w	r2, sl, r2
 80268b2:	4341      	muls	r1, r0
 80268b4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80268b8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80268bc:	fb09 1108 	mla	r1, r9, r8, r1
 80268c0:	ea4b 0505 	orr.w	r5, fp, r5
 80268c4:	fb0c 1102 	mla	r1, ip, r2, r1
 80268c8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80268cc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80268d0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80268d4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80268d8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80268dc:	ea42 0e0e 	orr.w	lr, r2, lr
 80268e0:	fa1f f28e 	uxth.w	r2, lr
 80268e4:	2bff      	cmp	r3, #255	; 0xff
 80268e6:	d103      	bne.n	80268f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80268e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80268ea:	29ff      	cmp	r1, #255	; 0xff
 80268ec:	f000 80de 	beq.w	8026aac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 80268f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80268f2:	1215      	asrs	r5, r2, #8
 80268f4:	8838      	ldrh	r0, [r7, #0]
 80268f6:	434b      	muls	r3, r1
 80268f8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80268fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80268fe:	f103 0c01 	add.w	ip, r3, #1
 8026902:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026906:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802690a:	fa5f fc83 	uxtb.w	ip, r3
 802690e:	1203      	asrs	r3, r0, #8
 8026910:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026914:	fb13 f30c 	smulbb	r3, r3, ip
 8026918:	fb05 3501 	mla	r5, r5, r1, r3
 802691c:	10c3      	asrs	r3, r0, #3
 802691e:	10d1      	asrs	r1, r2, #3
 8026920:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026924:	00d2      	lsls	r2, r2, #3
 8026926:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802692a:	b2ad      	uxth	r5, r5
 802692c:	fb13 f30c 	smulbb	r3, r3, ip
 8026930:	b2d2      	uxtb	r2, r2
 8026932:	fb01 3104 	mla	r1, r1, r4, r3
 8026936:	00c3      	lsls	r3, r0, #3
 8026938:	b2db      	uxtb	r3, r3
 802693a:	b289      	uxth	r1, r1
 802693c:	fb13 f30c 	smulbb	r3, r3, ip
 8026940:	fb02 3304 	mla	r3, r2, r4, r3
 8026944:	b29a      	uxth	r2, r3
 8026946:	1c6b      	adds	r3, r5, #1
 8026948:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802694c:	1c53      	adds	r3, r2, #1
 802694e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026952:	1c4a      	adds	r2, r1, #1
 8026954:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026958:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802695c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026960:	0949      	lsrs	r1, r1, #5
 8026962:	432b      	orrs	r3, r5
 8026964:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026968:	430b      	orrs	r3, r1
 802696a:	803b      	strh	r3, [r7, #0]
 802696c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802696e:	3702      	adds	r7, #2
 8026970:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026972:	4413      	add	r3, r2
 8026974:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026976:	9329      	str	r3, [sp, #164]	; 0xa4
 8026978:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802697a:	441a      	add	r2, r3
 802697c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802697e:	3b01      	subs	r3, #1
 8026980:	922a      	str	r2, [sp, #168]	; 0xa8
 8026982:	9313      	str	r3, [sp, #76]	; 0x4c
 8026984:	e687      	b.n	8026696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026986:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026988:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 802698a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802698c:	4433      	add	r3, r6
 802698e:	9329      	str	r3, [sp, #164]	; 0xa4
 8026990:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026992:	441c      	add	r4, r3
 8026994:	9b08      	ldr	r3, [sp, #32]
 8026996:	3b01      	subs	r3, #1
 8026998:	942a      	str	r4, [sp, #168]	; 0xa8
 802699a:	9308      	str	r3, [sp, #32]
 802699c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802699e:	3302      	adds	r3, #2
 80269a0:	9309      	str	r3, [sp, #36]	; 0x24
 80269a2:	e656      	b.n	8026652 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80269a4:	d028      	beq.n	80269f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80269a6:	9b08      	ldr	r3, [sp, #32]
 80269a8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80269aa:	3b01      	subs	r3, #1
 80269ac:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80269ae:	fb00 5003 	mla	r0, r0, r3, r5
 80269b2:	1400      	asrs	r0, r0, #16
 80269b4:	f53f ae6a 	bmi.w	802668c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80269b8:	3901      	subs	r1, #1
 80269ba:	4288      	cmp	r0, r1
 80269bc:	f6bf ae66 	bge.w	802668c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80269c0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80269c2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80269c4:	fb01 0303 	mla	r3, r1, r3, r0
 80269c8:	141b      	asrs	r3, r3, #16
 80269ca:	f53f ae5f 	bmi.w	802668c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80269ce:	3a01      	subs	r2, #1
 80269d0:	4293      	cmp	r3, r2
 80269d2:	f6bf ae5b 	bge.w	802668c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80269d6:	9b08      	ldr	r3, [sp, #32]
 80269d8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80269dc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80269e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80269e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	f300 8082 	bgt.w	8026aee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80269ea:	9b08      	ldr	r3, [sp, #32]
 80269ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80269f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80269f2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80269f6:	9309      	str	r3, [sp, #36]	; 0x24
 80269f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80269fa:	2b00      	cmp	r3, #0
 80269fc:	f340 81ef 	ble.w	8026dde <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026a04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a06:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026a0a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026a0e:	eef0 6a48 	vmov.f32	s13, s16
 8026a12:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026a16:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a1e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026a22:	eef0 6a68 	vmov.f32	s13, s17
 8026a26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a2a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8026a2e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a32:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a36:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a3a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a3e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a42:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a46:	ee18 2a10 	vmov	r2, s16
 8026a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8026a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a52:	ee18 2a90 	vmov	r2, s17
 8026a56:	932b      	str	r3, [sp, #172]	; 0xac
 8026a58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a5a:	eef0 8a67 	vmov.f32	s17, s15
 8026a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a62:	932c      	str	r3, [sp, #176]	; 0xb0
 8026a64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026a68:	3b01      	subs	r3, #1
 8026a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8026a6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026a6e:	bf08      	it	eq
 8026a70:	4613      	moveq	r3, r2
 8026a72:	9308      	str	r3, [sp, #32]
 8026a74:	e5df      	b.n	8026636 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026a76:	fb08 f505 	mul.w	r5, r8, r5
 8026a7a:	fb09 5303 	mla	r3, r9, r3, r5
 8026a7e:	e65f      	b.n	8026740 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026a80:	4681      	mov	r9, r0
 8026a82:	e686      	b.n	8026792 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026a84:	f1c1 0210 	rsb	r2, r1, #16
 8026a88:	4341      	muls	r1, r0
 8026a8a:	fb09 1902 	mla	r9, r9, r2, r1
 8026a8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026a92:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026a96:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026a9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a9e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026aa2:	ea42 0909 	orr.w	r9, r2, r9
 8026aa6:	fa1f f289 	uxth.w	r2, r9
 8026aaa:	e71b      	b.n	80268e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026aac:	803a      	strh	r2, [r7, #0]
 8026aae:	e75d      	b.n	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026ab0:	f115 0e01 	adds.w	lr, r5, #1
 8026ab4:	f53f af5a 	bmi.w	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026ab8:	4572      	cmp	r2, lr
 8026aba:	f6ff af57 	blt.w	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026abe:	f110 0e01 	adds.w	lr, r0, #1
 8026ac2:	f53f af53 	bmi.w	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026ac6:	4573      	cmp	r3, lr
 8026ac8:	f6ff af50 	blt.w	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026acc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ace:	b21b      	sxth	r3, r3
 8026ad0:	b212      	sxth	r2, r2
 8026ad2:	9502      	str	r5, [sp, #8]
 8026ad4:	9301      	str	r3, [sp, #4]
 8026ad6:	9200      	str	r2, [sp, #0]
 8026ad8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8026adc:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026ae0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026ae4:	4639      	mov	r1, r7
 8026ae6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026ae8:	f7ff fbd0 	bl	802628c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8026aec:	e73e      	b.n	802696c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026aee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026af0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026af4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026af6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026afa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026afc:	fa1f fc82 	uxth.w	ip, r2
 8026b00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026b06:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026b0a:	141f      	asrs	r7, r3, #16
 8026b0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026b0e:	141b      	asrs	r3, r3, #16
 8026b10:	fb01 3707 	mla	r7, r1, r7, r3
 8026b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b16:	eb03 0a07 	add.w	sl, r3, r7
 8026b1a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026b1e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026b22:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026b26:	b29b      	uxth	r3, r3
 8026b28:	2d00      	cmp	r5, #0
 8026b2a:	f000 813d 	beq.w	8026da8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8026b2e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026b32:	eb0a 0b01 	add.w	fp, sl, r1
 8026b36:	fa1f fa85 	uxth.w	sl, r5
 8026b3a:	940f      	str	r4, [sp, #60]	; 0x3c
 8026b3c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b40:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026b44:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026b48:	eba0 000c 	sub.w	r0, r0, ip
 8026b4c:	9410      	str	r4, [sp, #64]	; 0x40
 8026b4e:	fa1f fa8a 	uxth.w	sl, sl
 8026b52:	b280      	uxth	r0, r0
 8026b54:	eba3 030a 	sub.w	r3, r3, sl
 8026b58:	fb08 f000 	mul.w	r0, r8, r0
 8026b5c:	b29b      	uxth	r3, r3
 8026b5e:	fb09 0303 	mla	r3, r9, r3, r0
 8026b62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026b64:	fb0a 3300 	mla	r3, sl, r0, r3
 8026b68:	fb0c 3304 	mla	r3, ip, r4, r3
 8026b6c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026b70:	2b00      	cmp	r3, #0
 8026b72:	f000 810b 	beq.w	8026d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026b76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026b78:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026b7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026b7e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026b82:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026b86:	f000 8114 	beq.w	8026db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 8026b8a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026b8e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026b92:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026b96:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b9a:	fb09 f707 	mul.w	r7, r9, r7
 8026b9e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026ba2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026ba6:	f107 0b20 	add.w	fp, r7, #32
 8026baa:	44cc      	add	ip, r9
 8026bac:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026bb0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026bb4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026bb8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026bbc:	ea4c 0909 	orr.w	r9, ip, r9
 8026bc0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026bc4:	8847      	ldrh	r7, [r0, #2]
 8026bc6:	d019      	beq.n	8026bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8026bc8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026bcc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026bd0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026bd4:	fb0a fc0c 	mul.w	ip, sl, ip
 8026bd8:	fb08 f807 	mul.w	r8, r8, r7
 8026bdc:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026be0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026be4:	f108 0b20 	add.w	fp, r8, #32
 8026be8:	44bc      	add	ip, r7
 8026bea:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026bee:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026bf2:	0a3f      	lsrs	r7, r7, #8
 8026bf4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026bf8:	ea4c 0707 	orr.w	r7, ip, r7
 8026bfc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026c00:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026c04:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026c08:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026c0c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026c10:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c14:	ea4c 0909 	orr.w	r9, ip, r9
 8026c18:	ea4a 0707 	orr.w	r7, sl, r7
 8026c1c:	2d00      	cmp	r5, #0
 8026c1e:	f000 80ca 	beq.w	8026db6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026c22:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026c26:	3901      	subs	r1, #1
 8026c28:	0049      	lsls	r1, r1, #1
 8026c2a:	3102      	adds	r1, #2
 8026c2c:	eb00 0c01 	add.w	ip, r0, r1
 8026c30:	5a41      	ldrh	r1, [r0, r1]
 8026c32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026c34:	28ff      	cmp	r0, #255	; 0xff
 8026c36:	d019      	beq.n	8026c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026c38:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026c3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026c3e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026c42:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c46:	fb04 fa01 	mul.w	sl, r4, r1
 8026c4a:	fb08 f800 	mul.w	r8, r8, r0
 8026c4e:	f10a 0020 	add.w	r0, sl, #32
 8026c52:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026c56:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026c5a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026c5e:	4441      	add	r1, r8
 8026c60:	0a00      	lsrs	r0, r0, #8
 8026c62:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026c66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c6a:	4301      	orrs	r1, r0
 8026c6c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026c6e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026c72:	2cff      	cmp	r4, #255	; 0xff
 8026c74:	d01a      	beq.n	8026cac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026c76:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026c7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026c7e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c82:	fb04 fa00 	mul.w	sl, r4, r0
 8026c86:	fb08 f80c 	mul.w	r8, r8, ip
 8026c8a:	f10a 0c20 	add.w	ip, sl, #32
 8026c8e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026c92:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026c96:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026c9a:	4440      	add	r0, r8
 8026c9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ca0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026ca4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026ca8:	ea40 000c 	orr.w	r0, r0, ip
 8026cac:	fb15 fc02 	smulbb	ip, r5, r2
 8026cb0:	f1c5 0810 	rsb	r8, r5, #16
 8026cb4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026cb8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026cbc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026cc0:	eba8 0802 	sub.w	r8, r8, r2
 8026cc4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026cc8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ccc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026cd0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026cd4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026cd8:	ea4a 0101 	orr.w	r1, sl, r1
 8026cdc:	437a      	muls	r2, r7
 8026cde:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026ce2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ce6:	fb09 2208 	mla	r2, r9, r8, r2
 8026cea:	ea4b 0000 	orr.w	r0, fp, r0
 8026cee:	fb05 2201 	mla	r2, r5, r1, r2
 8026cf2:	fb0c 2200 	mla	r2, ip, r0, r2
 8026cf6:	0d57      	lsrs	r7, r2, #21
 8026cf8:	0952      	lsrs	r2, r2, #5
 8026cfa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026cfe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026d02:	433a      	orrs	r2, r7
 8026d04:	2bff      	cmp	r3, #255	; 0xff
 8026d06:	b292      	uxth	r2, r2
 8026d08:	d102      	bne.n	8026d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026d0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026d0c:	29ff      	cmp	r1, #255	; 0xff
 8026d0e:	d063      	beq.n	8026dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8026d10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026d12:	1215      	asrs	r5, r2, #8
 8026d14:	f8be 1000 	ldrh.w	r1, [lr]
 8026d18:	4343      	muls	r3, r0
 8026d1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026d1c:	10cf      	asrs	r7, r1, #3
 8026d1e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026d22:	1c58      	adds	r0, r3, #1
 8026d24:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026d28:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8026d2c:	1208      	asrs	r0, r1, #8
 8026d2e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026d32:	00c9      	lsls	r1, r1, #3
 8026d34:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026d38:	b2db      	uxtb	r3, r3
 8026d3a:	b2c9      	uxtb	r1, r1
 8026d3c:	fb10 f003 	smulbb	r0, r0, r3
 8026d40:	fb11 f103 	smulbb	r1, r1, r3
 8026d44:	fb05 0504 	mla	r5, r5, r4, r0
 8026d48:	10d0      	asrs	r0, r2, #3
 8026d4a:	fb17 f703 	smulbb	r7, r7, r3
 8026d4e:	00d2      	lsls	r2, r2, #3
 8026d50:	b2ad      	uxth	r5, r5
 8026d52:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026d56:	b2d2      	uxtb	r2, r2
 8026d58:	fb00 7004 	mla	r0, r0, r4, r7
 8026d5c:	1c6b      	adds	r3, r5, #1
 8026d5e:	fb02 1204 	mla	r2, r2, r4, r1
 8026d62:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026d66:	b292      	uxth	r2, r2
 8026d68:	b280      	uxth	r0, r0
 8026d6a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026d6e:	1c57      	adds	r7, r2, #1
 8026d70:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026d74:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026d78:	433d      	orrs	r5, r7
 8026d7a:	1c47      	adds	r7, r0, #1
 8026d7c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026d80:	097f      	lsrs	r7, r7, #5
 8026d82:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026d86:	433d      	orrs	r5, r7
 8026d88:	f8ae 5000 	strh.w	r5, [lr]
 8026d8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026d8e:	f10e 0e02 	add.w	lr, lr, #2
 8026d92:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026d94:	4413      	add	r3, r2
 8026d96:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026d98:	9329      	str	r3, [sp, #164]	; 0xa4
 8026d9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d9c:	441a      	add	r2, r3
 8026d9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026da0:	3b01      	subs	r3, #1
 8026da2:	922a      	str	r2, [sp, #168]	; 0xa8
 8026da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8026da6:	e61c      	b.n	80269e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8026da8:	fb08 f000 	mul.w	r0, r8, r0
 8026dac:	fb09 0303 	mla	r3, r9, r3, r0
 8026db0:	e6dc      	b.n	8026b6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8026db2:	46b9      	mov	r9, r7
 8026db4:	e704      	b.n	8026bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 8026db6:	f1c2 0110 	rsb	r1, r2, #16
 8026dba:	437a      	muls	r2, r7
 8026dbc:	fb09 2901 	mla	r9, r9, r1, r2
 8026dc0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026dc4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026dc8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026dcc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026dd0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026dd4:	4302      	orrs	r2, r0
 8026dd6:	e795      	b.n	8026d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8026dd8:	f8ae 2000 	strh.w	r2, [lr]
 8026ddc:	e7d6      	b.n	8026d8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026dde:	b017      	add	sp, #92	; 0x5c
 8026de0:	ecbd 8b08 	vpop	{d8-d11}
 8026de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dec:	b085      	sub	sp, #20
 8026dee:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026df2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026df6:	9103      	str	r1, [sp, #12]
 8026df8:	2d00      	cmp	r5, #0
 8026dfa:	fb05 7106 	mla	r1, r5, r6, r7
 8026dfe:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8026e02:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026e06:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 8026e0a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8026e0e:	eb02 0901 	add.w	r9, r2, r1
 8026e12:	9401      	str	r4, [sp, #4]
 8026e14:	f2c0 80c0 	blt.w	8026f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026e18:	45a8      	cmp	r8, r5
 8026e1a:	f340 80bd 	ble.w	8026f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026e1e:	2f00      	cmp	r7, #0
 8026e20:	f2c0 80b6 	blt.w	8026f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026e24:	42be      	cmp	r6, r7
 8026e26:	f340 80b3 	ble.w	8026f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026e2a:	f812 c001 	ldrb.w	ip, [r2, r1]
 8026e2e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8026e32:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026e36:	d019      	beq.n	8026e6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026e38:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8026e3c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026e40:	435a      	muls	r2, r3
 8026e42:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026e46:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8026e4a:	fb0c f403 	mul.w	r4, ip, r3
 8026e4e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026e52:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026e56:	441a      	add	r2, r3
 8026e58:	f104 0320 	add.w	r3, r4, #32
 8026e5c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026e60:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026e64:	0a1b      	lsrs	r3, r3, #8
 8026e66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e6a:	4319      	orrs	r1, r3
 8026e6c:	b289      	uxth	r1, r1
 8026e6e:	1c7b      	adds	r3, r7, #1
 8026e70:	f100 8097 	bmi.w	8026fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026e74:	429e      	cmp	r6, r3
 8026e76:	f340 8094 	ble.w	8026fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026e7a:	2800      	cmp	r0, #0
 8026e7c:	f000 8094 	beq.w	8026fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8026e80:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026e84:	9b01      	ldr	r3, [sp, #4]
 8026e86:	2cff      	cmp	r4, #255	; 0xff
 8026e88:	885b      	ldrh	r3, [r3, #2]
 8026e8a:	d01b      	beq.n	8026ec4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8026e8c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8026e90:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8026e94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e98:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026e9c:	fb0a f202 	mul.w	r2, sl, r2
 8026ea0:	fb04 fa03 	mul.w	sl, r4, r3
 8026ea4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8026ea8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026eac:	441a      	add	r2, r3
 8026eae:	f10a 0320 	add.w	r3, sl, #32
 8026eb2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026eb6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8026eba:	0a1b      	lsrs	r3, r3, #8
 8026ebc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ec0:	ea4b 0303 	orr.w	r3, fp, r3
 8026ec4:	b29b      	uxth	r3, r3
 8026ec6:	3501      	adds	r5, #1
 8026ec8:	d474      	bmi.n	8026fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026eca:	45a8      	cmp	r8, r5
 8026ecc:	dd72      	ble.n	8026fb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8026ece:	f1be 0f00 	cmp.w	lr, #0
 8026ed2:	f000 8110 	beq.w	80270f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8026ed6:	2f00      	cmp	r7, #0
 8026ed8:	db69      	blt.n	8026fae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026eda:	42be      	cmp	r6, r7
 8026edc:	dd67      	ble.n	8026fae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8026ede:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026ee2:	9a01      	ldr	r2, [sp, #4]
 8026ee4:	2dff      	cmp	r5, #255	; 0xff
 8026ee6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8026eea:	d01c      	beq.n	8026f26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8026eec:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026ef0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026ef4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026ef8:	fb08 f802 	mul.w	r8, r8, r2
 8026efc:	fb05 fa0b 	mul.w	sl, r5, fp
 8026f00:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026f04:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026f08:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f0c:	4490      	add	r8, r2
 8026f0e:	f10a 0220 	add.w	r2, sl, #32
 8026f12:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026f16:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8026f1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026f22:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026f26:	fa1f fb8b 	uxth.w	fp, fp
 8026f2a:	3701      	adds	r7, #1
 8026f2c:	d447      	bmi.n	8026fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026f2e:	42be      	cmp	r6, r7
 8026f30:	dd45      	ble.n	8026fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026f32:	2800      	cmp	r0, #0
 8026f34:	d046      	beq.n	8026fc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026f36:	3601      	adds	r6, #1
 8026f38:	9a01      	ldr	r2, [sp, #4]
 8026f3a:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026f3e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026f42:	2fff      	cmp	r7, #255	; 0xff
 8026f44:	d01a      	beq.n	8026f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026f46:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8026f4a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026f4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f52:	fb08 f806 	mul.w	r8, r8, r6
 8026f56:	fb07 f902 	mul.w	r9, r7, r2
 8026f5a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026f5e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026f62:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026f66:	44b0      	add	r8, r6
 8026f68:	f109 0620 	add.w	r6, r9, #32
 8026f6c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026f70:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026f74:	0a36      	lsrs	r6, r6, #8
 8026f76:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8026f7a:	4332      	orrs	r2, r6
 8026f7c:	b292      	uxth	r2, r2
 8026f7e:	280f      	cmp	r0, #15
 8026f80:	d922      	bls.n	8026fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8026f82:	4b61      	ldr	r3, [pc, #388]	; (8027108 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8026f84:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026f88:	4a60      	ldr	r2, [pc, #384]	; (802710c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 8026f8a:	4861      	ldr	r0, [pc, #388]	; (8027110 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8026f8c:	f003 fca2 	bl	802a8d4 <__assert_func>
 8026f90:	f04f 0c00 	mov.w	ip, #0
 8026f94:	4661      	mov	r1, ip
 8026f96:	e76a      	b.n	8026e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8026f98:	2400      	movs	r4, #0
 8026f9a:	46a4      	mov	ip, r4
 8026f9c:	4623      	mov	r3, r4
 8026f9e:	4621      	mov	r1, r4
 8026fa0:	e791      	b.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026fa2:	2400      	movs	r4, #0
 8026fa4:	4623      	mov	r3, r4
 8026fa6:	e78e      	b.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026fa8:	4604      	mov	r4, r0
 8026faa:	4603      	mov	r3, r0
 8026fac:	e78b      	b.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8026fae:	2500      	movs	r5, #0
 8026fb0:	46ab      	mov	fp, r5
 8026fb2:	e7ba      	b.n	8026f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8026fb4:	2700      	movs	r7, #0
 8026fb6:	463d      	mov	r5, r7
 8026fb8:	463a      	mov	r2, r7
 8026fba:	46bb      	mov	fp, r7
 8026fbc:	e7df      	b.n	8026f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026fbe:	2700      	movs	r7, #0
 8026fc0:	463a      	mov	r2, r7
 8026fc2:	e7dc      	b.n	8026f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026fc4:	4607      	mov	r7, r0
 8026fc6:	4602      	mov	r2, r0
 8026fc8:	f1be 0f0f 	cmp.w	lr, #15
 8026fcc:	d8d9      	bhi.n	8026f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8026fce:	b286      	uxth	r6, r0
 8026fd0:	fa1f f98e 	uxth.w	r9, lr
 8026fd4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026fd8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026fdc:	fb06 f809 	mul.w	r8, r6, r9
 8026fe0:	0136      	lsls	r6, r6, #4
 8026fe2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026fe6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026fea:	9601      	str	r6, [sp, #4]
 8026fec:	ea4a 0101 	orr.w	r1, sl, r1
 8026ff0:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026ff4:	fa1f f689 	uxth.w	r6, r9
 8026ff8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ffc:	fb10 f90e 	smulbb	r9, r0, lr
 8027000:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027004:	9602      	str	r6, [sp, #8]
 8027006:	460e      	mov	r6, r1
 8027008:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802700c:	f1ce 0110 	rsb	r1, lr, #16
 8027010:	ea4a 0303 	orr.w	r3, sl, r3
 8027014:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027018:	1a09      	subs	r1, r1, r0
 802701a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802701e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027022:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027026:	4343      	muls	r3, r0
 8027028:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802702c:	ea4a 0202 	orr.w	r2, sl, r2
 8027030:	9802      	ldr	r0, [sp, #8]
 8027032:	fb01 3106 	mla	r1, r1, r6, r3
 8027036:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802703a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802703e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027042:	fb09 1302 	mla	r3, r9, r2, r1
 8027046:	9a03      	ldr	r2, [sp, #12]
 8027048:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802704c:	8811      	ldrh	r1, [r2, #0]
 802704e:	9a01      	ldr	r2, [sp, #4]
 8027050:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027054:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027058:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802705c:	1a12      	subs	r2, r2, r0
 802705e:	9801      	ldr	r0, [sp, #4]
 8027060:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027064:	eba0 0608 	sub.w	r6, r0, r8
 8027068:	b292      	uxth	r2, r2
 802706a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802706e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027072:	b2b6      	uxth	r6, r6
 8027074:	10c8      	asrs	r0, r1, #3
 8027076:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802707a:	4374      	muls	r4, r6
 802707c:	ea43 0e0e 	orr.w	lr, r3, lr
 8027080:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027084:	fb0c 4402 	mla	r4, ip, r2, r4
 8027088:	9a02      	ldr	r2, [sp, #8]
 802708a:	fa1f f38e 	uxth.w	r3, lr
 802708e:	fb02 4505 	mla	r5, r2, r5, r4
 8027092:	120a      	asrs	r2, r1, #8
 8027094:	00c9      	lsls	r1, r1, #3
 8027096:	fb08 5707 	mla	r7, r8, r7, r5
 802709a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802709e:	b2c9      	uxtb	r1, r1
 80270a0:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80270a4:	b2ff      	uxtb	r7, r7
 80270a6:	437a      	muls	r2, r7
 80270a8:	4378      	muls	r0, r7
 80270aa:	434f      	muls	r7, r1
 80270ac:	1c51      	adds	r1, r2, #1
 80270ae:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80270b2:	121a      	asrs	r2, r3, #8
 80270b4:	f022 0207 	bic.w	r2, r2, #7
 80270b8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80270bc:	1c41      	adds	r1, r0, #1
 80270be:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80270c2:	10d9      	asrs	r1, r3, #3
 80270c4:	0212      	lsls	r2, r2, #8
 80270c6:	f021 0103 	bic.w	r1, r1, #3
 80270ca:	00db      	lsls	r3, r3, #3
 80270cc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80270d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80270d4:	00c9      	lsls	r1, r1, #3
 80270d6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80270da:	430a      	orrs	r2, r1
 80270dc:	1c79      	adds	r1, r7, #1
 80270de:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80270e2:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80270e6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80270ea:	4313      	orrs	r3, r2
 80270ec:	9a03      	ldr	r2, [sp, #12]
 80270ee:	8013      	strh	r3, [r2, #0]
 80270f0:	b005      	add	sp, #20
 80270f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80270f6:	280f      	cmp	r0, #15
 80270f8:	f63f af43 	bhi.w	8026f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80270fc:	4677      	mov	r7, lr
 80270fe:	4675      	mov	r5, lr
 8027100:	4672      	mov	r2, lr
 8027102:	46f3      	mov	fp, lr
 8027104:	e763      	b.n	8026fce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8027106:	bf00      	nop
 8027108:	0802fb1d 	.word	0x0802fb1d
 802710c:	080300ea 	.word	0x080300ea
 8027110:	0802fba1 	.word	0x0802fba1

08027114 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027118:	ed2d 8b08 	vpush	{d8-d11}
 802711c:	b093      	sub	sp, #76	; 0x4c
 802711e:	eeb0 aa40 	vmov.f32	s20, s0
 8027122:	eef0 9a60 	vmov.f32	s19, s1
 8027126:	9210      	str	r2, [sp, #64]	; 0x40
 8027128:	eeb0 9a41 	vmov.f32	s18, s2
 802712c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802712e:	eeb0 8a62 	vmov.f32	s16, s5
 8027132:	9011      	str	r0, [sp, #68]	; 0x44
 8027134:	eef0 8a43 	vmov.f32	s17, s6
 8027138:	6850      	ldr	r0, [r2, #4]
 802713a:	eef0 ba44 	vmov.f32	s23, s8
 802713e:	910e      	str	r1, [sp, #56]	; 0x38
 8027140:	eeb0 ba64 	vmov.f32	s22, s9
 8027144:	9306      	str	r3, [sp, #24]
 8027146:	eef0 aa45 	vmov.f32	s21, s10
 802714a:	6812      	ldr	r2, [r2, #0]
 802714c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027150:	fb00 1303 	mla	r3, r0, r3, r1
 8027154:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027158:	9307      	str	r3, [sp, #28]
 802715a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802715c:	681b      	ldr	r3, [r3, #0]
 802715e:	9308      	str	r3, [sp, #32]
 8027160:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027162:	685b      	ldr	r3, [r3, #4]
 8027164:	9309      	str	r3, [sp, #36]	; 0x24
 8027166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027168:	2b00      	cmp	r3, #0
 802716a:	dc03      	bgt.n	8027174 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802716c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802716e:	2b00      	cmp	r3, #0
 8027170:	f340 83b6 	ble.w	80278e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027174:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027176:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802717a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802717e:	1e48      	subs	r0, r1, #1
 8027180:	1e55      	subs	r5, r2, #1
 8027182:	9b06      	ldr	r3, [sp, #24]
 8027184:	2b00      	cmp	r3, #0
 8027186:	f340 8165 	ble.w	8027454 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802718a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 802718c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802718e:	1436      	asrs	r6, r6, #16
 8027190:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027194:	d406      	bmi.n	80271a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027196:	4286      	cmp	r6, r0
 8027198:	da04      	bge.n	80271a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802719a:	2b00      	cmp	r3, #0
 802719c:	db02      	blt.n	80271a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802719e:	42ab      	cmp	r3, r5
 80271a0:	f2c0 8159 	blt.w	8027456 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80271a4:	3601      	adds	r6, #1
 80271a6:	f100 8146 	bmi.w	8027436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80271aa:	42b1      	cmp	r1, r6
 80271ac:	f2c0 8143 	blt.w	8027436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80271b0:	3301      	adds	r3, #1
 80271b2:	f100 8140 	bmi.w	8027436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80271b6:	429a      	cmp	r2, r3
 80271b8:	f2c0 813d 	blt.w	8027436 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80271bc:	9b06      	ldr	r3, [sp, #24]
 80271be:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80271c2:	9f07      	ldr	r7, [sp, #28]
 80271c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80271c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80271c8:	2b00      	cmp	r3, #0
 80271ca:	f340 8166 	ble.w	802749a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80271ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271d0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80271d2:	1418      	asrs	r0, r3, #16
 80271d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80271d6:	142d      	asrs	r5, r5, #16
 80271d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80271dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80271de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80271e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80271e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80271e8:	f100 81f0 	bmi.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80271ec:	f102 3eff 	add.w	lr, r2, #4294967295
 80271f0:	4575      	cmp	r5, lr
 80271f2:	f280 81eb 	bge.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80271f6:	2800      	cmp	r0, #0
 80271f8:	f2c0 81e8 	blt.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80271fc:	f103 3eff 	add.w	lr, r3, #4294967295
 8027200:	4570      	cmp	r0, lr
 8027202:	f280 81e3 	bge.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027206:	b212      	sxth	r2, r2
 8027208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802720a:	fa1f fe81 	uxth.w	lr, r1
 802720e:	fb00 5002 	mla	r0, r0, r2, r5
 8027212:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027216:	eb03 0a00 	add.w	sl, r3, r0
 802721a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802721e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027222:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027226:	b29b      	uxth	r3, r3
 8027228:	f1bc 0f00 	cmp.w	ip, #0
 802722c:	f000 817b 	beq.w	8027526 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027230:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027234:	eb0a 0b02 	add.w	fp, sl, r2
 8027238:	fa1f fa8c 	uxth.w	sl, ip
 802723c:	940a      	str	r4, [sp, #40]	; 0x28
 802723e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027242:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027246:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802724a:	eba5 050e 	sub.w	r5, r5, lr
 802724e:	940b      	str	r4, [sp, #44]	; 0x2c
 8027250:	fa1f fa8a 	uxth.w	sl, sl
 8027254:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027256:	b2ad      	uxth	r5, r5
 8027258:	eba3 030a 	sub.w	r3, r3, sl
 802725c:	fb08 f505 	mul.w	r5, r8, r5
 8027260:	b29b      	uxth	r3, r3
 8027262:	fb09 5303 	mla	r3, r9, r3, r5
 8027266:	fb0a 3304 	mla	r3, sl, r4, r3
 802726a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802726c:	fb0e 3304 	mla	r3, lr, r4, r3
 8027270:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027274:	2b00      	cmp	r3, #0
 8027276:	f000 80d1 	beq.w	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802727a:	9c08      	ldr	r4, [sp, #32]
 802727c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027280:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027284:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027288:	f000 8152 	beq.w	8027530 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802728c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027290:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027294:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027298:	fb0a fe0e 	mul.w	lr, sl, lr
 802729c:	fb09 f000 	mul.w	r0, r9, r0
 80272a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80272a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80272a8:	f100 0b20 	add.w	fp, r0, #32
 80272ac:	44ce      	add	lr, r9
 80272ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80272b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80272b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80272ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80272be:	ea4e 0909 	orr.w	r9, lr, r9
 80272c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80272c6:	8868      	ldrh	r0, [r5, #2]
 80272c8:	d019      	beq.n	80272fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80272ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80272ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80272d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80272da:	fb08 f800 	mul.w	r8, r8, r0
 80272de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80272e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80272e6:	f108 0b20 	add.w	fp, r8, #32
 80272ea:	4486      	add	lr, r0
 80272ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80272f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80272f4:	0a00      	lsrs	r0, r0, #8
 80272f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272fa:	ea4e 0000 	orr.w	r0, lr, r0
 80272fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027302:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027306:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802730a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802730e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027312:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027316:	ea4e 0909 	orr.w	r9, lr, r9
 802731a:	ea4a 0000 	orr.w	r0, sl, r0
 802731e:	f1bc 0f00 	cmp.w	ip, #0
 8027322:	f000 8107 	beq.w	8027534 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8027326:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802732a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802732c:	3a01      	subs	r2, #1
 802732e:	2cff      	cmp	r4, #255	; 0xff
 8027330:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027334:	f102 0202 	add.w	r2, r2, #2
 8027338:	eb05 0e02 	add.w	lr, r5, r2
 802733c:	5aaa      	ldrh	r2, [r5, r2]
 802733e:	d018      	beq.n	8027372 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8027340:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027344:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027348:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802734c:	fb04 fa02 	mul.w	sl, r4, r2
 8027350:	fb08 f805 	mul.w	r8, r8, r5
 8027354:	f10a 0520 	add.w	r5, sl, #32
 8027358:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802735c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027360:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027364:	4442      	add	r2, r8
 8027366:	0a2d      	lsrs	r5, r5, #8
 8027368:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802736c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027370:	432a      	orrs	r2, r5
 8027372:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027374:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027378:	2cff      	cmp	r4, #255	; 0xff
 802737a:	d01a      	beq.n	80273b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802737c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027380:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027384:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027388:	fb04 fa05 	mul.w	sl, r4, r5
 802738c:	fb08 f80e 	mul.w	r8, r8, lr
 8027390:	f10a 0e20 	add.w	lr, sl, #32
 8027394:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027398:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802739c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80273a0:	4445      	add	r5, r8
 80273a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80273a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80273aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80273ae:	ea45 050e 	orr.w	r5, r5, lr
 80273b2:	fb1c fe01 	smulbb	lr, ip, r1
 80273b6:	f1cc 0810 	rsb	r8, ip, #16
 80273ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80273be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80273c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80273c6:	eba8 0801 	sub.w	r8, r8, r1
 80273ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80273ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80273d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80273d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80273da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80273de:	ea4a 0202 	orr.w	r2, sl, r2
 80273e2:	4341      	muls	r1, r0
 80273e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80273e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273ec:	fb09 1108 	mla	r1, r9, r8, r1
 80273f0:	ea4b 0505 	orr.w	r5, fp, r5
 80273f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80273f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80273fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027400:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027404:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027408:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802740c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027410:	fa1f f28e 	uxth.w	r2, lr
 8027414:	2bff      	cmp	r3, #255	; 0xff
 8027416:	f040 80a1 	bne.w	802755c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802741a:	803a      	strh	r2, [r7, #0]
 802741c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802741e:	3702      	adds	r7, #2
 8027420:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027422:	4413      	add	r3, r2
 8027424:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8027426:	9325      	str	r3, [sp, #148]	; 0x94
 8027428:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802742a:	441a      	add	r2, r3
 802742c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802742e:	3b01      	subs	r3, #1
 8027430:	9226      	str	r2, [sp, #152]	; 0x98
 8027432:	930f      	str	r3, [sp, #60]	; 0x3c
 8027434:	e6c7      	b.n	80271c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027436:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027438:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802743a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802743c:	4433      	add	r3, r6
 802743e:	9325      	str	r3, [sp, #148]	; 0x94
 8027440:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027442:	441c      	add	r4, r3
 8027444:	9b06      	ldr	r3, [sp, #24]
 8027446:	3b01      	subs	r3, #1
 8027448:	9426      	str	r4, [sp, #152]	; 0x98
 802744a:	9306      	str	r3, [sp, #24]
 802744c:	9b07      	ldr	r3, [sp, #28]
 802744e:	3302      	adds	r3, #2
 8027450:	9307      	str	r3, [sp, #28]
 8027452:	e696      	b.n	8027182 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027454:	d028      	beq.n	80274a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027456:	9b06      	ldr	r3, [sp, #24]
 8027458:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802745a:	3b01      	subs	r3, #1
 802745c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802745e:	fb00 5003 	mla	r0, r0, r3, r5
 8027462:	1400      	asrs	r0, r0, #16
 8027464:	f53f aeaa 	bmi.w	80271bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027468:	3901      	subs	r1, #1
 802746a:	4288      	cmp	r0, r1
 802746c:	f6bf aea6 	bge.w	80271bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027470:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027472:	9826      	ldr	r0, [sp, #152]	; 0x98
 8027474:	fb01 0303 	mla	r3, r1, r3, r0
 8027478:	141b      	asrs	r3, r3, #16
 802747a:	f53f ae9f 	bmi.w	80271bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802747e:	3a01      	subs	r2, #1
 8027480:	4293      	cmp	r3, r2
 8027482:	f6bf ae9b 	bge.w	80271bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027486:	9b06      	ldr	r3, [sp, #24]
 8027488:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802748c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027490:	930f      	str	r3, [sp, #60]	; 0x3c
 8027492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027494:	2b00      	cmp	r3, #0
 8027496:	f300 80b6 	bgt.w	8027606 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802749a:	9b06      	ldr	r3, [sp, #24]
 802749c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80274a0:	9b07      	ldr	r3, [sp, #28]
 80274a2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80274a6:	9307      	str	r3, [sp, #28]
 80274a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80274aa:	2b00      	cmp	r3, #0
 80274ac:	f340 8218 	ble.w	80278e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80274b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80274b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80274ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80274be:	eef0 6a48 	vmov.f32	s13, s16
 80274c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80274c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80274ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274ce:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80274d2:	eef0 6a68 	vmov.f32	s13, s17
 80274d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80274da:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80274de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80274e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80274e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80274ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80274ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80274f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80274f6:	ee18 2a10 	vmov	r2, s16
 80274fa:	eeb0 8a47 	vmov.f32	s16, s14
 80274fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027502:	ee18 2a90 	vmov	r2, s17
 8027506:	9327      	str	r3, [sp, #156]	; 0x9c
 8027508:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802750a:	eef0 8a67 	vmov.f32	s17, s15
 802750e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027512:	9328      	str	r3, [sp, #160]	; 0xa0
 8027514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027516:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027518:	3b01      	subs	r3, #1
 802751a:	930e      	str	r3, [sp, #56]	; 0x38
 802751c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802751e:	bf08      	it	eq
 8027520:	4613      	moveq	r3, r2
 8027522:	9306      	str	r3, [sp, #24]
 8027524:	e61f      	b.n	8027166 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027526:	fb08 f505 	mul.w	r5, r8, r5
 802752a:	fb09 5303 	mla	r3, r9, r3, r5
 802752e:	e69f      	b.n	8027270 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8027530:	4681      	mov	r9, r0
 8027532:	e6c6      	b.n	80272c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027534:	f1c1 0210 	rsb	r2, r1, #16
 8027538:	4341      	muls	r1, r0
 802753a:	fb09 1902 	mla	r9, r9, r2, r1
 802753e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027542:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027546:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802754a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802754e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027552:	ea42 0909 	orr.w	r9, r2, r9
 8027556:	fa1f f289 	uxth.w	r2, r9
 802755a:	e75b      	b.n	8027414 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802755c:	f8b7 c000 	ldrh.w	ip, [r7]
 8027560:	43db      	mvns	r3, r3
 8027562:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027566:	fa5f fe83 	uxtb.w	lr, r3
 802756a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802756e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027572:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027576:	fb00 f00e 	mul.w	r0, r0, lr
 802757a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802757e:	b2db      	uxtb	r3, r3
 8027580:	1c41      	adds	r1, r0, #1
 8027582:	fb05 f50e 	mul.w	r5, r5, lr
 8027586:	fb03 f30e 	mul.w	r3, r3, lr
 802758a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802758e:	1211      	asrs	r1, r2, #8
 8027590:	f021 0107 	bic.w	r1, r1, #7
 8027594:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027598:	48d4      	ldr	r0, [pc, #848]	; (80278ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802759a:	b2c9      	uxtb	r1, r1
 802759c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80275a0:	1c69      	adds	r1, r5, #1
 80275a2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80275a6:	10d1      	asrs	r1, r2, #3
 80275a8:	00d2      	lsls	r2, r2, #3
 80275aa:	f021 0103 	bic.w	r1, r1, #3
 80275ae:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80275b2:	00c9      	lsls	r1, r1, #3
 80275b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80275b8:	4301      	orrs	r1, r0
 80275ba:	1c58      	adds	r0, r3, #1
 80275bc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80275c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80275c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80275c8:	430a      	orrs	r2, r1
 80275ca:	e726      	b.n	802741a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80275cc:	f115 0e01 	adds.w	lr, r5, #1
 80275d0:	f53f af24 	bmi.w	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80275d4:	4572      	cmp	r2, lr
 80275d6:	f6ff af21 	blt.w	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80275da:	f110 0e01 	adds.w	lr, r0, #1
 80275de:	f53f af1d 	bmi.w	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80275e2:	4573      	cmp	r3, lr
 80275e4:	f6ff af1a 	blt.w	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80275e8:	b21b      	sxth	r3, r3
 80275ea:	b212      	sxth	r2, r2
 80275ec:	9301      	str	r3, [sp, #4]
 80275ee:	9200      	str	r2, [sp, #0]
 80275f0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80275f4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80275f8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80275fc:	4639      	mov	r1, r7
 80275fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027600:	f7ff fbf2 	bl	8026de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027604:	e70a      	b.n	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027606:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027608:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802760c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802760e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027612:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027614:	fa1f fc82 	uxth.w	ip, r2
 8027618:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802761c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802761e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027622:	141f      	asrs	r7, r3, #16
 8027624:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027626:	141b      	asrs	r3, r3, #16
 8027628:	fb01 3707 	mla	r7, r1, r7, r3
 802762c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802762e:	eb03 0a07 	add.w	sl, r3, r7
 8027632:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027636:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802763a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802763e:	b29b      	uxth	r3, r3
 8027640:	2d00      	cmp	r5, #0
 8027642:	f000 80fe 	beq.w	8027842 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027646:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802764a:	eb0a 0b01 	add.w	fp, sl, r1
 802764e:	fa1f fa85 	uxth.w	sl, r5
 8027652:	940c      	str	r4, [sp, #48]	; 0x30
 8027654:	fb0a fc0c 	mul.w	ip, sl, ip
 8027658:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802765c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027660:	eba0 000c 	sub.w	r0, r0, ip
 8027664:	940d      	str	r4, [sp, #52]	; 0x34
 8027666:	fa1f fa8a 	uxth.w	sl, sl
 802766a:	b280      	uxth	r0, r0
 802766c:	eba3 030a 	sub.w	r3, r3, sl
 8027670:	fb08 f000 	mul.w	r0, r8, r0
 8027674:	b29b      	uxth	r3, r3
 8027676:	fb09 0303 	mla	r3, r9, r3, r0
 802767a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802767c:	fb0a 3300 	mla	r3, sl, r0, r3
 8027680:	fb0c 3304 	mla	r3, ip, r4, r3
 8027684:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027688:	2b00      	cmp	r3, #0
 802768a:	f000 80cc 	beq.w	8027826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 802768e:	9808      	ldr	r0, [sp, #32]
 8027690:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027694:	9c08      	ldr	r4, [sp, #32]
 8027696:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802769a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802769e:	f000 80d5 	beq.w	802784c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 80276a2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80276a6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80276aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80276ae:	fb0a fc0c 	mul.w	ip, sl, ip
 80276b2:	fb09 f707 	mul.w	r7, r9, r7
 80276b6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80276ba:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80276be:	f107 0b20 	add.w	fp, r7, #32
 80276c2:	44cc      	add	ip, r9
 80276c4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80276c8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80276cc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80276d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80276d4:	ea4c 0909 	orr.w	r9, ip, r9
 80276d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80276dc:	8847      	ldrh	r7, [r0, #2]
 80276de:	d019      	beq.n	8027714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80276e0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80276e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80276e8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80276ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80276f0:	fb08 f807 	mul.w	r8, r8, r7
 80276f4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80276f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80276fc:	f108 0b20 	add.w	fp, r8, #32
 8027700:	44bc      	add	ip, r7
 8027702:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027706:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802770a:	0a3f      	lsrs	r7, r7, #8
 802770c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027710:	ea4c 0707 	orr.w	r7, ip, r7
 8027714:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027718:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802771c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027720:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027724:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027728:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802772c:	ea4c 0909 	orr.w	r9, ip, r9
 8027730:	ea4a 0707 	orr.w	r7, sl, r7
 8027734:	2d00      	cmp	r5, #0
 8027736:	f000 808b 	beq.w	8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802773a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802773e:	3901      	subs	r1, #1
 8027740:	0049      	lsls	r1, r1, #1
 8027742:	3102      	adds	r1, #2
 8027744:	eb00 0c01 	add.w	ip, r0, r1
 8027748:	5a41      	ldrh	r1, [r0, r1]
 802774a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802774c:	28ff      	cmp	r0, #255	; 0xff
 802774e:	d019      	beq.n	8027784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8027750:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027754:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027756:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802775a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802775e:	fb04 fa01 	mul.w	sl, r4, r1
 8027762:	fb08 f800 	mul.w	r8, r8, r0
 8027766:	f10a 0020 	add.w	r0, sl, #32
 802776a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802776e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027772:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027776:	4441      	add	r1, r8
 8027778:	0a00      	lsrs	r0, r0, #8
 802777a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802777e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027782:	4301      	orrs	r1, r0
 8027784:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027786:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802778a:	2cff      	cmp	r4, #255	; 0xff
 802778c:	d01a      	beq.n	80277c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802778e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027792:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027796:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802779a:	fb04 fa00 	mul.w	sl, r4, r0
 802779e:	fb08 f80c 	mul.w	r8, r8, ip
 80277a2:	f10a 0c20 	add.w	ip, sl, #32
 80277a6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80277aa:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80277ae:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80277b2:	4440      	add	r0, r8
 80277b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80277b8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80277bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80277c0:	ea40 000c 	orr.w	r0, r0, ip
 80277c4:	fb15 fc02 	smulbb	ip, r5, r2
 80277c8:	f1c5 0810 	rsb	r8, r5, #16
 80277cc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80277d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80277d4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80277d8:	eba8 0802 	sub.w	r8, r8, r2
 80277dc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80277e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80277e4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80277e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80277ec:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80277f0:	ea4a 0101 	orr.w	r1, sl, r1
 80277f4:	437a      	muls	r2, r7
 80277f6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80277fa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80277fe:	fb09 2208 	mla	r2, r9, r8, r2
 8027802:	ea4b 0000 	orr.w	r0, fp, r0
 8027806:	fb05 2201 	mla	r2, r5, r1, r2
 802780a:	fb0c 2200 	mla	r2, ip, r0, r2
 802780e:	0d57      	lsrs	r7, r2, #21
 8027810:	0952      	lsrs	r2, r2, #5
 8027812:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027816:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802781a:	433a      	orrs	r2, r7
 802781c:	2bff      	cmp	r3, #255	; 0xff
 802781e:	b292      	uxth	r2, r2
 8027820:	d127      	bne.n	8027872 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8027822:	f8ae 2000 	strh.w	r2, [lr]
 8027826:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027828:	f10e 0e02 	add.w	lr, lr, #2
 802782c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802782e:	4413      	add	r3, r2
 8027830:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8027832:	9325      	str	r3, [sp, #148]	; 0x94
 8027834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027836:	441a      	add	r2, r3
 8027838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802783a:	3b01      	subs	r3, #1
 802783c:	9226      	str	r2, [sp, #152]	; 0x98
 802783e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027840:	e627      	b.n	8027492 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027842:	fb08 f000 	mul.w	r0, r8, r0
 8027846:	fb09 0303 	mla	r3, r9, r3, r0
 802784a:	e71b      	b.n	8027684 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 802784c:	46b9      	mov	r9, r7
 802784e:	e743      	b.n	80276d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8027850:	f1c2 0110 	rsb	r1, r2, #16
 8027854:	437a      	muls	r2, r7
 8027856:	fb09 2901 	mla	r9, r9, r1, r2
 802785a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802785e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027862:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027866:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802786a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802786e:	4302      	orrs	r2, r0
 8027870:	e7d4      	b.n	802781c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8027872:	f8be 7000 	ldrh.w	r7, [lr]
 8027876:	43db      	mvns	r3, r3
 8027878:	4c1c      	ldr	r4, [pc, #112]	; (80278ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 802787a:	1238      	asrs	r0, r7, #8
 802787c:	fa5f fc83 	uxtb.w	ip, r3
 8027880:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027884:	10fd      	asrs	r5, r7, #3
 8027886:	00fb      	lsls	r3, r7, #3
 8027888:	fb00 f00c 	mul.w	r0, r0, ip
 802788c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027890:	b2db      	uxtb	r3, r3
 8027892:	fb05 f10c 	mul.w	r1, r5, ip
 8027896:	1c45      	adds	r5, r0, #1
 8027898:	fb03 f30c 	mul.w	r3, r3, ip
 802789c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80278a0:	1215      	asrs	r5, r2, #8
 80278a2:	f025 0507 	bic.w	r5, r5, #7
 80278a6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80278aa:	1c4d      	adds	r5, r1, #1
 80278ac:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80278b0:	10d1      	asrs	r1, r2, #3
 80278b2:	b2c0      	uxtb	r0, r0
 80278b4:	f021 0103 	bic.w	r1, r1, #3
 80278b8:	00d2      	lsls	r2, r2, #3
 80278ba:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 80278be:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80278c2:	00c9      	lsls	r1, r1, #3
 80278c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80278c8:	4308      	orrs	r0, r1
 80278ca:	1c59      	adds	r1, r3, #1
 80278cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80278d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80278d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80278d8:	4318      	orrs	r0, r3
 80278da:	f8ae 0000 	strh.w	r0, [lr]
 80278de:	e7a2      	b.n	8027826 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80278e0:	b013      	add	sp, #76	; 0x4c
 80278e2:	ecbd 8b08 	vpop	{d8-d11}
 80278e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80278ea:	bf00      	nop
 80278ec:	fffff800 	.word	0xfffff800

080278f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80278f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278f4:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80278f8:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80278fc:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027900:	f1bc 0f00 	cmp.w	ip, #0
 8027904:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8027908:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802790c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027910:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8027914:	8808      	ldrh	r0, [r1, #0]
 8027916:	db2f      	blt.n	8027978 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027918:	45e2      	cmp	sl, ip
 802791a:	dd2d      	ble.n	8027978 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802791c:	2c00      	cmp	r4, #0
 802791e:	db29      	blt.n	8027974 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027920:	42a3      	cmp	r3, r4
 8027922:	dd27      	ble.n	8027974 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027924:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027928:	1c62      	adds	r2, r4, #1
 802792a:	d428      	bmi.n	802797e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802792c:	4293      	cmp	r3, r2
 802792e:	dd26      	ble.n	802797e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027930:	b32f      	cbz	r7, 802797e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027932:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027936:	f11c 0c01 	adds.w	ip, ip, #1
 802793a:	d424      	bmi.n	8027986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802793c:	45e2      	cmp	sl, ip
 802793e:	dd22      	ble.n	8027986 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027940:	2e00      	cmp	r6, #0
 8027942:	f000 809d 	beq.w	8027a80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027946:	2c00      	cmp	r4, #0
 8027948:	db1b      	blt.n	8027982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802794a:	42a3      	cmp	r3, r4
 802794c:	dd19      	ble.n	8027982 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802794e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027952:	3401      	adds	r4, #1
 8027954:	d41a      	bmi.n	802798c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027956:	42a3      	cmp	r3, r4
 8027958:	dd18      	ble.n	802798c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802795a:	b1cf      	cbz	r7, 8027990 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802795c:	3301      	adds	r3, #1
 802795e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027962:	2f0f      	cmp	r7, #15
 8027964:	d915      	bls.n	8027992 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027966:	4b49      	ldr	r3, [pc, #292]	; (8027a8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027968:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802796c:	4a48      	ldr	r2, [pc, #288]	; (8027a90 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802796e:	4849      	ldr	r0, [pc, #292]	; (8027a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027970:	f002 ffb0 	bl	802a8d4 <__assert_func>
 8027974:	4681      	mov	r9, r0
 8027976:	e7d7      	b.n	8027928 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8027978:	4686      	mov	lr, r0
 802797a:	4681      	mov	r9, r0
 802797c:	e7db      	b.n	8027936 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802797e:	4686      	mov	lr, r0
 8027980:	e7d9      	b.n	8027936 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027982:	4684      	mov	ip, r0
 8027984:	e7e5      	b.n	8027952 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8027986:	4603      	mov	r3, r0
 8027988:	4684      	mov	ip, r0
 802798a:	e7ea      	b.n	8027962 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802798c:	4603      	mov	r3, r0
 802798e:	e7e8      	b.n	8027962 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027990:	4603      	mov	r3, r0
 8027992:	2e0f      	cmp	r6, #15
 8027994:	d8e7      	bhi.n	8027966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027996:	fb17 f806 	smulbb	r8, r7, r6
 802799a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 802799e:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80279a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80279a6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80279aa:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80279ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80279b2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80279b6:	ea44 0909 	orr.w	r9, r4, r9
 80279ba:	f1c6 0410 	rsb	r4, r6, #16
 80279be:	041a      	lsls	r2, r3, #16
 80279c0:	ea4a 0e0e 	orr.w	lr, sl, lr
 80279c4:	1be4      	subs	r4, r4, r7
 80279c6:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80279ca:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80279ce:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80279d2:	fb07 fe0e 	mul.w	lr, r7, lr
 80279d6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80279da:	4313      	orrs	r3, r2
 80279dc:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80279e0:	fb04 e409 	mla	r4, r4, r9, lr
 80279e4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80279e8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80279ec:	b2af      	uxth	r7, r5
 80279ee:	fb08 4303 	mla	r3, r8, r3, r4
 80279f2:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 80279f6:	43ed      	mvns	r5, r5
 80279f8:	4322      	orrs	r2, r4
 80279fa:	b2ed      	uxtb	r5, r5
 80279fc:	fb06 3202 	mla	r2, r6, r2, r3
 8027a00:	10c6      	asrs	r6, r0, #3
 8027a02:	0d53      	lsrs	r3, r2, #21
 8027a04:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027a08:	0952      	lsrs	r2, r2, #5
 8027a0a:	fb16 f605 	smulbb	r6, r6, r5
 8027a0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027a12:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027a16:	431a      	orrs	r2, r3
 8027a18:	b293      	uxth	r3, r2
 8027a1a:	1202      	asrs	r2, r0, #8
 8027a1c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027a20:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027a24:	00dc      	lsls	r4, r3, #3
 8027a26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027a2a:	fb12 f205 	smulbb	r2, r2, r5
 8027a2e:	b2e4      	uxtb	r4, r4
 8027a30:	fb0c 2c07 	mla	ip, ip, r7, r2
 8027a34:	10da      	asrs	r2, r3, #3
 8027a36:	00c3      	lsls	r3, r0, #3
 8027a38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027a3c:	fa1f fc8c 	uxth.w	ip, ip
 8027a40:	b2db      	uxtb	r3, r3
 8027a42:	fb02 6207 	mla	r2, r2, r7, r6
 8027a46:	fb13 f305 	smulbb	r3, r3, r5
 8027a4a:	b296      	uxth	r6, r2
 8027a4c:	fb04 3307 	mla	r3, r4, r7, r3
 8027a50:	b29a      	uxth	r2, r3
 8027a52:	f10c 0301 	add.w	r3, ip, #1
 8027a56:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027a5a:	1c53      	adds	r3, r2, #1
 8027a5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027a60:	1c72      	adds	r2, r6, #1
 8027a62:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8027a66:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8027a6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a6e:	0952      	lsrs	r2, r2, #5
 8027a70:	ea43 030c 	orr.w	r3, r3, ip
 8027a74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a78:	4313      	orrs	r3, r2
 8027a7a:	800b      	strh	r3, [r1, #0]
 8027a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a80:	2f0f      	cmp	r7, #15
 8027a82:	f63f af70 	bhi.w	8027966 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027a86:	4603      	mov	r3, r0
 8027a88:	4684      	mov	ip, r0
 8027a8a:	e784      	b.n	8027996 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8027a8c:	0802fb1d 	.word	0x0802fb1d
 8027a90:	08030193 	.word	0x08030193
 8027a94:	0802fba1 	.word	0x0802fba1

08027a98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a9c:	ed2d 8b08 	vpush	{d8-d11}
 8027aa0:	b093      	sub	sp, #76	; 0x4c
 8027aa2:	461d      	mov	r5, r3
 8027aa4:	eeb0 aa40 	vmov.f32	s20, s0
 8027aa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027aaa:	eef0 9a60 	vmov.f32	s19, s1
 8027aae:	9210      	str	r2, [sp, #64]	; 0x40
 8027ab0:	eeb0 9a41 	vmov.f32	s18, s2
 8027ab4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8027ab8:	eeb0 8a62 	vmov.f32	s16, s5
 8027abc:	910a      	str	r1, [sp, #40]	; 0x28
 8027abe:	eef0 8a43 	vmov.f32	s17, s6
 8027ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8027ac4:	eef0 ba44 	vmov.f32	s23, s8
 8027ac8:	6859      	ldr	r1, [r3, #4]
 8027aca:	eeb0 ba64 	vmov.f32	s22, s9
 8027ace:	681b      	ldr	r3, [r3, #0]
 8027ad0:	eef0 aa45 	vmov.f32	s21, s10
 8027ad4:	9011      	str	r0, [sp, #68]	; 0x44
 8027ad6:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 8027ada:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027ade:	fb01 2707 	mla	r7, r1, r7, r2
 8027ae2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027ae6:	9307      	str	r3, [sp, #28]
 8027ae8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027aea:	681b      	ldr	r3, [r3, #0]
 8027aec:	9309      	str	r3, [sp, #36]	; 0x24
 8027aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027af0:	43db      	mvns	r3, r3
 8027af2:	b2db      	uxtb	r3, r3
 8027af4:	9308      	str	r3, [sp, #32]
 8027af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027af8:	2b00      	cmp	r3, #0
 8027afa:	dc03      	bgt.n	8027b04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027afe:	2b00      	cmp	r3, #0
 8027b00:	f340 8205 	ble.w	8027f0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027b04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027b06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027b0e:	1e48      	subs	r0, r1, #1
 8027b10:	f102 3cff 	add.w	ip, r2, #4294967295
 8027b14:	2d00      	cmp	r5, #0
 8027b16:	f340 80da 	ble.w	8027cce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027b1a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027b1e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027b22:	d406      	bmi.n	8027b32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b24:	4586      	cmp	lr, r0
 8027b26:	da04      	bge.n	8027b32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	db02      	blt.n	8027b32 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027b2c:	4563      	cmp	r3, ip
 8027b2e:	f2c0 80cf 	blt.w	8027cd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027b32:	f11e 0e01 	adds.w	lr, lr, #1
 8027b36:	f100 80c1 	bmi.w	8027cbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027b3a:	4571      	cmp	r1, lr
 8027b3c:	f2c0 80be 	blt.w	8027cbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027b40:	3301      	adds	r3, #1
 8027b42:	f100 80bb 	bmi.w	8027cbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027b46:	429a      	cmp	r2, r3
 8027b48:	f2c0 80b8 	blt.w	8027cbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027b4c:	46a9      	mov	r9, r5
 8027b4e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027b52:	f1b9 0f00 	cmp.w	r9, #0
 8027b56:	f340 80d8 	ble.w	8027d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8027b5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027b5c:	1421      	asrs	r1, r4, #16
 8027b5e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027b62:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027b66:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027b6a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027b6e:	f100 8112 	bmi.w	8027d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027b72:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027b76:	4551      	cmp	r1, sl
 8027b78:	f280 810d 	bge.w	8027d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027b7c:	2800      	cmp	r0, #0
 8027b7e:	f2c0 810a 	blt.w	8027d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027b82:	f103 3aff 	add.w	sl, r3, #4294967295
 8027b86:	4550      	cmp	r0, sl
 8027b88:	f280 8105 	bge.w	8027d96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027b8c:	fa0f f38e 	sxth.w	r3, lr
 8027b90:	fb00 1103 	mla	r1, r0, r3, r1
 8027b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027b96:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8027b9a:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8027b9e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8027ba2:	f1bc 0f00 	cmp.w	ip, #0
 8027ba6:	d007      	beq.n	8027bb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027ba8:	005b      	lsls	r3, r3, #1
 8027baa:	eb0a 0003 	add.w	r0, sl, r3
 8027bae:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8027bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8027bb4:	8843      	ldrh	r3, [r0, #2]
 8027bb6:	930d      	str	r3, [sp, #52]	; 0x34
 8027bb8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8027bbc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027bc0:	fb12 f30c 	smulbb	r3, r2, ip
 8027bc4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027bc8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027bcc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027bd0:	10db      	asrs	r3, r3, #3
 8027bd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027bd6:	ea40 000e 	orr.w	r0, r0, lr
 8027bda:	f1cc 0e10 	rsb	lr, ip, #16
 8027bde:	ea4a 0101 	orr.w	r1, sl, r1
 8027be2:	9f08      	ldr	r7, [sp, #32]
 8027be4:	ebae 0e02 	sub.w	lr, lr, r2
 8027be8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027bec:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027bf0:	4351      	muls	r1, r2
 8027bf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027bf4:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027bfa:	0410      	lsls	r0, r2, #16
 8027bfc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027c00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027c04:	4310      	orrs	r0, r2
 8027c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027c08:	0412      	lsls	r2, r2, #16
 8027c0a:	fb03 e000 	mla	r0, r3, r0, lr
 8027c0e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027c12:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027c16:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027c1a:	ea42 020e 	orr.w	r2, r2, lr
 8027c1e:	fb03 0302 	mla	r3, r3, r2, r0
 8027c22:	f8b8 0000 	ldrh.w	r0, [r8]
 8027c26:	0d5a      	lsrs	r2, r3, #21
 8027c28:	095b      	lsrs	r3, r3, #5
 8027c2a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027c2e:	1201      	asrs	r1, r0, #8
 8027c30:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027c34:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027c38:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027c3c:	00c0      	lsls	r0, r0, #3
 8027c3e:	4313      	orrs	r3, r2
 8027c40:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027c44:	fb11 f107 	smulbb	r1, r1, r7
 8027c48:	b2c0      	uxtb	r0, r0
 8027c4a:	b29b      	uxth	r3, r3
 8027c4c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027c50:	fb10 f007 	smulbb	r0, r0, r7
 8027c54:	fb1e fe07 	smulbb	lr, lr, r7
 8027c58:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027c5c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027c60:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027c64:	10d9      	asrs	r1, r3, #3
 8027c66:	00db      	lsls	r3, r3, #3
 8027c68:	fa1f fc8c 	uxth.w	ip, ip
 8027c6c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027c70:	b2db      	uxtb	r3, r3
 8027c72:	fb01 e102 	mla	r1, r1, r2, lr
 8027c76:	fb03 0302 	mla	r3, r3, r2, r0
 8027c7a:	b289      	uxth	r1, r1
 8027c7c:	b29a      	uxth	r2, r3
 8027c7e:	f10c 0301 	add.w	r3, ip, #1
 8027c82:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027c86:	1c53      	adds	r3, r2, #1
 8027c88:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027c8c:	1c4a      	adds	r2, r1, #1
 8027c8e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8027c92:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027c96:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027c9a:	0949      	lsrs	r1, r1, #5
 8027c9c:	ea43 030c 	orr.w	r3, r3, ip
 8027ca0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027ca4:	430b      	orrs	r3, r1
 8027ca6:	f8a8 3000 	strh.w	r3, [r8]
 8027caa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027cac:	f108 0802 	add.w	r8, r8, #2
 8027cb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8027cb4:	441c      	add	r4, r3
 8027cb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027cb8:	441e      	add	r6, r3
 8027cba:	e74a      	b.n	8027b52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027cbc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027cbe:	3d01      	subs	r5, #1
 8027cc0:	441c      	add	r4, r3
 8027cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027cc4:	441e      	add	r6, r3
 8027cc6:	9b07      	ldr	r3, [sp, #28]
 8027cc8:	3302      	adds	r3, #2
 8027cca:	9307      	str	r3, [sp, #28]
 8027ccc:	e722      	b.n	8027b14 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027cce:	d022      	beq.n	8027d16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027cd0:	1e6b      	subs	r3, r5, #1
 8027cd2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027cd4:	fb00 4003 	mla	r0, r0, r3, r4
 8027cd8:	1400      	asrs	r0, r0, #16
 8027cda:	f53f af37 	bmi.w	8027b4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027cde:	3901      	subs	r1, #1
 8027ce0:	4288      	cmp	r0, r1
 8027ce2:	f6bf af33 	bge.w	8027b4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027ce6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027ce8:	fb01 6303 	mla	r3, r1, r3, r6
 8027cec:	141b      	asrs	r3, r3, #16
 8027cee:	f53f af2d 	bmi.w	8027b4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027cf2:	3a01      	subs	r2, #1
 8027cf4:	4293      	cmp	r3, r2
 8027cf6:	f6bf af29 	bge.w	8027b4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027cfa:	46a8      	mov	r8, r5
 8027cfc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027d00:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027d04:	f1b8 0f00 	cmp.w	r8, #0
 8027d08:	dc60      	bgt.n	8027dcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 8027d0a:	9b07      	ldr	r3, [sp, #28]
 8027d0c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027d10:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027d14:	9307      	str	r3, [sp, #28]
 8027d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	f340 80f8 	ble.w	8027f0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027d22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d24:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027d28:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027d2c:	eef0 6a48 	vmov.f32	s13, s16
 8027d30:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027d34:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027d38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d3c:	ee16 4a90 	vmov	r4, s13
 8027d40:	eef0 6a68 	vmov.f32	s13, s17
 8027d44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027d48:	ee16 6a90 	vmov	r6, s13
 8027d4c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027d50:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027d54:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027d58:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027d5c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027d60:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027d64:	ee18 2a10 	vmov	r2, s16
 8027d68:	eeb0 8a47 	vmov.f32	s16, s14
 8027d6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d70:	ee18 2a90 	vmov	r2, s17
 8027d74:	9327      	str	r3, [sp, #156]	; 0x9c
 8027d76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d78:	eef0 8a67 	vmov.f32	s17, s15
 8027d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027d80:	9328      	str	r3, [sp, #160]	; 0xa0
 8027d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027d86:	3b01      	subs	r3, #1
 8027d88:	930a      	str	r3, [sp, #40]	; 0x28
 8027d8a:	bf08      	it	eq
 8027d8c:	4615      	moveq	r5, r2
 8027d8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d90:	bf18      	it	ne
 8027d92:	461d      	movne	r5, r3
 8027d94:	e6af      	b.n	8027af6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8027d96:	f111 0a01 	adds.w	sl, r1, #1
 8027d9a:	d486      	bmi.n	8027caa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027d9c:	45d6      	cmp	lr, sl
 8027d9e:	db84      	blt.n	8027caa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027da0:	f110 0a01 	adds.w	sl, r0, #1
 8027da4:	d481      	bmi.n	8027caa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027da6:	4553      	cmp	r3, sl
 8027da8:	f6ff af7f 	blt.w	8027caa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027dac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027dae:	b21b      	sxth	r3, r3
 8027db0:	9101      	str	r1, [sp, #4]
 8027db2:	4641      	mov	r1, r8
 8027db4:	9300      	str	r3, [sp, #0]
 8027db6:	fa0f f38e 	sxth.w	r3, lr
 8027dba:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8027dbe:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027dc4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027dc6:	f7ff fd93 	bl	80278f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8027dca:	e76e      	b.n	8027caa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8027dcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027dce:	1430      	asrs	r0, r6, #16
 8027dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027dd2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027dd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027dda:	1423      	asrs	r3, r4, #16
 8027ddc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027de0:	fb01 3000 	mla	r0, r1, r0, r3
 8027de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027de6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8027dea:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8027dee:	8858      	ldrh	r0, [r3, #2]
 8027df0:	f1be 0f00 	cmp.w	lr, #0
 8027df4:	d00b      	beq.n	8027e0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8027df6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027dfa:	3901      	subs	r1, #1
 8027dfc:	0049      	lsls	r1, r1, #1
 8027dfe:	3102      	adds	r1, #2
 8027e00:	eb03 0b01 	add.w	fp, r3, r1
 8027e04:	5a5b      	ldrh	r3, [r3, r1]
 8027e06:	930e      	str	r3, [sp, #56]	; 0x38
 8027e08:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8027e0e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027e12:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027e16:	fb12 f30e 	smulbb	r3, r2, lr
 8027e1a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027e1e:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8027e22:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027e26:	10db      	asrs	r3, r3, #3
 8027e28:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e2c:	ea41 010c 	orr.w	r1, r1, ip
 8027e30:	f1ce 0c10 	rsb	ip, lr, #16
 8027e34:	ea4b 0000 	orr.w	r0, fp, r0
 8027e38:	9f08      	ldr	r7, [sp, #32]
 8027e3a:	ebac 0c02 	sub.w	ip, ip, r2
 8027e3e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8027e46:	4350      	muls	r0, r2
 8027e48:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027e4e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027e52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027e54:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027e58:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027e62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e66:	0412      	lsls	r2, r2, #16
 8027e68:	ea4b 0101 	orr.w	r1, fp, r1
 8027e6c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027e70:	fb03 c101 	mla	r1, r3, r1, ip
 8027e74:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027e78:	4302      	orrs	r2, r0
 8027e7a:	fb03 1202 	mla	r2, r3, r2, r1
 8027e7e:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027e82:	0952      	lsrs	r2, r2, #5
 8027e84:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027e88:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8027e8c:	f8b9 2000 	ldrh.w	r2, [r9]
 8027e90:	ea4b 0303 	orr.w	r3, fp, r3
 8027e94:	1211      	asrs	r1, r2, #8
 8027e96:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027e9a:	b29b      	uxth	r3, r3
 8027e9c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027ea0:	00d2      	lsls	r2, r2, #3
 8027ea2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8027ea6:	fb11 f107 	smulbb	r1, r1, r7
 8027eaa:	1218      	asrs	r0, r3, #8
 8027eac:	fb1c fc07 	smulbb	ip, ip, r7
 8027eb0:	b2d2      	uxtb	r2, r2
 8027eb2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027eb6:	fb12 f207 	smulbb	r2, r2, r7
 8027eba:	fb00 100a 	mla	r0, r0, sl, r1
 8027ebe:	10d9      	asrs	r1, r3, #3
 8027ec0:	00db      	lsls	r3, r3, #3
 8027ec2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027ec6:	b280      	uxth	r0, r0
 8027ec8:	b2db      	uxtb	r3, r3
 8027eca:	fb01 c10a 	mla	r1, r1, sl, ip
 8027ece:	fb03 230a 	mla	r3, r3, sl, r2
 8027ed2:	1c42      	adds	r2, r0, #1
 8027ed4:	b289      	uxth	r1, r1
 8027ed6:	b29b      	uxth	r3, r3
 8027ed8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027edc:	f101 0c01 	add.w	ip, r1, #1
 8027ee0:	1c5a      	adds	r2, r3, #1
 8027ee2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027ee6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027eea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027eee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027ef0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027ef4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027ef8:	441c      	add	r4, r3
 8027efa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027efe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f00:	4310      	orrs	r0, r2
 8027f02:	441e      	add	r6, r3
 8027f04:	ea40 000c 	orr.w	r0, r0, ip
 8027f08:	f829 0b02 	strh.w	r0, [r9], #2
 8027f0c:	e6fa      	b.n	8027d04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8027f0e:	b013      	add	sp, #76	; 0x4c
 8027f10:	ecbd 8b08 	vpop	{d8-d11}
 8027f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027f18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027f1c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8027f20:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027f24:	fb06 5c03 	mla	ip, r6, r3, r5
 8027f28:	2e00      	cmp	r6, #0
 8027f2a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8027f2e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8027f32:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027f36:	8808      	ldrh	r0, [r1, #0]
 8027f38:	db2e      	blt.n	8027f98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027f3a:	45b0      	cmp	r8, r6
 8027f3c:	dd2c      	ble.n	8027f98 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8027f3e:	2d00      	cmp	r5, #0
 8027f40:	db28      	blt.n	8027f94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027f42:	42ab      	cmp	r3, r5
 8027f44:	dd26      	ble.n	8027f94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027f46:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 8027f4a:	1c6a      	adds	r2, r5, #1
 8027f4c:	d427      	bmi.n	8027f9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027f4e:	4293      	cmp	r3, r2
 8027f50:	dd25      	ble.n	8027f9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027f52:	b324      	cbz	r4, 8027f9e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027f54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027f58:	3601      	adds	r6, #1
 8027f5a:	d424      	bmi.n	8027fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027f5c:	45b0      	cmp	r8, r6
 8027f5e:	dd22      	ble.n	8027fa6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027f60:	b31f      	cbz	r7, 8027faa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8027f62:	2d00      	cmp	r5, #0
 8027f64:	db1d      	blt.n	8027fa2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027f66:	42ab      	cmp	r3, r5
 8027f68:	dd1b      	ble.n	8027fa2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027f6a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8027f6e:	3501      	adds	r5, #1
 8027f70:	d405      	bmi.n	8027f7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027f72:	42ab      	cmp	r3, r5
 8027f74:	dd03      	ble.n	8027f7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027f76:	b124      	cbz	r4, 8027f82 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027f78:	3301      	adds	r3, #1
 8027f7a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8027f7e:	2c0f      	cmp	r4, #15
 8027f80:	d801      	bhi.n	8027f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027f82:	2f0f      	cmp	r7, #15
 8027f84:	d914      	bls.n	8027fb0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8027f86:	4b27      	ldr	r3, [pc, #156]	; (8028024 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8027f88:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8027f8c:	4a26      	ldr	r2, [pc, #152]	; (8028028 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8027f8e:	4827      	ldr	r0, [pc, #156]	; (802802c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8027f90:	f002 fca0 	bl	802a8d4 <__assert_func>
 8027f94:	4684      	mov	ip, r0
 8027f96:	e7d8      	b.n	8027f4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 8027f98:	4602      	mov	r2, r0
 8027f9a:	4684      	mov	ip, r0
 8027f9c:	e7dc      	b.n	8027f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027f9e:	4602      	mov	r2, r0
 8027fa0:	e7da      	b.n	8027f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8027fa2:	4606      	mov	r6, r0
 8027fa4:	e7e3      	b.n	8027f6e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 8027fa6:	4606      	mov	r6, r0
 8027fa8:	e7e9      	b.n	8027f7e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027faa:	2c0f      	cmp	r4, #15
 8027fac:	d8eb      	bhi.n	8027f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027fae:	4606      	mov	r6, r0
 8027fb0:	fb14 f307 	smulbb	r3, r4, r7
 8027fb4:	ea4f 450c 	mov.w	r5, ip, lsl #16
 8027fb8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8027fbc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027fc0:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8027fc4:	10db      	asrs	r3, r3, #3
 8027fc6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027fca:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027fce:	ea45 0c0c 	orr.w	ip, r5, ip
 8027fd2:	f1c7 0510 	rsb	r5, r7, #16
 8027fd6:	ea4e 0202 	orr.w	r2, lr, r2
 8027fda:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8027fde:	1b2d      	subs	r5, r5, r4
 8027fe0:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8027fe4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027fe8:	4354      	muls	r4, r2
 8027fea:	fb05 450c 	mla	r5, r5, ip, r4
 8027fee:	0404      	lsls	r4, r0, #16
 8027ff0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027ff4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027ff8:	4320      	orrs	r0, r4
 8027ffa:	fb03 5400 	mla	r4, r3, r0, r5
 8027ffe:	0430      	lsls	r0, r6, #16
 8028000:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8028004:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028008:	4330      	orrs	r0, r6
 802800a:	fb07 4000 	mla	r0, r7, r0, r4
 802800e:	0d43      	lsrs	r3, r0, #21
 8028010:	0940      	lsrs	r0, r0, #5
 8028012:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028016:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802801a:	4318      	orrs	r0, r3
 802801c:	8008      	strh	r0, [r1, #0]
 802801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028022:	bf00      	nop
 8028024:	0802fb1d 	.word	0x0802fb1d
 8028028:	08030193 	.word	0x08030193
 802802c:	0802fba1 	.word	0x0802fba1

08028030 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028034:	ed2d 8b08 	vpush	{d8-d11}
 8028038:	b08f      	sub	sp, #60	; 0x3c
 802803a:	461d      	mov	r5, r3
 802803c:	eeb0 aa40 	vmov.f32	s20, s0
 8028040:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028042:	eef0 9a60 	vmov.f32	s19, s1
 8028046:	9107      	str	r1, [sp, #28]
 8028048:	eeb0 9a41 	vmov.f32	s18, s2
 802804c:	6859      	ldr	r1, [r3, #4]
 802804e:	eeb0 8a62 	vmov.f32	s16, s5
 8028052:	920c      	str	r2, [sp, #48]	; 0x30
 8028054:	eef0 8a43 	vmov.f32	s17, s6
 8028058:	681b      	ldr	r3, [r3, #0]
 802805a:	eef0 ba44 	vmov.f32	s23, s8
 802805e:	eeb0 ba64 	vmov.f32	s22, s9
 8028062:	900d      	str	r0, [sp, #52]	; 0x34
 8028064:	eef0 aa45 	vmov.f32	s21, s10
 8028068:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 802806c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8028070:	fb01 2707 	mla	r7, r1, r7, r2
 8028074:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8028078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802807a:	f8d3 8000 	ldr.w	r8, [r3]
 802807e:	9b07      	ldr	r3, [sp, #28]
 8028080:	2b00      	cmp	r3, #0
 8028082:	dc03      	bgt.n	802808c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028084:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028086:	2b00      	cmp	r3, #0
 8028088:	f340 8182 	ble.w	8028390 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802808c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802808e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028092:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028096:	1e48      	subs	r0, r1, #1
 8028098:	f102 3cff 	add.w	ip, r2, #4294967295
 802809c:	2d00      	cmp	r5, #0
 802809e:	f340 809b 	ble.w	80281d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80280a2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80280a6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80280aa:	d406      	bmi.n	80280ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80280ac:	4586      	cmp	lr, r0
 80280ae:	da04      	bge.n	80280ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	db02      	blt.n	80280ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80280b4:	4563      	cmp	r3, ip
 80280b6:	f2c0 8090 	blt.w	80281da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80280ba:	f11e 0e01 	adds.w	lr, lr, #1
 80280be:	f100 8084 	bmi.w	80281ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80280c2:	4571      	cmp	r1, lr
 80280c4:	f2c0 8081 	blt.w	80281ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80280c8:	3301      	adds	r3, #1
 80280ca:	d47e      	bmi.n	80281ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80280cc:	429a      	cmp	r2, r3
 80280ce:	db7c      	blt.n	80281ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80280d0:	46aa      	mov	sl, r5
 80280d2:	46b9      	mov	r9, r7
 80280d4:	f1ba 0f00 	cmp.w	sl, #0
 80280d8:	f340 8099 	ble.w	802820e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80280dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80280de:	1421      	asrs	r1, r4, #16
 80280e0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80280e4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80280e8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80280ec:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80280f0:	f100 80d1 	bmi.w	8028296 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80280f4:	f10e 3bff 	add.w	fp, lr, #4294967295
 80280f8:	4559      	cmp	r1, fp
 80280fa:	f280 80cc 	bge.w	8028296 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80280fe:	2800      	cmp	r0, #0
 8028100:	f2c0 80c9 	blt.w	8028296 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028104:	f103 3bff 	add.w	fp, r3, #4294967295
 8028108:	4558      	cmp	r0, fp
 802810a:	f280 80c4 	bge.w	8028296 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802810e:	fa0f fe8e 	sxth.w	lr, lr
 8028112:	fb00 110e 	mla	r1, r0, lr, r1
 8028116:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802811a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802811e:	8841      	ldrh	r1, [r0, #2]
 8028120:	f1bc 0f00 	cmp.w	ip, #0
 8028124:	d00b      	beq.n	802813e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8028126:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802812a:	3b01      	subs	r3, #1
 802812c:	005b      	lsls	r3, r3, #1
 802812e:	3302      	adds	r3, #2
 8028130:	eb00 0e03 	add.w	lr, r0, r3
 8028134:	5ac3      	ldrh	r3, [r0, r3]
 8028136:	9308      	str	r3, [sp, #32]
 8028138:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802813c:	9309      	str	r3, [sp, #36]	; 0x24
 802813e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028142:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028146:	fb12 f30c 	smulbb	r3, r2, ip
 802814a:	f1cc 0e10 	rsb	lr, ip, #16
 802814e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028152:	10db      	asrs	r3, r3, #3
 8028154:	ebae 0e02 	sub.w	lr, lr, r2
 8028158:	ea40 000b 	orr.w	r0, r0, fp
 802815c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028160:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028164:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028168:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802816c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028170:	ea4b 0101 	orr.w	r1, fp, r1
 8028174:	4351      	muls	r1, r2
 8028176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028178:	fb0e 1e00 	mla	lr, lr, r0, r1
 802817c:	0410      	lsls	r0, r2, #16
 802817e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028182:	9908      	ldr	r1, [sp, #32]
 8028184:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028188:	4310      	orrs	r0, r2
 802818a:	9a08      	ldr	r2, [sp, #32]
 802818c:	0412      	lsls	r2, r2, #16
 802818e:	fb03 e000 	mla	r0, r3, r0, lr
 8028192:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028196:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802819a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802819e:	ea42 020e 	orr.w	r2, r2, lr
 80281a2:	fb03 0302 	mla	r3, r3, r2, r0
 80281a6:	0d5a      	lsrs	r2, r3, #21
 80281a8:	095b      	lsrs	r3, r3, #5
 80281aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80281ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80281b2:	4313      	orrs	r3, r2
 80281b4:	f8a9 3000 	strh.w	r3, [r9]
 80281b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80281ba:	f109 0902 	add.w	r9, r9, #2
 80281be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80281c2:	441c      	add	r4, r3
 80281c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281c6:	441e      	add	r6, r3
 80281c8:	e784      	b.n	80280d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80281ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80281cc:	3d01      	subs	r5, #1
 80281ce:	3702      	adds	r7, #2
 80281d0:	441c      	add	r4, r3
 80281d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281d4:	441e      	add	r6, r3
 80281d6:	e761      	b.n	802809c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80281d8:	d01d      	beq.n	8028216 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80281da:	1e6b      	subs	r3, r5, #1
 80281dc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80281de:	fb00 4003 	mla	r0, r0, r3, r4
 80281e2:	1400      	asrs	r0, r0, #16
 80281e4:	f53f af74 	bmi.w	80280d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80281e8:	3901      	subs	r1, #1
 80281ea:	4288      	cmp	r0, r1
 80281ec:	f6bf af70 	bge.w	80280d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80281f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80281f2:	fb01 6303 	mla	r3, r1, r3, r6
 80281f6:	141b      	asrs	r3, r3, #16
 80281f8:	f53f af6a 	bmi.w	80280d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80281fc:	3a01      	subs	r2, #1
 80281fe:	4293      	cmp	r3, r2
 8028200:	f6bf af66 	bge.w	80280d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028204:	46a9      	mov	r9, r5
 8028206:	46ba      	mov	sl, r7
 8028208:	f1b9 0f00 	cmp.w	r9, #0
 802820c:	dc5b      	bgt.n	80282c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802820e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028212:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8028216:	9b07      	ldr	r3, [sp, #28]
 8028218:	2b00      	cmp	r3, #0
 802821a:	f340 80b9 	ble.w	8028390 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802821e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028222:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028224:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028228:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802822c:	eef0 6a48 	vmov.f32	s13, s16
 8028230:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028234:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028238:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802823c:	ee16 4a90 	vmov	r4, s13
 8028240:	eef0 6a68 	vmov.f32	s13, s17
 8028244:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028248:	ee16 6a90 	vmov	r6, s13
 802824c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028250:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028254:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028258:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802825c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028260:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028264:	ee18 2a10 	vmov	r2, s16
 8028268:	eeb0 8a47 	vmov.f32	s16, s14
 802826c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028270:	ee18 2a90 	vmov	r2, s17
 8028274:	9323      	str	r3, [sp, #140]	; 0x8c
 8028276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028278:	eef0 8a67 	vmov.f32	s17, s15
 802827c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028280:	9324      	str	r3, [sp, #144]	; 0x90
 8028282:	9b07      	ldr	r3, [sp, #28]
 8028284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028286:	3b01      	subs	r3, #1
 8028288:	9307      	str	r3, [sp, #28]
 802828a:	bf08      	it	eq
 802828c:	4615      	moveq	r5, r2
 802828e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028290:	bf18      	it	ne
 8028292:	461d      	movne	r5, r3
 8028294:	e6f3      	b.n	802807e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8028296:	f111 0b01 	adds.w	fp, r1, #1
 802829a:	d48d      	bmi.n	80281b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802829c:	45de      	cmp	lr, fp
 802829e:	db8b      	blt.n	80281b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80282a0:	f110 0b01 	adds.w	fp, r0, #1
 80282a4:	d488      	bmi.n	80281b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80282a6:	455b      	cmp	r3, fp
 80282a8:	db86      	blt.n	80281b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80282aa:	b21b      	sxth	r3, r3
 80282ac:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80282b0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80282b4:	9300      	str	r3, [sp, #0]
 80282b6:	4642      	mov	r2, r8
 80282b8:	fa0f f38e 	sxth.w	r3, lr
 80282bc:	4649      	mov	r1, r9
 80282be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80282c0:	f7ff fe2a 	bl	8027f18 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80282c4:	e778      	b.n	80281b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80282c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80282c8:	1420      	asrs	r0, r4, #16
 80282ca:	1431      	asrs	r1, r6, #16
 80282cc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80282d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80282d4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80282d8:	fb03 0101 	mla	r1, r3, r1, r0
 80282dc:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80282e0:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80282e4:	8841      	ldrh	r1, [r0, #2]
 80282e6:	f1be 0f00 	cmp.w	lr, #0
 80282ea:	d00b      	beq.n	8028304 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80282ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80282f0:	3b01      	subs	r3, #1
 80282f2:	005b      	lsls	r3, r3, #1
 80282f4:	3302      	adds	r3, #2
 80282f6:	eb00 0b03 	add.w	fp, r0, r3
 80282fa:	5ac3      	ldrh	r3, [r0, r3]
 80282fc:	930a      	str	r3, [sp, #40]	; 0x28
 80282fe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028302:	930b      	str	r3, [sp, #44]	; 0x2c
 8028304:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8028308:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802830c:	fb12 f30e 	smulbb	r3, r2, lr
 8028310:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028314:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028318:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802831c:	10db      	asrs	r3, r3, #3
 802831e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028322:	ea40 000c 	orr.w	r0, r0, ip
 8028326:	f1ce 0c10 	rsb	ip, lr, #16
 802832a:	ea4b 0101 	orr.w	r1, fp, r1
 802832e:	f109 39ff 	add.w	r9, r9, #4294967295
 8028332:	ebac 0c02 	sub.w	ip, ip, r2
 8028336:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802833a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802833e:	4351      	muls	r1, r2
 8028340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028342:	fb0c 1c00 	mla	ip, ip, r0, r1
 8028346:	990a      	ldr	r1, [sp, #40]	; 0x28
 8028348:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802834c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8028350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028352:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028356:	0412      	lsls	r2, r2, #16
 8028358:	ea4b 0000 	orr.w	r0, fp, r0
 802835c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8028360:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028364:	fb03 c000 	mla	r0, r3, r0, ip
 8028368:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802836c:	ea42 0b0b 	orr.w	fp, r2, fp
 8028370:	fb03 000b 	mla	r0, r3, fp, r0
 8028374:	0d43      	lsrs	r3, r0, #21
 8028376:	0940      	lsrs	r0, r0, #5
 8028378:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802837c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028380:	4318      	orrs	r0, r3
 8028382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028384:	441c      	add	r4, r3
 8028386:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028388:	f82a 0b02 	strh.w	r0, [sl], #2
 802838c:	441e      	add	r6, r3
 802838e:	e73b      	b.n	8028208 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028390:	b00f      	add	sp, #60	; 0x3c
 8028392:	ecbd 8b08 	vpop	{d8-d11}
 8028396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802839c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802839c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283a0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80283a4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80283a8:	fb04 5603 	mla	r6, r4, r3, r5
 80283ac:	2c00      	cmp	r4, #0
 80283ae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80283b2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80283b6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80283ba:	db36      	blt.n	802842a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80283bc:	45a6      	cmp	lr, r4
 80283be:	dd34      	ble.n	802842a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80283c0:	2d00      	cmp	r5, #0
 80283c2:	db30      	blt.n	8028426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80283c4:	42ab      	cmp	r3, r5
 80283c6:	dd2e      	ble.n	8028426 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80283c8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80283cc:	1c6e      	adds	r6, r5, #1
 80283ce:	d42f      	bmi.n	8028430 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80283d0:	42b3      	cmp	r3, r6
 80283d2:	dd2d      	ble.n	8028430 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 80283d4:	b370      	cbz	r0, 8028434 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 80283d6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80283da:	3401      	adds	r4, #1
 80283dc:	d42e      	bmi.n	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80283de:	45a6      	cmp	lr, r4
 80283e0:	dd2c      	ble.n	802843c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 80283e2:	b377      	cbz	r7, 8028442 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 80283e4:	2d00      	cmp	r5, #0
 80283e6:	db27      	blt.n	8028438 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80283e8:	42ab      	cmp	r3, r5
 80283ea:	dd25      	ble.n	8028438 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 80283ec:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80283f0:	3501      	adds	r5, #1
 80283f2:	d429      	bmi.n	8028448 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80283f4:	42ab      	cmp	r3, r5
 80283f6:	dd27      	ble.n	8028448 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 80283f8:	b340      	cbz	r0, 802844c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 80283fa:	3301      	adds	r3, #1
 80283fc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8028400:	280f      	cmp	r0, #15
 8028402:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028406:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802840a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802840e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028412:	d801      	bhi.n	8028418 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8028414:	2f0f      	cmp	r7, #15
 8028416:	d91b      	bls.n	8028450 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8028418:	4b8d      	ldr	r3, [pc, #564]	; (8028650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802841a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802841e:	4a8d      	ldr	r2, [pc, #564]	; (8028654 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8028420:	488d      	ldr	r0, [pc, #564]	; (8028658 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8028422:	f002 fa57 	bl	802a8d4 <__assert_func>
 8028426:	2200      	movs	r2, #0
 8028428:	e7d0      	b.n	80283cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 802842a:	2600      	movs	r6, #0
 802842c:	4632      	mov	r2, r6
 802842e:	e7d4      	b.n	80283da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028430:	2600      	movs	r6, #0
 8028432:	e7d2      	b.n	80283da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028434:	4606      	mov	r6, r0
 8028436:	e7d0      	b.n	80283da <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028438:	2400      	movs	r4, #0
 802843a:	e7d9      	b.n	80283f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 802843c:	2300      	movs	r3, #0
 802843e:	461c      	mov	r4, r3
 8028440:	e7de      	b.n	8028400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028442:	463b      	mov	r3, r7
 8028444:	463c      	mov	r4, r7
 8028446:	e7db      	b.n	8028400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028448:	2300      	movs	r3, #0
 802844a:	e7d9      	b.n	8028400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802844c:	4603      	mov	r3, r0
 802844e:	e7d7      	b.n	8028400 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028450:	b280      	uxth	r0, r0
 8028452:	b2bf      	uxth	r7, r7
 8028454:	fb07 fe00 	mul.w	lr, r7, r0
 8028458:	0100      	lsls	r0, r0, #4
 802845a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802845e:	eba0 0c0e 	sub.w	ip, r0, lr
 8028462:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028466:	b2bf      	uxth	r7, r7
 8028468:	fa1f fc8c 	uxth.w	ip, ip
 802846c:	1bed      	subs	r5, r5, r7
 802846e:	fb0a f00c 	mul.w	r0, sl, ip
 8028472:	b2ad      	uxth	r5, r5
 8028474:	fb0b 0005 	mla	r0, fp, r5, r0
 8028478:	fb07 0009 	mla	r0, r7, r9, r0
 802847c:	fb0e 0008 	mla	r0, lr, r8, r0
 8028480:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028484:	9001      	str	r0, [sp, #4]
 8028486:	2800      	cmp	r0, #0
 8028488:	f000 80de 	beq.w	8028648 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 802848c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028490:	d018      	beq.n	80284c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8028492:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028496:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802849a:	fb0b f000 	mul.w	r0, fp, r0
 802849e:	fb0b fb02 	mul.w	fp, fp, r2
 80284a2:	0a02      	lsrs	r2, r0, #8
 80284a4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80284a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80284ac:	4402      	add	r2, r0
 80284ae:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80284b2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80284b6:	0a12      	lsrs	r2, r2, #8
 80284b8:	0a00      	lsrs	r0, r0, #8
 80284ba:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80284be:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80284c2:	4302      	orrs	r2, r0
 80284c4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80284c8:	d01a      	beq.n	8028500 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 80284ca:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80284ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80284d2:	fb0a f000 	mul.w	r0, sl, r0
 80284d6:	fb0a fa06 	mul.w	sl, sl, r6
 80284da:	0a06      	lsrs	r6, r0, #8
 80284dc:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80284e0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80284e4:	4406      	add	r6, r0
 80284e6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80284ea:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80284ee:	0a36      	lsrs	r6, r6, #8
 80284f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80284f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284fc:	ea46 060a 	orr.w	r6, r6, sl
 8028500:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028504:	d01b      	beq.n	802853e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8028506:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802850a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802850e:	fb09 fa0a 	mul.w	sl, r9, sl
 8028512:	fb09 f004 	mul.w	r0, r9, r4
 8028516:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802851a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802851e:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028522:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028526:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802852a:	4454      	add	r4, sl
 802852c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028530:	0a24      	lsrs	r4, r4, #8
 8028532:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028536:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802853a:	ea44 0409 	orr.w	r4, r4, r9
 802853e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028542:	d01b      	beq.n	802857c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8028544:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802854c:	fb08 f909 	mul.w	r9, r8, r9
 8028550:	fb08 f003 	mul.w	r0, r8, r3
 8028554:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028558:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802855c:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028560:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028564:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028568:	444b      	add	r3, r9
 802856a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802856e:	0a1b      	lsrs	r3, r3, #8
 8028570:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028574:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028578:	ea43 0308 	orr.w	r3, r3, r8
 802857c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8028580:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028584:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8028588:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802858c:	fb0c f808 	mul.w	r8, ip, r8
 8028590:	8808      	ldrh	r0, [r1, #0]
 8028592:	fb0c f606 	mul.w	r6, ip, r6
 8028596:	fb05 8909 	mla	r9, r5, r9, r8
 802859a:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802859e:	fb05 6502 	mla	r5, r5, r2, r6
 80285a2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80285a6:	fb07 9908 	mla	r9, r7, r8, r9
 80285aa:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80285ae:	fb07 5704 	mla	r7, r7, r4, r5
 80285b2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80285b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80285ba:	b2b6      	uxth	r6, r6
 80285bc:	fb0e 9808 	mla	r8, lr, r8, r9
 80285c0:	9a01      	ldr	r2, [sp, #4]
 80285c2:	fb0e 7e03 	mla	lr, lr, r3, r7
 80285c6:	1205      	asrs	r5, r0, #8
 80285c8:	4372      	muls	r2, r6
 80285ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80285ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285d2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80285d6:	1c53      	adds	r3, r2, #1
 80285d8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80285dc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80285e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80285e4:	ea48 0e0e 	orr.w	lr, r8, lr
 80285e8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80285ec:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80285f0:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80285f4:	b2db      	uxtb	r3, r3
 80285f6:	fb12 f206 	smulbb	r2, r2, r6
 80285fa:	fa5f fe8e 	uxtb.w	lr, lr
 80285fe:	fb14 f406 	smulbb	r4, r4, r6
 8028602:	fb05 2503 	mla	r5, r5, r3, r2
 8028606:	10c2      	asrs	r2, r0, #3
 8028608:	fb1e fe06 	smulbb	lr, lr, r6
 802860c:	00c0      	lsls	r0, r0, #3
 802860e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028612:	b2ad      	uxth	r5, r5
 8028614:	b2c0      	uxtb	r0, r0
 8028616:	fb02 4203 	mla	r2, r2, r3, r4
 802861a:	fb00 e303 	mla	r3, r0, r3, lr
 802861e:	b294      	uxth	r4, r2
 8028620:	b298      	uxth	r0, r3
 8028622:	1c6b      	adds	r3, r5, #1
 8028624:	1c62      	adds	r2, r4, #1
 8028626:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802862a:	1c43      	adds	r3, r0, #1
 802862c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028630:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028634:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028638:	0952      	lsrs	r2, r2, #5
 802863a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802863e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028642:	432b      	orrs	r3, r5
 8028644:	4313      	orrs	r3, r2
 8028646:	800b      	strh	r3, [r1, #0]
 8028648:	b003      	add	sp, #12
 802864a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802864e:	bf00      	nop
 8028650:	0802fb1d 	.word	0x0802fb1d
 8028654:	080300ea 	.word	0x080300ea
 8028658:	0802fba1 	.word	0x0802fba1

0802865c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028660:	ed2d 8b08 	vpush	{d8-d11}
 8028664:	b09d      	sub	sp, #116	; 0x74
 8028666:	eeb0 aa40 	vmov.f32	s20, s0
 802866a:	eef0 9a60 	vmov.f32	s19, s1
 802866e:	9219      	str	r2, [sp, #100]	; 0x64
 8028670:	eeb0 9a41 	vmov.f32	s18, s2
 8028674:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8028676:	eeb0 8a62 	vmov.f32	s16, s5
 802867a:	9307      	str	r3, [sp, #28]
 802867c:	eef0 8a43 	vmov.f32	s17, s6
 8028680:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8028684:	eef0 ba44 	vmov.f32	s23, s8
 8028688:	901b      	str	r0, [sp, #108]	; 0x6c
 802868a:	eeb0 ba64 	vmov.f32	s22, s9
 802868e:	931a      	str	r3, [sp, #104]	; 0x68
 8028690:	eef0 aa45 	vmov.f32	s21, s10
 8028694:	6850      	ldr	r0, [r2, #4]
 8028696:	9117      	str	r1, [sp, #92]	; 0x5c
 8028698:	6812      	ldr	r2, [r2, #0]
 802869a:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 802869e:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 80286a2:	fb00 1303 	mla	r3, r0, r3, r1
 80286a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80286aa:	930a      	str	r3, [sp, #40]	; 0x28
 80286ac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	9310      	str	r3, [sp, #64]	; 0x40
 80286b2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80286b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80286b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80286ba:	2b00      	cmp	r3, #0
 80286bc:	dc03      	bgt.n	80286c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80286be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	f340 8375 	ble.w	8028db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80286c6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80286c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286d0:	1e48      	subs	r0, r1, #1
 80286d2:	1e57      	subs	r7, r2, #1
 80286d4:	9b07      	ldr	r3, [sp, #28]
 80286d6:	2b00      	cmp	r3, #0
 80286d8:	f340 818e 	ble.w	80289f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80286dc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80286e0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80286e4:	d406      	bmi.n	80286f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80286e6:	4584      	cmp	ip, r0
 80286e8:	da04      	bge.n	80286f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80286ea:	2b00      	cmp	r3, #0
 80286ec:	db02      	blt.n	80286f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80286ee:	42bb      	cmp	r3, r7
 80286f0:	f2c0 8183 	blt.w	80289fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 80286f4:	f11c 0c01 	adds.w	ip, ip, #1
 80286f8:	f100 8173 	bmi.w	80289e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80286fc:	4561      	cmp	r1, ip
 80286fe:	f2c0 8170 	blt.w	80289e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028702:	3301      	adds	r3, #1
 8028704:	f100 816d 	bmi.w	80289e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028708:	429a      	cmp	r2, r3
 802870a:	f2c0 816a 	blt.w	80289e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802870e:	9b07      	ldr	r3, [sp, #28]
 8028710:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028712:	9318      	str	r3, [sp, #96]	; 0x60
 8028714:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028716:	2b00      	cmp	r3, #0
 8028718:	f340 818c 	ble.w	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 802871c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802871e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028722:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028724:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028728:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802872c:	1422      	asrs	r2, r4, #16
 802872e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028732:	689b      	ldr	r3, [r3, #8]
 8028734:	f100 81cd 	bmi.w	8028ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028738:	f103 38ff 	add.w	r8, r3, #4294967295
 802873c:	4542      	cmp	r2, r8
 802873e:	f280 81c8 	bge.w	8028ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028742:	f1bc 0f00 	cmp.w	ip, #0
 8028746:	f2c0 81c4 	blt.w	8028ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802874a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802874e:	45c4      	cmp	ip, r8
 8028750:	f280 81bf 	bge.w	8028ad2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028754:	b21b      	sxth	r3, r3
 8028756:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028758:	fb0c 2203 	mla	r2, ip, r3, r2
 802875c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028760:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028764:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028768:	2800      	cmp	r0, #0
 802876a:	f000 81a9 	beq.w	8028ac0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 802876e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028772:	950c      	str	r5, [sp, #48]	; 0x30
 8028774:	0e2d      	lsrs	r5, r5, #24
 8028776:	9513      	str	r5, [sp, #76]	; 0x4c
 8028778:	b181      	cbz	r1, 802879c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802877a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802877e:	3b01      	subs	r3, #1
 8028780:	009b      	lsls	r3, r3, #2
 8028782:	3304      	adds	r3, #4
 8028784:	eb08 0c03 	add.w	ip, r8, r3
 8028788:	f858 3003 	ldr.w	r3, [r8, r3]
 802878c:	9308      	str	r3, [sp, #32]
 802878e:	0e1b      	lsrs	r3, r3, #24
 8028790:	9311      	str	r3, [sp, #68]	; 0x44
 8028792:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028796:	930d      	str	r3, [sp, #52]	; 0x34
 8028798:	0e1b      	lsrs	r3, r3, #24
 802879a:	9314      	str	r3, [sp, #80]	; 0x50
 802879c:	b280      	uxth	r0, r0
 802879e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80287a0:	b289      	uxth	r1, r1
 80287a2:	fb00 f901 	mul.w	r9, r0, r1
 80287a6:	0100      	lsls	r0, r0, #4
 80287a8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80287ac:	eba0 0809 	sub.w	r8, r0, r9
 80287b0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80287b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80287b6:	b289      	uxth	r1, r1
 80287b8:	fa1f f888 	uxth.w	r8, r8
 80287bc:	1a5b      	subs	r3, r3, r1
 80287be:	fb08 f000 	mul.w	r0, r8, r0
 80287c2:	b29b      	uxth	r3, r3
 80287c4:	fb03 000e 	mla	r0, r3, lr, r0
 80287c8:	fb01 0005 	mla	r0, r1, r5, r0
 80287cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80287ce:	fb09 0005 	mla	r0, r9, r5, r0
 80287d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80287d6:	2800      	cmp	r0, #0
 80287d8:	f000 80fa 	beq.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80287dc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80287e0:	d01b      	beq.n	802881a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80287e2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80287e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80287ea:	fb0e fa0a 	mul.w	sl, lr, sl
 80287ee:	fb0e fe02 	mul.w	lr, lr, r2
 80287f2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80287f6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80287fa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80287fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028802:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028806:	4452      	add	r2, sl
 8028808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802880c:	0a12      	lsrs	r2, r2, #8
 802880e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028812:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028816:	ea42 020c 	orr.w	r2, r2, ip
 802881a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802881c:	2dff      	cmp	r5, #255	; 0xff
 802881e:	d021      	beq.n	8028864 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028820:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028822:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028826:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028828:	fb05 fb0b 	mul.w	fp, r5, fp
 802882c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802882e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028832:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028834:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028838:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802883c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028840:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028844:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028848:	44de      	add	lr, fp
 802884a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802884e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028852:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028856:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802885a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802885e:	ea4e 050a 	orr.w	r5, lr, sl
 8028862:	950c      	str	r5, [sp, #48]	; 0x30
 8028864:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028866:	2dff      	cmp	r5, #255	; 0xff
 8028868:	d021      	beq.n	80288ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802886a:	9d08      	ldr	r5, [sp, #32]
 802886c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028870:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028872:	fb05 fb0b 	mul.w	fp, r5, fp
 8028876:	9d08      	ldr	r5, [sp, #32]
 8028878:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802887c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802887e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028882:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028886:	fb05 fa0a 	mul.w	sl, r5, sl
 802888a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802888e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028892:	44de      	add	lr, fp
 8028894:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028898:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802889c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288a8:	ea4e 050a 	orr.w	r5, lr, sl
 80288ac:	9508      	str	r5, [sp, #32]
 80288ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288b0:	2dff      	cmp	r5, #255	; 0xff
 80288b2:	d021      	beq.n	80288f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 80288b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80288b6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80288ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288bc:	fb05 fb0b 	mul.w	fp, r5, fp
 80288c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80288c2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80288c6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80288c8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80288cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80288d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80288d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288d8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80288dc:	44de      	add	lr, fp
 80288de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80288e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80288e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80288ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288f2:	ea4e 050a 	orr.w	r5, lr, sl
 80288f6:	950d      	str	r5, [sp, #52]	; 0x34
 80288f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80288fa:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80288fe:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028902:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028906:	9d08      	ldr	r5, [sp, #32]
 8028908:	fb08 fc0c 	mul.w	ip, r8, ip
 802890c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028910:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028914:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028916:	fb01 cc0e 	mla	ip, r1, lr, ip
 802891a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802891e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028920:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028924:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028928:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802892a:	fb08 f80e 	mul.w	r8, r8, lr
 802892e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028932:	fb03 8202 	mla	r2, r3, r2, r8
 8028936:	9b08      	ldr	r3, [sp, #32]
 8028938:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802893c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028942:	fb01 220a 	mla	r2, r1, sl, r2
 8028946:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802894a:	883b      	ldrh	r3, [r7, #0]
 802894c:	fb09 2901 	mla	r9, r9, r1, r2
 8028950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028952:	1219      	asrs	r1, r3, #8
 8028954:	4342      	muls	r2, r0
 8028956:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802895a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802895e:	1c50      	adds	r0, r2, #1
 8028960:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028964:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028968:	ea4c 0c09 	orr.w	ip, ip, r9
 802896c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028970:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028974:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028978:	fa5f fc8c 	uxtb.w	ip, ip
 802897c:	fb12 f205 	smulbb	r2, r2, r5
 8028980:	b2c0      	uxtb	r0, r0
 8028982:	fb1c fc05 	smulbb	ip, ip, r5
 8028986:	fb01 2100 	mla	r1, r1, r0, r2
 802898a:	10da      	asrs	r2, r3, #3
 802898c:	fb1e fe05 	smulbb	lr, lr, r5
 8028990:	00db      	lsls	r3, r3, #3
 8028992:	b289      	uxth	r1, r1
 8028994:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028998:	b2db      	uxtb	r3, r3
 802899a:	fb02 e200 	mla	r2, r2, r0, lr
 802899e:	fb03 c300 	mla	r3, r3, r0, ip
 80289a2:	b292      	uxth	r2, r2
 80289a4:	fa1f fc83 	uxth.w	ip, r3
 80289a8:	1c4b      	adds	r3, r1, #1
 80289aa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80289ae:	f10c 0301 	add.w	r3, ip, #1
 80289b2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80289b6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80289ba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80289be:	430b      	orrs	r3, r1
 80289c0:	1c51      	adds	r1, r2, #1
 80289c2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80289c6:	0952      	lsrs	r2, r2, #5
 80289c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80289cc:	4313      	orrs	r3, r2
 80289ce:	803b      	strh	r3, [r7, #0]
 80289d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80289d2:	3702      	adds	r7, #2
 80289d4:	441c      	add	r4, r3
 80289d6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80289d8:	441e      	add	r6, r3
 80289da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80289dc:	3b01      	subs	r3, #1
 80289de:	9318      	str	r3, [sp, #96]	; 0x60
 80289e0:	e698      	b.n	8028714 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80289e2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80289e4:	441c      	add	r4, r3
 80289e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80289e8:	441e      	add	r6, r3
 80289ea:	9b07      	ldr	r3, [sp, #28]
 80289ec:	3b01      	subs	r3, #1
 80289ee:	9307      	str	r3, [sp, #28]
 80289f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80289f2:	3302      	adds	r3, #2
 80289f4:	930a      	str	r3, [sp, #40]	; 0x28
 80289f6:	e66d      	b.n	80286d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80289f8:	d023      	beq.n	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80289fa:	9b07      	ldr	r3, [sp, #28]
 80289fc:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80289fe:	3b01      	subs	r3, #1
 8028a00:	fb00 4003 	mla	r0, r0, r3, r4
 8028a04:	1400      	asrs	r0, r0, #16
 8028a06:	f53f ae82 	bmi.w	802870e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a0a:	3901      	subs	r1, #1
 8028a0c:	4288      	cmp	r0, r1
 8028a0e:	f6bf ae7e 	bge.w	802870e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a12:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8028a14:	fb01 6303 	mla	r3, r1, r3, r6
 8028a18:	141b      	asrs	r3, r3, #16
 8028a1a:	f53f ae78 	bmi.w	802870e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a1e:	3a01      	subs	r2, #1
 8028a20:	4293      	cmp	r3, r2
 8028a22:	f6bf ae74 	bge.w	802870e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028a26:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028a2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028a2e:	f1bb 0f00 	cmp.w	fp, #0
 8028a32:	dc6c      	bgt.n	8028b0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028a34:	9b07      	ldr	r3, [sp, #28]
 8028a36:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a3c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028a40:	930a      	str	r3, [sp, #40]	; 0x28
 8028a42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028a44:	2b00      	cmp	r3, #0
 8028a46:	f340 81b3 	ble.w	8028db0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028a4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028a4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028a50:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028a54:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028a58:	eef0 6a48 	vmov.f32	s13, s16
 8028a5c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028a60:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028a64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a68:	ee16 4a90 	vmov	r4, s13
 8028a6c:	eef0 6a68 	vmov.f32	s13, s17
 8028a70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a74:	ee16 6a90 	vmov	r6, s13
 8028a78:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028a7c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028a80:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028a84:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028a88:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028a8c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028a90:	ee18 2a10 	vmov	r2, s16
 8028a94:	eeb0 8a47 	vmov.f32	s16, s14
 8028a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8028a9c:	ee18 2a90 	vmov	r2, s17
 8028aa0:	9331      	str	r3, [sp, #196]	; 0xc4
 8028aa2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028aa4:	eef0 8a67 	vmov.f32	s17, s15
 8028aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8028aac:	9332      	str	r3, [sp, #200]	; 0xc8
 8028aae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8028ab2:	3b01      	subs	r3, #1
 8028ab4:	9317      	str	r3, [sp, #92]	; 0x5c
 8028ab6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028ab8:	bf08      	it	eq
 8028aba:	4613      	moveq	r3, r2
 8028abc:	9307      	str	r3, [sp, #28]
 8028abe:	e5fb      	b.n	80286b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028ac0:	2900      	cmp	r1, #0
 8028ac2:	f43f ae6b 	beq.w	802879c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028ac6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028aca:	9308      	str	r3, [sp, #32]
 8028acc:	0e1b      	lsrs	r3, r3, #24
 8028ace:	9311      	str	r3, [sp, #68]	; 0x44
 8028ad0:	e664      	b.n	802879c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028ad2:	f112 0801 	adds.w	r8, r2, #1
 8028ad6:	f53f af7b 	bmi.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028ada:	4543      	cmp	r3, r8
 8028adc:	f6ff af78 	blt.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028ae0:	f11c 0801 	adds.w	r8, ip, #1
 8028ae4:	f53f af74 	bmi.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028ae8:	45c6      	cmp	lr, r8
 8028aea:	f6ff af71 	blt.w	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028aee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028af0:	b21b      	sxth	r3, r3
 8028af2:	9201      	str	r2, [sp, #4]
 8028af4:	fa0f f28e 	sxth.w	r2, lr
 8028af8:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028afc:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028b00:	9200      	str	r2, [sp, #0]
 8028b02:	4639      	mov	r1, r7
 8028b04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028b06:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028b08:	f7ff fc48 	bl	802839c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8028b0c:	e760      	b.n	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028b0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028b10:	1427      	asrs	r7, r4, #16
 8028b12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028b14:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b1c:	1433      	asrs	r3, r6, #16
 8028b1e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028b22:	fb01 7303 	mla	r3, r1, r3, r7
 8028b26:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8028b2a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028b2e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028b32:	2a00      	cmp	r2, #0
 8028b34:	f000 8133 	beq.w	8028d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028b38:	687d      	ldr	r5, [r7, #4]
 8028b3a:	950e      	str	r5, [sp, #56]	; 0x38
 8028b3c:	0e2d      	lsrs	r5, r5, #24
 8028b3e:	9515      	str	r5, [sp, #84]	; 0x54
 8028b40:	b178      	cbz	r0, 8028b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028b42:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8028b46:	3901      	subs	r1, #1
 8028b48:	0089      	lsls	r1, r1, #2
 8028b4a:	3104      	adds	r1, #4
 8028b4c:	eb07 0e01 	add.w	lr, r7, r1
 8028b50:	5879      	ldr	r1, [r7, r1]
 8028b52:	9109      	str	r1, [sp, #36]	; 0x24
 8028b54:	0e09      	lsrs	r1, r1, #24
 8028b56:	9112      	str	r1, [sp, #72]	; 0x48
 8028b58:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028b5c:	910f      	str	r1, [sp, #60]	; 0x3c
 8028b5e:	0e09      	lsrs	r1, r1, #24
 8028b60:	9116      	str	r1, [sp, #88]	; 0x58
 8028b62:	b292      	uxth	r2, r2
 8028b64:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028b66:	b280      	uxth	r0, r0
 8028b68:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028b6a:	fb02 f800 	mul.w	r8, r2, r0
 8028b6e:	0112      	lsls	r2, r2, #4
 8028b70:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028b74:	eba2 0e08 	sub.w	lr, r2, r8
 8028b78:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028b7c:	b280      	uxth	r0, r0
 8028b7e:	fa1f fe8e 	uxth.w	lr, lr
 8028b82:	1a12      	subs	r2, r2, r0
 8028b84:	fb0e f101 	mul.w	r1, lr, r1
 8028b88:	b292      	uxth	r2, r2
 8028b8a:	fb02 110c 	mla	r1, r2, ip, r1
 8028b8e:	fb00 1105 	mla	r1, r0, r5, r1
 8028b92:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028b94:	fb08 1105 	mla	r1, r8, r5, r1
 8028b98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028b9c:	2900      	cmp	r1, #0
 8028b9e:	f000 80f5 	beq.w	8028d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028ba2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028ba6:	d019      	beq.n	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 8028ba8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028bac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028bb0:	fb0c fa0a 	mul.w	sl, ip, sl
 8028bb4:	fb0c fc03 	mul.w	ip, ip, r3
 8028bb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028bbc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028bc0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028bc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028bc8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028bcc:	4453      	add	r3, sl
 8028bce:	0a3f      	lsrs	r7, r7, #8
 8028bd0:	0a1b      	lsrs	r3, r3, #8
 8028bd2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028bd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028bda:	433b      	orrs	r3, r7
 8028bdc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bde:	2dff      	cmp	r5, #255	; 0xff
 8028be0:	d020      	beq.n	8028c24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8028be2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028be4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028be8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bea:	436f      	muls	r7, r5
 8028bec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028bee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028bf2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028bf6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bf8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028bfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c00:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c04:	44bc      	add	ip, r7
 8028c06:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028c0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c0e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028c12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c1e:	ea4c 050a 	orr.w	r5, ip, sl
 8028c22:	950e      	str	r5, [sp, #56]	; 0x38
 8028c24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c26:	2dff      	cmp	r5, #255	; 0xff
 8028c28:	d020      	beq.n	8028c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8028c2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028c2c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028c30:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c32:	436f      	muls	r7, r5
 8028c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028c36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c3a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028c3e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028c40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c48:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c4c:	44bc      	add	ip, r7
 8028c4e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028c5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c66:	ea4c 050a 	orr.w	r5, ip, sl
 8028c6a:	9509      	str	r5, [sp, #36]	; 0x24
 8028c6c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c6e:	2dff      	cmp	r5, #255	; 0xff
 8028c70:	d020      	beq.n	8028cb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028c72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c74:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028c78:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c7a:	436f      	muls	r7, r5
 8028c7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028c82:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028c86:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028c88:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028c8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c90:	fb05 fa0a 	mul.w	sl, r5, sl
 8028c94:	44bc      	add	ip, r7
 8028c96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028ca2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ca6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028caa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028cae:	ea4c 050a 	orr.w	r5, ip, sl
 8028cb2:	950f      	str	r5, [sp, #60]	; 0x3c
 8028cb4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028cb6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028cba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028cbe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028cc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028cc4:	fb0e f707 	mul.w	r7, lr, r7
 8028cc8:	fb02 770c 	mla	r7, r2, ip, r7
 8028ccc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028cd0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028cd2:	fb00 770c 	mla	r7, r0, ip, r7
 8028cd6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028cda:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028cdc:	fb08 770c 	mla	r7, r8, ip, r7
 8028ce0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028ce4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028ce6:	fb0e fe0c 	mul.w	lr, lr, ip
 8028cea:	0a3f      	lsrs	r7, r7, #8
 8028cec:	fb02 e303 	mla	r3, r2, r3, lr
 8028cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028cf2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028cf6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028cfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028cfc:	fb00 330a 	mla	r3, r0, sl, r3
 8028d00:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028d04:	f8b9 0000 	ldrh.w	r0, [r9]
 8028d08:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028d0e:	1202      	asrs	r2, r0, #8
 8028d10:	4359      	muls	r1, r3
 8028d12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d16:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028d1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028d1e:	1c4b      	adds	r3, r1, #1
 8028d20:	ea47 070c 	orr.w	r7, r7, ip
 8028d24:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028d28:	0c3b      	lsrs	r3, r7, #16
 8028d2a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8028d2e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028d32:	b2ff      	uxtb	r7, r7
 8028d34:	fb13 f305 	smulbb	r3, r3, r5
 8028d38:	b2c9      	uxtb	r1, r1
 8028d3a:	fb17 f705 	smulbb	r7, r7, r5
 8028d3e:	fb02 3201 	mla	r2, r2, r1, r3
 8028d42:	10c3      	asrs	r3, r0, #3
 8028d44:	fb1c fc05 	smulbb	ip, ip, r5
 8028d48:	00c0      	lsls	r0, r0, #3
 8028d4a:	b292      	uxth	r2, r2
 8028d4c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028d50:	b2c0      	uxtb	r0, r0
 8028d52:	fb03 c301 	mla	r3, r3, r1, ip
 8028d56:	fb00 7001 	mla	r0, r0, r1, r7
 8028d5a:	1c51      	adds	r1, r2, #1
 8028d5c:	b29b      	uxth	r3, r3
 8028d5e:	b280      	uxth	r0, r0
 8028d60:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028d64:	f100 0c01 	add.w	ip, r0, #1
 8028d68:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8028d6c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028d70:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028d74:	ea4c 0202 	orr.w	r2, ip, r2
 8028d78:	f103 0c01 	add.w	ip, r3, #1
 8028d7c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028d80:	095b      	lsrs	r3, r3, #5
 8028d82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028d86:	431a      	orrs	r2, r3
 8028d88:	f8a9 2000 	strh.w	r2, [r9]
 8028d8c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8028d8e:	f109 0902 	add.w	r9, r9, #2
 8028d92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028d96:	441c      	add	r4, r3
 8028d98:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028d9a:	441e      	add	r6, r3
 8028d9c:	e647      	b.n	8028a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8028d9e:	2800      	cmp	r0, #0
 8028da0:	f43f aedf 	beq.w	8028b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028da4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8028da8:	9109      	str	r1, [sp, #36]	; 0x24
 8028daa:	0e09      	lsrs	r1, r1, #24
 8028dac:	9112      	str	r1, [sp, #72]	; 0x48
 8028dae:	e6d8      	b.n	8028b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028db0:	b01d      	add	sp, #116	; 0x74
 8028db2:	ecbd 8b08 	vpop	{d8-d11}
 8028db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028dbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8028dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028dc0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8028dc4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8028dc8:	fb04 5603 	mla	r6, r4, r3, r5
 8028dcc:	2c00      	cmp	r4, #0
 8028dce:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8028dd2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8028dd6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8028dda:	db37      	blt.n	8028e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8028ddc:	45a6      	cmp	lr, r4
 8028dde:	dd35      	ble.n	8028e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8028de0:	2d00      	cmp	r5, #0
 8028de2:	db31      	blt.n	8028e48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028de4:	42ab      	cmp	r3, r5
 8028de6:	dd2f      	ble.n	8028e48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028de8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028dec:	1c6e      	adds	r6, r5, #1
 8028dee:	d430      	bmi.n	8028e52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028df0:	42b3      	cmp	r3, r6
 8028df2:	dd2e      	ble.n	8028e52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028df4:	b378      	cbz	r0, 8028e56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8028df6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028dfa:	3401      	adds	r4, #1
 8028dfc:	d42f      	bmi.n	8028e5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028dfe:	45a6      	cmp	lr, r4
 8028e00:	dd2d      	ble.n	8028e5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028e02:	b37f      	cbz	r7, 8028e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8028e04:	2d00      	cmp	r5, #0
 8028e06:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 8028e0a:	db26      	blt.n	8028e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028e0c:	42ab      	cmp	r3, r5
 8028e0e:	dd24      	ble.n	8028e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028e10:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028e14:	3501      	adds	r5, #1
 8028e16:	d428      	bmi.n	8028e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028e18:	42ab      	cmp	r3, r5
 8028e1a:	dd26      	ble.n	8028e6a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028e1c:	b338      	cbz	r0, 8028e6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8028e1e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8028e22:	280f      	cmp	r0, #15
 8028e24:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028e28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028e2c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028e30:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028e34:	d801      	bhi.n	8028e3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8028e36:	2f0f      	cmp	r7, #15
 8028e38:	d91b      	bls.n	8028e72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 8028e3a:	4b87      	ldr	r3, [pc, #540]	; (8029058 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8028e3c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028e40:	4a86      	ldr	r2, [pc, #536]	; (802905c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8028e42:	4887      	ldr	r0, [pc, #540]	; (8029060 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028e44:	f001 fd46 	bl	802a8d4 <__assert_func>
 8028e48:	2200      	movs	r2, #0
 8028e4a:	e7cf      	b.n	8028dec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8028e4c:	2600      	movs	r6, #0
 8028e4e:	4632      	mov	r2, r6
 8028e50:	e7d3      	b.n	8028dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028e52:	2600      	movs	r6, #0
 8028e54:	e7d1      	b.n	8028dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028e56:	4606      	mov	r6, r0
 8028e58:	e7cf      	b.n	8028dfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028e5a:	2400      	movs	r4, #0
 8028e5c:	e7da      	b.n	8028e14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8028e5e:	2300      	movs	r3, #0
 8028e60:	461c      	mov	r4, r3
 8028e62:	e7de      	b.n	8028e22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028e64:	463b      	mov	r3, r7
 8028e66:	463c      	mov	r4, r7
 8028e68:	e7db      	b.n	8028e22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028e6a:	2300      	movs	r3, #0
 8028e6c:	e7d9      	b.n	8028e22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028e6e:	4603      	mov	r3, r0
 8028e70:	e7d7      	b.n	8028e22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028e72:	b280      	uxth	r0, r0
 8028e74:	b2bf      	uxth	r7, r7
 8028e76:	fb07 fe00 	mul.w	lr, r7, r0
 8028e7a:	0100      	lsls	r0, r0, #4
 8028e7c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028e80:	eba0 0c0e 	sub.w	ip, r0, lr
 8028e84:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028e88:	b2bf      	uxth	r7, r7
 8028e8a:	fa1f fc8c 	uxth.w	ip, ip
 8028e8e:	1bed      	subs	r5, r5, r7
 8028e90:	fb0c f00a 	mul.w	r0, ip, sl
 8028e94:	b2ad      	uxth	r5, r5
 8028e96:	fb0b 0005 	mla	r0, fp, r5, r0
 8028e9a:	fb07 0009 	mla	r0, r7, r9, r0
 8028e9e:	fb0e 0008 	mla	r0, lr, r8, r0
 8028ea2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028ea6:	9001      	str	r0, [sp, #4]
 8028ea8:	2800      	cmp	r0, #0
 8028eaa:	f000 80d1 	beq.w	8029050 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8028eae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028eb2:	d018      	beq.n	8028ee6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8028eb4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028eb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028ebc:	fb0b f000 	mul.w	r0, fp, r0
 8028ec0:	fb0b fb02 	mul.w	fp, fp, r2
 8028ec4:	0a02      	lsrs	r2, r0, #8
 8028ec6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028eca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028ece:	4402      	add	r2, r0
 8028ed0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028ed4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028ed8:	0a12      	lsrs	r2, r2, #8
 8028eda:	0a00      	lsrs	r0, r0, #8
 8028edc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028ee0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028ee4:	4302      	orrs	r2, r0
 8028ee6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028eea:	d01a      	beq.n	8028f22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8028eec:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028ef0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028ef4:	fb0a f000 	mul.w	r0, sl, r0
 8028ef8:	fb0a fa06 	mul.w	sl, sl, r6
 8028efc:	0a06      	lsrs	r6, r0, #8
 8028efe:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028f02:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028f06:	4406      	add	r6, r0
 8028f08:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028f0c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028f10:	0a36      	lsrs	r6, r6, #8
 8028f12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f16:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028f1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f1e:	ea46 060a 	orr.w	r6, r6, sl
 8028f22:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028f26:	d01b      	beq.n	8028f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028f28:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8028f2c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028f30:	fb09 fa0a 	mul.w	sl, r9, sl
 8028f34:	fb09 f004 	mul.w	r0, r9, r4
 8028f38:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028f3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028f40:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028f44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028f48:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028f4c:	4454      	add	r4, sl
 8028f4e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f52:	0a24      	lsrs	r4, r4, #8
 8028f54:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028f58:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028f5c:	ea44 0409 	orr.w	r4, r4, r9
 8028f60:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028f64:	d01b      	beq.n	8028f9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8028f66:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028f6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028f6e:	fb08 f909 	mul.w	r9, r8, r9
 8028f72:	fb08 f003 	mul.w	r0, r8, r3
 8028f76:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028f7a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028f7e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028f82:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028f86:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028f8a:	444b      	add	r3, r9
 8028f8c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028f90:	0a1b      	lsrs	r3, r3, #8
 8028f92:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028f96:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028f9a:	ea43 0308 	orr.w	r3, r3, r8
 8028f9e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8028fa2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028fa6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8028faa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028fae:	fb0c f808 	mul.w	r8, ip, r8
 8028fb2:	8808      	ldrh	r0, [r1, #0]
 8028fb4:	fb0c f606 	mul.w	r6, ip, r6
 8028fb8:	fb05 8909 	mla	r9, r5, r9, r8
 8028fbc:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8028fc0:	fb05 6502 	mla	r5, r5, r2, r6
 8028fc4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028fc8:	fb07 9908 	mla	r9, r7, r8, r9
 8028fcc:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8028fd0:	fb07 5704 	mla	r7, r7, r4, r5
 8028fd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028fd8:	fb0e 9808 	mla	r8, lr, r8, r9
 8028fdc:	10c4      	asrs	r4, r0, #3
 8028fde:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028fe2:	9b01      	ldr	r3, [sp, #4]
 8028fe4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028fe8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8028fec:	43da      	mvns	r2, r3
 8028fee:	1203      	asrs	r3, r0, #8
 8028ff0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ff4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028ff8:	b2d2      	uxtb	r2, r2
 8028ffa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028ffe:	00c0      	lsls	r0, r0, #3
 8029000:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8029004:	4353      	muls	r3, r2
 8029006:	b2c0      	uxtb	r0, r0
 8029008:	ea48 0e0e 	orr.w	lr, r8, lr
 802900c:	4354      	muls	r4, r2
 802900e:	4350      	muls	r0, r2
 8029010:	1c5a      	adds	r2, r3, #1
 8029012:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8029016:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802901a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802901e:	1c62      	adds	r2, r4, #1
 8029020:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029024:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8029028:	021b      	lsls	r3, r3, #8
 802902a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802902e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8029032:	00d2      	lsls	r2, r2, #3
 8029034:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029038:	4313      	orrs	r3, r2
 802903a:	1c42      	adds	r2, r0, #1
 802903c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029040:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8029044:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8029048:	ea4e 0e03 	orr.w	lr, lr, r3
 802904c:	f8a1 e000 	strh.w	lr, [r1]
 8029050:	b003      	add	sp, #12
 8029052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029056:	bf00      	nop
 8029058:	0802fb1d 	.word	0x0802fb1d
 802905c:	080300ea 	.word	0x080300ea
 8029060:	0802fba1 	.word	0x0802fba1

08029064 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029068:	ed2d 8b08 	vpush	{d8-d11}
 802906c:	b09b      	sub	sp, #108	; 0x6c
 802906e:	eeb0 aa40 	vmov.f32	s20, s0
 8029072:	eef0 9a60 	vmov.f32	s19, s1
 8029076:	9218      	str	r2, [sp, #96]	; 0x60
 8029078:	eeb0 9a41 	vmov.f32	s18, s2
 802907c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802907e:	eeb0 8a62 	vmov.f32	s16, s5
 8029082:	9019      	str	r0, [sp, #100]	; 0x64
 8029084:	eef0 8a43 	vmov.f32	s17, s6
 8029088:	6850      	ldr	r0, [r2, #4]
 802908a:	eef0 ba44 	vmov.f32	s23, s8
 802908e:	9116      	str	r1, [sp, #88]	; 0x58
 8029090:	eeb0 ba64 	vmov.f32	s22, s9
 8029094:	9307      	str	r3, [sp, #28]
 8029096:	eef0 aa45 	vmov.f32	s21, s10
 802909a:	6812      	ldr	r2, [r2, #0]
 802909c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80290a0:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80290a4:	fb00 1303 	mla	r3, r0, r3, r1
 80290a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80290ac:	930a      	str	r3, [sp, #40]	; 0x28
 80290ae:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80290b0:	681b      	ldr	r3, [r3, #0]
 80290b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80290b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80290b6:	2b00      	cmp	r3, #0
 80290b8:	dc03      	bgt.n	80290c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80290ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80290bc:	2b00      	cmp	r3, #0
 80290be:	f340 8387 	ble.w	80297d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80290c2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80290c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80290c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80290cc:	1e48      	subs	r0, r1, #1
 80290ce:	1e57      	subs	r7, r2, #1
 80290d0:	9b07      	ldr	r3, [sp, #28]
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	f340 8166 	ble.w	80293a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80290d8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80290dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80290e0:	d406      	bmi.n	80290f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80290e2:	4584      	cmp	ip, r0
 80290e4:	da04      	bge.n	80290f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	db02      	blt.n	80290f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80290ea:	42bb      	cmp	r3, r7
 80290ec:	f2c0 815b 	blt.w	80293a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80290f0:	f11c 0c01 	adds.w	ip, ip, #1
 80290f4:	f100 814b 	bmi.w	802938e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80290f8:	4561      	cmp	r1, ip
 80290fa:	f2c0 8148 	blt.w	802938e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80290fe:	3301      	adds	r3, #1
 8029100:	f100 8145 	bmi.w	802938e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029104:	429a      	cmp	r2, r3
 8029106:	f2c0 8142 	blt.w	802938e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802910a:	9b07      	ldr	r3, [sp, #28]
 802910c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802910e:	9317      	str	r3, [sp, #92]	; 0x5c
 8029110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029112:	2b00      	cmp	r3, #0
 8029114:	f340 8165 	ble.w	80293e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8029118:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802911a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802911e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8029120:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029124:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029128:	1422      	asrs	r2, r4, #16
 802912a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802912e:	689b      	ldr	r3, [r3, #8]
 8029130:	f100 81d5 	bmi.w	80294de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029134:	f103 38ff 	add.w	r8, r3, #4294967295
 8029138:	4542      	cmp	r2, r8
 802913a:	f280 81d0 	bge.w	80294de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802913e:	f1bc 0f00 	cmp.w	ip, #0
 8029142:	f2c0 81cc 	blt.w	80294de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029146:	f10e 38ff 	add.w	r8, lr, #4294967295
 802914a:	45c4      	cmp	ip, r8
 802914c:	f280 81c7 	bge.w	80294de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029150:	b21b      	sxth	r3, r3
 8029152:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029154:	fb0c 2203 	mla	r2, ip, r3, r2
 8029158:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802915c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029160:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029164:	2900      	cmp	r1, #0
 8029166:	f000 8182 	beq.w	802946e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802916a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802916e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029170:	0e2d      	lsrs	r5, r5, #24
 8029172:	9512      	str	r5, [sp, #72]	; 0x48
 8029174:	b180      	cbz	r0, 8029198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802917a:	3b01      	subs	r3, #1
 802917c:	009b      	lsls	r3, r3, #2
 802917e:	3304      	adds	r3, #4
 8029180:	eb08 0c03 	add.w	ip, r8, r3
 8029184:	f858 3003 	ldr.w	r3, [r8, r3]
 8029188:	9308      	str	r3, [sp, #32]
 802918a:	0e1b      	lsrs	r3, r3, #24
 802918c:	9310      	str	r3, [sp, #64]	; 0x40
 802918e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029192:	930c      	str	r3, [sp, #48]	; 0x30
 8029194:	0e1b      	lsrs	r3, r3, #24
 8029196:	9313      	str	r3, [sp, #76]	; 0x4c
 8029198:	b289      	uxth	r1, r1
 802919a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802919c:	b280      	uxth	r0, r0
 802919e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80291a0:	fb01 f900 	mul.w	r9, r1, r0
 80291a4:	0109      	lsls	r1, r1, #4
 80291a6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80291aa:	eba1 0809 	sub.w	r8, r1, r9
 80291ae:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80291b2:	b280      	uxth	r0, r0
 80291b4:	fa1f f888 	uxth.w	r8, r8
 80291b8:	1a09      	subs	r1, r1, r0
 80291ba:	fb08 f303 	mul.w	r3, r8, r3
 80291be:	b289      	uxth	r1, r1
 80291c0:	fb01 330e 	mla	r3, r1, lr, r3
 80291c4:	fb00 3305 	mla	r3, r0, r5, r3
 80291c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80291ca:	fb09 3305 	mla	r3, r9, r5, r3
 80291ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80291d2:	2b00      	cmp	r3, #0
 80291d4:	f000 80d2 	beq.w	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80291d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80291dc:	d01b      	beq.n	8029216 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80291de:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80291e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80291e6:	fb0e fa0a 	mul.w	sl, lr, sl
 80291ea:	fb0e fe02 	mul.w	lr, lr, r2
 80291ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80291f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80291f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80291fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80291fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029202:	4452      	add	r2, sl
 8029204:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029208:	0a12      	lsrs	r2, r2, #8
 802920a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802920e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029212:	ea42 020c 	orr.w	r2, r2, ip
 8029216:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029218:	2dff      	cmp	r5, #255	; 0xff
 802921a:	d021      	beq.n	8029260 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802921c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802921e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029222:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029224:	fb05 fb0b 	mul.w	fp, r5, fp
 8029228:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802922a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802922e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029230:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029234:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029238:	fb05 fa0a 	mul.w	sl, r5, sl
 802923c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029240:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029244:	44de      	add	lr, fp
 8029246:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802924a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802924e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029252:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029256:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802925a:	ea4e 050a 	orr.w	r5, lr, sl
 802925e:	950b      	str	r5, [sp, #44]	; 0x2c
 8029260:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029262:	2dff      	cmp	r5, #255	; 0xff
 8029264:	d021      	beq.n	80292aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8029266:	9d08      	ldr	r5, [sp, #32]
 8029268:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802926c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802926e:	fb05 fb0b 	mul.w	fp, r5, fp
 8029272:	9d08      	ldr	r5, [sp, #32]
 8029274:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029278:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802927a:	fb05 fa0e 	mul.w	sl, r5, lr
 802927e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029282:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802928a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802928e:	44de      	add	lr, fp
 8029290:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029294:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029298:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802929c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80292a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80292a4:	ea4e 050a 	orr.w	r5, lr, sl
 80292a8:	9508      	str	r5, [sp, #32]
 80292aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80292ac:	2dff      	cmp	r5, #255	; 0xff
 80292ae:	d021      	beq.n	80292f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80292b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80292b2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80292b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80292b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80292bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80292be:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80292c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80292c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80292c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80292cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80292d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80292d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80292d8:	44de      	add	lr, fp
 80292da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80292de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80292e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80292ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80292ee:	ea4e 050a 	orr.w	r5, lr, sl
 80292f2:	950c      	str	r5, [sp, #48]	; 0x30
 80292f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80292f6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80292fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80292fe:	2bff      	cmp	r3, #255	; 0xff
 8029300:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029304:	9d08      	ldr	r5, [sp, #32]
 8029306:	fb08 fc0c 	mul.w	ip, r8, ip
 802930a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802930e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029314:	fb00 cc0e 	mla	ip, r0, lr, ip
 8029318:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802931c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802931e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029322:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029326:	fb08 f80e 	mul.w	r8, r8, lr
 802932a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802932e:	fb01 8202 	mla	r2, r1, r2, r8
 8029332:	9908      	ldr	r1, [sp, #32]
 8029334:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029338:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802933c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802933e:	fb00 220a 	mla	r2, r0, sl, r2
 8029342:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8029346:	fb09 2900 	mla	r9, r9, r0, r2
 802934a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802934e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029352:	ea4c 0c09 	orr.w	ip, ip, r9
 8029356:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802935a:	f040 8091 	bne.w	8029480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802935e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029362:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8029366:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802936a:	f022 0207 	bic.w	r2, r2, #7
 802936e:	431a      	orrs	r2, r3
 8029370:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029374:	ea4c 0c02 	orr.w	ip, ip, r2
 8029378:	f8a7 c000 	strh.w	ip, [r7]
 802937c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802937e:	3702      	adds	r7, #2
 8029380:	441c      	add	r4, r3
 8029382:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029384:	441e      	add	r6, r3
 8029386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029388:	3b01      	subs	r3, #1
 802938a:	9317      	str	r3, [sp, #92]	; 0x5c
 802938c:	e6c0      	b.n	8029110 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 802938e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8029390:	441c      	add	r4, r3
 8029392:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029394:	441e      	add	r6, r3
 8029396:	9b07      	ldr	r3, [sp, #28]
 8029398:	3b01      	subs	r3, #1
 802939a:	9307      	str	r3, [sp, #28]
 802939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802939e:	3302      	adds	r3, #2
 80293a0:	930a      	str	r3, [sp, #40]	; 0x28
 80293a2:	e695      	b.n	80290d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80293a4:	d024      	beq.n	80293f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80293a6:	9b07      	ldr	r3, [sp, #28]
 80293a8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80293aa:	3b01      	subs	r3, #1
 80293ac:	fb00 4003 	mla	r0, r0, r3, r4
 80293b0:	1400      	asrs	r0, r0, #16
 80293b2:	f53f aeaa 	bmi.w	802910a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80293b6:	3901      	subs	r1, #1
 80293b8:	4288      	cmp	r0, r1
 80293ba:	f6bf aea6 	bge.w	802910a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80293be:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80293c0:	fb01 6303 	mla	r3, r1, r3, r6
 80293c4:	141b      	asrs	r3, r3, #16
 80293c6:	f53f aea0 	bmi.w	802910a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80293ca:	3a01      	subs	r2, #1
 80293cc:	4293      	cmp	r3, r2
 80293ce:	f6bf ae9c 	bge.w	802910a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80293d2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80293d6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80293da:	f1bb 0f00 	cmp.w	fp, #0
 80293de:	f300 809a 	bgt.w	8029516 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80293e2:	9b07      	ldr	r3, [sp, #28]
 80293e4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80293e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80293ea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80293ee:	930a      	str	r3, [sp, #40]	; 0x28
 80293f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80293f2:	2b00      	cmp	r3, #0
 80293f4:	f340 81ec 	ble.w	80297d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80293f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80293fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80293fe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029402:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029406:	eef0 6a48 	vmov.f32	s13, s16
 802940a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802940e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029412:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029416:	ee16 4a90 	vmov	r4, s13
 802941a:	eef0 6a68 	vmov.f32	s13, s17
 802941e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029422:	ee16 6a90 	vmov	r6, s13
 8029426:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802942a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802942e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029432:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029436:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802943a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802943e:	ee18 2a10 	vmov	r2, s16
 8029442:	eeb0 8a47 	vmov.f32	s16, s14
 8029446:	fb92 f3f3 	sdiv	r3, r2, r3
 802944a:	ee18 2a90 	vmov	r2, s17
 802944e:	932f      	str	r3, [sp, #188]	; 0xbc
 8029450:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029452:	eef0 8a67 	vmov.f32	s17, s15
 8029456:	fb92 f3f3 	sdiv	r3, r2, r3
 802945a:	9330      	str	r3, [sp, #192]	; 0xc0
 802945c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802945e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029460:	3b01      	subs	r3, #1
 8029462:	9316      	str	r3, [sp, #88]	; 0x58
 8029464:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029466:	bf08      	it	eq
 8029468:	4613      	moveq	r3, r2
 802946a:	9307      	str	r3, [sp, #28]
 802946c:	e622      	b.n	80290b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 802946e:	2800      	cmp	r0, #0
 8029470:	f43f ae92 	beq.w	8029198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029474:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029478:	9308      	str	r3, [sp, #32]
 802947a:	0e1b      	lsrs	r3, r3, #24
 802947c:	9310      	str	r3, [sp, #64]	; 0x40
 802947e:	e68b      	b.n	8029198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029480:	8839      	ldrh	r1, [r7, #0]
 8029482:	43db      	mvns	r3, r3
 8029484:	4dd5      	ldr	r5, [pc, #852]	; (80297dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029486:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802948a:	fa5f f883 	uxtb.w	r8, r3
 802948e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029492:	10c8      	asrs	r0, r1, #3
 8029494:	00cb      	lsls	r3, r1, #3
 8029496:	fb0e fe08 	mul.w	lr, lr, r8
 802949a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802949e:	b2db      	uxtb	r3, r3
 80294a0:	f10e 0101 	add.w	r1, lr, #1
 80294a4:	fb00 f008 	mul.w	r0, r0, r8
 80294a8:	fb03 f308 	mul.w	r3, r3, r8
 80294ac:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80294b0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80294b4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80294b8:	f100 0e01 	add.w	lr, r0, #1
 80294bc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80294c0:	b2c9      	uxtb	r1, r1
 80294c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80294c6:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80294ca:	00d2      	lsls	r2, r2, #3
 80294cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80294d0:	430a      	orrs	r2, r1
 80294d2:	1c59      	adds	r1, r3, #1
 80294d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80294d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80294dc:	e748      	b.n	8029370 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80294de:	f112 0801 	adds.w	r8, r2, #1
 80294e2:	f53f af4b 	bmi.w	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80294e6:	4543      	cmp	r3, r8
 80294e8:	f6ff af48 	blt.w	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80294ec:	f11c 0801 	adds.w	r8, ip, #1
 80294f0:	f53f af44 	bmi.w	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80294f4:	45c6      	cmp	lr, r8
 80294f6:	f6ff af41 	blt.w	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80294fa:	b21b      	sxth	r3, r3
 80294fc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029500:	fa0f f28e 	sxth.w	r2, lr
 8029504:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029508:	9200      	str	r2, [sp, #0]
 802950a:	4639      	mov	r1, r7
 802950c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802950e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8029510:	f7ff fc54 	bl	8028dbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029514:	e732      	b.n	802937c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029516:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8029518:	1421      	asrs	r1, r4, #16
 802951a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802951c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029520:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029524:	1433      	asrs	r3, r6, #16
 8029526:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802952a:	fb07 1303 	mla	r3, r7, r3, r1
 802952e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029530:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029534:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029538:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802953c:	2a00      	cmp	r2, #0
 802953e:	f000 8108 	beq.w	8029752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8029542:	684d      	ldr	r5, [r1, #4]
 8029544:	950d      	str	r5, [sp, #52]	; 0x34
 8029546:	0e2d      	lsrs	r5, r5, #24
 8029548:	9514      	str	r5, [sp, #80]	; 0x50
 802954a:	b178      	cbz	r0, 802956c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 802954c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029550:	3f01      	subs	r7, #1
 8029552:	00bf      	lsls	r7, r7, #2
 8029554:	3704      	adds	r7, #4
 8029556:	eb01 0e07 	add.w	lr, r1, r7
 802955a:	59c9      	ldr	r1, [r1, r7]
 802955c:	9109      	str	r1, [sp, #36]	; 0x24
 802955e:	0e09      	lsrs	r1, r1, #24
 8029560:	9111      	str	r1, [sp, #68]	; 0x44
 8029562:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029566:	910e      	str	r1, [sp, #56]	; 0x38
 8029568:	0e09      	lsrs	r1, r1, #24
 802956a:	9115      	str	r1, [sp, #84]	; 0x54
 802956c:	b292      	uxth	r2, r2
 802956e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029570:	b280      	uxth	r0, r0
 8029572:	fb02 f900 	mul.w	r9, r2, r0
 8029576:	0112      	lsls	r2, r2, #4
 8029578:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802957c:	eba2 0e09 	sub.w	lr, r2, r9
 8029580:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029584:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029586:	b280      	uxth	r0, r0
 8029588:	fa1f fe8e 	uxth.w	lr, lr
 802958c:	1a09      	subs	r1, r1, r0
 802958e:	fb0e f202 	mul.w	r2, lr, r2
 8029592:	b289      	uxth	r1, r1
 8029594:	fb01 220c 	mla	r2, r1, ip, r2
 8029598:	fb00 2205 	mla	r2, r0, r5, r2
 802959c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802959e:	fb09 2205 	mla	r2, r9, r5, r2
 80295a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80295a6:	2a00      	cmp	r2, #0
 80295a8:	f000 80ca 	beq.w	8029740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80295ac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80295b0:	d019      	beq.n	80295e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 80295b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80295b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80295ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80295be:	fb0c fc03 	mul.w	ip, ip, r3
 80295c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80295c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80295ca:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80295ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80295d6:	4453      	add	r3, sl
 80295d8:	0a3f      	lsrs	r7, r7, #8
 80295da:	0a1b      	lsrs	r3, r3, #8
 80295dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80295e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295e4:	433b      	orrs	r3, r7
 80295e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80295e8:	2dff      	cmp	r5, #255	; 0xff
 80295ea:	d020      	beq.n	802962e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 80295ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80295ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80295f2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80295f4:	436f      	muls	r7, r5
 80295f6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80295f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80295fc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029600:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029602:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029606:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802960a:	fb05 fa0a 	mul.w	sl, r5, sl
 802960e:	44bc      	add	ip, r7
 8029610:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029618:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802961c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029620:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029624:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029628:	ea4c 050a 	orr.w	r5, ip, sl
 802962c:	950d      	str	r5, [sp, #52]	; 0x34
 802962e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029630:	2dff      	cmp	r5, #255	; 0xff
 8029632:	d020      	beq.n	8029676 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8029634:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029636:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802963a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802963c:	436f      	muls	r7, r5
 802963e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029640:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029644:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029646:	fb05 fa0c 	mul.w	sl, r5, ip
 802964a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802964e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029652:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029656:	44bc      	add	ip, r7
 8029658:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802965c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029660:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029664:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029668:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802966c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029670:	ea4c 050a 	orr.w	r5, ip, sl
 8029674:	9509      	str	r5, [sp, #36]	; 0x24
 8029676:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029678:	2dff      	cmp	r5, #255	; 0xff
 802967a:	d020      	beq.n	80296be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 802967c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802967e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029682:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029684:	436f      	muls	r7, r5
 8029686:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029688:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802968c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029690:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029692:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029696:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802969a:	fb05 fa0a 	mul.w	sl, r5, sl
 802969e:	44bc      	add	ip, r7
 80296a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80296a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80296a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80296ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80296b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80296b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80296b8:	ea4c 050a 	orr.w	r5, ip, sl
 80296bc:	950e      	str	r5, [sp, #56]	; 0x38
 80296be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80296c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80296c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80296c8:	2aff      	cmp	r2, #255	; 0xff
 80296ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80296ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80296d0:	fb0e f707 	mul.w	r7, lr, r7
 80296d4:	fb01 770c 	mla	r7, r1, ip, r7
 80296d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80296dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80296de:	fb00 770c 	mla	r7, r0, ip, r7
 80296e2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80296e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80296e8:	fb09 770c 	mla	r7, r9, ip, r7
 80296ec:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80296f0:	fb0e fe0c 	mul.w	lr, lr, ip
 80296f4:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80296f8:	fb01 e303 	mla	r3, r1, r3, lr
 80296fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80296fe:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029702:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029706:	990e      	ldr	r1, [sp, #56]	; 0x38
 8029708:	fb00 330a 	mla	r3, r0, sl, r3
 802970c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8029710:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029714:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029718:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802971c:	ea47 070c 	orr.w	r7, r7, ip
 8029720:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029724:	d11e      	bne.n	8029764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8029726:	097a      	lsrs	r2, r7, #5
 8029728:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802972c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029730:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029734:	f023 0307 	bic.w	r3, r3, #7
 8029738:	4313      	orrs	r3, r2
 802973a:	431f      	orrs	r7, r3
 802973c:	f8a8 7000 	strh.w	r7, [r8]
 8029740:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8029742:	f108 0802 	add.w	r8, r8, #2
 8029746:	f10b 3bff 	add.w	fp, fp, #4294967295
 802974a:	441c      	add	r4, r3
 802974c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802974e:	441e      	add	r6, r3
 8029750:	e643      	b.n	80293da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8029752:	2800      	cmp	r0, #0
 8029754:	f43f af0a 	beq.w	802956c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029758:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802975c:	9109      	str	r1, [sp, #36]	; 0x24
 802975e:	0e09      	lsrs	r1, r1, #24
 8029760:	9111      	str	r1, [sp, #68]	; 0x44
 8029762:	e703      	b.n	802956c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029764:	f8b8 1000 	ldrh.w	r1, [r8]
 8029768:	43d2      	mvns	r2, r2
 802976a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802976e:	fa5f fe82 	uxtb.w	lr, r2
 8029772:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029776:	10c8      	asrs	r0, r1, #3
 8029778:	00ca      	lsls	r2, r1, #3
 802977a:	fb0c fc0e 	mul.w	ip, ip, lr
 802977e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029782:	b2d2      	uxtb	r2, r2
 8029784:	f10c 0101 	add.w	r1, ip, #1
 8029788:	fb00 f00e 	mul.w	r0, r0, lr
 802978c:	fb02 f20e 	mul.w	r2, r2, lr
 8029790:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029794:	0c39      	lsrs	r1, r7, #16
 8029796:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802979a:	4910      	ldr	r1, [pc, #64]	; (80297dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 802979c:	fa5f fc8c 	uxtb.w	ip, ip
 80297a0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80297a4:	1c41      	adds	r1, r0, #1
 80297a6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80297aa:	1c51      	adds	r1, r2, #1
 80297ac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80297b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80297b4:	00c0      	lsls	r0, r0, #3
 80297b6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80297ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80297be:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80297c2:	ea4c 0c00 	orr.w	ip, ip, r0
 80297c6:	ea47 0c0c 	orr.w	ip, r7, ip
 80297ca:	f8a8 c000 	strh.w	ip, [r8]
 80297ce:	e7b7      	b.n	8029740 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80297d0:	b01b      	add	sp, #108	; 0x6c
 80297d2:	ecbd 8b08 	vpop	{d8-d11}
 80297d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297da:	bf00      	nop
 80297dc:	fffff800 	.word	0xfffff800

080297e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80297e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80297e4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80297e8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80297ec:	2c00      	cmp	r4, #0
 80297ee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80297f2:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80297f6:	fb04 ce03 	mla	lr, r4, r3, ip
 80297fa:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80297fe:	db60      	blt.n	80298c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029800:	45a1      	cmp	r9, r4
 8029802:	dd5e      	ble.n	80298c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029804:	f1bc 0f00 	cmp.w	ip, #0
 8029808:	db59      	blt.n	80298be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802980a:	45e0      	cmp	r8, ip
 802980c:	dd57      	ble.n	80298be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 802980e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029812:	f01e 0f01 	tst.w	lr, #1
 8029816:	5c16      	ldrb	r6, [r2, r0]
 8029818:	bf0c      	ite	eq
 802981a:	f006 060f 	andeq.w	r6, r6, #15
 802981e:	1136      	asrne	r6, r6, #4
 8029820:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029824:	b2f6      	uxtb	r6, r6
 8029826:	f11c 0001 	adds.w	r0, ip, #1
 802982a:	d44d      	bmi.n	80298c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 802982c:	4580      	cmp	r8, r0
 802982e:	dd4b      	ble.n	80298c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029830:	2d00      	cmp	r5, #0
 8029832:	d04b      	beq.n	80298cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029834:	f10e 0a01 	add.w	sl, lr, #1
 8029838:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802983c:	f01a 0f01 	tst.w	sl, #1
 8029840:	5c10      	ldrb	r0, [r2, r0]
 8029842:	bf0c      	ite	eq
 8029844:	f000 000f 	andeq.w	r0, r0, #15
 8029848:	1100      	asrne	r0, r0, #4
 802984a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802984e:	b2c0      	uxtb	r0, r0
 8029850:	3401      	adds	r4, #1
 8029852:	d43f      	bmi.n	80298d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029854:	45a1      	cmp	r9, r4
 8029856:	dd3d      	ble.n	80298d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029858:	2f00      	cmp	r7, #0
 802985a:	f000 80a8 	beq.w	80299ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 802985e:	f1bc 0f00 	cmp.w	ip, #0
 8029862:	db35      	blt.n	80298d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029864:	45e0      	cmp	r8, ip
 8029866:	dd33      	ble.n	80298d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029868:	eb03 090e 	add.w	r9, r3, lr
 802986c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029870:	f019 0f01 	tst.w	r9, #1
 8029874:	5d14      	ldrb	r4, [r2, r4]
 8029876:	bf0c      	ite	eq
 8029878:	f004 040f 	andeq.w	r4, r4, #15
 802987c:	1124      	asrne	r4, r4, #4
 802987e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029882:	b2e4      	uxtb	r4, r4
 8029884:	f11c 0c01 	adds.w	ip, ip, #1
 8029888:	d427      	bmi.n	80298da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802988a:	45e0      	cmp	r8, ip
 802988c:	dd25      	ble.n	80298da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 802988e:	b335      	cbz	r5, 80298de <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029890:	3301      	adds	r3, #1
 8029892:	449e      	add	lr, r3
 8029894:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029898:	f01e 0f01 	tst.w	lr, #1
 802989c:	5cd2      	ldrb	r2, [r2, r3]
 802989e:	bf0c      	ite	eq
 80298a0:	f002 020f 	andeq.w	r2, r2, #15
 80298a4:	1112      	asrne	r2, r2, #4
 80298a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80298aa:	b2d3      	uxtb	r3, r2
 80298ac:	2d0f      	cmp	r5, #15
 80298ae:	d917      	bls.n	80298e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 80298b0:	4b42      	ldr	r3, [pc, #264]	; (80299bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 80298b2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80298b6:	4a42      	ldr	r2, [pc, #264]	; (80299c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 80298b8:	4842      	ldr	r0, [pc, #264]	; (80299c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 80298ba:	f001 f80b 	bl	802a8d4 <__assert_func>
 80298be:	2600      	movs	r6, #0
 80298c0:	e7b1      	b.n	8029826 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 80298c2:	2000      	movs	r0, #0
 80298c4:	4606      	mov	r6, r0
 80298c6:	e7c3      	b.n	8029850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80298c8:	2000      	movs	r0, #0
 80298ca:	e7c1      	b.n	8029850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80298cc:	4628      	mov	r0, r5
 80298ce:	e7bf      	b.n	8029850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 80298d0:	2400      	movs	r4, #0
 80298d2:	e7d7      	b.n	8029884 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 80298d4:	2300      	movs	r3, #0
 80298d6:	461c      	mov	r4, r3
 80298d8:	e7e8      	b.n	80298ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80298da:	2300      	movs	r3, #0
 80298dc:	e7e6      	b.n	80298ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 80298de:	462b      	mov	r3, r5
 80298e0:	2f0f      	cmp	r7, #15
 80298e2:	d8e5      	bhi.n	80298b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80298e4:	b2ad      	uxth	r5, r5
 80298e6:	b2bf      	uxth	r7, r7
 80298e8:	fb05 fc07 	mul.w	ip, r5, r7
 80298ec:	012d      	lsls	r5, r5, #4
 80298ee:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80298f2:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80298f6:	eba5 050c 	sub.w	r5, r5, ip
 80298fa:	b2bf      	uxth	r7, r7
 80298fc:	b2ad      	uxth	r5, r5
 80298fe:	1bd2      	subs	r2, r2, r7
 8029900:	4368      	muls	r0, r5
 8029902:	b292      	uxth	r2, r2
 8029904:	fb06 0002 	mla	r0, r6, r2, r0
 8029908:	fb07 0404 	mla	r4, r7, r4, r0
 802990c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029910:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029914:	b1b3      	cbz	r3, 8029944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029916:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802991a:	435a      	muls	r2, r3
 802991c:	1c53      	adds	r3, r2, #1
 802991e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029922:	4a29      	ldr	r2, [pc, #164]	; (80299c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029924:	121b      	asrs	r3, r3, #8
 8029926:	6812      	ldr	r2, [r2, #0]
 8029928:	2bff      	cmp	r3, #255	; 0xff
 802992a:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802992e:	d10b      	bne.n	8029948 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029930:	0950      	lsrs	r0, r2, #5
 8029932:	4b26      	ldr	r3, [pc, #152]	; (80299cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029934:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029938:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802993c:	4033      	ands	r3, r6
 802993e:	4318      	orrs	r0, r3
 8029940:	4302      	orrs	r2, r0
 8029942:	800a      	strh	r2, [r1, #0]
 8029944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029948:	880d      	ldrh	r5, [r1, #0]
 802994a:	b29f      	uxth	r7, r3
 802994c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029950:	43db      	mvns	r3, r3
 8029952:	122c      	asrs	r4, r5, #8
 8029954:	fb10 f007 	smulbb	r0, r0, r7
 8029958:	b2db      	uxtb	r3, r3
 802995a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802995e:	b2f6      	uxtb	r6, r6
 8029960:	b2d2      	uxtb	r2, r2
 8029962:	fb04 0403 	mla	r4, r4, r3, r0
 8029966:	10e8      	asrs	r0, r5, #3
 8029968:	fb12 f207 	smulbb	r2, r2, r7
 802996c:	00ed      	lsls	r5, r5, #3
 802996e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029972:	b2a4      	uxth	r4, r4
 8029974:	fb16 f607 	smulbb	r6, r6, r7
 8029978:	b2ed      	uxtb	r5, r5
 802997a:	fb00 6603 	mla	r6, r0, r3, r6
 802997e:	fb05 2303 	mla	r3, r5, r3, r2
 8029982:	b2b0      	uxth	r0, r6
 8029984:	b29a      	uxth	r2, r3
 8029986:	1c63      	adds	r3, r4, #1
 8029988:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802998c:	1c53      	adds	r3, r2, #1
 802998e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029992:	1c42      	adds	r2, r0, #1
 8029994:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029998:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802999c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80299a0:	0940      	lsrs	r0, r0, #5
 80299a2:	4323      	orrs	r3, r4
 80299a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80299a8:	4303      	orrs	r3, r0
 80299aa:	800b      	strh	r3, [r1, #0]
 80299ac:	e7ca      	b.n	8029944 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80299ae:	2d0f      	cmp	r5, #15
 80299b0:	f63f af7e 	bhi.w	80298b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80299b4:	463b      	mov	r3, r7
 80299b6:	463c      	mov	r4, r7
 80299b8:	e794      	b.n	80298e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80299ba:	bf00      	nop
 80299bc:	0802fb1d 	.word	0x0802fb1d
 80299c0:	080300ea 	.word	0x080300ea
 80299c4:	0802fba1 	.word	0x0802fba1
 80299c8:	2400b8cc 	.word	0x2400b8cc
 80299cc:	00fff800 	.word	0x00fff800

080299d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80299d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299d4:	ed2d 8b08 	vpush	{d8-d11}
 80299d8:	b097      	sub	sp, #92	; 0x5c
 80299da:	eeb0 aa40 	vmov.f32	s20, s0
 80299de:	eef0 9a60 	vmov.f32	s19, s1
 80299e2:	9214      	str	r2, [sp, #80]	; 0x50
 80299e4:	eeb0 9a41 	vmov.f32	s18, s2
 80299e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80299ea:	eeb0 8a62 	vmov.f32	s16, s5
 80299ee:	9309      	str	r3, [sp, #36]	; 0x24
 80299f0:	eef0 8a43 	vmov.f32	s17, s6
 80299f4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80299f8:	eef0 ba44 	vmov.f32	s23, s8
 80299fc:	9015      	str	r0, [sp, #84]	; 0x54
 80299fe:	eeb0 ba64 	vmov.f32	s22, s9
 8029a02:	6850      	ldr	r0, [r2, #4]
 8029a04:	eef0 aa45 	vmov.f32	s21, s10
 8029a08:	910d      	str	r1, [sp, #52]	; 0x34
 8029a0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8029a0c:	6812      	ldr	r2, [r2, #0]
 8029a0e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8029a12:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8029a16:	fb00 1303 	mla	r3, r0, r3, r1
 8029a1a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029a1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029a20:	689b      	ldr	r3, [r3, #8]
 8029a22:	3301      	adds	r3, #1
 8029a24:	f023 0301 	bic.w	r3, r3, #1
 8029a28:	930a      	str	r3, [sp, #40]	; 0x28
 8029a2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029a2c:	681f      	ldr	r7, [r3, #0]
 8029a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029a30:	2b00      	cmp	r3, #0
 8029a32:	dc03      	bgt.n	8029a3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029a34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029a36:	2b00      	cmp	r3, #0
 8029a38:	f340 8289 	ble.w	8029f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029a3c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029a3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029a42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029a46:	1e48      	subs	r0, r1, #1
 8029a48:	f102 3cff 	add.w	ip, r2, #4294967295
 8029a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	f340 80c5 	ble.w	8029bde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029a54:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029a58:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029a5c:	d406      	bmi.n	8029a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029a5e:	4586      	cmp	lr, r0
 8029a60:	da04      	bge.n	8029a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029a62:	2b00      	cmp	r3, #0
 8029a64:	db02      	blt.n	8029a6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029a66:	4563      	cmp	r3, ip
 8029a68:	f2c0 80ba 	blt.w	8029be0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8029a6c:	f11e 0e01 	adds.w	lr, lr, #1
 8029a70:	f100 80ab 	bmi.w	8029bca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029a74:	4571      	cmp	r1, lr
 8029a76:	f2c0 80a8 	blt.w	8029bca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029a7a:	3301      	adds	r3, #1
 8029a7c:	f100 80a5 	bmi.w	8029bca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029a80:	429a      	cmp	r2, r3
 8029a82:	f2c0 80a2 	blt.w	8029bca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a88:	46c8      	mov	r8, r9
 8029a8a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8029a8e:	930e      	str	r3, [sp, #56]	; 0x38
 8029a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029a92:	2b00      	cmp	r3, #0
 8029a94:	f340 80c4 	ble.w	8029c20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8029a98:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029a9a:	1430      	asrs	r0, r6, #16
 8029a9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029aa0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029aa4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029aa8:	1423      	asrs	r3, r4, #16
 8029aaa:	f100 814f 	bmi.w	8029d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029aae:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029ab2:	455b      	cmp	r3, fp
 8029ab4:	f280 814a 	bge.w	8029d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029ab8:	2800      	cmp	r0, #0
 8029aba:	f2c0 8147 	blt.w	8029d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029abe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029ac2:	4558      	cmp	r0, fp
 8029ac4:	f280 8142 	bge.w	8029d4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029ac8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029aca:	fb00 3305 	mla	r3, r0, r5, r3
 8029ace:	0858      	lsrs	r0, r3, #1
 8029ad0:	07dd      	lsls	r5, r3, #31
 8029ad2:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029ad6:	bf54      	ite	pl
 8029ad8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029adc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029ae0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029ae4:	fa5f fc8c 	uxtb.w	ip, ip
 8029ae8:	2a00      	cmp	r2, #0
 8029aea:	f000 80dd 	beq.w	8029ca8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8029aee:	1c58      	adds	r0, r3, #1
 8029af0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029af4:	07c0      	lsls	r0, r0, #31
 8029af6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029afa:	bf54      	ite	pl
 8029afc:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029b00:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029b04:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029b08:	fa5f f08e 	uxtb.w	r0, lr
 8029b0c:	9010      	str	r0, [sp, #64]	; 0x40
 8029b0e:	b1d9      	cbz	r1, 8029b48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029b10:	4453      	add	r3, sl
 8029b12:	0858      	lsrs	r0, r3, #1
 8029b14:	07dd      	lsls	r5, r3, #31
 8029b16:	f103 0301 	add.w	r3, r3, #1
 8029b1a:	5c38      	ldrb	r0, [r7, r0]
 8029b1c:	bf54      	ite	pl
 8029b1e:	f000 000f 	andpl.w	r0, r0, #15
 8029b22:	1100      	asrmi	r0, r0, #4
 8029b24:	07dd      	lsls	r5, r3, #31
 8029b26:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029b2a:	b2c0      	uxtb	r0, r0
 8029b2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8029b2e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029b32:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029b36:	bf54      	ite	pl
 8029b38:	f00e 030f 	andpl.w	r3, lr, #15
 8029b3c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029b40:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029b44:	b2db      	uxtb	r3, r3
 8029b46:	9311      	str	r3, [sp, #68]	; 0x44
 8029b48:	b292      	uxth	r2, r2
 8029b4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029b4c:	b289      	uxth	r1, r1
 8029b4e:	fb02 f301 	mul.w	r3, r2, r1
 8029b52:	0112      	lsls	r2, r2, #4
 8029b54:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029b58:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029b5c:	1ad2      	subs	r2, r2, r3
 8029b5e:	b289      	uxth	r1, r1
 8029b60:	b292      	uxth	r2, r2
 8029b62:	1a40      	subs	r0, r0, r1
 8029b64:	436a      	muls	r2, r5
 8029b66:	b280      	uxth	r0, r0
 8029b68:	fb0c 2c00 	mla	ip, ip, r0, r2
 8029b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029b6e:	fb01 c102 	mla	r1, r1, r2, ip
 8029b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029b74:	fb03 1302 	mla	r3, r3, r2, r1
 8029b78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029b7c:	b1db      	cbz	r3, 8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029b7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029b80:	4353      	muls	r3, r2
 8029b82:	1c5a      	adds	r2, r3, #1
 8029b84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029b88:	4ac6      	ldr	r2, [pc, #792]	; (8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029b8a:	121b      	asrs	r3, r3, #8
 8029b8c:	6812      	ldr	r2, [r2, #0]
 8029b8e:	2bff      	cmp	r3, #255	; 0xff
 8029b90:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029b94:	f040 8099 	bne.w	8029cca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029b98:	0953      	lsrs	r3, r2, #5
 8029b9a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029b9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029ba2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029ba6:	f02c 0c07 	bic.w	ip, ip, #7
 8029baa:	ea43 0c0c 	orr.w	ip, r3, ip
 8029bae:	ea4c 0202 	orr.w	r2, ip, r2
 8029bb2:	f8a8 2000 	strh.w	r2, [r8]
 8029bb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029bb8:	f108 0802 	add.w	r8, r8, #2
 8029bbc:	441c      	add	r4, r3
 8029bbe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029bc0:	441e      	add	r6, r3
 8029bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029bc4:	3b01      	subs	r3, #1
 8029bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8029bc8:	e762      	b.n	8029a90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 8029bca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029bcc:	f109 0902 	add.w	r9, r9, #2
 8029bd0:	441c      	add	r4, r3
 8029bd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029bd4:	441e      	add	r6, r3
 8029bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029bd8:	3b01      	subs	r3, #1
 8029bda:	9309      	str	r3, [sp, #36]	; 0x24
 8029bdc:	e736      	b.n	8029a4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029bde:	d024      	beq.n	8029c2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8029be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029be2:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029be4:	3b01      	subs	r3, #1
 8029be6:	fb00 4003 	mla	r0, r0, r3, r4
 8029bea:	1400      	asrs	r0, r0, #16
 8029bec:	f53f af4b 	bmi.w	8029a86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029bf0:	3901      	subs	r1, #1
 8029bf2:	4288      	cmp	r0, r1
 8029bf4:	f6bf af47 	bge.w	8029a86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029bf8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029bfa:	fb01 6303 	mla	r3, r1, r3, r6
 8029bfe:	141b      	asrs	r3, r3, #16
 8029c00:	f53f af41 	bmi.w	8029a86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c04:	3a01      	subs	r2, #1
 8029c06:	4293      	cmp	r3, r2
 8029c08:	f6bf af3d 	bge.w	8029a86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029c0c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029c10:	46c8      	mov	r8, r9
 8029c12:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029c16:	930e      	str	r3, [sp, #56]	; 0x38
 8029c18:	f1bb 0f00 	cmp.w	fp, #0
 8029c1c:	f300 80b7 	bgt.w	8029d8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8029c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029c22:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029c26:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029c2c:	2b00      	cmp	r3, #0
 8029c2e:	f340 818e 	ble.w	8029f4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029c36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029c38:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029c3c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029c40:	eef0 6a48 	vmov.f32	s13, s16
 8029c44:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029c48:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029c4c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029c50:	ee16 4a90 	vmov	r4, s13
 8029c54:	eef0 6a68 	vmov.f32	s13, s17
 8029c58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029c5c:	ee16 6a90 	vmov	r6, s13
 8029c60:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029c64:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029c68:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029c6c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029c70:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029c74:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029c78:	ee18 2a10 	vmov	r2, s16
 8029c7c:	eeb0 8a47 	vmov.f32	s16, s14
 8029c80:	fb92 f3f3 	sdiv	r3, r2, r3
 8029c84:	ee18 2a90 	vmov	r2, s17
 8029c88:	932b      	str	r3, [sp, #172]	; 0xac
 8029c8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029c8c:	eef0 8a67 	vmov.f32	s17, s15
 8029c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8029c94:	932c      	str	r3, [sp, #176]	; 0xb0
 8029c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029c9a:	3b01      	subs	r3, #1
 8029c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8029c9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ca0:	bf08      	it	eq
 8029ca2:	4613      	moveq	r3, r2
 8029ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8029ca6:	e6c2      	b.n	8029a2e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8029ca8:	2900      	cmp	r1, #0
 8029caa:	f43f af4d 	beq.w	8029b48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029cae:	eb0a 0003 	add.w	r0, sl, r3
 8029cb2:	0843      	lsrs	r3, r0, #1
 8029cb4:	07c0      	lsls	r0, r0, #31
 8029cb6:	5cfb      	ldrb	r3, [r7, r3]
 8029cb8:	bf54      	ite	pl
 8029cba:	f003 030f 	andpl.w	r3, r3, #15
 8029cbe:	111b      	asrmi	r3, r3, #4
 8029cc0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029cc4:	b2db      	uxtb	r3, r3
 8029cc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8029cc8:	e73e      	b.n	8029b48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029cca:	f8b8 e000 	ldrh.w	lr, [r8]
 8029cce:	fa1f fb83 	uxth.w	fp, r3
 8029cd2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029cd6:	43db      	mvns	r3, r3
 8029cd8:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029cdc:	fb11 f10b 	smulbb	r1, r1, fp
 8029ce0:	b2db      	uxtb	r3, r3
 8029ce2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029ce6:	fa5f fc8c 	uxtb.w	ip, ip
 8029cea:	b2d2      	uxtb	r2, r2
 8029cec:	fb00 1003 	mla	r0, r0, r3, r1
 8029cf0:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029cf4:	fb1c fc0b 	smulbb	ip, ip, fp
 8029cf8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029cfc:	b280      	uxth	r0, r0
 8029cfe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029d02:	fb12 fb0b 	smulbb	fp, r2, fp
 8029d06:	fa5f fe8e 	uxtb.w	lr, lr
 8029d0a:	fb01 cc03 	mla	ip, r1, r3, ip
 8029d0e:	fb0e bb03 	mla	fp, lr, r3, fp
 8029d12:	1c43      	adds	r3, r0, #1
 8029d14:	fa1f fc8c 	uxth.w	ip, ip
 8029d18:	fa1f fb8b 	uxth.w	fp, fp
 8029d1c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029d20:	f10c 0101 	add.w	r1, ip, #1
 8029d24:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029d28:	f10b 0001 	add.w	r0, fp, #1
 8029d2c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029d30:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029d34:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029d38:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8029d3c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029d40:	4318      	orrs	r0, r3
 8029d42:	ea40 000c 	orr.w	r0, r0, ip
 8029d46:	f8a8 0000 	strh.w	r0, [r8]
 8029d4a:	e734      	b.n	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d4c:	f113 0b01 	adds.w	fp, r3, #1
 8029d50:	f53f af31 	bmi.w	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d54:	45dc      	cmp	ip, fp
 8029d56:	f6ff af2e 	blt.w	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d5a:	f110 0b01 	adds.w	fp, r0, #1
 8029d5e:	f53f af2a 	bmi.w	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d62:	45de      	cmp	lr, fp
 8029d64:	f6ff af27 	blt.w	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d68:	9302      	str	r3, [sp, #8]
 8029d6a:	fa0f f38e 	sxth.w	r3, lr
 8029d6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d70:	9301      	str	r3, [sp, #4]
 8029d72:	fa0f f38c 	sxth.w	r3, ip
 8029d76:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029d7a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8029d7e:	9300      	str	r3, [sp, #0]
 8029d80:	463a      	mov	r2, r7
 8029d82:	4653      	mov	r3, sl
 8029d84:	4641      	mov	r1, r8
 8029d86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029d88:	f7ff fd2a 	bl	80297e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8029d8c:	e713      	b.n	8029bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029d8e:	1422      	asrs	r2, r4, #16
 8029d90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8029d92:	1433      	asrs	r3, r6, #16
 8029d94:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029d98:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029d9c:	fb05 2303 	mla	r3, r5, r3, r2
 8029da0:	085a      	lsrs	r2, r3, #1
 8029da2:	07dd      	lsls	r5, r3, #31
 8029da4:	5cba      	ldrb	r2, [r7, r2]
 8029da6:	bf54      	ite	pl
 8029da8:	f002 020f 	andpl.w	r2, r2, #15
 8029dac:	1112      	asrmi	r2, r2, #4
 8029dae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029db2:	b2d2      	uxtb	r2, r2
 8029db4:	2900      	cmp	r1, #0
 8029db6:	d077      	beq.n	8029ea8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029db8:	f103 0e01 	add.w	lr, r3, #1
 8029dbc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029dc0:	f01e 0f01 	tst.w	lr, #1
 8029dc4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029dc8:	bf0c      	ite	eq
 8029dca:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029dce:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029dd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029dd6:	fa5f f58c 	uxtb.w	r5, ip
 8029dda:	9512      	str	r5, [sp, #72]	; 0x48
 8029ddc:	b308      	cbz	r0, 8029e22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029dde:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029de0:	442b      	add	r3, r5
 8029de2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029de6:	07dd      	lsls	r5, r3, #31
 8029de8:	f103 0301 	add.w	r3, r3, #1
 8029dec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029df0:	bf54      	ite	pl
 8029df2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029df6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029dfa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029dfe:	fa5f f58c 	uxtb.w	r5, ip
 8029e02:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029e06:	950c      	str	r5, [sp, #48]	; 0x30
 8029e08:	07dd      	lsls	r5, r3, #31
 8029e0a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029e0e:	bf54      	ite	pl
 8029e10:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029e14:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029e18:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029e1c:	fa5f f38c 	uxtb.w	r3, ip
 8029e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8029e22:	b289      	uxth	r1, r1
 8029e24:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029e26:	b280      	uxth	r0, r0
 8029e28:	fb01 f300 	mul.w	r3, r1, r0
 8029e2c:	0109      	lsls	r1, r1, #4
 8029e2e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029e32:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029e36:	1ac9      	subs	r1, r1, r3
 8029e38:	b280      	uxth	r0, r0
 8029e3a:	b289      	uxth	r1, r1
 8029e3c:	ebac 0c00 	sub.w	ip, ip, r0
 8029e40:	4369      	muls	r1, r5
 8029e42:	fa1f fc8c 	uxth.w	ip, ip
 8029e46:	fb02 120c 	mla	r2, r2, ip, r1
 8029e4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029e4c:	fb00 2001 	mla	r0, r0, r1, r2
 8029e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029e52:	fb03 0302 	mla	r3, r3, r2, r0
 8029e56:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029e5a:	b1d3      	cbz	r3, 8029e92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029e5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029e5e:	4353      	muls	r3, r2
 8029e60:	1c5a      	adds	r2, r3, #1
 8029e62:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029e66:	4a0f      	ldr	r2, [pc, #60]	; (8029ea4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029e68:	121b      	asrs	r3, r3, #8
 8029e6a:	6812      	ldr	r2, [r2, #0]
 8029e6c:	2bff      	cmp	r3, #255	; 0xff
 8029e6e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029e72:	d12d      	bne.n	8029ed0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8029e74:	0953      	lsrs	r3, r2, #5
 8029e76:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8029e7a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029e7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029e82:	f02c 0c07 	bic.w	ip, ip, #7
 8029e86:	ea43 0c0c 	orr.w	ip, r3, ip
 8029e8a:	ea4c 0202 	orr.w	r2, ip, r2
 8029e8e:	f8a8 2000 	strh.w	r2, [r8]
 8029e92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029e94:	f108 0802 	add.w	r8, r8, #2
 8029e98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029e9c:	441c      	add	r4, r3
 8029e9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029ea0:	441e      	add	r6, r3
 8029ea2:	e6b9      	b.n	8029c18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8029ea4:	2400b8cc 	.word	0x2400b8cc
 8029ea8:	2800      	cmp	r0, #0
 8029eaa:	d0ba      	beq.n	8029e22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029eac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029eae:	442b      	add	r3, r5
 8029eb0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029eb4:	07db      	lsls	r3, r3, #31
 8029eb6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029eba:	bf54      	ite	pl
 8029ebc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029ec0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029ec4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029ec8:	fa5f f38c 	uxtb.w	r3, ip
 8029ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8029ece:	e7a8      	b.n	8029e22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029ed0:	f8b8 e000 	ldrh.w	lr, [r8]
 8029ed4:	fa1f fa83 	uxth.w	sl, r3
 8029ed8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029edc:	43db      	mvns	r3, r3
 8029ede:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029ee2:	fb11 f10a 	smulbb	r1, r1, sl
 8029ee6:	b2db      	uxtb	r3, r3
 8029ee8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029eec:	b2d2      	uxtb	r2, r2
 8029eee:	fa5f fc8c 	uxtb.w	ip, ip
 8029ef2:	fb00 1003 	mla	r0, r0, r3, r1
 8029ef6:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029efa:	fb12 f20a 	smulbb	r2, r2, sl
 8029efe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029f02:	b280      	uxth	r0, r0
 8029f04:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029f08:	fb1c fc0a 	smulbb	ip, ip, sl
 8029f0c:	fa5f fe8e 	uxtb.w	lr, lr
 8029f10:	fb0e 2203 	mla	r2, lr, r3, r2
 8029f14:	fb01 cc03 	mla	ip, r1, r3, ip
 8029f18:	1c43      	adds	r3, r0, #1
 8029f1a:	b292      	uxth	r2, r2
 8029f1c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029f20:	1c51      	adds	r1, r2, #1
 8029f22:	fa1f fc8c 	uxth.w	ip, ip
 8029f26:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029f2a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8029f2e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029f32:	4308      	orrs	r0, r1
 8029f34:	f10c 0101 	add.w	r1, ip, #1
 8029f38:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029f3c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029f40:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029f44:	ea40 000c 	orr.w	r0, r0, ip
 8029f48:	f8a8 0000 	strh.w	r0, [r8]
 8029f4c:	e7a1      	b.n	8029e92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029f4e:	b017      	add	sp, #92	; 0x5c
 8029f50:	ecbd 8b08 	vpop	{d8-d11}
 8029f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029f58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029f5c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029f60:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029f64:	2c00      	cmp	r4, #0
 8029f66:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029f6a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029f6e:	fb04 ce03 	mla	lr, r4, r3, ip
 8029f72:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029f76:	db60      	blt.n	802a03a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029f78:	45a1      	cmp	r9, r4
 8029f7a:	dd5e      	ble.n	802a03a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029f7c:	f1bc 0f00 	cmp.w	ip, #0
 8029f80:	db59      	blt.n	802a036 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029f82:	45e0      	cmp	r8, ip
 8029f84:	dd57      	ble.n	802a036 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029f86:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029f8a:	f01e 0f01 	tst.w	lr, #1
 8029f8e:	5c16      	ldrb	r6, [r2, r0]
 8029f90:	bf0c      	ite	eq
 8029f92:	f006 060f 	andeq.w	r6, r6, #15
 8029f96:	1136      	asrne	r6, r6, #4
 8029f98:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029f9c:	b2f6      	uxtb	r6, r6
 8029f9e:	f11c 0001 	adds.w	r0, ip, #1
 8029fa2:	d44d      	bmi.n	802a040 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8029fa4:	4580      	cmp	r8, r0
 8029fa6:	dd4b      	ble.n	802a040 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 8029fa8:	2d00      	cmp	r5, #0
 8029faa:	d04b      	beq.n	802a044 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 8029fac:	f10e 0a01 	add.w	sl, lr, #1
 8029fb0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029fb4:	f01a 0f01 	tst.w	sl, #1
 8029fb8:	5c10      	ldrb	r0, [r2, r0]
 8029fba:	bf0c      	ite	eq
 8029fbc:	f000 000f 	andeq.w	r0, r0, #15
 8029fc0:	1100      	asrne	r0, r0, #4
 8029fc2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029fc6:	b2c0      	uxtb	r0, r0
 8029fc8:	3401      	adds	r4, #1
 8029fca:	d43f      	bmi.n	802a04c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029fcc:	45a1      	cmp	r9, r4
 8029fce:	dd3d      	ble.n	802a04c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029fd0:	2f00      	cmp	r7, #0
 8029fd2:	f000 8093 	beq.w	802a0fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8029fd6:	f1bc 0f00 	cmp.w	ip, #0
 8029fda:	db35      	blt.n	802a048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029fdc:	45e0      	cmp	r8, ip
 8029fde:	dd33      	ble.n	802a048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029fe0:	eb03 090e 	add.w	r9, r3, lr
 8029fe4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029fe8:	f019 0f01 	tst.w	r9, #1
 8029fec:	5d14      	ldrb	r4, [r2, r4]
 8029fee:	bf0c      	ite	eq
 8029ff0:	f004 040f 	andeq.w	r4, r4, #15
 8029ff4:	1124      	asrne	r4, r4, #4
 8029ff6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029ffa:	b2e4      	uxtb	r4, r4
 8029ffc:	f11c 0c01 	adds.w	ip, ip, #1
 802a000:	d427      	bmi.n	802a052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a002:	45e0      	cmp	r8, ip
 802a004:	dd25      	ble.n	802a052 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a006:	b335      	cbz	r5, 802a056 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802a008:	3301      	adds	r3, #1
 802a00a:	449e      	add	lr, r3
 802a00c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a010:	f01e 0f01 	tst.w	lr, #1
 802a014:	5cd2      	ldrb	r2, [r2, r3]
 802a016:	bf0c      	ite	eq
 802a018:	f002 020f 	andeq.w	r2, r2, #15
 802a01c:	1112      	asrne	r2, r2, #4
 802a01e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a022:	b2d3      	uxtb	r3, r2
 802a024:	2d0f      	cmp	r5, #15
 802a026:	d917      	bls.n	802a058 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802a028:	4b37      	ldr	r3, [pc, #220]	; (802a108 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802a02a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a02e:	4a37      	ldr	r2, [pc, #220]	; (802a10c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802a030:	4837      	ldr	r0, [pc, #220]	; (802a110 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802a032:	f000 fc4f 	bl	802a8d4 <__assert_func>
 802a036:	2600      	movs	r6, #0
 802a038:	e7b1      	b.n	8029f9e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802a03a:	2000      	movs	r0, #0
 802a03c:	4606      	mov	r6, r0
 802a03e:	e7c3      	b.n	8029fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a040:	2000      	movs	r0, #0
 802a042:	e7c1      	b.n	8029fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a044:	4628      	mov	r0, r5
 802a046:	e7bf      	b.n	8029fc8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a048:	2400      	movs	r4, #0
 802a04a:	e7d7      	b.n	8029ffc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802a04c:	2300      	movs	r3, #0
 802a04e:	461c      	mov	r4, r3
 802a050:	e7e8      	b.n	802a024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a052:	2300      	movs	r3, #0
 802a054:	e7e6      	b.n	802a024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a056:	462b      	mov	r3, r5
 802a058:	2f0f      	cmp	r7, #15
 802a05a:	d8e5      	bhi.n	802a028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a05c:	b2ad      	uxth	r5, r5
 802a05e:	b2bf      	uxth	r7, r7
 802a060:	fb05 fc07 	mul.w	ip, r5, r7
 802a064:	012d      	lsls	r5, r5, #4
 802a066:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a06a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802a06e:	eba5 050c 	sub.w	r5, r5, ip
 802a072:	b2bf      	uxth	r7, r7
 802a074:	b2ad      	uxth	r5, r5
 802a076:	1bd2      	subs	r2, r2, r7
 802a078:	4368      	muls	r0, r5
 802a07a:	b292      	uxth	r2, r2
 802a07c:	fb06 0002 	mla	r0, r6, r2, r0
 802a080:	fb07 0404 	mla	r4, r7, r4, r0
 802a084:	fb0c 4303 	mla	r3, ip, r3, r4
 802a088:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a08c:	b3a3      	cbz	r3, 802a0f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a08e:	4a21      	ldr	r2, [pc, #132]	; (802a114 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802a090:	880e      	ldrh	r6, [r1, #0]
 802a092:	6815      	ldr	r5, [r2, #0]
 802a094:	b29a      	uxth	r2, r3
 802a096:	1234      	asrs	r4, r6, #8
 802a098:	43db      	mvns	r3, r3
 802a09a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a09e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a0a2:	b2db      	uxtb	r3, r3
 802a0a4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a0a8:	fb10 f002 	smulbb	r0, r0, r2
 802a0ac:	b2ed      	uxtb	r5, r5
 802a0ae:	fb17 f702 	smulbb	r7, r7, r2
 802a0b2:	fb04 0403 	mla	r4, r4, r3, r0
 802a0b6:	10f0      	asrs	r0, r6, #3
 802a0b8:	fb15 f202 	smulbb	r2, r5, r2
 802a0bc:	00f6      	lsls	r6, r6, #3
 802a0be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a0c2:	b2a4      	uxth	r4, r4
 802a0c4:	b2f6      	uxtb	r6, r6
 802a0c6:	fb00 7003 	mla	r0, r0, r3, r7
 802a0ca:	fb06 2303 	mla	r3, r6, r3, r2
 802a0ce:	b280      	uxth	r0, r0
 802a0d0:	b29a      	uxth	r2, r3
 802a0d2:	1c63      	adds	r3, r4, #1
 802a0d4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a0d8:	1c53      	adds	r3, r2, #1
 802a0da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a0de:	1c42      	adds	r2, r0, #1
 802a0e0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a0e4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a0e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a0ec:	0940      	lsrs	r0, r0, #5
 802a0ee:	4323      	orrs	r3, r4
 802a0f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a0f4:	4303      	orrs	r3, r0
 802a0f6:	800b      	strh	r3, [r1, #0]
 802a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a0fc:	2d0f      	cmp	r5, #15
 802a0fe:	d893      	bhi.n	802a028 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a100:	463b      	mov	r3, r7
 802a102:	463c      	mov	r4, r7
 802a104:	e7aa      	b.n	802a05c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802a106:	bf00      	nop
 802a108:	0802fb1d 	.word	0x0802fb1d
 802a10c:	080300ea 	.word	0x080300ea
 802a110:	0802fba1 	.word	0x0802fba1
 802a114:	2400b8cc 	.word	0x2400b8cc

0802a118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a11c:	ed2d 8b08 	vpush	{d8-d11}
 802a120:	b093      	sub	sp, #76	; 0x4c
 802a122:	461d      	mov	r5, r3
 802a124:	eeb0 aa40 	vmov.f32	s20, s0
 802a128:	920c      	str	r2, [sp, #48]	; 0x30
 802a12a:	eef0 9a60 	vmov.f32	s19, s1
 802a12e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a130:	eeb0 9a41 	vmov.f32	s18, s2
 802a134:	9011      	str	r0, [sp, #68]	; 0x44
 802a136:	eeb0 8a62 	vmov.f32	s16, s5
 802a13a:	6850      	ldr	r0, [r2, #4]
 802a13c:	eef0 8a43 	vmov.f32	s17, s6
 802a140:	9107      	str	r1, [sp, #28]
 802a142:	eef0 ba44 	vmov.f32	s23, s8
 802a146:	6812      	ldr	r2, [r2, #0]
 802a148:	eeb0 ba64 	vmov.f32	s22, s9
 802a14c:	eef0 aa45 	vmov.f32	s21, s10
 802a150:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a154:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802a158:	fb00 1303 	mla	r3, r0, r3, r1
 802a15c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a160:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a162:	689b      	ldr	r3, [r3, #8]
 802a164:	3301      	adds	r3, #1
 802a166:	f023 0301 	bic.w	r3, r3, #1
 802a16a:	9306      	str	r3, [sp, #24]
 802a16c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a16e:	681f      	ldr	r7, [r3, #0]
 802a170:	9b07      	ldr	r3, [sp, #28]
 802a172:	2b00      	cmp	r3, #0
 802a174:	dc03      	bgt.n	802a17e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a178:	2b00      	cmp	r3, #0
 802a17a:	f340 8267 	ble.w	802a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a17e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a180:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a184:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a188:	1e48      	subs	r0, r1, #1
 802a18a:	f102 3cff 	add.w	ip, r2, #4294967295
 802a18e:	2d00      	cmp	r5, #0
 802a190:	f340 80b7 	ble.w	802a302 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a194:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a198:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a19c:	d406      	bmi.n	802a1ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a19e:	4586      	cmp	lr, r0
 802a1a0:	da04      	bge.n	802a1ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a1a2:	2b00      	cmp	r3, #0
 802a1a4:	db02      	blt.n	802a1ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a1a6:	4563      	cmp	r3, ip
 802a1a8:	f2c0 80ac 	blt.w	802a304 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802a1ac:	f11e 0e01 	adds.w	lr, lr, #1
 802a1b0:	f100 809f 	bmi.w	802a2f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a1b4:	4571      	cmp	r1, lr
 802a1b6:	f2c0 809c 	blt.w	802a2f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a1ba:	3301      	adds	r3, #1
 802a1bc:	f100 8099 	bmi.w	802a2f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a1c0:	429a      	cmp	r2, r3
 802a1c2:	f2c0 8096 	blt.w	802a2f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a1c6:	46c8      	mov	r8, r9
 802a1c8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a1cc:	9509      	str	r5, [sp, #36]	; 0x24
 802a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a1d0:	2b00      	cmp	r3, #0
 802a1d2:	f340 80b5 	ble.w	802a340 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802a1d6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a1da:	1430      	asrs	r0, r6, #16
 802a1dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a1e0:	9308      	str	r3, [sp, #32]
 802a1e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a1e4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a1e8:	1423      	asrs	r3, r4, #16
 802a1ea:	f100 813f 	bmi.w	802a46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a1ee:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a1f2:	455b      	cmp	r3, fp
 802a1f4:	f280 813a 	bge.w	802a46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a1f8:	2800      	cmp	r0, #0
 802a1fa:	f2c0 8137 	blt.w	802a46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a1fe:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a202:	4558      	cmp	r0, fp
 802a204:	f280 8132 	bge.w	802a46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a208:	9a06      	ldr	r2, [sp, #24]
 802a20a:	fb00 3302 	mla	r3, r0, r2, r3
 802a20e:	0858      	lsrs	r0, r3, #1
 802a210:	07da      	lsls	r2, r3, #31
 802a212:	9a08      	ldr	r2, [sp, #32]
 802a214:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a218:	bf54      	ite	pl
 802a21a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a21e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a222:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a226:	fa5f fc8c 	uxtb.w	ip, ip
 802a22a:	2a00      	cmp	r2, #0
 802a22c:	f000 80cc 	beq.w	802a3c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802a230:	1c58      	adds	r0, r3, #1
 802a232:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a236:	07c0      	lsls	r0, r0, #31
 802a238:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a23c:	bf54      	ite	pl
 802a23e:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a242:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a246:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a24a:	fa5f fe8e 	uxtb.w	lr, lr
 802a24e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a252:	b1b9      	cbz	r1, 802a284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a254:	4453      	add	r3, sl
 802a256:	0858      	lsrs	r0, r3, #1
 802a258:	07da      	lsls	r2, r3, #31
 802a25a:	5c38      	ldrb	r0, [r7, r0]
 802a25c:	bf54      	ite	pl
 802a25e:	f000 000f 	andpl.w	r0, r0, #15
 802a262:	1100      	asrmi	r0, r0, #4
 802a264:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a268:	b2c0      	uxtb	r0, r0
 802a26a:	900a      	str	r0, [sp, #40]	; 0x28
 802a26c:	1c58      	adds	r0, r3, #1
 802a26e:	0843      	lsrs	r3, r0, #1
 802a270:	07c2      	lsls	r2, r0, #31
 802a272:	5cfb      	ldrb	r3, [r7, r3]
 802a274:	bf54      	ite	pl
 802a276:	f003 030f 	andpl.w	r3, r3, #15
 802a27a:	111b      	asrmi	r3, r3, #4
 802a27c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a280:	b2db      	uxtb	r3, r3
 802a282:	930e      	str	r3, [sp, #56]	; 0x38
 802a284:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a288:	b289      	uxth	r1, r1
 802a28a:	fb02 f301 	mul.w	r3, r2, r1
 802a28e:	0112      	lsls	r2, r2, #4
 802a290:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a294:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a298:	1ad2      	subs	r2, r2, r3
 802a29a:	b289      	uxth	r1, r1
 802a29c:	b292      	uxth	r2, r2
 802a29e:	1a40      	subs	r0, r0, r1
 802a2a0:	fa1f fe80 	uxth.w	lr, r0
 802a2a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a2a6:	4342      	muls	r2, r0
 802a2a8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a2ae:	fb01 c102 	mla	r1, r1, r2, ip
 802a2b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a2b4:	fb03 1302 	mla	r3, r3, r2, r1
 802a2b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a2bc:	2bff      	cmp	r3, #255	; 0xff
 802a2be:	f040 8094 	bne.w	802a3ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802a2c2:	4bbf      	ldr	r3, [pc, #764]	; (802a5c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a2c4:	681a      	ldr	r2, [r3, #0]
 802a2c6:	4bbf      	ldr	r3, [pc, #764]	; (802a5c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a2c8:	0951      	lsrs	r1, r2, #5
 802a2ca:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a2ce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a2d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a2d6:	430b      	orrs	r3, r1
 802a2d8:	4313      	orrs	r3, r2
 802a2da:	f8a8 3000 	strh.w	r3, [r8]
 802a2de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a2e0:	f108 0802 	add.w	r8, r8, #2
 802a2e4:	441c      	add	r4, r3
 802a2e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a2e8:	441e      	add	r6, r3
 802a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2ec:	3b01      	subs	r3, #1
 802a2ee:	9309      	str	r3, [sp, #36]	; 0x24
 802a2f0:	e76d      	b.n	802a1ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a2f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a2f4:	3d01      	subs	r5, #1
 802a2f6:	f109 0902 	add.w	r9, r9, #2
 802a2fa:	441c      	add	r4, r3
 802a2fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a2fe:	441e      	add	r6, r3
 802a300:	e745      	b.n	802a18e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a302:	d021      	beq.n	802a348 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802a304:	1e6b      	subs	r3, r5, #1
 802a306:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802a308:	fb00 4003 	mla	r0, r0, r3, r4
 802a30c:	1400      	asrs	r0, r0, #16
 802a30e:	f53f af5a 	bmi.w	802a1c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a312:	3901      	subs	r1, #1
 802a314:	4288      	cmp	r0, r1
 802a316:	f6bf af56 	bge.w	802a1c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a31a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a31c:	fb01 6303 	mla	r3, r1, r3, r6
 802a320:	141b      	asrs	r3, r3, #16
 802a322:	f53f af50 	bmi.w	802a1c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a326:	3a01      	subs	r2, #1
 802a328:	4293      	cmp	r3, r2
 802a32a:	f6bf af4c 	bge.w	802a1c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a32e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a332:	46a8      	mov	r8, r5
 802a334:	46ce      	mov	lr, r9
 802a336:	9308      	str	r3, [sp, #32]
 802a338:	f1b8 0f00 	cmp.w	r8, #0
 802a33c:	f300 80b6 	bgt.w	802a4ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a340:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a344:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a348:	9b07      	ldr	r3, [sp, #28]
 802a34a:	2b00      	cmp	r3, #0
 802a34c:	f340 817e 	ble.w	802a64c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a354:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a356:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a35a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a35e:	eef0 6a48 	vmov.f32	s13, s16
 802a362:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a366:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a36a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a36e:	ee16 4a90 	vmov	r4, s13
 802a372:	eef0 6a68 	vmov.f32	s13, s17
 802a376:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a37a:	ee16 6a90 	vmov	r6, s13
 802a37e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a382:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a386:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a38a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a38e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a392:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a396:	ee18 2a10 	vmov	r2, s16
 802a39a:	eeb0 8a47 	vmov.f32	s16, s14
 802a39e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a3a2:	ee18 2a90 	vmov	r2, s17
 802a3a6:	9327      	str	r3, [sp, #156]	; 0x9c
 802a3a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a3aa:	eef0 8a67 	vmov.f32	s17, s15
 802a3ae:	fb92 f3f3 	sdiv	r3, r2, r3
 802a3b2:	9328      	str	r3, [sp, #160]	; 0xa0
 802a3b4:	9b07      	ldr	r3, [sp, #28]
 802a3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a3b8:	3b01      	subs	r3, #1
 802a3ba:	9307      	str	r3, [sp, #28]
 802a3bc:	bf08      	it	eq
 802a3be:	4615      	moveq	r5, r2
 802a3c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a3c2:	bf18      	it	ne
 802a3c4:	461d      	movne	r5, r3
 802a3c6:	e6d3      	b.n	802a170 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a3c8:	2900      	cmp	r1, #0
 802a3ca:	f43f af5b 	beq.w	802a284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a3ce:	eb0a 0003 	add.w	r0, sl, r3
 802a3d2:	0843      	lsrs	r3, r0, #1
 802a3d4:	07c0      	lsls	r0, r0, #31
 802a3d6:	5cfb      	ldrb	r3, [r7, r3]
 802a3d8:	bf54      	ite	pl
 802a3da:	f003 030f 	andpl.w	r3, r3, #15
 802a3de:	111b      	asrmi	r3, r3, #4
 802a3e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a3e4:	b2db      	uxtb	r3, r3
 802a3e6:	930a      	str	r3, [sp, #40]	; 0x28
 802a3e8:	e74c      	b.n	802a284 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a3ea:	2b00      	cmp	r3, #0
 802a3ec:	f43f af77 	beq.w	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a3f0:	4a73      	ldr	r2, [pc, #460]	; (802a5c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a3f2:	fa1f fe83 	uxth.w	lr, r3
 802a3f6:	f8b8 c000 	ldrh.w	ip, [r8]
 802a3fa:	43db      	mvns	r3, r3
 802a3fc:	6810      	ldr	r0, [r2, #0]
 802a3fe:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a402:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a406:	b2db      	uxtb	r3, r3
 802a408:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a40c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a410:	fb12 f20e 	smulbb	r2, r2, lr
 802a414:	b2c0      	uxtb	r0, r0
 802a416:	fb1b fb0e 	smulbb	fp, fp, lr
 802a41a:	fb01 2103 	mla	r1, r1, r3, r2
 802a41e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a422:	fb10 fe0e 	smulbb	lr, r0, lr
 802a426:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a42a:	b289      	uxth	r1, r1
 802a42c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a430:	fa5f fc8c 	uxtb.w	ip, ip
 802a434:	fb02 b203 	mla	r2, r2, r3, fp
 802a438:	1c48      	adds	r0, r1, #1
 802a43a:	fb0c e303 	mla	r3, ip, r3, lr
 802a43e:	b292      	uxth	r2, r2
 802a440:	b29b      	uxth	r3, r3
 802a442:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802a446:	f102 0b01 	add.w	fp, r2, #1
 802a44a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802a44e:	1c59      	adds	r1, r3, #1
 802a450:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a454:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a458:	0952      	lsrs	r2, r2, #5
 802a45a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a45e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a462:	4301      	orrs	r1, r0
 802a464:	4311      	orrs	r1, r2
 802a466:	f8a8 1000 	strh.w	r1, [r8]
 802a46a:	e738      	b.n	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a46c:	f113 0b01 	adds.w	fp, r3, #1
 802a470:	f53f af35 	bmi.w	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a474:	45dc      	cmp	ip, fp
 802a476:	f6ff af32 	blt.w	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a47a:	f110 0b01 	adds.w	fp, r0, #1
 802a47e:	f53f af2e 	bmi.w	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a482:	45de      	cmp	lr, fp
 802a484:	f6ff af2b 	blt.w	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a488:	9302      	str	r3, [sp, #8]
 802a48a:	fa0f f38e 	sxth.w	r3, lr
 802a48e:	9a08      	ldr	r2, [sp, #32]
 802a490:	9301      	str	r3, [sp, #4]
 802a492:	fa0f f38c 	sxth.w	r3, ip
 802a496:	9105      	str	r1, [sp, #20]
 802a498:	4641      	mov	r1, r8
 802a49a:	9300      	str	r3, [sp, #0]
 802a49c:	4653      	mov	r3, sl
 802a49e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a4a2:	463a      	mov	r2, r7
 802a4a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a4a6:	f7ff fd57 	bl	8029f58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802a4aa:	e718      	b.n	802a2de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802a4ac:	1422      	asrs	r2, r4, #16
 802a4ae:	9906      	ldr	r1, [sp, #24]
 802a4b0:	1433      	asrs	r3, r6, #16
 802a4b2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802a4b6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a4ba:	fb01 2303 	mla	r3, r1, r3, r2
 802a4be:	085a      	lsrs	r2, r3, #1
 802a4c0:	07d9      	lsls	r1, r3, #31
 802a4c2:	5cba      	ldrb	r2, [r7, r2]
 802a4c4:	bf54      	ite	pl
 802a4c6:	f002 020f 	andpl.w	r2, r2, #15
 802a4ca:	1112      	asrmi	r2, r2, #4
 802a4cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a4d0:	b2d2      	uxtb	r2, r2
 802a4d2:	2800      	cmp	r0, #0
 802a4d4:	d063      	beq.n	802a59e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802a4d6:	f103 0a01 	add.w	sl, r3, #1
 802a4da:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802a4de:	f01a 0f01 	tst.w	sl, #1
 802a4e2:	5c79      	ldrb	r1, [r7, r1]
 802a4e4:	bf0c      	ite	eq
 802a4e6:	f001 010f 	andeq.w	r1, r1, #15
 802a4ea:	1109      	asrne	r1, r1, #4
 802a4ec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a4f0:	b2c9      	uxtb	r1, r1
 802a4f2:	910f      	str	r1, [sp, #60]	; 0x3c
 802a4f4:	f1bc 0f00 	cmp.w	ip, #0
 802a4f8:	d01a      	beq.n	802a530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a4fa:	9908      	ldr	r1, [sp, #32]
 802a4fc:	440b      	add	r3, r1
 802a4fe:	0859      	lsrs	r1, r3, #1
 802a500:	f013 0f01 	tst.w	r3, #1
 802a504:	f103 0301 	add.w	r3, r3, #1
 802a508:	5c79      	ldrb	r1, [r7, r1]
 802a50a:	bf0c      	ite	eq
 802a50c:	f001 010f 	andeq.w	r1, r1, #15
 802a510:	1109      	asrne	r1, r1, #4
 802a512:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a516:	b2c9      	uxtb	r1, r1
 802a518:	910b      	str	r1, [sp, #44]	; 0x2c
 802a51a:	0859      	lsrs	r1, r3, #1
 802a51c:	07db      	lsls	r3, r3, #31
 802a51e:	5c79      	ldrb	r1, [r7, r1]
 802a520:	bf54      	ite	pl
 802a522:	f001 010f 	andpl.w	r1, r1, #15
 802a526:	1109      	asrmi	r1, r1, #4
 802a528:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a52c:	b2c9      	uxtb	r1, r1
 802a52e:	9110      	str	r1, [sp, #64]	; 0x40
 802a530:	b280      	uxth	r0, r0
 802a532:	fa1f fc8c 	uxth.w	ip, ip
 802a536:	fb00 f30c 	mul.w	r3, r0, ip
 802a53a:	0100      	lsls	r0, r0, #4
 802a53c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802a540:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802a544:	1ac0      	subs	r0, r0, r3
 802a546:	fa1f fc8c 	uxth.w	ip, ip
 802a54a:	b280      	uxth	r0, r0
 802a54c:	eba1 010c 	sub.w	r1, r1, ip
 802a550:	fa1f fa81 	uxth.w	sl, r1
 802a554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a556:	4348      	muls	r0, r1
 802a558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802a55a:	fb02 020a 	mla	r2, r2, sl, r0
 802a55e:	fb0c 2c01 	mla	ip, ip, r1, r2
 802a562:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a564:	fb03 c302 	mla	r3, r3, r2, ip
 802a568:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a56c:	2bff      	cmp	r3, #255	; 0xff
 802a56e:	d12b      	bne.n	802a5c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802a570:	4b13      	ldr	r3, [pc, #76]	; (802a5c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a572:	681a      	ldr	r2, [r3, #0]
 802a574:	4b13      	ldr	r3, [pc, #76]	; (802a5c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a576:	0951      	lsrs	r1, r2, #5
 802a578:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a57c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a580:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a584:	430b      	orrs	r3, r1
 802a586:	4313      	orrs	r3, r2
 802a588:	f8ae 3000 	strh.w	r3, [lr]
 802a58c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a58e:	f10e 0e02 	add.w	lr, lr, #2
 802a592:	f108 38ff 	add.w	r8, r8, #4294967295
 802a596:	441c      	add	r4, r3
 802a598:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a59a:	441e      	add	r6, r3
 802a59c:	e6cc      	b.n	802a338 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802a59e:	f1bc 0f00 	cmp.w	ip, #0
 802a5a2:	d0c5      	beq.n	802a530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a5a4:	9908      	ldr	r1, [sp, #32]
 802a5a6:	440b      	add	r3, r1
 802a5a8:	0859      	lsrs	r1, r3, #1
 802a5aa:	07db      	lsls	r3, r3, #31
 802a5ac:	5c79      	ldrb	r1, [r7, r1]
 802a5ae:	bf54      	ite	pl
 802a5b0:	f001 010f 	andpl.w	r1, r1, #15
 802a5b4:	1109      	asrmi	r1, r1, #4
 802a5b6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802a5ba:	b2c9      	uxtb	r1, r1
 802a5bc:	910b      	str	r1, [sp, #44]	; 0x2c
 802a5be:	e7b7      	b.n	802a530 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802a5c0:	2400b8cc 	.word	0x2400b8cc
 802a5c4:	fffff800 	.word	0xfffff800
 802a5c8:	2b00      	cmp	r3, #0
 802a5ca:	d0df      	beq.n	802a58c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a5cc:	4a22      	ldr	r2, [pc, #136]	; (802a658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802a5ce:	fa1f fa83 	uxth.w	sl, r3
 802a5d2:	f8be c000 	ldrh.w	ip, [lr]
 802a5d6:	43db      	mvns	r3, r3
 802a5d8:	6810      	ldr	r0, [r2, #0]
 802a5da:	ea4f 212c 	mov.w	r1, ip, asr #8
 802a5de:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802a5e2:	b2db      	uxtb	r3, r3
 802a5e4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a5e8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802a5ec:	fb12 f20a 	smulbb	r2, r2, sl
 802a5f0:	b2c0      	uxtb	r0, r0
 802a5f2:	fb1b fb0a 	smulbb	fp, fp, sl
 802a5f6:	fb01 2103 	mla	r1, r1, r3, r2
 802a5fa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802a5fe:	fb10 f00a 	smulbb	r0, r0, sl
 802a602:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802a606:	b289      	uxth	r1, r1
 802a608:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a60c:	fa5f fc8c 	uxtb.w	ip, ip
 802a610:	fb02 b203 	mla	r2, r2, r3, fp
 802a614:	fb0c 0003 	mla	r0, ip, r3, r0
 802a618:	1c4b      	adds	r3, r1, #1
 802a61a:	b292      	uxth	r2, r2
 802a61c:	b280      	uxth	r0, r0
 802a61e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a622:	f100 0b01 	add.w	fp, r0, #1
 802a626:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802a62a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802a62e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802a632:	ea4b 0101 	orr.w	r1, fp, r1
 802a636:	f102 0b01 	add.w	fp, r2, #1
 802a63a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802a63e:	0952      	lsrs	r2, r2, #5
 802a640:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a644:	4311      	orrs	r1, r2
 802a646:	f8ae 1000 	strh.w	r1, [lr]
 802a64a:	e79f      	b.n	802a58c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802a64c:	b013      	add	sp, #76	; 0x4c
 802a64e:	ecbd 8b08 	vpop	{d8-d11}
 802a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a656:	bf00      	nop
 802a658:	2400b8cc 	.word	0x2400b8cc

0802a65c <CRC_Lock>:
 802a65c:	4a20      	ldr	r2, [pc, #128]	; (802a6e0 <CRC_Lock+0x84>)
 802a65e:	b530      	push	{r4, r5, lr}
 802a660:	6813      	ldr	r3, [r2, #0]
 802a662:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802a666:	f24c 2540 	movw	r5, #49728	; 0xc240
 802a66a:	f023 0301 	bic.w	r3, r3, #1
 802a66e:	6013      	str	r3, [r2, #0]
 802a670:	4b1c      	ldr	r3, [pc, #112]	; (802a6e4 <CRC_Lock+0x88>)
 802a672:	681a      	ldr	r2, [r3, #0]
 802a674:	4022      	ands	r2, r4
 802a676:	42aa      	cmp	r2, r5
 802a678:	d005      	beq.n	802a686 <CRC_Lock+0x2a>
 802a67a:	681b      	ldr	r3, [r3, #0]
 802a67c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802a680:	4023      	ands	r3, r4
 802a682:	4293      	cmp	r3, r2
 802a684:	d124      	bne.n	802a6d0 <CRC_Lock+0x74>
 802a686:	4b18      	ldr	r3, [pc, #96]	; (802a6e8 <CRC_Lock+0x8c>)
 802a688:	681b      	ldr	r3, [r3, #0]
 802a68a:	bb0b      	cbnz	r3, 802a6d0 <CRC_Lock+0x74>
 802a68c:	4b17      	ldr	r3, [pc, #92]	; (802a6ec <CRC_Lock+0x90>)
 802a68e:	681a      	ldr	r2, [r3, #0]
 802a690:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a694:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802a698:	d00d      	beq.n	802a6b6 <CRC_Lock+0x5a>
 802a69a:	681a      	ldr	r2, [r3, #0]
 802a69c:	f240 4483 	movw	r4, #1155	; 0x483
 802a6a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802a6a4:	42a2      	cmp	r2, r4
 802a6a6:	d006      	beq.n	802a6b6 <CRC_Lock+0x5a>
 802a6a8:	681b      	ldr	r3, [r3, #0]
 802a6aa:	f240 4285 	movw	r2, #1157	; 0x485
 802a6ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a6b2:	4293      	cmp	r3, r2
 802a6b4:	d10c      	bne.n	802a6d0 <CRC_Lock+0x74>
 802a6b6:	4b0e      	ldr	r3, [pc, #56]	; (802a6f0 <CRC_Lock+0x94>)
 802a6b8:	2201      	movs	r2, #1
 802a6ba:	601a      	str	r2, [r3, #0]
 802a6bc:	681a      	ldr	r2, [r3, #0]
 802a6be:	2a00      	cmp	r2, #0
 802a6c0:	d1fc      	bne.n	802a6bc <CRC_Lock+0x60>
 802a6c2:	4b0c      	ldr	r3, [pc, #48]	; (802a6f4 <CRC_Lock+0x98>)
 802a6c4:	6018      	str	r0, [r3, #0]
 802a6c6:	6818      	ldr	r0, [r3, #0]
 802a6c8:	1a43      	subs	r3, r0, r1
 802a6ca:	4258      	negs	r0, r3
 802a6cc:	4158      	adcs	r0, r3
 802a6ce:	bd30      	pop	{r4, r5, pc}
 802a6d0:	4b09      	ldr	r3, [pc, #36]	; (802a6f8 <CRC_Lock+0x9c>)
 802a6d2:	2201      	movs	r2, #1
 802a6d4:	601a      	str	r2, [r3, #0]
 802a6d6:	681a      	ldr	r2, [r3, #0]
 802a6d8:	2a00      	cmp	r2, #0
 802a6da:	d1fc      	bne.n	802a6d6 <CRC_Lock+0x7a>
 802a6dc:	4b07      	ldr	r3, [pc, #28]	; (802a6fc <CRC_Lock+0xa0>)
 802a6de:	e7f1      	b.n	802a6c4 <CRC_Lock+0x68>
 802a6e0:	e0002000 	.word	0xe0002000
 802a6e4:	e000ed00 	.word	0xe000ed00
 802a6e8:	e0042000 	.word	0xe0042000
 802a6ec:	5c001000 	.word	0x5c001000
 802a6f0:	58024c08 	.word	0x58024c08
 802a6f4:	58024c00 	.word	0x58024c00
 802a6f8:	40023008 	.word	0x40023008
 802a6fc:	40023000 	.word	0x40023000

0802a700 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802a700:	6101      	str	r1, [r0, #16]
 802a702:	4770      	bx	lr

0802a704 <_ZN8touchgfx8Gestures4tickEv>:
 802a704:	7b83      	ldrb	r3, [r0, #14]
 802a706:	b14b      	cbz	r3, 802a71c <_ZN8touchgfx8Gestures4tickEv+0x18>
 802a708:	8903      	ldrh	r3, [r0, #8]
 802a70a:	3301      	adds	r3, #1
 802a70c:	b29b      	uxth	r3, r3
 802a70e:	2b07      	cmp	r3, #7
 802a710:	8103      	strh	r3, [r0, #8]
 802a712:	bf81      	itttt	hi
 802a714:	2300      	movhi	r3, #0
 802a716:	8143      	strhhi	r3, [r0, #10]
 802a718:	8183      	strhhi	r3, [r0, #12]
 802a71a:	7383      	strbhi	r3, [r0, #14]
 802a71c:	4770      	bx	lr
	...

0802a720 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802a720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802a724:	4604      	mov	r4, r0
 802a726:	4698      	mov	r8, r3
 802a728:	8880      	ldrh	r0, [r0, #4]
 802a72a:	4617      	mov	r7, r2
 802a72c:	4b1d      	ldr	r3, [pc, #116]	; (802a7a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802a72e:	460e      	mov	r6, r1
 802a730:	f8ad 0006 	strh.w	r0, [sp, #6]
 802a734:	eba8 0000 	sub.w	r0, r8, r0
 802a738:	9300      	str	r3, [sp, #0]
 802a73a:	2300      	movs	r3, #0
 802a73c:	b280      	uxth	r0, r0
 802a73e:	8aa2      	ldrh	r2, [r4, #20]
 802a740:	f88d 3004 	strb.w	r3, [sp, #4]
 802a744:	b203      	sxth	r3, r0
 802a746:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802a74a:	88e1      	ldrh	r1, [r4, #6]
 802a74c:	2b00      	cmp	r3, #0
 802a74e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802a752:	f8ad 1008 	strh.w	r1, [sp, #8]
 802a756:	bfb8      	it	lt
 802a758:	4240      	neglt	r0, r0
 802a75a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802a75e:	bfb8      	it	lt
 802a760:	b203      	sxthlt	r3, r0
 802a762:	4293      	cmp	r3, r2
 802a764:	dc08      	bgt.n	802a778 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802a766:	1a69      	subs	r1, r5, r1
 802a768:	b289      	uxth	r1, r1
 802a76a:	b20b      	sxth	r3, r1
 802a76c:	2b00      	cmp	r3, #0
 802a76e:	bfbc      	itt	lt
 802a770:	4249      	neglt	r1, r1
 802a772:	b20b      	sxthlt	r3, r1
 802a774:	429a      	cmp	r2, r3
 802a776:	da13      	bge.n	802a7a0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802a778:	6920      	ldr	r0, [r4, #16]
 802a77a:	4669      	mov	r1, sp
 802a77c:	eba8 0606 	sub.w	r6, r8, r6
 802a780:	1bef      	subs	r7, r5, r7
 802a782:	6803      	ldr	r3, [r0, #0]
 802a784:	685b      	ldr	r3, [r3, #4]
 802a786:	4798      	blx	r3
 802a788:	2300      	movs	r3, #0
 802a78a:	2001      	movs	r0, #1
 802a78c:	8166      	strh	r6, [r4, #10]
 802a78e:	8123      	strh	r3, [r4, #8]
 802a790:	81a7      	strh	r7, [r4, #12]
 802a792:	f8a4 8004 	strh.w	r8, [r4, #4]
 802a796:	80e5      	strh	r5, [r4, #6]
 802a798:	73a0      	strb	r0, [r4, #14]
 802a79a:	b004      	add	sp, #16
 802a79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a7a0:	2000      	movs	r0, #0
 802a7a2:	e7fa      	b.n	802a79a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802a7a4:	0802efac 	.word	0x0802efac

0802a7a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a7aa:	461e      	mov	r6, r3
 802a7ac:	1e4b      	subs	r3, r1, #1
 802a7ae:	b085      	sub	sp, #20
 802a7b0:	4604      	mov	r4, r0
 802a7b2:	2b01      	cmp	r3, #1
 802a7b4:	460d      	mov	r5, r1
 802a7b6:	4617      	mov	r7, r2
 802a7b8:	d84b      	bhi.n	802a852 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802a7ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802a7be:	1cd3      	adds	r3, r2, #3
 802a7c0:	b29b      	uxth	r3, r3
 802a7c2:	2b06      	cmp	r3, #6
 802a7c4:	d916      	bls.n	802a7f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802a7c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802a868 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a7ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a7ce:	f8cd c004 	str.w	ip, [sp, #4]
 802a7d2:	f04f 0c00 	mov.w	ip, #0
 802a7d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a7da:	6900      	ldr	r0, [r0, #16]
 802a7dc:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a7e0:	a901      	add	r1, sp, #4
 802a7e2:	f88d c008 	strb.w	ip, [sp, #8]
 802a7e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a7ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a7ee:	6803      	ldr	r3, [r0, #0]
 802a7f0:	689b      	ldr	r3, [r3, #8]
 802a7f2:	4798      	blx	r3
 802a7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a7f8:	1cd3      	adds	r3, r2, #3
 802a7fa:	b29b      	uxth	r3, r3
 802a7fc:	2b06      	cmp	r3, #6
 802a7fe:	d916      	bls.n	802a82e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a800:	f8df c064 	ldr.w	ip, [pc, #100]	; 802a868 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802a804:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802a808:	f8cd c004 	str.w	ip, [sp, #4]
 802a80c:	f04f 0c01 	mov.w	ip, #1
 802a810:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802a814:	6920      	ldr	r0, [r4, #16]
 802a816:	f8ad 100c 	strh.w	r1, [sp, #12]
 802a81a:	a901      	add	r1, sp, #4
 802a81c:	f88d c008 	strb.w	ip, [sp, #8]
 802a820:	f8ad 200a 	strh.w	r2, [sp, #10]
 802a824:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a828:	6803      	ldr	r3, [r0, #0]
 802a82a:	689b      	ldr	r3, [r3, #8]
 802a82c:	4798      	blx	r3
 802a82e:	4b0d      	ldr	r3, [pc, #52]	; (802a864 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802a830:	a901      	add	r1, sp, #4
 802a832:	6920      	ldr	r0, [r4, #16]
 802a834:	9301      	str	r3, [sp, #4]
 802a836:	2300      	movs	r3, #0
 802a838:	f88d 5008 	strb.w	r5, [sp, #8]
 802a83c:	f8ad 700a 	strh.w	r7, [sp, #10]
 802a840:	f8ad 600c 	strh.w	r6, [sp, #12]
 802a844:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a848:	6803      	ldr	r3, [r0, #0]
 802a84a:	681b      	ldr	r3, [r3, #0]
 802a84c:	4798      	blx	r3
 802a84e:	b005      	add	sp, #20
 802a850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a852:	2900      	cmp	r1, #0
 802a854:	d1eb      	bne.n	802a82e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a856:	80a2      	strh	r2, [r4, #4]
 802a858:	80c6      	strh	r6, [r0, #6]
 802a85a:	60a1      	str	r1, [r4, #8]
 802a85c:	81a1      	strh	r1, [r4, #12]
 802a85e:	73a1      	strb	r1, [r4, #14]
 802a860:	e7e5      	b.n	802a82e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802a862:	bf00      	nop
 802a864:	0802ef98 	.word	0x0802ef98
 802a868:	0802efc0 	.word	0x0802efc0

0802a86c <__aeabi_atexit>:
 802a86c:	460b      	mov	r3, r1
 802a86e:	4601      	mov	r1, r0
 802a870:	4618      	mov	r0, r3
 802a872:	f000 b90f 	b.w	802aa94 <__cxa_atexit>

0802a876 <_ZdlPvj>:
 802a876:	f000 b812 	b.w	802a89e <_ZdlPv>

0802a87a <__cxa_guard_acquire>:
 802a87a:	6803      	ldr	r3, [r0, #0]
 802a87c:	07db      	lsls	r3, r3, #31
 802a87e:	d406      	bmi.n	802a88e <__cxa_guard_acquire+0x14>
 802a880:	7843      	ldrb	r3, [r0, #1]
 802a882:	b103      	cbz	r3, 802a886 <__cxa_guard_acquire+0xc>
 802a884:	deff      	udf	#255	; 0xff
 802a886:	2301      	movs	r3, #1
 802a888:	7043      	strb	r3, [r0, #1]
 802a88a:	4618      	mov	r0, r3
 802a88c:	4770      	bx	lr
 802a88e:	2000      	movs	r0, #0
 802a890:	4770      	bx	lr

0802a892 <__cxa_guard_release>:
 802a892:	2301      	movs	r3, #1
 802a894:	6003      	str	r3, [r0, #0]
 802a896:	4770      	bx	lr

0802a898 <__cxa_pure_virtual>:
 802a898:	b508      	push	{r3, lr}
 802a89a:	f000 f80f 	bl	802a8bc <_ZSt9terminatev>

0802a89e <_ZdlPv>:
 802a89e:	f000 b845 	b.w	802a92c <free>

0802a8a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a8a2:	b508      	push	{r3, lr}
 802a8a4:	4780      	blx	r0
 802a8a6:	f000 f80e 	bl	802a8c6 <abort>
	...

0802a8ac <_ZSt13get_terminatev>:
 802a8ac:	4b02      	ldr	r3, [pc, #8]	; (802a8b8 <_ZSt13get_terminatev+0xc>)
 802a8ae:	6818      	ldr	r0, [r3, #0]
 802a8b0:	f3bf 8f5b 	dmb	ish
 802a8b4:	4770      	bx	lr
 802a8b6:	bf00      	nop
 802a8b8:	240000c8 	.word	0x240000c8

0802a8bc <_ZSt9terminatev>:
 802a8bc:	b508      	push	{r3, lr}
 802a8be:	f7ff fff5 	bl	802a8ac <_ZSt13get_terminatev>
 802a8c2:	f7ff ffee 	bl	802a8a2 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a8c6 <abort>:
 802a8c6:	b508      	push	{r3, lr}
 802a8c8:	2006      	movs	r0, #6
 802a8ca:	f000 fa39 	bl	802ad40 <raise>
 802a8ce:	2001      	movs	r0, #1
 802a8d0:	f7d6 ff2c 	bl	800172c <_exit>

0802a8d4 <__assert_func>:
 802a8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a8d6:	4614      	mov	r4, r2
 802a8d8:	461a      	mov	r2, r3
 802a8da:	4b09      	ldr	r3, [pc, #36]	; (802a900 <__assert_func+0x2c>)
 802a8dc:	681b      	ldr	r3, [r3, #0]
 802a8de:	4605      	mov	r5, r0
 802a8e0:	68d8      	ldr	r0, [r3, #12]
 802a8e2:	b14c      	cbz	r4, 802a8f8 <__assert_func+0x24>
 802a8e4:	4b07      	ldr	r3, [pc, #28]	; (802a904 <__assert_func+0x30>)
 802a8e6:	9100      	str	r1, [sp, #0]
 802a8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a8ec:	4906      	ldr	r1, [pc, #24]	; (802a908 <__assert_func+0x34>)
 802a8ee:	462b      	mov	r3, r5
 802a8f0:	f000 f982 	bl	802abf8 <fiprintf>
 802a8f4:	f7ff ffe7 	bl	802a8c6 <abort>
 802a8f8:	4b04      	ldr	r3, [pc, #16]	; (802a90c <__assert_func+0x38>)
 802a8fa:	461c      	mov	r4, r3
 802a8fc:	e7f3      	b.n	802a8e6 <__assert_func+0x12>
 802a8fe:	bf00      	nop
 802a900:	24000124 	.word	0x24000124
 802a904:	08030325 	.word	0x08030325
 802a908:	08030332 	.word	0x08030332
 802a90c:	08030360 	.word	0x08030360

0802a910 <atexit>:
 802a910:	2300      	movs	r3, #0
 802a912:	4601      	mov	r1, r0
 802a914:	461a      	mov	r2, r3
 802a916:	4618      	mov	r0, r3
 802a918:	f000 bb16 	b.w	802af48 <__register_exitproc>

0802a91c <malloc>:
 802a91c:	4b02      	ldr	r3, [pc, #8]	; (802a928 <malloc+0xc>)
 802a91e:	4601      	mov	r1, r0
 802a920:	6818      	ldr	r0, [r3, #0]
 802a922:	f000 b82b 	b.w	802a97c <_malloc_r>
 802a926:	bf00      	nop
 802a928:	24000124 	.word	0x24000124

0802a92c <free>:
 802a92c:	4b02      	ldr	r3, [pc, #8]	; (802a938 <free+0xc>)
 802a92e:	4601      	mov	r1, r0
 802a930:	6818      	ldr	r0, [r3, #0]
 802a932:	f000 bb67 	b.w	802b004 <_free_r>
 802a936:	bf00      	nop
 802a938:	24000124 	.word	0x24000124

0802a93c <sbrk_aligned>:
 802a93c:	b570      	push	{r4, r5, r6, lr}
 802a93e:	4e0e      	ldr	r6, [pc, #56]	; (802a978 <sbrk_aligned+0x3c>)
 802a940:	460c      	mov	r4, r1
 802a942:	6831      	ldr	r1, [r6, #0]
 802a944:	4605      	mov	r5, r0
 802a946:	b911      	cbnz	r1, 802a94e <sbrk_aligned+0x12>
 802a948:	f000 faa0 	bl	802ae8c <_sbrk_r>
 802a94c:	6030      	str	r0, [r6, #0]
 802a94e:	4621      	mov	r1, r4
 802a950:	4628      	mov	r0, r5
 802a952:	f000 fa9b 	bl	802ae8c <_sbrk_r>
 802a956:	1c43      	adds	r3, r0, #1
 802a958:	d00a      	beq.n	802a970 <sbrk_aligned+0x34>
 802a95a:	1cc4      	adds	r4, r0, #3
 802a95c:	f024 0403 	bic.w	r4, r4, #3
 802a960:	42a0      	cmp	r0, r4
 802a962:	d007      	beq.n	802a974 <sbrk_aligned+0x38>
 802a964:	1a21      	subs	r1, r4, r0
 802a966:	4628      	mov	r0, r5
 802a968:	f000 fa90 	bl	802ae8c <_sbrk_r>
 802a96c:	3001      	adds	r0, #1
 802a96e:	d101      	bne.n	802a974 <sbrk_aligned+0x38>
 802a970:	f04f 34ff 	mov.w	r4, #4294967295
 802a974:	4620      	mov	r0, r4
 802a976:	bd70      	pop	{r4, r5, r6, pc}
 802a978:	2400b9c4 	.word	0x2400b9c4

0802a97c <_malloc_r>:
 802a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a980:	1ccd      	adds	r5, r1, #3
 802a982:	f025 0503 	bic.w	r5, r5, #3
 802a986:	3508      	adds	r5, #8
 802a988:	2d0c      	cmp	r5, #12
 802a98a:	bf38      	it	cc
 802a98c:	250c      	movcc	r5, #12
 802a98e:	2d00      	cmp	r5, #0
 802a990:	4607      	mov	r7, r0
 802a992:	db01      	blt.n	802a998 <_malloc_r+0x1c>
 802a994:	42a9      	cmp	r1, r5
 802a996:	d905      	bls.n	802a9a4 <_malloc_r+0x28>
 802a998:	230c      	movs	r3, #12
 802a99a:	603b      	str	r3, [r7, #0]
 802a99c:	2600      	movs	r6, #0
 802a99e:	4630      	mov	r0, r6
 802a9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802aa78 <_malloc_r+0xfc>
 802a9a8:	f000 f868 	bl	802aa7c <__malloc_lock>
 802a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 802a9b0:	461c      	mov	r4, r3
 802a9b2:	bb5c      	cbnz	r4, 802aa0c <_malloc_r+0x90>
 802a9b4:	4629      	mov	r1, r5
 802a9b6:	4638      	mov	r0, r7
 802a9b8:	f7ff ffc0 	bl	802a93c <sbrk_aligned>
 802a9bc:	1c43      	adds	r3, r0, #1
 802a9be:	4604      	mov	r4, r0
 802a9c0:	d155      	bne.n	802aa6e <_malloc_r+0xf2>
 802a9c2:	f8d8 4000 	ldr.w	r4, [r8]
 802a9c6:	4626      	mov	r6, r4
 802a9c8:	2e00      	cmp	r6, #0
 802a9ca:	d145      	bne.n	802aa58 <_malloc_r+0xdc>
 802a9cc:	2c00      	cmp	r4, #0
 802a9ce:	d048      	beq.n	802aa62 <_malloc_r+0xe6>
 802a9d0:	6823      	ldr	r3, [r4, #0]
 802a9d2:	4631      	mov	r1, r6
 802a9d4:	4638      	mov	r0, r7
 802a9d6:	eb04 0903 	add.w	r9, r4, r3
 802a9da:	f000 fa57 	bl	802ae8c <_sbrk_r>
 802a9de:	4581      	cmp	r9, r0
 802a9e0:	d13f      	bne.n	802aa62 <_malloc_r+0xe6>
 802a9e2:	6821      	ldr	r1, [r4, #0]
 802a9e4:	1a6d      	subs	r5, r5, r1
 802a9e6:	4629      	mov	r1, r5
 802a9e8:	4638      	mov	r0, r7
 802a9ea:	f7ff ffa7 	bl	802a93c <sbrk_aligned>
 802a9ee:	3001      	adds	r0, #1
 802a9f0:	d037      	beq.n	802aa62 <_malloc_r+0xe6>
 802a9f2:	6823      	ldr	r3, [r4, #0]
 802a9f4:	442b      	add	r3, r5
 802a9f6:	6023      	str	r3, [r4, #0]
 802a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 802a9fc:	2b00      	cmp	r3, #0
 802a9fe:	d038      	beq.n	802aa72 <_malloc_r+0xf6>
 802aa00:	685a      	ldr	r2, [r3, #4]
 802aa02:	42a2      	cmp	r2, r4
 802aa04:	d12b      	bne.n	802aa5e <_malloc_r+0xe2>
 802aa06:	2200      	movs	r2, #0
 802aa08:	605a      	str	r2, [r3, #4]
 802aa0a:	e00f      	b.n	802aa2c <_malloc_r+0xb0>
 802aa0c:	6822      	ldr	r2, [r4, #0]
 802aa0e:	1b52      	subs	r2, r2, r5
 802aa10:	d41f      	bmi.n	802aa52 <_malloc_r+0xd6>
 802aa12:	2a0b      	cmp	r2, #11
 802aa14:	d917      	bls.n	802aa46 <_malloc_r+0xca>
 802aa16:	1961      	adds	r1, r4, r5
 802aa18:	42a3      	cmp	r3, r4
 802aa1a:	6025      	str	r5, [r4, #0]
 802aa1c:	bf18      	it	ne
 802aa1e:	6059      	strne	r1, [r3, #4]
 802aa20:	6863      	ldr	r3, [r4, #4]
 802aa22:	bf08      	it	eq
 802aa24:	f8c8 1000 	streq.w	r1, [r8]
 802aa28:	5162      	str	r2, [r4, r5]
 802aa2a:	604b      	str	r3, [r1, #4]
 802aa2c:	4638      	mov	r0, r7
 802aa2e:	f104 060b 	add.w	r6, r4, #11
 802aa32:	f000 f829 	bl	802aa88 <__malloc_unlock>
 802aa36:	f026 0607 	bic.w	r6, r6, #7
 802aa3a:	1d23      	adds	r3, r4, #4
 802aa3c:	1af2      	subs	r2, r6, r3
 802aa3e:	d0ae      	beq.n	802a99e <_malloc_r+0x22>
 802aa40:	1b9b      	subs	r3, r3, r6
 802aa42:	50a3      	str	r3, [r4, r2]
 802aa44:	e7ab      	b.n	802a99e <_malloc_r+0x22>
 802aa46:	42a3      	cmp	r3, r4
 802aa48:	6862      	ldr	r2, [r4, #4]
 802aa4a:	d1dd      	bne.n	802aa08 <_malloc_r+0x8c>
 802aa4c:	f8c8 2000 	str.w	r2, [r8]
 802aa50:	e7ec      	b.n	802aa2c <_malloc_r+0xb0>
 802aa52:	4623      	mov	r3, r4
 802aa54:	6864      	ldr	r4, [r4, #4]
 802aa56:	e7ac      	b.n	802a9b2 <_malloc_r+0x36>
 802aa58:	4634      	mov	r4, r6
 802aa5a:	6876      	ldr	r6, [r6, #4]
 802aa5c:	e7b4      	b.n	802a9c8 <_malloc_r+0x4c>
 802aa5e:	4613      	mov	r3, r2
 802aa60:	e7cc      	b.n	802a9fc <_malloc_r+0x80>
 802aa62:	230c      	movs	r3, #12
 802aa64:	603b      	str	r3, [r7, #0]
 802aa66:	4638      	mov	r0, r7
 802aa68:	f000 f80e 	bl	802aa88 <__malloc_unlock>
 802aa6c:	e797      	b.n	802a99e <_malloc_r+0x22>
 802aa6e:	6025      	str	r5, [r4, #0]
 802aa70:	e7dc      	b.n	802aa2c <_malloc_r+0xb0>
 802aa72:	605b      	str	r3, [r3, #4]
 802aa74:	deff      	udf	#255	; 0xff
 802aa76:	bf00      	nop
 802aa78:	2400b9c0 	.word	0x2400b9c0

0802aa7c <__malloc_lock>:
 802aa7c:	4801      	ldr	r0, [pc, #4]	; (802aa84 <__malloc_lock+0x8>)
 802aa7e:	f000 ba52 	b.w	802af26 <__retarget_lock_acquire_recursive>
 802aa82:	bf00      	nop
 802aa84:	2400bb09 	.word	0x2400bb09

0802aa88 <__malloc_unlock>:
 802aa88:	4801      	ldr	r0, [pc, #4]	; (802aa90 <__malloc_unlock+0x8>)
 802aa8a:	f000 ba4d 	b.w	802af28 <__retarget_lock_release_recursive>
 802aa8e:	bf00      	nop
 802aa90:	2400bb09 	.word	0x2400bb09

0802aa94 <__cxa_atexit>:
 802aa94:	b510      	push	{r4, lr}
 802aa96:	4c05      	ldr	r4, [pc, #20]	; (802aaac <__cxa_atexit+0x18>)
 802aa98:	4613      	mov	r3, r2
 802aa9a:	b12c      	cbz	r4, 802aaa8 <__cxa_atexit+0x14>
 802aa9c:	460a      	mov	r2, r1
 802aa9e:	4601      	mov	r1, r0
 802aaa0:	2002      	movs	r0, #2
 802aaa2:	f000 fa51 	bl	802af48 <__register_exitproc>
 802aaa6:	bd10      	pop	{r4, pc}
 802aaa8:	4620      	mov	r0, r4
 802aaaa:	e7fc      	b.n	802aaa6 <__cxa_atexit+0x12>
 802aaac:	0802af49 	.word	0x0802af49

0802aab0 <std>:
 802aab0:	2300      	movs	r3, #0
 802aab2:	b510      	push	{r4, lr}
 802aab4:	4604      	mov	r4, r0
 802aab6:	e9c0 3300 	strd	r3, r3, [r0]
 802aaba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802aabe:	6083      	str	r3, [r0, #8]
 802aac0:	8181      	strh	r1, [r0, #12]
 802aac2:	6643      	str	r3, [r0, #100]	; 0x64
 802aac4:	81c2      	strh	r2, [r0, #14]
 802aac6:	6183      	str	r3, [r0, #24]
 802aac8:	4619      	mov	r1, r3
 802aaca:	2208      	movs	r2, #8
 802aacc:	305c      	adds	r0, #92	; 0x5c
 802aace:	f000 f906 	bl	802acde <memset>
 802aad2:	4b0d      	ldr	r3, [pc, #52]	; (802ab08 <std+0x58>)
 802aad4:	6263      	str	r3, [r4, #36]	; 0x24
 802aad6:	4b0d      	ldr	r3, [pc, #52]	; (802ab0c <std+0x5c>)
 802aad8:	62a3      	str	r3, [r4, #40]	; 0x28
 802aada:	4b0d      	ldr	r3, [pc, #52]	; (802ab10 <std+0x60>)
 802aadc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802aade:	4b0d      	ldr	r3, [pc, #52]	; (802ab14 <std+0x64>)
 802aae0:	6323      	str	r3, [r4, #48]	; 0x30
 802aae2:	4b0d      	ldr	r3, [pc, #52]	; (802ab18 <std+0x68>)
 802aae4:	6224      	str	r4, [r4, #32]
 802aae6:	429c      	cmp	r4, r3
 802aae8:	d006      	beq.n	802aaf8 <std+0x48>
 802aaea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802aaee:	4294      	cmp	r4, r2
 802aaf0:	d002      	beq.n	802aaf8 <std+0x48>
 802aaf2:	33d0      	adds	r3, #208	; 0xd0
 802aaf4:	429c      	cmp	r4, r3
 802aaf6:	d105      	bne.n	802ab04 <std+0x54>
 802aaf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802aafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ab00:	f000 ba10 	b.w	802af24 <__retarget_lock_init_recursive>
 802ab04:	bd10      	pop	{r4, pc}
 802ab06:	bf00      	nop
 802ab08:	0802ac59 	.word	0x0802ac59
 802ab0c:	0802ac7b 	.word	0x0802ac7b
 802ab10:	0802acb3 	.word	0x0802acb3
 802ab14:	0802acd7 	.word	0x0802acd7
 802ab18:	2400b9c8 	.word	0x2400b9c8

0802ab1c <stdio_exit_handler>:
 802ab1c:	4a02      	ldr	r2, [pc, #8]	; (802ab28 <stdio_exit_handler+0xc>)
 802ab1e:	4903      	ldr	r1, [pc, #12]	; (802ab2c <stdio_exit_handler+0x10>)
 802ab20:	4803      	ldr	r0, [pc, #12]	; (802ab30 <stdio_exit_handler+0x14>)
 802ab22:	f000 b87b 	b.w	802ac1c <_fwalk_sglue>
 802ab26:	bf00      	nop
 802ab28:	240000cc 	.word	0x240000cc
 802ab2c:	0802b751 	.word	0x0802b751
 802ab30:	240000d8 	.word	0x240000d8

0802ab34 <cleanup_stdio>:
 802ab34:	6841      	ldr	r1, [r0, #4]
 802ab36:	4b0c      	ldr	r3, [pc, #48]	; (802ab68 <cleanup_stdio+0x34>)
 802ab38:	4299      	cmp	r1, r3
 802ab3a:	b510      	push	{r4, lr}
 802ab3c:	4604      	mov	r4, r0
 802ab3e:	d001      	beq.n	802ab44 <cleanup_stdio+0x10>
 802ab40:	f000 fe06 	bl	802b750 <_fflush_r>
 802ab44:	68a1      	ldr	r1, [r4, #8]
 802ab46:	4b09      	ldr	r3, [pc, #36]	; (802ab6c <cleanup_stdio+0x38>)
 802ab48:	4299      	cmp	r1, r3
 802ab4a:	d002      	beq.n	802ab52 <cleanup_stdio+0x1e>
 802ab4c:	4620      	mov	r0, r4
 802ab4e:	f000 fdff 	bl	802b750 <_fflush_r>
 802ab52:	68e1      	ldr	r1, [r4, #12]
 802ab54:	4b06      	ldr	r3, [pc, #24]	; (802ab70 <cleanup_stdio+0x3c>)
 802ab56:	4299      	cmp	r1, r3
 802ab58:	d004      	beq.n	802ab64 <cleanup_stdio+0x30>
 802ab5a:	4620      	mov	r0, r4
 802ab5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ab60:	f000 bdf6 	b.w	802b750 <_fflush_r>
 802ab64:	bd10      	pop	{r4, pc}
 802ab66:	bf00      	nop
 802ab68:	2400b9c8 	.word	0x2400b9c8
 802ab6c:	2400ba30 	.word	0x2400ba30
 802ab70:	2400ba98 	.word	0x2400ba98

0802ab74 <global_stdio_init.part.0>:
 802ab74:	b510      	push	{r4, lr}
 802ab76:	4b0b      	ldr	r3, [pc, #44]	; (802aba4 <global_stdio_init.part.0+0x30>)
 802ab78:	4c0b      	ldr	r4, [pc, #44]	; (802aba8 <global_stdio_init.part.0+0x34>)
 802ab7a:	4a0c      	ldr	r2, [pc, #48]	; (802abac <global_stdio_init.part.0+0x38>)
 802ab7c:	601a      	str	r2, [r3, #0]
 802ab7e:	4620      	mov	r0, r4
 802ab80:	2200      	movs	r2, #0
 802ab82:	2104      	movs	r1, #4
 802ab84:	f7ff ff94 	bl	802aab0 <std>
 802ab88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802ab8c:	2201      	movs	r2, #1
 802ab8e:	2109      	movs	r1, #9
 802ab90:	f7ff ff8e 	bl	802aab0 <std>
 802ab94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802ab98:	2202      	movs	r2, #2
 802ab9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ab9e:	2112      	movs	r1, #18
 802aba0:	f7ff bf86 	b.w	802aab0 <std>
 802aba4:	2400bb00 	.word	0x2400bb00
 802aba8:	2400b9c8 	.word	0x2400b9c8
 802abac:	0802ab1d 	.word	0x0802ab1d

0802abb0 <__sfp_lock_acquire>:
 802abb0:	4801      	ldr	r0, [pc, #4]	; (802abb8 <__sfp_lock_acquire+0x8>)
 802abb2:	f000 b9b8 	b.w	802af26 <__retarget_lock_acquire_recursive>
 802abb6:	bf00      	nop
 802abb8:	2400bb0a 	.word	0x2400bb0a

0802abbc <__sfp_lock_release>:
 802abbc:	4801      	ldr	r0, [pc, #4]	; (802abc4 <__sfp_lock_release+0x8>)
 802abbe:	f000 b9b3 	b.w	802af28 <__retarget_lock_release_recursive>
 802abc2:	bf00      	nop
 802abc4:	2400bb0a 	.word	0x2400bb0a

0802abc8 <__sinit>:
 802abc8:	b510      	push	{r4, lr}
 802abca:	4604      	mov	r4, r0
 802abcc:	f7ff fff0 	bl	802abb0 <__sfp_lock_acquire>
 802abd0:	6a23      	ldr	r3, [r4, #32]
 802abd2:	b11b      	cbz	r3, 802abdc <__sinit+0x14>
 802abd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802abd8:	f7ff bff0 	b.w	802abbc <__sfp_lock_release>
 802abdc:	4b04      	ldr	r3, [pc, #16]	; (802abf0 <__sinit+0x28>)
 802abde:	6223      	str	r3, [r4, #32]
 802abe0:	4b04      	ldr	r3, [pc, #16]	; (802abf4 <__sinit+0x2c>)
 802abe2:	681b      	ldr	r3, [r3, #0]
 802abe4:	2b00      	cmp	r3, #0
 802abe6:	d1f5      	bne.n	802abd4 <__sinit+0xc>
 802abe8:	f7ff ffc4 	bl	802ab74 <global_stdio_init.part.0>
 802abec:	e7f2      	b.n	802abd4 <__sinit+0xc>
 802abee:	bf00      	nop
 802abf0:	0802ab35 	.word	0x0802ab35
 802abf4:	2400bb00 	.word	0x2400bb00

0802abf8 <fiprintf>:
 802abf8:	b40e      	push	{r1, r2, r3}
 802abfa:	b503      	push	{r0, r1, lr}
 802abfc:	4601      	mov	r1, r0
 802abfe:	ab03      	add	r3, sp, #12
 802ac00:	4805      	ldr	r0, [pc, #20]	; (802ac18 <fiprintf+0x20>)
 802ac02:	f853 2b04 	ldr.w	r2, [r3], #4
 802ac06:	6800      	ldr	r0, [r0, #0]
 802ac08:	9301      	str	r3, [sp, #4]
 802ac0a:	f000 fa71 	bl	802b0f0 <_vfiprintf_r>
 802ac0e:	b002      	add	sp, #8
 802ac10:	f85d eb04 	ldr.w	lr, [sp], #4
 802ac14:	b003      	add	sp, #12
 802ac16:	4770      	bx	lr
 802ac18:	24000124 	.word	0x24000124

0802ac1c <_fwalk_sglue>:
 802ac1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac20:	4607      	mov	r7, r0
 802ac22:	4688      	mov	r8, r1
 802ac24:	4614      	mov	r4, r2
 802ac26:	2600      	movs	r6, #0
 802ac28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ac2c:	f1b9 0901 	subs.w	r9, r9, #1
 802ac30:	d505      	bpl.n	802ac3e <_fwalk_sglue+0x22>
 802ac32:	6824      	ldr	r4, [r4, #0]
 802ac34:	2c00      	cmp	r4, #0
 802ac36:	d1f7      	bne.n	802ac28 <_fwalk_sglue+0xc>
 802ac38:	4630      	mov	r0, r6
 802ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ac3e:	89ab      	ldrh	r3, [r5, #12]
 802ac40:	2b01      	cmp	r3, #1
 802ac42:	d907      	bls.n	802ac54 <_fwalk_sglue+0x38>
 802ac44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ac48:	3301      	adds	r3, #1
 802ac4a:	d003      	beq.n	802ac54 <_fwalk_sglue+0x38>
 802ac4c:	4629      	mov	r1, r5
 802ac4e:	4638      	mov	r0, r7
 802ac50:	47c0      	blx	r8
 802ac52:	4306      	orrs	r6, r0
 802ac54:	3568      	adds	r5, #104	; 0x68
 802ac56:	e7e9      	b.n	802ac2c <_fwalk_sglue+0x10>

0802ac58 <__sread>:
 802ac58:	b510      	push	{r4, lr}
 802ac5a:	460c      	mov	r4, r1
 802ac5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac60:	f000 f8ee 	bl	802ae40 <_read_r>
 802ac64:	2800      	cmp	r0, #0
 802ac66:	bfab      	itete	ge
 802ac68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ac6a:	89a3      	ldrhlt	r3, [r4, #12]
 802ac6c:	181b      	addge	r3, r3, r0
 802ac6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ac72:	bfac      	ite	ge
 802ac74:	6563      	strge	r3, [r4, #84]	; 0x54
 802ac76:	81a3      	strhlt	r3, [r4, #12]
 802ac78:	bd10      	pop	{r4, pc}

0802ac7a <__swrite>:
 802ac7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ac7e:	461f      	mov	r7, r3
 802ac80:	898b      	ldrh	r3, [r1, #12]
 802ac82:	05db      	lsls	r3, r3, #23
 802ac84:	4605      	mov	r5, r0
 802ac86:	460c      	mov	r4, r1
 802ac88:	4616      	mov	r6, r2
 802ac8a:	d505      	bpl.n	802ac98 <__swrite+0x1e>
 802ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac90:	2302      	movs	r3, #2
 802ac92:	2200      	movs	r2, #0
 802ac94:	f000 f8c2 	bl	802ae1c <_lseek_r>
 802ac98:	89a3      	ldrh	r3, [r4, #12]
 802ac9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ac9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802aca2:	81a3      	strh	r3, [r4, #12]
 802aca4:	4632      	mov	r2, r6
 802aca6:	463b      	mov	r3, r7
 802aca8:	4628      	mov	r0, r5
 802acaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802acae:	f000 b8fd 	b.w	802aeac <_write_r>

0802acb2 <__sseek>:
 802acb2:	b510      	push	{r4, lr}
 802acb4:	460c      	mov	r4, r1
 802acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acba:	f000 f8af 	bl	802ae1c <_lseek_r>
 802acbe:	1c43      	adds	r3, r0, #1
 802acc0:	89a3      	ldrh	r3, [r4, #12]
 802acc2:	bf15      	itete	ne
 802acc4:	6560      	strne	r0, [r4, #84]	; 0x54
 802acc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802acca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802acce:	81a3      	strheq	r3, [r4, #12]
 802acd0:	bf18      	it	ne
 802acd2:	81a3      	strhne	r3, [r4, #12]
 802acd4:	bd10      	pop	{r4, pc}

0802acd6 <__sclose>:
 802acd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802acda:	f000 b839 	b.w	802ad50 <_close_r>

0802acde <memset>:
 802acde:	4402      	add	r2, r0
 802ace0:	4603      	mov	r3, r0
 802ace2:	4293      	cmp	r3, r2
 802ace4:	d100      	bne.n	802ace8 <memset+0xa>
 802ace6:	4770      	bx	lr
 802ace8:	f803 1b01 	strb.w	r1, [r3], #1
 802acec:	e7f9      	b.n	802ace2 <memset+0x4>

0802acee <_raise_r>:
 802acee:	291f      	cmp	r1, #31
 802acf0:	b538      	push	{r3, r4, r5, lr}
 802acf2:	4604      	mov	r4, r0
 802acf4:	460d      	mov	r5, r1
 802acf6:	d904      	bls.n	802ad02 <_raise_r+0x14>
 802acf8:	2316      	movs	r3, #22
 802acfa:	6003      	str	r3, [r0, #0]
 802acfc:	f04f 30ff 	mov.w	r0, #4294967295
 802ad00:	bd38      	pop	{r3, r4, r5, pc}
 802ad02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802ad04:	b112      	cbz	r2, 802ad0c <_raise_r+0x1e>
 802ad06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ad0a:	b94b      	cbnz	r3, 802ad20 <_raise_r+0x32>
 802ad0c:	4620      	mov	r0, r4
 802ad0e:	f000 f8bb 	bl	802ae88 <_getpid_r>
 802ad12:	462a      	mov	r2, r5
 802ad14:	4601      	mov	r1, r0
 802ad16:	4620      	mov	r0, r4
 802ad18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ad1c:	f000 b8a2 	b.w	802ae64 <_kill_r>
 802ad20:	2b01      	cmp	r3, #1
 802ad22:	d00a      	beq.n	802ad3a <_raise_r+0x4c>
 802ad24:	1c59      	adds	r1, r3, #1
 802ad26:	d103      	bne.n	802ad30 <_raise_r+0x42>
 802ad28:	2316      	movs	r3, #22
 802ad2a:	6003      	str	r3, [r0, #0]
 802ad2c:	2001      	movs	r0, #1
 802ad2e:	e7e7      	b.n	802ad00 <_raise_r+0x12>
 802ad30:	2400      	movs	r4, #0
 802ad32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ad36:	4628      	mov	r0, r5
 802ad38:	4798      	blx	r3
 802ad3a:	2000      	movs	r0, #0
 802ad3c:	e7e0      	b.n	802ad00 <_raise_r+0x12>
	...

0802ad40 <raise>:
 802ad40:	4b02      	ldr	r3, [pc, #8]	; (802ad4c <raise+0xc>)
 802ad42:	4601      	mov	r1, r0
 802ad44:	6818      	ldr	r0, [r3, #0]
 802ad46:	f7ff bfd2 	b.w	802acee <_raise_r>
 802ad4a:	bf00      	nop
 802ad4c:	24000124 	.word	0x24000124

0802ad50 <_close_r>:
 802ad50:	b538      	push	{r3, r4, r5, lr}
 802ad52:	4d06      	ldr	r5, [pc, #24]	; (802ad6c <_close_r+0x1c>)
 802ad54:	2300      	movs	r3, #0
 802ad56:	4604      	mov	r4, r0
 802ad58:	4608      	mov	r0, r1
 802ad5a:	602b      	str	r3, [r5, #0]
 802ad5c:	f7d6 fd29 	bl	80017b2 <_close>
 802ad60:	1c43      	adds	r3, r0, #1
 802ad62:	d102      	bne.n	802ad6a <_close_r+0x1a>
 802ad64:	682b      	ldr	r3, [r5, #0]
 802ad66:	b103      	cbz	r3, 802ad6a <_close_r+0x1a>
 802ad68:	6023      	str	r3, [r4, #0]
 802ad6a:	bd38      	pop	{r3, r4, r5, pc}
 802ad6c:	2400bb04 	.word	0x2400bb04

0802ad70 <_reclaim_reent>:
 802ad70:	4b29      	ldr	r3, [pc, #164]	; (802ae18 <_reclaim_reent+0xa8>)
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	4283      	cmp	r3, r0
 802ad76:	b570      	push	{r4, r5, r6, lr}
 802ad78:	4604      	mov	r4, r0
 802ad7a:	d04b      	beq.n	802ae14 <_reclaim_reent+0xa4>
 802ad7c:	69c3      	ldr	r3, [r0, #28]
 802ad7e:	b143      	cbz	r3, 802ad92 <_reclaim_reent+0x22>
 802ad80:	68db      	ldr	r3, [r3, #12]
 802ad82:	2b00      	cmp	r3, #0
 802ad84:	d144      	bne.n	802ae10 <_reclaim_reent+0xa0>
 802ad86:	69e3      	ldr	r3, [r4, #28]
 802ad88:	6819      	ldr	r1, [r3, #0]
 802ad8a:	b111      	cbz	r1, 802ad92 <_reclaim_reent+0x22>
 802ad8c:	4620      	mov	r0, r4
 802ad8e:	f000 f939 	bl	802b004 <_free_r>
 802ad92:	6961      	ldr	r1, [r4, #20]
 802ad94:	b111      	cbz	r1, 802ad9c <_reclaim_reent+0x2c>
 802ad96:	4620      	mov	r0, r4
 802ad98:	f000 f934 	bl	802b004 <_free_r>
 802ad9c:	69e1      	ldr	r1, [r4, #28]
 802ad9e:	b111      	cbz	r1, 802ada6 <_reclaim_reent+0x36>
 802ada0:	4620      	mov	r0, r4
 802ada2:	f000 f92f 	bl	802b004 <_free_r>
 802ada6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802ada8:	b111      	cbz	r1, 802adb0 <_reclaim_reent+0x40>
 802adaa:	4620      	mov	r0, r4
 802adac:	f000 f92a 	bl	802b004 <_free_r>
 802adb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802adb2:	b111      	cbz	r1, 802adba <_reclaim_reent+0x4a>
 802adb4:	4620      	mov	r0, r4
 802adb6:	f000 f925 	bl	802b004 <_free_r>
 802adba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802adbc:	b111      	cbz	r1, 802adc4 <_reclaim_reent+0x54>
 802adbe:	4620      	mov	r0, r4
 802adc0:	f000 f920 	bl	802b004 <_free_r>
 802adc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802adc6:	b111      	cbz	r1, 802adce <_reclaim_reent+0x5e>
 802adc8:	4620      	mov	r0, r4
 802adca:	f000 f91b 	bl	802b004 <_free_r>
 802adce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802add0:	b111      	cbz	r1, 802add8 <_reclaim_reent+0x68>
 802add2:	4620      	mov	r0, r4
 802add4:	f000 f916 	bl	802b004 <_free_r>
 802add8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802adda:	b111      	cbz	r1, 802ade2 <_reclaim_reent+0x72>
 802addc:	4620      	mov	r0, r4
 802adde:	f000 f911 	bl	802b004 <_free_r>
 802ade2:	6a23      	ldr	r3, [r4, #32]
 802ade4:	b1b3      	cbz	r3, 802ae14 <_reclaim_reent+0xa4>
 802ade6:	4620      	mov	r0, r4
 802ade8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802adec:	4718      	bx	r3
 802adee:	5949      	ldr	r1, [r1, r5]
 802adf0:	b941      	cbnz	r1, 802ae04 <_reclaim_reent+0x94>
 802adf2:	3504      	adds	r5, #4
 802adf4:	69e3      	ldr	r3, [r4, #28]
 802adf6:	2d80      	cmp	r5, #128	; 0x80
 802adf8:	68d9      	ldr	r1, [r3, #12]
 802adfa:	d1f8      	bne.n	802adee <_reclaim_reent+0x7e>
 802adfc:	4620      	mov	r0, r4
 802adfe:	f000 f901 	bl	802b004 <_free_r>
 802ae02:	e7c0      	b.n	802ad86 <_reclaim_reent+0x16>
 802ae04:	680e      	ldr	r6, [r1, #0]
 802ae06:	4620      	mov	r0, r4
 802ae08:	f000 f8fc 	bl	802b004 <_free_r>
 802ae0c:	4631      	mov	r1, r6
 802ae0e:	e7ef      	b.n	802adf0 <_reclaim_reent+0x80>
 802ae10:	2500      	movs	r5, #0
 802ae12:	e7ef      	b.n	802adf4 <_reclaim_reent+0x84>
 802ae14:	bd70      	pop	{r4, r5, r6, pc}
 802ae16:	bf00      	nop
 802ae18:	24000124 	.word	0x24000124

0802ae1c <_lseek_r>:
 802ae1c:	b538      	push	{r3, r4, r5, lr}
 802ae1e:	4d07      	ldr	r5, [pc, #28]	; (802ae3c <_lseek_r+0x20>)
 802ae20:	4604      	mov	r4, r0
 802ae22:	4608      	mov	r0, r1
 802ae24:	4611      	mov	r1, r2
 802ae26:	2200      	movs	r2, #0
 802ae28:	602a      	str	r2, [r5, #0]
 802ae2a:	461a      	mov	r2, r3
 802ae2c:	f7d6 fce8 	bl	8001800 <_lseek>
 802ae30:	1c43      	adds	r3, r0, #1
 802ae32:	d102      	bne.n	802ae3a <_lseek_r+0x1e>
 802ae34:	682b      	ldr	r3, [r5, #0]
 802ae36:	b103      	cbz	r3, 802ae3a <_lseek_r+0x1e>
 802ae38:	6023      	str	r3, [r4, #0]
 802ae3a:	bd38      	pop	{r3, r4, r5, pc}
 802ae3c:	2400bb04 	.word	0x2400bb04

0802ae40 <_read_r>:
 802ae40:	b538      	push	{r3, r4, r5, lr}
 802ae42:	4d07      	ldr	r5, [pc, #28]	; (802ae60 <_read_r+0x20>)
 802ae44:	4604      	mov	r4, r0
 802ae46:	4608      	mov	r0, r1
 802ae48:	4611      	mov	r1, r2
 802ae4a:	2200      	movs	r2, #0
 802ae4c:	602a      	str	r2, [r5, #0]
 802ae4e:	461a      	mov	r2, r3
 802ae50:	f7d6 fc76 	bl	8001740 <_read>
 802ae54:	1c43      	adds	r3, r0, #1
 802ae56:	d102      	bne.n	802ae5e <_read_r+0x1e>
 802ae58:	682b      	ldr	r3, [r5, #0]
 802ae5a:	b103      	cbz	r3, 802ae5e <_read_r+0x1e>
 802ae5c:	6023      	str	r3, [r4, #0]
 802ae5e:	bd38      	pop	{r3, r4, r5, pc}
 802ae60:	2400bb04 	.word	0x2400bb04

0802ae64 <_kill_r>:
 802ae64:	b538      	push	{r3, r4, r5, lr}
 802ae66:	4d07      	ldr	r5, [pc, #28]	; (802ae84 <_kill_r+0x20>)
 802ae68:	2300      	movs	r3, #0
 802ae6a:	4604      	mov	r4, r0
 802ae6c:	4608      	mov	r0, r1
 802ae6e:	4611      	mov	r1, r2
 802ae70:	602b      	str	r3, [r5, #0]
 802ae72:	f7d6 fc4b 	bl	800170c <_kill>
 802ae76:	1c43      	adds	r3, r0, #1
 802ae78:	d102      	bne.n	802ae80 <_kill_r+0x1c>
 802ae7a:	682b      	ldr	r3, [r5, #0]
 802ae7c:	b103      	cbz	r3, 802ae80 <_kill_r+0x1c>
 802ae7e:	6023      	str	r3, [r4, #0]
 802ae80:	bd38      	pop	{r3, r4, r5, pc}
 802ae82:	bf00      	nop
 802ae84:	2400bb04 	.word	0x2400bb04

0802ae88 <_getpid_r>:
 802ae88:	f7d6 bc38 	b.w	80016fc <_getpid>

0802ae8c <_sbrk_r>:
 802ae8c:	b538      	push	{r3, r4, r5, lr}
 802ae8e:	4d06      	ldr	r5, [pc, #24]	; (802aea8 <_sbrk_r+0x1c>)
 802ae90:	2300      	movs	r3, #0
 802ae92:	4604      	mov	r4, r0
 802ae94:	4608      	mov	r0, r1
 802ae96:	602b      	str	r3, [r5, #0]
 802ae98:	f7d6 fcc0 	bl	800181c <_sbrk>
 802ae9c:	1c43      	adds	r3, r0, #1
 802ae9e:	d102      	bne.n	802aea6 <_sbrk_r+0x1a>
 802aea0:	682b      	ldr	r3, [r5, #0]
 802aea2:	b103      	cbz	r3, 802aea6 <_sbrk_r+0x1a>
 802aea4:	6023      	str	r3, [r4, #0]
 802aea6:	bd38      	pop	{r3, r4, r5, pc}
 802aea8:	2400bb04 	.word	0x2400bb04

0802aeac <_write_r>:
 802aeac:	b538      	push	{r3, r4, r5, lr}
 802aeae:	4d07      	ldr	r5, [pc, #28]	; (802aecc <_write_r+0x20>)
 802aeb0:	4604      	mov	r4, r0
 802aeb2:	4608      	mov	r0, r1
 802aeb4:	4611      	mov	r1, r2
 802aeb6:	2200      	movs	r2, #0
 802aeb8:	602a      	str	r2, [r5, #0]
 802aeba:	461a      	mov	r2, r3
 802aebc:	f7d6 fc5d 	bl	800177a <_write>
 802aec0:	1c43      	adds	r3, r0, #1
 802aec2:	d102      	bne.n	802aeca <_write_r+0x1e>
 802aec4:	682b      	ldr	r3, [r5, #0]
 802aec6:	b103      	cbz	r3, 802aeca <_write_r+0x1e>
 802aec8:	6023      	str	r3, [r4, #0]
 802aeca:	bd38      	pop	{r3, r4, r5, pc}
 802aecc:	2400bb04 	.word	0x2400bb04

0802aed0 <__errno>:
 802aed0:	4b01      	ldr	r3, [pc, #4]	; (802aed8 <__errno+0x8>)
 802aed2:	6818      	ldr	r0, [r3, #0]
 802aed4:	4770      	bx	lr
 802aed6:	bf00      	nop
 802aed8:	24000124 	.word	0x24000124

0802aedc <__libc_init_array>:
 802aedc:	b570      	push	{r4, r5, r6, lr}
 802aede:	4d0d      	ldr	r5, [pc, #52]	; (802af14 <__libc_init_array+0x38>)
 802aee0:	4c0d      	ldr	r4, [pc, #52]	; (802af18 <__libc_init_array+0x3c>)
 802aee2:	1b64      	subs	r4, r4, r5
 802aee4:	10a4      	asrs	r4, r4, #2
 802aee6:	2600      	movs	r6, #0
 802aee8:	42a6      	cmp	r6, r4
 802aeea:	d109      	bne.n	802af00 <__libc_init_array+0x24>
 802aeec:	4d0b      	ldr	r5, [pc, #44]	; (802af1c <__libc_init_array+0x40>)
 802aeee:	4c0c      	ldr	r4, [pc, #48]	; (802af20 <__libc_init_array+0x44>)
 802aef0:	f000 fd70 	bl	802b9d4 <_init>
 802aef4:	1b64      	subs	r4, r4, r5
 802aef6:	10a4      	asrs	r4, r4, #2
 802aef8:	2600      	movs	r6, #0
 802aefa:	42a6      	cmp	r6, r4
 802aefc:	d105      	bne.n	802af0a <__libc_init_array+0x2e>
 802aefe:	bd70      	pop	{r4, r5, r6, pc}
 802af00:	f855 3b04 	ldr.w	r3, [r5], #4
 802af04:	4798      	blx	r3
 802af06:	3601      	adds	r6, #1
 802af08:	e7ee      	b.n	802aee8 <__libc_init_array+0xc>
 802af0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802af0e:	4798      	blx	r3
 802af10:	3601      	adds	r6, #1
 802af12:	e7f2      	b.n	802aefa <__libc_init_array+0x1e>
 802af14:	080303c4 	.word	0x080303c4
 802af18:	080303c4 	.word	0x080303c4
 802af1c:	080303c4 	.word	0x080303c4
 802af20:	080303d8 	.word	0x080303d8

0802af24 <__retarget_lock_init_recursive>:
 802af24:	4770      	bx	lr

0802af26 <__retarget_lock_acquire_recursive>:
 802af26:	4770      	bx	lr

0802af28 <__retarget_lock_release_recursive>:
 802af28:	4770      	bx	lr

0802af2a <memcpy>:
 802af2a:	440a      	add	r2, r1
 802af2c:	4291      	cmp	r1, r2
 802af2e:	f100 33ff 	add.w	r3, r0, #4294967295
 802af32:	d100      	bne.n	802af36 <memcpy+0xc>
 802af34:	4770      	bx	lr
 802af36:	b510      	push	{r4, lr}
 802af38:	f811 4b01 	ldrb.w	r4, [r1], #1
 802af3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802af40:	4291      	cmp	r1, r2
 802af42:	d1f9      	bne.n	802af38 <memcpy+0xe>
 802af44:	bd10      	pop	{r4, pc}
	...

0802af48 <__register_exitproc>:
 802af48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802af4c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802b000 <__register_exitproc+0xb8>
 802af50:	4606      	mov	r6, r0
 802af52:	f8d8 0000 	ldr.w	r0, [r8]
 802af56:	461f      	mov	r7, r3
 802af58:	460d      	mov	r5, r1
 802af5a:	4691      	mov	r9, r2
 802af5c:	f7ff ffe3 	bl	802af26 <__retarget_lock_acquire_recursive>
 802af60:	4b23      	ldr	r3, [pc, #140]	; (802aff0 <__register_exitproc+0xa8>)
 802af62:	681c      	ldr	r4, [r3, #0]
 802af64:	b934      	cbnz	r4, 802af74 <__register_exitproc+0x2c>
 802af66:	4c23      	ldr	r4, [pc, #140]	; (802aff4 <__register_exitproc+0xac>)
 802af68:	601c      	str	r4, [r3, #0]
 802af6a:	4b23      	ldr	r3, [pc, #140]	; (802aff8 <__register_exitproc+0xb0>)
 802af6c:	b113      	cbz	r3, 802af74 <__register_exitproc+0x2c>
 802af6e:	681b      	ldr	r3, [r3, #0]
 802af70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802af74:	6863      	ldr	r3, [r4, #4]
 802af76:	2b1f      	cmp	r3, #31
 802af78:	dd07      	ble.n	802af8a <__register_exitproc+0x42>
 802af7a:	f8d8 0000 	ldr.w	r0, [r8]
 802af7e:	f7ff ffd3 	bl	802af28 <__retarget_lock_release_recursive>
 802af82:	f04f 30ff 	mov.w	r0, #4294967295
 802af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802af8a:	b32e      	cbz	r6, 802afd8 <__register_exitproc+0x90>
 802af8c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802af90:	b968      	cbnz	r0, 802afae <__register_exitproc+0x66>
 802af92:	4b1a      	ldr	r3, [pc, #104]	; (802affc <__register_exitproc+0xb4>)
 802af94:	2b00      	cmp	r3, #0
 802af96:	d0f0      	beq.n	802af7a <__register_exitproc+0x32>
 802af98:	f44f 7084 	mov.w	r0, #264	; 0x108
 802af9c:	f7ff fcbe 	bl	802a91c <malloc>
 802afa0:	2800      	cmp	r0, #0
 802afa2:	d0ea      	beq.n	802af7a <__register_exitproc+0x32>
 802afa4:	2300      	movs	r3, #0
 802afa6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802afaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802afae:	6863      	ldr	r3, [r4, #4]
 802afb0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802afb4:	2201      	movs	r2, #1
 802afb6:	409a      	lsls	r2, r3
 802afb8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802afbc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802afc0:	4313      	orrs	r3, r2
 802afc2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802afc6:	2e02      	cmp	r6, #2
 802afc8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802afcc:	bf02      	ittt	eq
 802afce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802afd2:	4313      	orreq	r3, r2
 802afd4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802afd8:	6863      	ldr	r3, [r4, #4]
 802afda:	f8d8 0000 	ldr.w	r0, [r8]
 802afde:	1c5a      	adds	r2, r3, #1
 802afe0:	3302      	adds	r3, #2
 802afe2:	6062      	str	r2, [r4, #4]
 802afe4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802afe8:	f7ff ff9e 	bl	802af28 <__retarget_lock_release_recursive>
 802afec:	2000      	movs	r0, #0
 802afee:	e7ca      	b.n	802af86 <__register_exitproc+0x3e>
 802aff0:	2400bb98 	.word	0x2400bb98
 802aff4:	2400bb0c 	.word	0x2400bb0c
 802aff8:	08030364 	.word	0x08030364
 802affc:	0802a91d 	.word	0x0802a91d
 802b000:	24000128 	.word	0x24000128

0802b004 <_free_r>:
 802b004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b006:	2900      	cmp	r1, #0
 802b008:	d044      	beq.n	802b094 <_free_r+0x90>
 802b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b00e:	9001      	str	r0, [sp, #4]
 802b010:	2b00      	cmp	r3, #0
 802b012:	f1a1 0404 	sub.w	r4, r1, #4
 802b016:	bfb8      	it	lt
 802b018:	18e4      	addlt	r4, r4, r3
 802b01a:	f7ff fd2f 	bl	802aa7c <__malloc_lock>
 802b01e:	4a1e      	ldr	r2, [pc, #120]	; (802b098 <_free_r+0x94>)
 802b020:	9801      	ldr	r0, [sp, #4]
 802b022:	6813      	ldr	r3, [r2, #0]
 802b024:	b933      	cbnz	r3, 802b034 <_free_r+0x30>
 802b026:	6063      	str	r3, [r4, #4]
 802b028:	6014      	str	r4, [r2, #0]
 802b02a:	b003      	add	sp, #12
 802b02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b030:	f7ff bd2a 	b.w	802aa88 <__malloc_unlock>
 802b034:	42a3      	cmp	r3, r4
 802b036:	d908      	bls.n	802b04a <_free_r+0x46>
 802b038:	6825      	ldr	r5, [r4, #0]
 802b03a:	1961      	adds	r1, r4, r5
 802b03c:	428b      	cmp	r3, r1
 802b03e:	bf01      	itttt	eq
 802b040:	6819      	ldreq	r1, [r3, #0]
 802b042:	685b      	ldreq	r3, [r3, #4]
 802b044:	1949      	addeq	r1, r1, r5
 802b046:	6021      	streq	r1, [r4, #0]
 802b048:	e7ed      	b.n	802b026 <_free_r+0x22>
 802b04a:	461a      	mov	r2, r3
 802b04c:	685b      	ldr	r3, [r3, #4]
 802b04e:	b10b      	cbz	r3, 802b054 <_free_r+0x50>
 802b050:	42a3      	cmp	r3, r4
 802b052:	d9fa      	bls.n	802b04a <_free_r+0x46>
 802b054:	6811      	ldr	r1, [r2, #0]
 802b056:	1855      	adds	r5, r2, r1
 802b058:	42a5      	cmp	r5, r4
 802b05a:	d10b      	bne.n	802b074 <_free_r+0x70>
 802b05c:	6824      	ldr	r4, [r4, #0]
 802b05e:	4421      	add	r1, r4
 802b060:	1854      	adds	r4, r2, r1
 802b062:	42a3      	cmp	r3, r4
 802b064:	6011      	str	r1, [r2, #0]
 802b066:	d1e0      	bne.n	802b02a <_free_r+0x26>
 802b068:	681c      	ldr	r4, [r3, #0]
 802b06a:	685b      	ldr	r3, [r3, #4]
 802b06c:	6053      	str	r3, [r2, #4]
 802b06e:	440c      	add	r4, r1
 802b070:	6014      	str	r4, [r2, #0]
 802b072:	e7da      	b.n	802b02a <_free_r+0x26>
 802b074:	d902      	bls.n	802b07c <_free_r+0x78>
 802b076:	230c      	movs	r3, #12
 802b078:	6003      	str	r3, [r0, #0]
 802b07a:	e7d6      	b.n	802b02a <_free_r+0x26>
 802b07c:	6825      	ldr	r5, [r4, #0]
 802b07e:	1961      	adds	r1, r4, r5
 802b080:	428b      	cmp	r3, r1
 802b082:	bf04      	itt	eq
 802b084:	6819      	ldreq	r1, [r3, #0]
 802b086:	685b      	ldreq	r3, [r3, #4]
 802b088:	6063      	str	r3, [r4, #4]
 802b08a:	bf04      	itt	eq
 802b08c:	1949      	addeq	r1, r1, r5
 802b08e:	6021      	streq	r1, [r4, #0]
 802b090:	6054      	str	r4, [r2, #4]
 802b092:	e7ca      	b.n	802b02a <_free_r+0x26>
 802b094:	b003      	add	sp, #12
 802b096:	bd30      	pop	{r4, r5, pc}
 802b098:	2400b9c0 	.word	0x2400b9c0

0802b09c <__sfputc_r>:
 802b09c:	6893      	ldr	r3, [r2, #8]
 802b09e:	3b01      	subs	r3, #1
 802b0a0:	2b00      	cmp	r3, #0
 802b0a2:	b410      	push	{r4}
 802b0a4:	6093      	str	r3, [r2, #8]
 802b0a6:	da08      	bge.n	802b0ba <__sfputc_r+0x1e>
 802b0a8:	6994      	ldr	r4, [r2, #24]
 802b0aa:	42a3      	cmp	r3, r4
 802b0ac:	db01      	blt.n	802b0b2 <__sfputc_r+0x16>
 802b0ae:	290a      	cmp	r1, #10
 802b0b0:	d103      	bne.n	802b0ba <__sfputc_r+0x1e>
 802b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b0b6:	f000 bb73 	b.w	802b7a0 <__swbuf_r>
 802b0ba:	6813      	ldr	r3, [r2, #0]
 802b0bc:	1c58      	adds	r0, r3, #1
 802b0be:	6010      	str	r0, [r2, #0]
 802b0c0:	7019      	strb	r1, [r3, #0]
 802b0c2:	4608      	mov	r0, r1
 802b0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b0c8:	4770      	bx	lr

0802b0ca <__sfputs_r>:
 802b0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b0cc:	4606      	mov	r6, r0
 802b0ce:	460f      	mov	r7, r1
 802b0d0:	4614      	mov	r4, r2
 802b0d2:	18d5      	adds	r5, r2, r3
 802b0d4:	42ac      	cmp	r4, r5
 802b0d6:	d101      	bne.n	802b0dc <__sfputs_r+0x12>
 802b0d8:	2000      	movs	r0, #0
 802b0da:	e007      	b.n	802b0ec <__sfputs_r+0x22>
 802b0dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b0e0:	463a      	mov	r2, r7
 802b0e2:	4630      	mov	r0, r6
 802b0e4:	f7ff ffda 	bl	802b09c <__sfputc_r>
 802b0e8:	1c43      	adds	r3, r0, #1
 802b0ea:	d1f3      	bne.n	802b0d4 <__sfputs_r+0xa>
 802b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b0f0 <_vfiprintf_r>:
 802b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0f4:	460d      	mov	r5, r1
 802b0f6:	b09d      	sub	sp, #116	; 0x74
 802b0f8:	4614      	mov	r4, r2
 802b0fa:	4698      	mov	r8, r3
 802b0fc:	4606      	mov	r6, r0
 802b0fe:	b118      	cbz	r0, 802b108 <_vfiprintf_r+0x18>
 802b100:	6a03      	ldr	r3, [r0, #32]
 802b102:	b90b      	cbnz	r3, 802b108 <_vfiprintf_r+0x18>
 802b104:	f7ff fd60 	bl	802abc8 <__sinit>
 802b108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b10a:	07d9      	lsls	r1, r3, #31
 802b10c:	d405      	bmi.n	802b11a <_vfiprintf_r+0x2a>
 802b10e:	89ab      	ldrh	r3, [r5, #12]
 802b110:	059a      	lsls	r2, r3, #22
 802b112:	d402      	bmi.n	802b11a <_vfiprintf_r+0x2a>
 802b114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b116:	f7ff ff06 	bl	802af26 <__retarget_lock_acquire_recursive>
 802b11a:	89ab      	ldrh	r3, [r5, #12]
 802b11c:	071b      	lsls	r3, r3, #28
 802b11e:	d501      	bpl.n	802b124 <_vfiprintf_r+0x34>
 802b120:	692b      	ldr	r3, [r5, #16]
 802b122:	b99b      	cbnz	r3, 802b14c <_vfiprintf_r+0x5c>
 802b124:	4629      	mov	r1, r5
 802b126:	4630      	mov	r0, r6
 802b128:	f000 fb78 	bl	802b81c <__swsetup_r>
 802b12c:	b170      	cbz	r0, 802b14c <_vfiprintf_r+0x5c>
 802b12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b130:	07dc      	lsls	r4, r3, #31
 802b132:	d504      	bpl.n	802b13e <_vfiprintf_r+0x4e>
 802b134:	f04f 30ff 	mov.w	r0, #4294967295
 802b138:	b01d      	add	sp, #116	; 0x74
 802b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b13e:	89ab      	ldrh	r3, [r5, #12]
 802b140:	0598      	lsls	r0, r3, #22
 802b142:	d4f7      	bmi.n	802b134 <_vfiprintf_r+0x44>
 802b144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b146:	f7ff feef 	bl	802af28 <__retarget_lock_release_recursive>
 802b14a:	e7f3      	b.n	802b134 <_vfiprintf_r+0x44>
 802b14c:	2300      	movs	r3, #0
 802b14e:	9309      	str	r3, [sp, #36]	; 0x24
 802b150:	2320      	movs	r3, #32
 802b152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b156:	f8cd 800c 	str.w	r8, [sp, #12]
 802b15a:	2330      	movs	r3, #48	; 0x30
 802b15c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802b310 <_vfiprintf_r+0x220>
 802b160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b164:	f04f 0901 	mov.w	r9, #1
 802b168:	4623      	mov	r3, r4
 802b16a:	469a      	mov	sl, r3
 802b16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b170:	b10a      	cbz	r2, 802b176 <_vfiprintf_r+0x86>
 802b172:	2a25      	cmp	r2, #37	; 0x25
 802b174:	d1f9      	bne.n	802b16a <_vfiprintf_r+0x7a>
 802b176:	ebba 0b04 	subs.w	fp, sl, r4
 802b17a:	d00b      	beq.n	802b194 <_vfiprintf_r+0xa4>
 802b17c:	465b      	mov	r3, fp
 802b17e:	4622      	mov	r2, r4
 802b180:	4629      	mov	r1, r5
 802b182:	4630      	mov	r0, r6
 802b184:	f7ff ffa1 	bl	802b0ca <__sfputs_r>
 802b188:	3001      	adds	r0, #1
 802b18a:	f000 80a9 	beq.w	802b2e0 <_vfiprintf_r+0x1f0>
 802b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b190:	445a      	add	r2, fp
 802b192:	9209      	str	r2, [sp, #36]	; 0x24
 802b194:	f89a 3000 	ldrb.w	r3, [sl]
 802b198:	2b00      	cmp	r3, #0
 802b19a:	f000 80a1 	beq.w	802b2e0 <_vfiprintf_r+0x1f0>
 802b19e:	2300      	movs	r3, #0
 802b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 802b1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b1a8:	f10a 0a01 	add.w	sl, sl, #1
 802b1ac:	9304      	str	r3, [sp, #16]
 802b1ae:	9307      	str	r3, [sp, #28]
 802b1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b1b4:	931a      	str	r3, [sp, #104]	; 0x68
 802b1b6:	4654      	mov	r4, sl
 802b1b8:	2205      	movs	r2, #5
 802b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b1be:	4854      	ldr	r0, [pc, #336]	; (802b310 <_vfiprintf_r+0x220>)
 802b1c0:	f7d5 f88e 	bl	80002e0 <memchr>
 802b1c4:	9a04      	ldr	r2, [sp, #16]
 802b1c6:	b9d8      	cbnz	r0, 802b200 <_vfiprintf_r+0x110>
 802b1c8:	06d1      	lsls	r1, r2, #27
 802b1ca:	bf44      	itt	mi
 802b1cc:	2320      	movmi	r3, #32
 802b1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1d2:	0713      	lsls	r3, r2, #28
 802b1d4:	bf44      	itt	mi
 802b1d6:	232b      	movmi	r3, #43	; 0x2b
 802b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 802b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 802b1e2:	d015      	beq.n	802b210 <_vfiprintf_r+0x120>
 802b1e4:	9a07      	ldr	r2, [sp, #28]
 802b1e6:	4654      	mov	r4, sl
 802b1e8:	2000      	movs	r0, #0
 802b1ea:	f04f 0c0a 	mov.w	ip, #10
 802b1ee:	4621      	mov	r1, r4
 802b1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b1f4:	3b30      	subs	r3, #48	; 0x30
 802b1f6:	2b09      	cmp	r3, #9
 802b1f8:	d94d      	bls.n	802b296 <_vfiprintf_r+0x1a6>
 802b1fa:	b1b0      	cbz	r0, 802b22a <_vfiprintf_r+0x13a>
 802b1fc:	9207      	str	r2, [sp, #28]
 802b1fe:	e014      	b.n	802b22a <_vfiprintf_r+0x13a>
 802b200:	eba0 0308 	sub.w	r3, r0, r8
 802b204:	fa09 f303 	lsl.w	r3, r9, r3
 802b208:	4313      	orrs	r3, r2
 802b20a:	9304      	str	r3, [sp, #16]
 802b20c:	46a2      	mov	sl, r4
 802b20e:	e7d2      	b.n	802b1b6 <_vfiprintf_r+0xc6>
 802b210:	9b03      	ldr	r3, [sp, #12]
 802b212:	1d19      	adds	r1, r3, #4
 802b214:	681b      	ldr	r3, [r3, #0]
 802b216:	9103      	str	r1, [sp, #12]
 802b218:	2b00      	cmp	r3, #0
 802b21a:	bfbb      	ittet	lt
 802b21c:	425b      	neglt	r3, r3
 802b21e:	f042 0202 	orrlt.w	r2, r2, #2
 802b222:	9307      	strge	r3, [sp, #28]
 802b224:	9307      	strlt	r3, [sp, #28]
 802b226:	bfb8      	it	lt
 802b228:	9204      	strlt	r2, [sp, #16]
 802b22a:	7823      	ldrb	r3, [r4, #0]
 802b22c:	2b2e      	cmp	r3, #46	; 0x2e
 802b22e:	d10c      	bne.n	802b24a <_vfiprintf_r+0x15a>
 802b230:	7863      	ldrb	r3, [r4, #1]
 802b232:	2b2a      	cmp	r3, #42	; 0x2a
 802b234:	d134      	bne.n	802b2a0 <_vfiprintf_r+0x1b0>
 802b236:	9b03      	ldr	r3, [sp, #12]
 802b238:	1d1a      	adds	r2, r3, #4
 802b23a:	681b      	ldr	r3, [r3, #0]
 802b23c:	9203      	str	r2, [sp, #12]
 802b23e:	2b00      	cmp	r3, #0
 802b240:	bfb8      	it	lt
 802b242:	f04f 33ff 	movlt.w	r3, #4294967295
 802b246:	3402      	adds	r4, #2
 802b248:	9305      	str	r3, [sp, #20]
 802b24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802b320 <_vfiprintf_r+0x230>
 802b24e:	7821      	ldrb	r1, [r4, #0]
 802b250:	2203      	movs	r2, #3
 802b252:	4650      	mov	r0, sl
 802b254:	f7d5 f844 	bl	80002e0 <memchr>
 802b258:	b138      	cbz	r0, 802b26a <_vfiprintf_r+0x17a>
 802b25a:	9b04      	ldr	r3, [sp, #16]
 802b25c:	eba0 000a 	sub.w	r0, r0, sl
 802b260:	2240      	movs	r2, #64	; 0x40
 802b262:	4082      	lsls	r2, r0
 802b264:	4313      	orrs	r3, r2
 802b266:	3401      	adds	r4, #1
 802b268:	9304      	str	r3, [sp, #16]
 802b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b26e:	4829      	ldr	r0, [pc, #164]	; (802b314 <_vfiprintf_r+0x224>)
 802b270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b274:	2206      	movs	r2, #6
 802b276:	f7d5 f833 	bl	80002e0 <memchr>
 802b27a:	2800      	cmp	r0, #0
 802b27c:	d03f      	beq.n	802b2fe <_vfiprintf_r+0x20e>
 802b27e:	4b26      	ldr	r3, [pc, #152]	; (802b318 <_vfiprintf_r+0x228>)
 802b280:	bb1b      	cbnz	r3, 802b2ca <_vfiprintf_r+0x1da>
 802b282:	9b03      	ldr	r3, [sp, #12]
 802b284:	3307      	adds	r3, #7
 802b286:	f023 0307 	bic.w	r3, r3, #7
 802b28a:	3308      	adds	r3, #8
 802b28c:	9303      	str	r3, [sp, #12]
 802b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b290:	443b      	add	r3, r7
 802b292:	9309      	str	r3, [sp, #36]	; 0x24
 802b294:	e768      	b.n	802b168 <_vfiprintf_r+0x78>
 802b296:	fb0c 3202 	mla	r2, ip, r2, r3
 802b29a:	460c      	mov	r4, r1
 802b29c:	2001      	movs	r0, #1
 802b29e:	e7a6      	b.n	802b1ee <_vfiprintf_r+0xfe>
 802b2a0:	2300      	movs	r3, #0
 802b2a2:	3401      	adds	r4, #1
 802b2a4:	9305      	str	r3, [sp, #20]
 802b2a6:	4619      	mov	r1, r3
 802b2a8:	f04f 0c0a 	mov.w	ip, #10
 802b2ac:	4620      	mov	r0, r4
 802b2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b2b2:	3a30      	subs	r2, #48	; 0x30
 802b2b4:	2a09      	cmp	r2, #9
 802b2b6:	d903      	bls.n	802b2c0 <_vfiprintf_r+0x1d0>
 802b2b8:	2b00      	cmp	r3, #0
 802b2ba:	d0c6      	beq.n	802b24a <_vfiprintf_r+0x15a>
 802b2bc:	9105      	str	r1, [sp, #20]
 802b2be:	e7c4      	b.n	802b24a <_vfiprintf_r+0x15a>
 802b2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 802b2c4:	4604      	mov	r4, r0
 802b2c6:	2301      	movs	r3, #1
 802b2c8:	e7f0      	b.n	802b2ac <_vfiprintf_r+0x1bc>
 802b2ca:	ab03      	add	r3, sp, #12
 802b2cc:	9300      	str	r3, [sp, #0]
 802b2ce:	462a      	mov	r2, r5
 802b2d0:	4b12      	ldr	r3, [pc, #72]	; (802b31c <_vfiprintf_r+0x22c>)
 802b2d2:	a904      	add	r1, sp, #16
 802b2d4:	4630      	mov	r0, r6
 802b2d6:	f3af 8000 	nop.w
 802b2da:	4607      	mov	r7, r0
 802b2dc:	1c78      	adds	r0, r7, #1
 802b2de:	d1d6      	bne.n	802b28e <_vfiprintf_r+0x19e>
 802b2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b2e2:	07d9      	lsls	r1, r3, #31
 802b2e4:	d405      	bmi.n	802b2f2 <_vfiprintf_r+0x202>
 802b2e6:	89ab      	ldrh	r3, [r5, #12]
 802b2e8:	059a      	lsls	r2, r3, #22
 802b2ea:	d402      	bmi.n	802b2f2 <_vfiprintf_r+0x202>
 802b2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b2ee:	f7ff fe1b 	bl	802af28 <__retarget_lock_release_recursive>
 802b2f2:	89ab      	ldrh	r3, [r5, #12]
 802b2f4:	065b      	lsls	r3, r3, #25
 802b2f6:	f53f af1d 	bmi.w	802b134 <_vfiprintf_r+0x44>
 802b2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b2fc:	e71c      	b.n	802b138 <_vfiprintf_r+0x48>
 802b2fe:	ab03      	add	r3, sp, #12
 802b300:	9300      	str	r3, [sp, #0]
 802b302:	462a      	mov	r2, r5
 802b304:	4b05      	ldr	r3, [pc, #20]	; (802b31c <_vfiprintf_r+0x22c>)
 802b306:	a904      	add	r1, sp, #16
 802b308:	4630      	mov	r0, r6
 802b30a:	f000 f879 	bl	802b400 <_printf_i>
 802b30e:	e7e4      	b.n	802b2da <_vfiprintf_r+0x1ea>
 802b310:	08030368 	.word	0x08030368
 802b314:	08030372 	.word	0x08030372
 802b318:	00000000 	.word	0x00000000
 802b31c:	0802b0cb 	.word	0x0802b0cb
 802b320:	0803036e 	.word	0x0803036e

0802b324 <_printf_common>:
 802b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b328:	4616      	mov	r6, r2
 802b32a:	4699      	mov	r9, r3
 802b32c:	688a      	ldr	r2, [r1, #8]
 802b32e:	690b      	ldr	r3, [r1, #16]
 802b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b334:	4293      	cmp	r3, r2
 802b336:	bfb8      	it	lt
 802b338:	4613      	movlt	r3, r2
 802b33a:	6033      	str	r3, [r6, #0]
 802b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b340:	4607      	mov	r7, r0
 802b342:	460c      	mov	r4, r1
 802b344:	b10a      	cbz	r2, 802b34a <_printf_common+0x26>
 802b346:	3301      	adds	r3, #1
 802b348:	6033      	str	r3, [r6, #0]
 802b34a:	6823      	ldr	r3, [r4, #0]
 802b34c:	0699      	lsls	r1, r3, #26
 802b34e:	bf42      	ittt	mi
 802b350:	6833      	ldrmi	r3, [r6, #0]
 802b352:	3302      	addmi	r3, #2
 802b354:	6033      	strmi	r3, [r6, #0]
 802b356:	6825      	ldr	r5, [r4, #0]
 802b358:	f015 0506 	ands.w	r5, r5, #6
 802b35c:	d106      	bne.n	802b36c <_printf_common+0x48>
 802b35e:	f104 0a19 	add.w	sl, r4, #25
 802b362:	68e3      	ldr	r3, [r4, #12]
 802b364:	6832      	ldr	r2, [r6, #0]
 802b366:	1a9b      	subs	r3, r3, r2
 802b368:	42ab      	cmp	r3, r5
 802b36a:	dc26      	bgt.n	802b3ba <_printf_common+0x96>
 802b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b370:	1e13      	subs	r3, r2, #0
 802b372:	6822      	ldr	r2, [r4, #0]
 802b374:	bf18      	it	ne
 802b376:	2301      	movne	r3, #1
 802b378:	0692      	lsls	r2, r2, #26
 802b37a:	d42b      	bmi.n	802b3d4 <_printf_common+0xb0>
 802b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b380:	4649      	mov	r1, r9
 802b382:	4638      	mov	r0, r7
 802b384:	47c0      	blx	r8
 802b386:	3001      	adds	r0, #1
 802b388:	d01e      	beq.n	802b3c8 <_printf_common+0xa4>
 802b38a:	6823      	ldr	r3, [r4, #0]
 802b38c:	6922      	ldr	r2, [r4, #16]
 802b38e:	f003 0306 	and.w	r3, r3, #6
 802b392:	2b04      	cmp	r3, #4
 802b394:	bf02      	ittt	eq
 802b396:	68e5      	ldreq	r5, [r4, #12]
 802b398:	6833      	ldreq	r3, [r6, #0]
 802b39a:	1aed      	subeq	r5, r5, r3
 802b39c:	68a3      	ldr	r3, [r4, #8]
 802b39e:	bf0c      	ite	eq
 802b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b3a4:	2500      	movne	r5, #0
 802b3a6:	4293      	cmp	r3, r2
 802b3a8:	bfc4      	itt	gt
 802b3aa:	1a9b      	subgt	r3, r3, r2
 802b3ac:	18ed      	addgt	r5, r5, r3
 802b3ae:	2600      	movs	r6, #0
 802b3b0:	341a      	adds	r4, #26
 802b3b2:	42b5      	cmp	r5, r6
 802b3b4:	d11a      	bne.n	802b3ec <_printf_common+0xc8>
 802b3b6:	2000      	movs	r0, #0
 802b3b8:	e008      	b.n	802b3cc <_printf_common+0xa8>
 802b3ba:	2301      	movs	r3, #1
 802b3bc:	4652      	mov	r2, sl
 802b3be:	4649      	mov	r1, r9
 802b3c0:	4638      	mov	r0, r7
 802b3c2:	47c0      	blx	r8
 802b3c4:	3001      	adds	r0, #1
 802b3c6:	d103      	bne.n	802b3d0 <_printf_common+0xac>
 802b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 802b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b3d0:	3501      	adds	r5, #1
 802b3d2:	e7c6      	b.n	802b362 <_printf_common+0x3e>
 802b3d4:	18e1      	adds	r1, r4, r3
 802b3d6:	1c5a      	adds	r2, r3, #1
 802b3d8:	2030      	movs	r0, #48	; 0x30
 802b3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802b3de:	4422      	add	r2, r4
 802b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802b3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802b3e8:	3302      	adds	r3, #2
 802b3ea:	e7c7      	b.n	802b37c <_printf_common+0x58>
 802b3ec:	2301      	movs	r3, #1
 802b3ee:	4622      	mov	r2, r4
 802b3f0:	4649      	mov	r1, r9
 802b3f2:	4638      	mov	r0, r7
 802b3f4:	47c0      	blx	r8
 802b3f6:	3001      	adds	r0, #1
 802b3f8:	d0e6      	beq.n	802b3c8 <_printf_common+0xa4>
 802b3fa:	3601      	adds	r6, #1
 802b3fc:	e7d9      	b.n	802b3b2 <_printf_common+0x8e>
	...

0802b400 <_printf_i>:
 802b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802b404:	7e0f      	ldrb	r7, [r1, #24]
 802b406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b408:	2f78      	cmp	r7, #120	; 0x78
 802b40a:	4691      	mov	r9, r2
 802b40c:	4680      	mov	r8, r0
 802b40e:	460c      	mov	r4, r1
 802b410:	469a      	mov	sl, r3
 802b412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802b416:	d807      	bhi.n	802b428 <_printf_i+0x28>
 802b418:	2f62      	cmp	r7, #98	; 0x62
 802b41a:	d80a      	bhi.n	802b432 <_printf_i+0x32>
 802b41c:	2f00      	cmp	r7, #0
 802b41e:	f000 80d4 	beq.w	802b5ca <_printf_i+0x1ca>
 802b422:	2f58      	cmp	r7, #88	; 0x58
 802b424:	f000 80c0 	beq.w	802b5a8 <_printf_i+0x1a8>
 802b428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802b430:	e03a      	b.n	802b4a8 <_printf_i+0xa8>
 802b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802b436:	2b15      	cmp	r3, #21
 802b438:	d8f6      	bhi.n	802b428 <_printf_i+0x28>
 802b43a:	a101      	add	r1, pc, #4	; (adr r1, 802b440 <_printf_i+0x40>)
 802b43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802b440:	0802b499 	.word	0x0802b499
 802b444:	0802b4ad 	.word	0x0802b4ad
 802b448:	0802b429 	.word	0x0802b429
 802b44c:	0802b429 	.word	0x0802b429
 802b450:	0802b429 	.word	0x0802b429
 802b454:	0802b429 	.word	0x0802b429
 802b458:	0802b4ad 	.word	0x0802b4ad
 802b45c:	0802b429 	.word	0x0802b429
 802b460:	0802b429 	.word	0x0802b429
 802b464:	0802b429 	.word	0x0802b429
 802b468:	0802b429 	.word	0x0802b429
 802b46c:	0802b5b1 	.word	0x0802b5b1
 802b470:	0802b4d9 	.word	0x0802b4d9
 802b474:	0802b56b 	.word	0x0802b56b
 802b478:	0802b429 	.word	0x0802b429
 802b47c:	0802b429 	.word	0x0802b429
 802b480:	0802b5d3 	.word	0x0802b5d3
 802b484:	0802b429 	.word	0x0802b429
 802b488:	0802b4d9 	.word	0x0802b4d9
 802b48c:	0802b429 	.word	0x0802b429
 802b490:	0802b429 	.word	0x0802b429
 802b494:	0802b573 	.word	0x0802b573
 802b498:	682b      	ldr	r3, [r5, #0]
 802b49a:	1d1a      	adds	r2, r3, #4
 802b49c:	681b      	ldr	r3, [r3, #0]
 802b49e:	602a      	str	r2, [r5, #0]
 802b4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802b4a8:	2301      	movs	r3, #1
 802b4aa:	e09f      	b.n	802b5ec <_printf_i+0x1ec>
 802b4ac:	6820      	ldr	r0, [r4, #0]
 802b4ae:	682b      	ldr	r3, [r5, #0]
 802b4b0:	0607      	lsls	r7, r0, #24
 802b4b2:	f103 0104 	add.w	r1, r3, #4
 802b4b6:	6029      	str	r1, [r5, #0]
 802b4b8:	d501      	bpl.n	802b4be <_printf_i+0xbe>
 802b4ba:	681e      	ldr	r6, [r3, #0]
 802b4bc:	e003      	b.n	802b4c6 <_printf_i+0xc6>
 802b4be:	0646      	lsls	r6, r0, #25
 802b4c0:	d5fb      	bpl.n	802b4ba <_printf_i+0xba>
 802b4c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b4c6:	2e00      	cmp	r6, #0
 802b4c8:	da03      	bge.n	802b4d2 <_printf_i+0xd2>
 802b4ca:	232d      	movs	r3, #45	; 0x2d
 802b4cc:	4276      	negs	r6, r6
 802b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b4d2:	485a      	ldr	r0, [pc, #360]	; (802b63c <_printf_i+0x23c>)
 802b4d4:	230a      	movs	r3, #10
 802b4d6:	e012      	b.n	802b4fe <_printf_i+0xfe>
 802b4d8:	682b      	ldr	r3, [r5, #0]
 802b4da:	6820      	ldr	r0, [r4, #0]
 802b4dc:	1d19      	adds	r1, r3, #4
 802b4de:	6029      	str	r1, [r5, #0]
 802b4e0:	0605      	lsls	r5, r0, #24
 802b4e2:	d501      	bpl.n	802b4e8 <_printf_i+0xe8>
 802b4e4:	681e      	ldr	r6, [r3, #0]
 802b4e6:	e002      	b.n	802b4ee <_printf_i+0xee>
 802b4e8:	0641      	lsls	r1, r0, #25
 802b4ea:	d5fb      	bpl.n	802b4e4 <_printf_i+0xe4>
 802b4ec:	881e      	ldrh	r6, [r3, #0]
 802b4ee:	4853      	ldr	r0, [pc, #332]	; (802b63c <_printf_i+0x23c>)
 802b4f0:	2f6f      	cmp	r7, #111	; 0x6f
 802b4f2:	bf0c      	ite	eq
 802b4f4:	2308      	moveq	r3, #8
 802b4f6:	230a      	movne	r3, #10
 802b4f8:	2100      	movs	r1, #0
 802b4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802b4fe:	6865      	ldr	r5, [r4, #4]
 802b500:	60a5      	str	r5, [r4, #8]
 802b502:	2d00      	cmp	r5, #0
 802b504:	bfa2      	ittt	ge
 802b506:	6821      	ldrge	r1, [r4, #0]
 802b508:	f021 0104 	bicge.w	r1, r1, #4
 802b50c:	6021      	strge	r1, [r4, #0]
 802b50e:	b90e      	cbnz	r6, 802b514 <_printf_i+0x114>
 802b510:	2d00      	cmp	r5, #0
 802b512:	d04b      	beq.n	802b5ac <_printf_i+0x1ac>
 802b514:	4615      	mov	r5, r2
 802b516:	fbb6 f1f3 	udiv	r1, r6, r3
 802b51a:	fb03 6711 	mls	r7, r3, r1, r6
 802b51e:	5dc7      	ldrb	r7, [r0, r7]
 802b520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802b524:	4637      	mov	r7, r6
 802b526:	42bb      	cmp	r3, r7
 802b528:	460e      	mov	r6, r1
 802b52a:	d9f4      	bls.n	802b516 <_printf_i+0x116>
 802b52c:	2b08      	cmp	r3, #8
 802b52e:	d10b      	bne.n	802b548 <_printf_i+0x148>
 802b530:	6823      	ldr	r3, [r4, #0]
 802b532:	07de      	lsls	r6, r3, #31
 802b534:	d508      	bpl.n	802b548 <_printf_i+0x148>
 802b536:	6923      	ldr	r3, [r4, #16]
 802b538:	6861      	ldr	r1, [r4, #4]
 802b53a:	4299      	cmp	r1, r3
 802b53c:	bfde      	ittt	le
 802b53e:	2330      	movle	r3, #48	; 0x30
 802b540:	f805 3c01 	strble.w	r3, [r5, #-1]
 802b544:	f105 35ff 	addle.w	r5, r5, #4294967295
 802b548:	1b52      	subs	r2, r2, r5
 802b54a:	6122      	str	r2, [r4, #16]
 802b54c:	f8cd a000 	str.w	sl, [sp]
 802b550:	464b      	mov	r3, r9
 802b552:	aa03      	add	r2, sp, #12
 802b554:	4621      	mov	r1, r4
 802b556:	4640      	mov	r0, r8
 802b558:	f7ff fee4 	bl	802b324 <_printf_common>
 802b55c:	3001      	adds	r0, #1
 802b55e:	d14a      	bne.n	802b5f6 <_printf_i+0x1f6>
 802b560:	f04f 30ff 	mov.w	r0, #4294967295
 802b564:	b004      	add	sp, #16
 802b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b56a:	6823      	ldr	r3, [r4, #0]
 802b56c:	f043 0320 	orr.w	r3, r3, #32
 802b570:	6023      	str	r3, [r4, #0]
 802b572:	4833      	ldr	r0, [pc, #204]	; (802b640 <_printf_i+0x240>)
 802b574:	2778      	movs	r7, #120	; 0x78
 802b576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802b57a:	6823      	ldr	r3, [r4, #0]
 802b57c:	6829      	ldr	r1, [r5, #0]
 802b57e:	061f      	lsls	r7, r3, #24
 802b580:	f851 6b04 	ldr.w	r6, [r1], #4
 802b584:	d402      	bmi.n	802b58c <_printf_i+0x18c>
 802b586:	065f      	lsls	r7, r3, #25
 802b588:	bf48      	it	mi
 802b58a:	b2b6      	uxthmi	r6, r6
 802b58c:	07df      	lsls	r7, r3, #31
 802b58e:	bf48      	it	mi
 802b590:	f043 0320 	orrmi.w	r3, r3, #32
 802b594:	6029      	str	r1, [r5, #0]
 802b596:	bf48      	it	mi
 802b598:	6023      	strmi	r3, [r4, #0]
 802b59a:	b91e      	cbnz	r6, 802b5a4 <_printf_i+0x1a4>
 802b59c:	6823      	ldr	r3, [r4, #0]
 802b59e:	f023 0320 	bic.w	r3, r3, #32
 802b5a2:	6023      	str	r3, [r4, #0]
 802b5a4:	2310      	movs	r3, #16
 802b5a6:	e7a7      	b.n	802b4f8 <_printf_i+0xf8>
 802b5a8:	4824      	ldr	r0, [pc, #144]	; (802b63c <_printf_i+0x23c>)
 802b5aa:	e7e4      	b.n	802b576 <_printf_i+0x176>
 802b5ac:	4615      	mov	r5, r2
 802b5ae:	e7bd      	b.n	802b52c <_printf_i+0x12c>
 802b5b0:	682b      	ldr	r3, [r5, #0]
 802b5b2:	6826      	ldr	r6, [r4, #0]
 802b5b4:	6961      	ldr	r1, [r4, #20]
 802b5b6:	1d18      	adds	r0, r3, #4
 802b5b8:	6028      	str	r0, [r5, #0]
 802b5ba:	0635      	lsls	r5, r6, #24
 802b5bc:	681b      	ldr	r3, [r3, #0]
 802b5be:	d501      	bpl.n	802b5c4 <_printf_i+0x1c4>
 802b5c0:	6019      	str	r1, [r3, #0]
 802b5c2:	e002      	b.n	802b5ca <_printf_i+0x1ca>
 802b5c4:	0670      	lsls	r0, r6, #25
 802b5c6:	d5fb      	bpl.n	802b5c0 <_printf_i+0x1c0>
 802b5c8:	8019      	strh	r1, [r3, #0]
 802b5ca:	2300      	movs	r3, #0
 802b5cc:	6123      	str	r3, [r4, #16]
 802b5ce:	4615      	mov	r5, r2
 802b5d0:	e7bc      	b.n	802b54c <_printf_i+0x14c>
 802b5d2:	682b      	ldr	r3, [r5, #0]
 802b5d4:	1d1a      	adds	r2, r3, #4
 802b5d6:	602a      	str	r2, [r5, #0]
 802b5d8:	681d      	ldr	r5, [r3, #0]
 802b5da:	6862      	ldr	r2, [r4, #4]
 802b5dc:	2100      	movs	r1, #0
 802b5de:	4628      	mov	r0, r5
 802b5e0:	f7d4 fe7e 	bl	80002e0 <memchr>
 802b5e4:	b108      	cbz	r0, 802b5ea <_printf_i+0x1ea>
 802b5e6:	1b40      	subs	r0, r0, r5
 802b5e8:	6060      	str	r0, [r4, #4]
 802b5ea:	6863      	ldr	r3, [r4, #4]
 802b5ec:	6123      	str	r3, [r4, #16]
 802b5ee:	2300      	movs	r3, #0
 802b5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802b5f4:	e7aa      	b.n	802b54c <_printf_i+0x14c>
 802b5f6:	6923      	ldr	r3, [r4, #16]
 802b5f8:	462a      	mov	r2, r5
 802b5fa:	4649      	mov	r1, r9
 802b5fc:	4640      	mov	r0, r8
 802b5fe:	47d0      	blx	sl
 802b600:	3001      	adds	r0, #1
 802b602:	d0ad      	beq.n	802b560 <_printf_i+0x160>
 802b604:	6823      	ldr	r3, [r4, #0]
 802b606:	079b      	lsls	r3, r3, #30
 802b608:	d413      	bmi.n	802b632 <_printf_i+0x232>
 802b60a:	68e0      	ldr	r0, [r4, #12]
 802b60c:	9b03      	ldr	r3, [sp, #12]
 802b60e:	4298      	cmp	r0, r3
 802b610:	bfb8      	it	lt
 802b612:	4618      	movlt	r0, r3
 802b614:	e7a6      	b.n	802b564 <_printf_i+0x164>
 802b616:	2301      	movs	r3, #1
 802b618:	4632      	mov	r2, r6
 802b61a:	4649      	mov	r1, r9
 802b61c:	4640      	mov	r0, r8
 802b61e:	47d0      	blx	sl
 802b620:	3001      	adds	r0, #1
 802b622:	d09d      	beq.n	802b560 <_printf_i+0x160>
 802b624:	3501      	adds	r5, #1
 802b626:	68e3      	ldr	r3, [r4, #12]
 802b628:	9903      	ldr	r1, [sp, #12]
 802b62a:	1a5b      	subs	r3, r3, r1
 802b62c:	42ab      	cmp	r3, r5
 802b62e:	dcf2      	bgt.n	802b616 <_printf_i+0x216>
 802b630:	e7eb      	b.n	802b60a <_printf_i+0x20a>
 802b632:	2500      	movs	r5, #0
 802b634:	f104 0619 	add.w	r6, r4, #25
 802b638:	e7f5      	b.n	802b626 <_printf_i+0x226>
 802b63a:	bf00      	nop
 802b63c:	08030379 	.word	0x08030379
 802b640:	0803038a 	.word	0x0803038a

0802b644 <__sflush_r>:
 802b644:	898a      	ldrh	r2, [r1, #12]
 802b646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b64a:	4605      	mov	r5, r0
 802b64c:	0710      	lsls	r0, r2, #28
 802b64e:	460c      	mov	r4, r1
 802b650:	d458      	bmi.n	802b704 <__sflush_r+0xc0>
 802b652:	684b      	ldr	r3, [r1, #4]
 802b654:	2b00      	cmp	r3, #0
 802b656:	dc05      	bgt.n	802b664 <__sflush_r+0x20>
 802b658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b65a:	2b00      	cmp	r3, #0
 802b65c:	dc02      	bgt.n	802b664 <__sflush_r+0x20>
 802b65e:	2000      	movs	r0, #0
 802b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b666:	2e00      	cmp	r6, #0
 802b668:	d0f9      	beq.n	802b65e <__sflush_r+0x1a>
 802b66a:	2300      	movs	r3, #0
 802b66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b670:	682f      	ldr	r7, [r5, #0]
 802b672:	6a21      	ldr	r1, [r4, #32]
 802b674:	602b      	str	r3, [r5, #0]
 802b676:	d032      	beq.n	802b6de <__sflush_r+0x9a>
 802b678:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b67a:	89a3      	ldrh	r3, [r4, #12]
 802b67c:	075a      	lsls	r2, r3, #29
 802b67e:	d505      	bpl.n	802b68c <__sflush_r+0x48>
 802b680:	6863      	ldr	r3, [r4, #4]
 802b682:	1ac0      	subs	r0, r0, r3
 802b684:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b686:	b10b      	cbz	r3, 802b68c <__sflush_r+0x48>
 802b688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b68a:	1ac0      	subs	r0, r0, r3
 802b68c:	2300      	movs	r3, #0
 802b68e:	4602      	mov	r2, r0
 802b690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b692:	6a21      	ldr	r1, [r4, #32]
 802b694:	4628      	mov	r0, r5
 802b696:	47b0      	blx	r6
 802b698:	1c43      	adds	r3, r0, #1
 802b69a:	89a3      	ldrh	r3, [r4, #12]
 802b69c:	d106      	bne.n	802b6ac <__sflush_r+0x68>
 802b69e:	6829      	ldr	r1, [r5, #0]
 802b6a0:	291d      	cmp	r1, #29
 802b6a2:	d82b      	bhi.n	802b6fc <__sflush_r+0xb8>
 802b6a4:	4a29      	ldr	r2, [pc, #164]	; (802b74c <__sflush_r+0x108>)
 802b6a6:	410a      	asrs	r2, r1
 802b6a8:	07d6      	lsls	r6, r2, #31
 802b6aa:	d427      	bmi.n	802b6fc <__sflush_r+0xb8>
 802b6ac:	2200      	movs	r2, #0
 802b6ae:	6062      	str	r2, [r4, #4]
 802b6b0:	04d9      	lsls	r1, r3, #19
 802b6b2:	6922      	ldr	r2, [r4, #16]
 802b6b4:	6022      	str	r2, [r4, #0]
 802b6b6:	d504      	bpl.n	802b6c2 <__sflush_r+0x7e>
 802b6b8:	1c42      	adds	r2, r0, #1
 802b6ba:	d101      	bne.n	802b6c0 <__sflush_r+0x7c>
 802b6bc:	682b      	ldr	r3, [r5, #0]
 802b6be:	b903      	cbnz	r3, 802b6c2 <__sflush_r+0x7e>
 802b6c0:	6560      	str	r0, [r4, #84]	; 0x54
 802b6c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b6c4:	602f      	str	r7, [r5, #0]
 802b6c6:	2900      	cmp	r1, #0
 802b6c8:	d0c9      	beq.n	802b65e <__sflush_r+0x1a>
 802b6ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b6ce:	4299      	cmp	r1, r3
 802b6d0:	d002      	beq.n	802b6d8 <__sflush_r+0x94>
 802b6d2:	4628      	mov	r0, r5
 802b6d4:	f7ff fc96 	bl	802b004 <_free_r>
 802b6d8:	2000      	movs	r0, #0
 802b6da:	6360      	str	r0, [r4, #52]	; 0x34
 802b6dc:	e7c0      	b.n	802b660 <__sflush_r+0x1c>
 802b6de:	2301      	movs	r3, #1
 802b6e0:	4628      	mov	r0, r5
 802b6e2:	47b0      	blx	r6
 802b6e4:	1c41      	adds	r1, r0, #1
 802b6e6:	d1c8      	bne.n	802b67a <__sflush_r+0x36>
 802b6e8:	682b      	ldr	r3, [r5, #0]
 802b6ea:	2b00      	cmp	r3, #0
 802b6ec:	d0c5      	beq.n	802b67a <__sflush_r+0x36>
 802b6ee:	2b1d      	cmp	r3, #29
 802b6f0:	d001      	beq.n	802b6f6 <__sflush_r+0xb2>
 802b6f2:	2b16      	cmp	r3, #22
 802b6f4:	d101      	bne.n	802b6fa <__sflush_r+0xb6>
 802b6f6:	602f      	str	r7, [r5, #0]
 802b6f8:	e7b1      	b.n	802b65e <__sflush_r+0x1a>
 802b6fa:	89a3      	ldrh	r3, [r4, #12]
 802b6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b700:	81a3      	strh	r3, [r4, #12]
 802b702:	e7ad      	b.n	802b660 <__sflush_r+0x1c>
 802b704:	690f      	ldr	r7, [r1, #16]
 802b706:	2f00      	cmp	r7, #0
 802b708:	d0a9      	beq.n	802b65e <__sflush_r+0x1a>
 802b70a:	0793      	lsls	r3, r2, #30
 802b70c:	680e      	ldr	r6, [r1, #0]
 802b70e:	bf08      	it	eq
 802b710:	694b      	ldreq	r3, [r1, #20]
 802b712:	600f      	str	r7, [r1, #0]
 802b714:	bf18      	it	ne
 802b716:	2300      	movne	r3, #0
 802b718:	eba6 0807 	sub.w	r8, r6, r7
 802b71c:	608b      	str	r3, [r1, #8]
 802b71e:	f1b8 0f00 	cmp.w	r8, #0
 802b722:	dd9c      	ble.n	802b65e <__sflush_r+0x1a>
 802b724:	6a21      	ldr	r1, [r4, #32]
 802b726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b728:	4643      	mov	r3, r8
 802b72a:	463a      	mov	r2, r7
 802b72c:	4628      	mov	r0, r5
 802b72e:	47b0      	blx	r6
 802b730:	2800      	cmp	r0, #0
 802b732:	dc06      	bgt.n	802b742 <__sflush_r+0xfe>
 802b734:	89a3      	ldrh	r3, [r4, #12]
 802b736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b73a:	81a3      	strh	r3, [r4, #12]
 802b73c:	f04f 30ff 	mov.w	r0, #4294967295
 802b740:	e78e      	b.n	802b660 <__sflush_r+0x1c>
 802b742:	4407      	add	r7, r0
 802b744:	eba8 0800 	sub.w	r8, r8, r0
 802b748:	e7e9      	b.n	802b71e <__sflush_r+0xda>
 802b74a:	bf00      	nop
 802b74c:	dfbffffe 	.word	0xdfbffffe

0802b750 <_fflush_r>:
 802b750:	b538      	push	{r3, r4, r5, lr}
 802b752:	690b      	ldr	r3, [r1, #16]
 802b754:	4605      	mov	r5, r0
 802b756:	460c      	mov	r4, r1
 802b758:	b913      	cbnz	r3, 802b760 <_fflush_r+0x10>
 802b75a:	2500      	movs	r5, #0
 802b75c:	4628      	mov	r0, r5
 802b75e:	bd38      	pop	{r3, r4, r5, pc}
 802b760:	b118      	cbz	r0, 802b76a <_fflush_r+0x1a>
 802b762:	6a03      	ldr	r3, [r0, #32]
 802b764:	b90b      	cbnz	r3, 802b76a <_fflush_r+0x1a>
 802b766:	f7ff fa2f 	bl	802abc8 <__sinit>
 802b76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b76e:	2b00      	cmp	r3, #0
 802b770:	d0f3      	beq.n	802b75a <_fflush_r+0xa>
 802b772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b774:	07d0      	lsls	r0, r2, #31
 802b776:	d404      	bmi.n	802b782 <_fflush_r+0x32>
 802b778:	0599      	lsls	r1, r3, #22
 802b77a:	d402      	bmi.n	802b782 <_fflush_r+0x32>
 802b77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b77e:	f7ff fbd2 	bl	802af26 <__retarget_lock_acquire_recursive>
 802b782:	4628      	mov	r0, r5
 802b784:	4621      	mov	r1, r4
 802b786:	f7ff ff5d 	bl	802b644 <__sflush_r>
 802b78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b78c:	07da      	lsls	r2, r3, #31
 802b78e:	4605      	mov	r5, r0
 802b790:	d4e4      	bmi.n	802b75c <_fflush_r+0xc>
 802b792:	89a3      	ldrh	r3, [r4, #12]
 802b794:	059b      	lsls	r3, r3, #22
 802b796:	d4e1      	bmi.n	802b75c <_fflush_r+0xc>
 802b798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b79a:	f7ff fbc5 	bl	802af28 <__retarget_lock_release_recursive>
 802b79e:	e7dd      	b.n	802b75c <_fflush_r+0xc>

0802b7a0 <__swbuf_r>:
 802b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b7a2:	460e      	mov	r6, r1
 802b7a4:	4614      	mov	r4, r2
 802b7a6:	4605      	mov	r5, r0
 802b7a8:	b118      	cbz	r0, 802b7b2 <__swbuf_r+0x12>
 802b7aa:	6a03      	ldr	r3, [r0, #32]
 802b7ac:	b90b      	cbnz	r3, 802b7b2 <__swbuf_r+0x12>
 802b7ae:	f7ff fa0b 	bl	802abc8 <__sinit>
 802b7b2:	69a3      	ldr	r3, [r4, #24]
 802b7b4:	60a3      	str	r3, [r4, #8]
 802b7b6:	89a3      	ldrh	r3, [r4, #12]
 802b7b8:	071a      	lsls	r2, r3, #28
 802b7ba:	d525      	bpl.n	802b808 <__swbuf_r+0x68>
 802b7bc:	6923      	ldr	r3, [r4, #16]
 802b7be:	b31b      	cbz	r3, 802b808 <__swbuf_r+0x68>
 802b7c0:	6823      	ldr	r3, [r4, #0]
 802b7c2:	6922      	ldr	r2, [r4, #16]
 802b7c4:	1a98      	subs	r0, r3, r2
 802b7c6:	6963      	ldr	r3, [r4, #20]
 802b7c8:	b2f6      	uxtb	r6, r6
 802b7ca:	4283      	cmp	r3, r0
 802b7cc:	4637      	mov	r7, r6
 802b7ce:	dc04      	bgt.n	802b7da <__swbuf_r+0x3a>
 802b7d0:	4621      	mov	r1, r4
 802b7d2:	4628      	mov	r0, r5
 802b7d4:	f7ff ffbc 	bl	802b750 <_fflush_r>
 802b7d8:	b9e0      	cbnz	r0, 802b814 <__swbuf_r+0x74>
 802b7da:	68a3      	ldr	r3, [r4, #8]
 802b7dc:	3b01      	subs	r3, #1
 802b7de:	60a3      	str	r3, [r4, #8]
 802b7e0:	6823      	ldr	r3, [r4, #0]
 802b7e2:	1c5a      	adds	r2, r3, #1
 802b7e4:	6022      	str	r2, [r4, #0]
 802b7e6:	701e      	strb	r6, [r3, #0]
 802b7e8:	6962      	ldr	r2, [r4, #20]
 802b7ea:	1c43      	adds	r3, r0, #1
 802b7ec:	429a      	cmp	r2, r3
 802b7ee:	d004      	beq.n	802b7fa <__swbuf_r+0x5a>
 802b7f0:	89a3      	ldrh	r3, [r4, #12]
 802b7f2:	07db      	lsls	r3, r3, #31
 802b7f4:	d506      	bpl.n	802b804 <__swbuf_r+0x64>
 802b7f6:	2e0a      	cmp	r6, #10
 802b7f8:	d104      	bne.n	802b804 <__swbuf_r+0x64>
 802b7fa:	4621      	mov	r1, r4
 802b7fc:	4628      	mov	r0, r5
 802b7fe:	f7ff ffa7 	bl	802b750 <_fflush_r>
 802b802:	b938      	cbnz	r0, 802b814 <__swbuf_r+0x74>
 802b804:	4638      	mov	r0, r7
 802b806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b808:	4621      	mov	r1, r4
 802b80a:	4628      	mov	r0, r5
 802b80c:	f000 f806 	bl	802b81c <__swsetup_r>
 802b810:	2800      	cmp	r0, #0
 802b812:	d0d5      	beq.n	802b7c0 <__swbuf_r+0x20>
 802b814:	f04f 37ff 	mov.w	r7, #4294967295
 802b818:	e7f4      	b.n	802b804 <__swbuf_r+0x64>
	...

0802b81c <__swsetup_r>:
 802b81c:	b538      	push	{r3, r4, r5, lr}
 802b81e:	4b2a      	ldr	r3, [pc, #168]	; (802b8c8 <__swsetup_r+0xac>)
 802b820:	4605      	mov	r5, r0
 802b822:	6818      	ldr	r0, [r3, #0]
 802b824:	460c      	mov	r4, r1
 802b826:	b118      	cbz	r0, 802b830 <__swsetup_r+0x14>
 802b828:	6a03      	ldr	r3, [r0, #32]
 802b82a:	b90b      	cbnz	r3, 802b830 <__swsetup_r+0x14>
 802b82c:	f7ff f9cc 	bl	802abc8 <__sinit>
 802b830:	89a3      	ldrh	r3, [r4, #12]
 802b832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b836:	0718      	lsls	r0, r3, #28
 802b838:	d422      	bmi.n	802b880 <__swsetup_r+0x64>
 802b83a:	06d9      	lsls	r1, r3, #27
 802b83c:	d407      	bmi.n	802b84e <__swsetup_r+0x32>
 802b83e:	2309      	movs	r3, #9
 802b840:	602b      	str	r3, [r5, #0]
 802b842:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b846:	81a3      	strh	r3, [r4, #12]
 802b848:	f04f 30ff 	mov.w	r0, #4294967295
 802b84c:	e034      	b.n	802b8b8 <__swsetup_r+0x9c>
 802b84e:	0758      	lsls	r0, r3, #29
 802b850:	d512      	bpl.n	802b878 <__swsetup_r+0x5c>
 802b852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b854:	b141      	cbz	r1, 802b868 <__swsetup_r+0x4c>
 802b856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b85a:	4299      	cmp	r1, r3
 802b85c:	d002      	beq.n	802b864 <__swsetup_r+0x48>
 802b85e:	4628      	mov	r0, r5
 802b860:	f7ff fbd0 	bl	802b004 <_free_r>
 802b864:	2300      	movs	r3, #0
 802b866:	6363      	str	r3, [r4, #52]	; 0x34
 802b868:	89a3      	ldrh	r3, [r4, #12]
 802b86a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b86e:	81a3      	strh	r3, [r4, #12]
 802b870:	2300      	movs	r3, #0
 802b872:	6063      	str	r3, [r4, #4]
 802b874:	6923      	ldr	r3, [r4, #16]
 802b876:	6023      	str	r3, [r4, #0]
 802b878:	89a3      	ldrh	r3, [r4, #12]
 802b87a:	f043 0308 	orr.w	r3, r3, #8
 802b87e:	81a3      	strh	r3, [r4, #12]
 802b880:	6923      	ldr	r3, [r4, #16]
 802b882:	b94b      	cbnz	r3, 802b898 <__swsetup_r+0x7c>
 802b884:	89a3      	ldrh	r3, [r4, #12]
 802b886:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b88a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b88e:	d003      	beq.n	802b898 <__swsetup_r+0x7c>
 802b890:	4621      	mov	r1, r4
 802b892:	4628      	mov	r0, r5
 802b894:	f000 f840 	bl	802b918 <__smakebuf_r>
 802b898:	89a0      	ldrh	r0, [r4, #12]
 802b89a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b89e:	f010 0301 	ands.w	r3, r0, #1
 802b8a2:	d00a      	beq.n	802b8ba <__swsetup_r+0x9e>
 802b8a4:	2300      	movs	r3, #0
 802b8a6:	60a3      	str	r3, [r4, #8]
 802b8a8:	6963      	ldr	r3, [r4, #20]
 802b8aa:	425b      	negs	r3, r3
 802b8ac:	61a3      	str	r3, [r4, #24]
 802b8ae:	6923      	ldr	r3, [r4, #16]
 802b8b0:	b943      	cbnz	r3, 802b8c4 <__swsetup_r+0xa8>
 802b8b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b8b6:	d1c4      	bne.n	802b842 <__swsetup_r+0x26>
 802b8b8:	bd38      	pop	{r3, r4, r5, pc}
 802b8ba:	0781      	lsls	r1, r0, #30
 802b8bc:	bf58      	it	pl
 802b8be:	6963      	ldrpl	r3, [r4, #20]
 802b8c0:	60a3      	str	r3, [r4, #8]
 802b8c2:	e7f4      	b.n	802b8ae <__swsetup_r+0x92>
 802b8c4:	2000      	movs	r0, #0
 802b8c6:	e7f7      	b.n	802b8b8 <__swsetup_r+0x9c>
 802b8c8:	24000124 	.word	0x24000124

0802b8cc <__swhatbuf_r>:
 802b8cc:	b570      	push	{r4, r5, r6, lr}
 802b8ce:	460c      	mov	r4, r1
 802b8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b8d4:	2900      	cmp	r1, #0
 802b8d6:	b096      	sub	sp, #88	; 0x58
 802b8d8:	4615      	mov	r5, r2
 802b8da:	461e      	mov	r6, r3
 802b8dc:	da0d      	bge.n	802b8fa <__swhatbuf_r+0x2e>
 802b8de:	89a3      	ldrh	r3, [r4, #12]
 802b8e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 802b8e4:	f04f 0100 	mov.w	r1, #0
 802b8e8:	bf0c      	ite	eq
 802b8ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802b8ee:	2340      	movne	r3, #64	; 0x40
 802b8f0:	2000      	movs	r0, #0
 802b8f2:	6031      	str	r1, [r6, #0]
 802b8f4:	602b      	str	r3, [r5, #0]
 802b8f6:	b016      	add	sp, #88	; 0x58
 802b8f8:	bd70      	pop	{r4, r5, r6, pc}
 802b8fa:	466a      	mov	r2, sp
 802b8fc:	f000 f848 	bl	802b990 <_fstat_r>
 802b900:	2800      	cmp	r0, #0
 802b902:	dbec      	blt.n	802b8de <__swhatbuf_r+0x12>
 802b904:	9901      	ldr	r1, [sp, #4]
 802b906:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802b90a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802b90e:	4259      	negs	r1, r3
 802b910:	4159      	adcs	r1, r3
 802b912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b916:	e7eb      	b.n	802b8f0 <__swhatbuf_r+0x24>

0802b918 <__smakebuf_r>:
 802b918:	898b      	ldrh	r3, [r1, #12]
 802b91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b91c:	079d      	lsls	r5, r3, #30
 802b91e:	4606      	mov	r6, r0
 802b920:	460c      	mov	r4, r1
 802b922:	d507      	bpl.n	802b934 <__smakebuf_r+0x1c>
 802b924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b928:	6023      	str	r3, [r4, #0]
 802b92a:	6123      	str	r3, [r4, #16]
 802b92c:	2301      	movs	r3, #1
 802b92e:	6163      	str	r3, [r4, #20]
 802b930:	b002      	add	sp, #8
 802b932:	bd70      	pop	{r4, r5, r6, pc}
 802b934:	ab01      	add	r3, sp, #4
 802b936:	466a      	mov	r2, sp
 802b938:	f7ff ffc8 	bl	802b8cc <__swhatbuf_r>
 802b93c:	9900      	ldr	r1, [sp, #0]
 802b93e:	4605      	mov	r5, r0
 802b940:	4630      	mov	r0, r6
 802b942:	f7ff f81b 	bl	802a97c <_malloc_r>
 802b946:	b948      	cbnz	r0, 802b95c <__smakebuf_r+0x44>
 802b948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b94c:	059a      	lsls	r2, r3, #22
 802b94e:	d4ef      	bmi.n	802b930 <__smakebuf_r+0x18>
 802b950:	f023 0303 	bic.w	r3, r3, #3
 802b954:	f043 0302 	orr.w	r3, r3, #2
 802b958:	81a3      	strh	r3, [r4, #12]
 802b95a:	e7e3      	b.n	802b924 <__smakebuf_r+0xc>
 802b95c:	89a3      	ldrh	r3, [r4, #12]
 802b95e:	6020      	str	r0, [r4, #0]
 802b960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b964:	81a3      	strh	r3, [r4, #12]
 802b966:	9b00      	ldr	r3, [sp, #0]
 802b968:	6163      	str	r3, [r4, #20]
 802b96a:	9b01      	ldr	r3, [sp, #4]
 802b96c:	6120      	str	r0, [r4, #16]
 802b96e:	b15b      	cbz	r3, 802b988 <__smakebuf_r+0x70>
 802b970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b974:	4630      	mov	r0, r6
 802b976:	f000 f81d 	bl	802b9b4 <_isatty_r>
 802b97a:	b128      	cbz	r0, 802b988 <__smakebuf_r+0x70>
 802b97c:	89a3      	ldrh	r3, [r4, #12]
 802b97e:	f023 0303 	bic.w	r3, r3, #3
 802b982:	f043 0301 	orr.w	r3, r3, #1
 802b986:	81a3      	strh	r3, [r4, #12]
 802b988:	89a3      	ldrh	r3, [r4, #12]
 802b98a:	431d      	orrs	r5, r3
 802b98c:	81a5      	strh	r5, [r4, #12]
 802b98e:	e7cf      	b.n	802b930 <__smakebuf_r+0x18>

0802b990 <_fstat_r>:
 802b990:	b538      	push	{r3, r4, r5, lr}
 802b992:	4d07      	ldr	r5, [pc, #28]	; (802b9b0 <_fstat_r+0x20>)
 802b994:	2300      	movs	r3, #0
 802b996:	4604      	mov	r4, r0
 802b998:	4608      	mov	r0, r1
 802b99a:	4611      	mov	r1, r2
 802b99c:	602b      	str	r3, [r5, #0]
 802b99e:	f7d5 ff14 	bl	80017ca <_fstat>
 802b9a2:	1c43      	adds	r3, r0, #1
 802b9a4:	d102      	bne.n	802b9ac <_fstat_r+0x1c>
 802b9a6:	682b      	ldr	r3, [r5, #0]
 802b9a8:	b103      	cbz	r3, 802b9ac <_fstat_r+0x1c>
 802b9aa:	6023      	str	r3, [r4, #0]
 802b9ac:	bd38      	pop	{r3, r4, r5, pc}
 802b9ae:	bf00      	nop
 802b9b0:	2400bb04 	.word	0x2400bb04

0802b9b4 <_isatty_r>:
 802b9b4:	b538      	push	{r3, r4, r5, lr}
 802b9b6:	4d06      	ldr	r5, [pc, #24]	; (802b9d0 <_isatty_r+0x1c>)
 802b9b8:	2300      	movs	r3, #0
 802b9ba:	4604      	mov	r4, r0
 802b9bc:	4608      	mov	r0, r1
 802b9be:	602b      	str	r3, [r5, #0]
 802b9c0:	f7d5 ff13 	bl	80017ea <_isatty>
 802b9c4:	1c43      	adds	r3, r0, #1
 802b9c6:	d102      	bne.n	802b9ce <_isatty_r+0x1a>
 802b9c8:	682b      	ldr	r3, [r5, #0]
 802b9ca:	b103      	cbz	r3, 802b9ce <_isatty_r+0x1a>
 802b9cc:	6023      	str	r3, [r4, #0]
 802b9ce:	bd38      	pop	{r3, r4, r5, pc}
 802b9d0:	2400bb04 	.word	0x2400bb04

0802b9d4 <_init>:
 802b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b9d6:	bf00      	nop
 802b9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b9da:	bc08      	pop	{r3}
 802b9dc:	469e      	mov	lr, r3
 802b9de:	4770      	bx	lr

0802b9e0 <_fini>:
 802b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b9e2:	bf00      	nop
 802b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b9e6:	bc08      	pop	{r3}
 802b9e8:	469e      	mov	lr, r3
 802b9ea:	4770      	bx	lr
