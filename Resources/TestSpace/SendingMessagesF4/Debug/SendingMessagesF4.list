
SendingMessagesF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004060  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004230  08004230  00005230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004290  08004290  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004298  08004298  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  2000005c  080042fc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  080042fc  00006740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8e1  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002926  00000000  00000000  0001596d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00018298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b32  00000000  00000000  00019108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240a2  00000000  00000000  00019c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014005  00000000  00000000  0003dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd5e3  00000000  00000000  00051ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000402c  00000000  00000000  0012f308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00133334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004218 	.word	0x08004218

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004218 	.word	0x08004218

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b4:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c6:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005e2:	4b16      	ldr	r3, [pc, #88]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005e4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_ADC1_Init+0x9c>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_ADC1_Init+0x9c>)
 8000606:	f000 fc71 	bl	8000eec <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000610:	f000 f9c0 	bl	8000994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_ADC1_Init+0x9c>)
 8000626:	f000 fca5 	bl	8000f74 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000630:	f000 f9b0 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000078 	.word	0x20000078
 8000640:	40012000 	.word	0x40012000

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2f      	ldr	r2, [pc, #188]	@ (8000720 <HAL_ADC_MspInit+0xdc>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d158      	bne.n	8000718 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b2e      	ldr	r3, [pc, #184]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066e:	4a2d      	ldr	r2, [pc, #180]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000674:	6453      	str	r3, [r2, #68]	@ 0x44
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a26      	ldr	r2, [pc, #152]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <HAL_ADC_MspInit+0xe0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	481d      	ldr	r0, [pc, #116]	@ (8000728 <HAL_ADC_MspInit+0xe4>)
 80006b2:	f001 fa89 	bl	8001bc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000730 <HAL_ADC_MspInit+0xec>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006fc:	480b      	ldr	r0, [pc, #44]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 80006fe:	f000 ff79 	bl	80015f4 <HAL_DMA_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000708:	f000 f944 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a07      	ldr	r2, [pc, #28]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 8000710:	639a      	str	r2, [r3, #56]	@ 0x38
 8000712:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_ADC_MspInit+0xe8>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	@ 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40012000 	.word	0x40012000
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	200000c0 	.word	0x200000c0
 8000730:	40026410 	.word	0x40026410

08000734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_DMA_Init+0x3c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <MX_DMA_Init+0x3c>)
 8000744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2038      	movs	r0, #56	@ 0x38
 800075c:	f000 ff13 	bl	8001586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000760:	2038      	movs	r0, #56	@ 0x38
 8000762:	f000 ff2c 	bl	80015be <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	@ (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2160      	movs	r1, #96	@ 0x60
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f001 fb76 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	@ (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f001 f9d4 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8000820:	2360      	movs	r3, #96	@ 0x60
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f001 f9c6 	bl	8001bc8 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	@ 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fab3 	bl	8000dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f829 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff89 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000862:	f7ff ff67 	bl	8000734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000866:	f000 f9db 	bl	8000c20 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800086a:	f7ff fe99 	bl	80005a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800086e:	f000 f941 	bl	8000af4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000872:	f000 f9ab 	bl	8000bcc <MX_USART1_UART_Init>
  //#################################################################################
  //#################################################################################
  //#################################################################################
  while (1)
  {
	  int numChars = snprintf(txBuffer, sizeof(txBuffer), "Hello!\r\n");
 8000876:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <main+0x54>)
 8000878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <main+0x58>)
 800087e:	f003 f817 	bl	80038b0 <sniprintf>
 8000882:	6078      	str	r0, [r7, #4]
	  if (numChars > 0)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	dd07      	ble.n	800089a <main+0x4a>
	  {
		  // Transmit data over UART
		  HAL_UART_Transmit(&huart2, (uint8_t *)txBuffer, numChars, HAL_MAX_DELAY);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	b29a      	uxth	r2, r3
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	4905      	ldr	r1, [pc, #20]	@ (80008a8 <main+0x58>)
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <main+0x5c>)
 8000896:	f002 fc96 	bl	80031c6 <HAL_UART_Transmit>
	  }
	  HAL_Delay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800089e:	f000 fb01 	bl	8000ea4 <HAL_Delay>
  {
 80008a2:	e7e8      	b.n	8000876 <main+0x26>
 80008a4:	08004230 	.word	0x08004230
 80008a8:	20000120 	.word	0x20000120
 80008ac:	200005b0 	.word	0x200005b0

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2234      	movs	r2, #52	@ 0x34
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f82a 	bl	8003918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <SystemClock_Config+0xdc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <SystemClock_Config+0xdc>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <SystemClock_Config+0xdc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <SystemClock_Config+0xe0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <SystemClock_Config+0xe0>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <SystemClock_Config+0xe0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000924:	23b4      	movs	r3, #180	@ 0xb4
 8000926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fe8d 	bl	8002658 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000944:	f000 f826 	bl	8000994 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000948:	f001 faec 	bl	8001f24 <HAL_PWREx_EnableOverDrive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000952:	f000 f81f 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000962:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2105      	movs	r1, #5
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fb25 	bl	8001fc4 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000980:	f000 f808 	bl	8000994 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	@ 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009de:	2007      	movs	r0, #7
 80009e0:	f000 fdc6 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <NMI_Handler+0x4>

080009f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a46:	f000 fa0d 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <DMA2_Stream0_IRQHandler+0x10>)
 8000a56:	f000 fe7b 	bl	8001750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000c0 	.word	0x200000c0

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f002 ff48 	bl	8003928 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20020000 	.word	0x20020000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000520 	.word	0x20000520
 8000acc:	20000740 	.word	0x20000740

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 22-1;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b1a:	2215      	movs	r2, #21
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b26:	2209      	movs	r2, #9
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b38:	f002 f82c 	bl	8002b94 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000b42:	f7ff ff27 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4619      	mov	r1, r3
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b54:	f002 f86d 	bl	8002c32 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f7ff ff19 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b62:	2320      	movs	r3, #32
 8000b64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <MX_TIM2_Init+0x94>)
 8000b70:	f002 fa60 	bl	8003034 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f7ff ff0b 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000524 	.word	0x20000524

08000b8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b9c:	d10d      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_USART1_UART_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_USART1_UART_Init+0x4c>)
 8000c04:	f002 fa92 	bl	800312c <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f7ff fec1 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000056c 	.word	0x2000056c
 8000c1c:	40011000 	.word	0x40011000

08000c20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f002 fa68 	bl	800312c <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f7ff fe97 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200005b0 	.word	0x200005b0
 8000c70:	40004400 	.word	0x40004400

08000c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a32      	ldr	r2, [pc, #200]	@ (8000d5c <HAL_UART_MspInit+0xe8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12d      	bne.n	8000cf2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b31      	ldr	r3, [pc, #196]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	4a30      	ldr	r2, [pc, #192]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481e      	ldr	r0, [pc, #120]	@ (8000d64 <HAL_UART_MspInit+0xf0>)
 8000cec:	f000 ff6c 	bl	8001bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cf0:	e030      	b.n	8000d54 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <HAL_UART_MspInit+0xf4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d12b      	bne.n	8000d54 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_UART_MspInit+0xec>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d34:	230c      	movs	r3, #12
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d44:	2307      	movs	r3, #7
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d50:	f000 ff3a 	bl	8001bc8 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	@ 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40004400 	.word	0x40004400

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	@ (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	@ (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	@ (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff fe9b 	bl	8000ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fdcb 	bl	8003934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fd57 	bl	8000850 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db0:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8000db4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db8:	20000740 	.word	0x20000740

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fbc1 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fdd4 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fbd9 	bl	80015da <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 fba1 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	200005f4 	.word	0x200005f4

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200005f4 	.word	0x200005f4

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d005      	beq.n	8000eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_Delay+0x44>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eca:	bf00      	nop
 8000ecc:	f7ff ffde 	bl	8000e8c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d8f7      	bhi.n	8000ecc <HAL_Delay+0x28>
  {
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008

08000eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e033      	b.n	8000f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fb9a 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f32:	f023 0302 	bic.w	r3, r3, #2
 8000f36:	f043 0202 	orr.w	r2, r3, #2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f94a 	bl	80011d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f5a:	e001      	b.n	8000f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_ADC_ConfigChannel+0x1c>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e113      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x244>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b09      	cmp	r3, #9
 8000f9e:	d925      	bls.n	8000fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68d9      	ldr	r1, [r3, #12]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3b1e      	subs	r3, #30
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68d9      	ldr	r1, [r3, #12]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4403      	add	r3, r0
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	e022      	b.n	8001032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6919      	ldr	r1, [r3, #16]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	2207      	movs	r2, #7
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	400a      	ands	r2, r1
 800100e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6919      	ldr	r1, [r3, #16]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	4603      	mov	r3, r0
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4403      	add	r3, r0
 8001028:	409a      	lsls	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d824      	bhi.n	8001084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	3b05      	subs	r3, #5
 800104c:	221f      	movs	r2, #31
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	400a      	ands	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b05      	subs	r3, #5
 8001076:	fa00 f203 	lsl.w	r2, r0, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
 8001082:	e04c      	b.n	800111e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b0c      	cmp	r3, #12
 800108a:	d824      	bhi.n	80010d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	3b23      	subs	r3, #35	@ 0x23
 800109e:	221f      	movs	r2, #31
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43da      	mvns	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	400a      	ands	r2, r1
 80010ac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3b23      	subs	r3, #35	@ 0x23
 80010c8:	fa00 f203 	lsl.w	r2, r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d4:	e023      	b.n	800111e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	3b41      	subs	r3, #65	@ 0x41
 80010e8:	221f      	movs	r2, #31
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	400a      	ands	r2, r1
 80010f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b41      	subs	r3, #65	@ 0x41
 8001112:	fa00 f203 	lsl.w	r2, r0, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <HAL_ADC_ConfigChannel+0x250>)
 8001120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a28      	ldr	r2, [pc, #160]	@ (80011c8 <HAL_ADC_ConfigChannel+0x254>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d10f      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1d8>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b12      	cmp	r3, #18
 8001132:	d10b      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <HAL_ADC_ConfigChannel+0x254>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x23a>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <HAL_ADC_ConfigChannel+0x258>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_ADC_ConfigChannel+0x1f4>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b11      	cmp	r3, #17
 8001166:	d122      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a11      	ldr	r2, [pc, #68]	@ (80011cc <HAL_ADC_ConfigChannel+0x258>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d111      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_ADC_ConfigChannel+0x25c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_ADC_ConfigChannel+0x260>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40012300 	.word	0x40012300
 80011c8:	40012000 	.word	0x40012000
 80011cc:	10000012 	.word	0x10000012
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	4b79      	ldr	r3, [pc, #484]	@ (80013c8 <ADC_Init+0x1f0>)
 80011e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800120c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	021a      	lsls	r2, r3, #8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6899      	ldr	r1, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	4a58      	ldr	r2, [pc, #352]	@ (80013cc <ADC_Init+0x1f4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d022      	beq.n	80012b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800127e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6899      	ldr	r1, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6899      	ldr	r1, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e00f      	b.n	80012d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0202 	bic.w	r2, r2, #2
 80012e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6899      	ldr	r1, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e1b      	ldrb	r3, [r3, #24]
 80012f0:	005a      	lsls	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d01b      	beq.n	800133c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001312:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001322:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6859      	ldr	r1, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	3b01      	subs	r3, #1
 8001330:	035a      	lsls	r2, r3, #13
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	e007      	b.n	800134c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800134a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	3b01      	subs	r3, #1
 8001368:	051a      	lsls	r2, r3, #20
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6899      	ldr	r1, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800138e:	025a      	lsls	r2, r3, #9
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6899      	ldr	r1, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	029a      	lsls	r2, r3, #10
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40012300 	.word	0x40012300
 80013cc:	0f000001 	.word	0x0f000001

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	@ (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff29 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff3e 	bl	8001418 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff31 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ffa2 	bl	800152c <SysTick_Config>
 80015e8:	4603      	mov	r3, r0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff fc44 	bl	8000e8c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e099      	b.n	8001744 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001630:	e00f      	b.n	8001652 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001632:	f7ff fc2b 	bl	8000e8c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b05      	cmp	r3, #5
 800163e:	d908      	bls.n	8001652 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e078      	b.n	8001744 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1e8      	bne.n	8001632 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4b38      	ldr	r3, [pc, #224]	@ (800174c <HAL_DMA_Init+0x158>)
 800166c:	4013      	ands	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d107      	bne.n	80016bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	4313      	orrs	r3, r2
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f023 0307 	bic.w	r3, r3, #7
 80016d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	4313      	orrs	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d117      	bne.n	8001716 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00e      	beq.n	8001716 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f9e9 	bl	8001ad0 <DMA_CheckFifoParam>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2240      	movs	r2, #64	@ 0x40
 8001708:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001712:	2301      	movs	r3, #1
 8001714:	e016      	b.n	8001744 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f9a0 	bl	8001a64 <DMA_CalcBaseAndBitshift>
 8001724:	4603      	mov	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	223f      	movs	r2, #63	@ 0x3f
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f010803f 	.word	0xf010803f

08001750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800175c:	4b8e      	ldr	r3, [pc, #568]	@ (8001998 <HAL_DMA_IRQHandler+0x248>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a8e      	ldr	r2, [pc, #568]	@ (800199c <HAL_DMA_IRQHandler+0x24c>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177a:	2208      	movs	r2, #8
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01a      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0204 	bic.w	r2, r2, #4
 80017a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	2208      	movs	r2, #8
 80017aa:	409a      	lsls	r2, r3
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017de:	2201      	movs	r2, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	2204      	movs	r2, #4
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d012      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001814:	2204      	movs	r2, #4
 8001816:	409a      	lsls	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	f043 0204 	orr.w	r2, r3, #4
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182c:	2210      	movs	r2, #16
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d043      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d03c      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	2210      	movs	r2, #16
 800184c:	409a      	lsls	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d018      	beq.n	8001892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
 800187e:	e01f      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01b      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	4798      	blx	r3
 8001890:	e016      	b.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c4:	2220      	movs	r2, #32
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 808f 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8087 	beq.w	80019f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e6:	2220      	movs	r2, #32
 80018e8:	409a      	lsls	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b05      	cmp	r3, #5
 80018f8:	d136      	bne.n	8001968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0216 	bic.w	r2, r2, #22
 8001908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_DMA_IRQHandler+0x1da>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0208 	bic.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	223f      	movs	r2, #63	@ 0x3f
 8001940:	409a      	lsls	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195a:	2b00      	cmp	r3, #0
 800195c:	d07e      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
        }
        return;
 8001966:	e079      	b.n	8001a5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01d      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	2b00      	cmp	r3, #0
 800198a:	d031      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
 8001994:	e02c      	b.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000
 800199c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
 80019b0:	e01e      	b.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10f      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0210 	bic.w	r2, r2, #16
 80019ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d032      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d307      	bcc.n	8001a38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f2      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x2cc>
 8001a36:	e000      	b.n	8001a3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	4798      	blx	r3
 8001a5a:	e000      	b.n	8001a5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a5c:	bf00      	nop
    }
  }
}
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b10      	subs	r3, #16
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <DMA_CalcBaseAndBitshift+0x68>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d909      	bls.n	8001aa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	1d1a      	adds	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aa4:	e007      	b.n	8001ab6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	aaaaaaab 	.word	0xaaaaaaab
 8001acc:	08004254 	.word	0x08004254

08001ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d856      	bhi.n	8001b9e <DMA_CheckFifoParam+0xce>
 8001af0:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <DMA_CheckFifoParam+0x28>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b1b 	.word	0x08001b1b
 8001b00:	08001b09 	.word	0x08001b09
 8001b04:	08001b9f 	.word	0x08001b9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d046      	beq.n	8001ba2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b18:	e043      	b.n	8001ba2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b22:	d140      	bne.n	8001ba6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b28:	e03d      	b.n	8001ba6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b32:	d121      	bne.n	8001b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d837      	bhi.n	8001baa <DMA_CheckFifoParam+0xda>
 8001b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <DMA_CheckFifoParam+0x70>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b57 	.word	0x08001b57
 8001b48:	08001b51 	.word	0x08001b51
 8001b4c:	08001b69 	.word	0x08001b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      break;
 8001b54:	e030      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d025      	beq.n	8001bae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b66:	e022      	b.n	8001bae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b70:	d11f      	bne.n	8001bb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b76:	e01c      	b.n	8001bb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d903      	bls.n	8001b86 <DMA_CheckFifoParam+0xb6>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d003      	beq.n	8001b8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b84:	e018      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	73fb      	strb	r3, [r7, #15]
      break;
 8001b8a:	e015      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9c:	e00b      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001b9e:	bf00      	nop
 8001ba0:	e00a      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
 8001ba4:	e008      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba6:	bf00      	nop
 8001ba8:	e006      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001baa:	bf00      	nop
 8001bac:	e004      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
 8001bb0:	e002      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bb2:	bf00      	nop
 8001bb4:	e000      	b.n	8001bb8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb6:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e165      	b.n	8001eb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8154 	bne.w	8001eaa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80ae 	beq.w	8001eaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <HAL_GPIO_Init+0x300>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a58      	ldr	r2, [pc, #352]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	@ (8001ed0 <HAL_GPIO_Init+0x308>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed4 <HAL_GPIO_Init+0x30c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x216>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_GPIO_Init+0x310>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x212>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	@ (8001edc <HAL_GPIO_Init+0x314>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x20e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee0 <HAL_GPIO_Init+0x318>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x20a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee4 <HAL_GPIO_Init+0x31c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x206>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <HAL_GPIO_Init+0x320>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x202>
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	e00c      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00a      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e008      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e006      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e004      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x21c>
 8001de2:	2300      	movs	r3, #0
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	f002 0203 	and.w	r2, r2, #3
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4093      	lsls	r3, r2
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df4:	4935      	ldr	r1, [pc, #212]	@ (8001ecc <HAL_GPIO_Init+0x304>)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e02:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e26:	4a31      	ldr	r2, [pc, #196]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e56:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea4:	4a11      	ldr	r2, [pc, #68]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	f67f ae96 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3724      	adds	r7, #36	@ 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40013c00 	.word	0x40013c00

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f0c:	e003      	b.n	8001f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	041a      	lsls	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f50:	f7fe ff9c 	bl	8000e8c <HAL_GetTick>
 8001f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f56:	e009      	b.n	8001f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f58:	f7fe ff98 	bl	8000e8c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f66:	d901      	bls.n	8001f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e01f      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f6c:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f78:	d1ee      	bne.n	8001f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7fe ff84 	bl	8000e8c <HAL_GetTick>
 8001f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f86:	e009      	b.n	8001f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f88:	f7fe ff80 	bl	8000e8c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f96:	d901      	bls.n	8001f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e007      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	420e0040 	.word	0x420e0040
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	420e0044 	.word	0x420e0044

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0cc      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b68      	ldr	r3, [pc, #416]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d90c      	bls.n	8002000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b65      	ldr	r3, [pc, #404]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a58      	ldr	r2, [pc, #352]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a52      	ldr	r2, [pc, #328]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800203a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d044      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d119      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d003      	beq.n	8002082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	2b03      	cmp	r3, #3
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b3f      	ldr	r3, [pc, #252]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e067      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4934      	ldr	r1, [pc, #208]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b4:	f7fe feea 	bl	8000e8c <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7fe fee6 	bl	8000e8c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e04f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 030f 	and.w	r3, r3, #15
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d20c      	bcs.n	800210c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f2:	4b22      	ldr	r3, [pc, #136]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f855 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 800214e:	4602      	mov	r2, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	490a      	ldr	r1, [pc, #40]	@ (8002184 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	5ccb      	ldrb	r3, [r1, r3]
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fe4a 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00
 8002180:	40023800 	.word	0x40023800
 8002184:	0800423c 	.word	0x0800423c
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021ac:	f7ff fff0 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0a9b      	lsrs	r3, r3, #10
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	@ (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	0800424c 	.word	0x0800424c

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021d4:	f7ff ffdc 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0b5b      	lsrs	r3, r3, #13
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	0800424c 	.word	0x0800424c

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b0ae      	sub	sp, #184	@ 0xb8
 80021fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221e:	4bcb      	ldr	r3, [pc, #812]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	f200 8206 	bhi.w	8002638 <HAL_RCC_GetSysClockFreq+0x440>
 800222c:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002269 	.word	0x08002269
 8002238:	08002639 	.word	0x08002639
 800223c:	08002639 	.word	0x08002639
 8002240:	08002639 	.word	0x08002639
 8002244:	08002271 	.word	0x08002271
 8002248:	08002639 	.word	0x08002639
 800224c:	08002639 	.word	0x08002639
 8002250:	08002639 	.word	0x08002639
 8002254:	08002279 	.word	0x08002279
 8002258:	08002639 	.word	0x08002639
 800225c:	08002639 	.word	0x08002639
 8002260:	08002639 	.word	0x08002639
 8002264:	08002469 	.word	0x08002469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4bb9      	ldr	r3, [pc, #740]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x358>)
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800226e:	e1e7      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4bb8      	ldr	r3, [pc, #736]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002276:	e1e3      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002278:	4bb4      	ldr	r3, [pc, #720]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002284:	4bb1      	ldr	r3, [pc, #708]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d071      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4bae      	ldr	r3, [pc, #696]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800229c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	f04f 0000 	mov.w	r0, #0
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c8:	0150      	lsls	r0, r2, #5
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4621      	mov	r1, r4
 80022d0:	1a51      	subs	r1, r2, r1
 80022d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80022d4:	4629      	mov	r1, r5
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	647b      	str	r3, [r7, #68]	@ 0x44
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022e8:	4649      	mov	r1, r9
 80022ea:	018b      	lsls	r3, r1, #6
 80022ec:	4641      	mov	r1, r8
 80022ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f2:	4641      	mov	r1, r8
 80022f4:	018a      	lsls	r2, r1, #6
 80022f6:	4641      	mov	r1, r8
 80022f8:	1a51      	subs	r1, r2, r1
 80022fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022fc:	4649      	mov	r1, r9
 80022fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002310:	4649      	mov	r1, r9
 8002312:	00cb      	lsls	r3, r1, #3
 8002314:	4641      	mov	r1, r8
 8002316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800231a:	4641      	mov	r1, r8
 800231c:	00ca      	lsls	r2, r1, #3
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	4603      	mov	r3, r0
 8002324:	4622      	mov	r2, r4
 8002326:	189b      	adds	r3, r3, r2
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
 800232a:	462b      	mov	r3, r5
 800232c:	460a      	mov	r2, r1
 800232e:	eb42 0303 	adc.w	r3, r2, r3
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002340:	4629      	mov	r1, r5
 8002342:	024b      	lsls	r3, r1, #9
 8002344:	4621      	mov	r1, r4
 8002346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800234a:	4621      	mov	r1, r4
 800234c:	024a      	lsls	r2, r1, #9
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800235c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002364:	f7fd ffa4 	bl	80002b0 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002372:	e067      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002374:	4b75      	ldr	r3, [pc, #468]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	2200      	movs	r2, #0
 800237c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002380:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800238e:	2300      	movs	r3, #0
 8002390:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4621      	mov	r1, r4
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023c8:	4649      	mov	r1, r9
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4641      	mov	r1, r8
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4641      	mov	r1, r8
 80023d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80023dc:	4649      	mov	r1, r9
 80023de:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f6:	4692      	mov	sl, r2
 80023f8:	469b      	mov	fp, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002400:	623b      	str	r3, [r7, #32]
 8002402:	462b      	mov	r3, r5
 8002404:	eb4b 0303 	adc.w	r3, fp, r3
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002416:	4629      	mov	r1, r5
 8002418:	028b      	lsls	r3, r1, #10
 800241a:	4621      	mov	r1, r4
 800241c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002420:	4621      	mov	r1, r4
 8002422:	028a      	lsls	r2, r1, #10
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800242c:	2200      	movs	r2, #0
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002430:	677a      	str	r2, [r7, #116]	@ 0x74
 8002432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002436:	f7fd ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4613      	mov	r3, r2
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002444:	4b41      	ldr	r3, [pc, #260]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800245a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002466:	e0eb      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002468:	4b38      	ldr	r3, [pc, #224]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002470:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002474:	4b35      	ldr	r3, [pc, #212]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d06b      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002480:	4b32      	ldr	r3, [pc, #200]	@ (800254c <HAL_RCC_GetSysClockFreq+0x354>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	099b      	lsrs	r3, r3, #6
 8002486:	2200      	movs	r2, #0
 8002488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800248a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800248c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800248e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002492:	663b      	str	r3, [r7, #96]	@ 0x60
 8002494:	2300      	movs	r3, #0
 8002496:	667b      	str	r3, [r7, #100]	@ 0x64
 8002498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800249c:	4622      	mov	r2, r4
 800249e:	462b      	mov	r3, r5
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	0159      	lsls	r1, r3, #5
 80024aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ae:	0150      	lsls	r0, r2, #5
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4621      	mov	r1, r4
 80024b6:	1a51      	subs	r1, r2, r1
 80024b8:	61b9      	str	r1, [r7, #24]
 80024ba:	4629      	mov	r1, r5
 80024bc:	eb63 0301 	sbc.w	r3, r3, r1
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024ce:	4659      	mov	r1, fp
 80024d0:	018b      	lsls	r3, r1, #6
 80024d2:	4651      	mov	r1, sl
 80024d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d8:	4651      	mov	r1, sl
 80024da:	018a      	lsls	r2, r1, #6
 80024dc:	4651      	mov	r1, sl
 80024de:	ebb2 0801 	subs.w	r8, r2, r1
 80024e2:	4659      	mov	r1, fp
 80024e4:	eb63 0901 	sbc.w	r9, r3, r1
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fc:	4690      	mov	r8, r2
 80024fe:	4699      	mov	r9, r3
 8002500:	4623      	mov	r3, r4
 8002502:	eb18 0303 	adds.w	r3, r8, r3
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	462b      	mov	r3, r5
 800250a:	eb49 0303 	adc.w	r3, r9, r3
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800251c:	4629      	mov	r1, r5
 800251e:	024b      	lsls	r3, r1, #9
 8002520:	4621      	mov	r1, r4
 8002522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002526:	4621      	mov	r1, r4
 8002528:	024a      	lsls	r2, r1, #9
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002532:	2200      	movs	r2, #0
 8002534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002536:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800253c:	f7fd feb8 	bl	80002b0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800254a:	e065      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x420>
 800254c:	40023800 	.word	0x40023800
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x458>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	2200      	movs	r2, #0
 8002560:	4618      	mov	r0, r3
 8002562:	4611      	mov	r1, r2
 8002564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002568:	653b      	str	r3, [r7, #80]	@ 0x50
 800256a:	2300      	movs	r3, #0
 800256c:	657b      	str	r3, [r7, #84]	@ 0x54
 800256e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002572:	4642      	mov	r2, r8
 8002574:	464b      	mov	r3, r9
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4641      	mov	r1, r8
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025a4:	4659      	mov	r1, fp
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4651      	mov	r1, sl
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	1a54      	subs	r4, r2, r1
 80025b6:	4659      	mov	r1, fp
 80025b8:	eb63 0501 	sbc.w	r5, r3, r1
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	00eb      	lsls	r3, r5, #3
 80025c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ca:	00e2      	lsls	r2, r4, #3
 80025cc:	4614      	mov	r4, r2
 80025ce:	461d      	mov	r5, r3
 80025d0:	4643      	mov	r3, r8
 80025d2:	18e3      	adds	r3, r4, r3
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	464b      	mov	r3, r9
 80025d8:	eb45 0303 	adc.w	r3, r5, r3
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ea:	4629      	mov	r1, r5
 80025ec:	028b      	lsls	r3, r1, #10
 80025ee:	4621      	mov	r1, r4
 80025f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025f4:	4621      	mov	r1, r4
 80025f6:	028a      	lsls	r2, r1, #10
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002600:	2200      	movs	r2, #0
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002604:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800260a:	f7fd fe51 	bl	80002b0 <__aeabi_uldivmod>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4613      	mov	r3, r2
 8002614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x458>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0f1b      	lsrs	r3, r3, #28
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800262a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002636:	e003      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800263a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002644:	4618      	mov	r0, r3
 8002646:	37b8      	adds	r7, #184	@ 0xb8
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400

08002658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e28d      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8083 	beq.w	800277e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002678:	4b94      	ldr	r3, [pc, #592]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b04      	cmp	r3, #4
 8002682:	d019      	beq.n	80026b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002684:	4b91      	ldr	r3, [pc, #580]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800268c:	2b08      	cmp	r3, #8
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002690:	4b8e      	ldr	r3, [pc, #568]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b8b      	ldr	r3, [pc, #556]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b84      	ldr	r3, [pc, #528]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x124>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e25a      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x90>
 80026da:	4b7c      	ldr	r3, [pc, #496]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7b      	ldr	r2, [pc, #492]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xcc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0xb4>
 80026f2:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b73      	ldr	r3, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a72      	ldr	r2, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xcc>
 800270c:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b6c      	ldr	r3, [pc, #432]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6b      	ldr	r2, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fbae 	bl	8000e8c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fbaa 	bl	8000e8c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e21f      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b61      	ldr	r3, [pc, #388]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xdc>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fb9a 	bl	8000e8c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fb96 	bl	8000e8c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e20b      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b57      	ldr	r3, [pc, #348]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x104>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d06f      	beq.n	800286a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800278a:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002796:	4b4d      	ldr	r3, [pc, #308]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027a2:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027b6:	2b0c      	cmp	r3, #12
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x186>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1d3      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_OscConfig+0x278>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fb43 	bl	8000e8c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fb3f 	bl	8000e8c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1b4      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x278>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fb22 	bl	8000e8c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fb1e 	bl	8000e8c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e193      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x27c>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fb02 	bl	8000e8c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fafe 	bl	8000e8c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e173      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x274>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x234>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe faeb 	bl	8000e8c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe fae7 	bl	8000e8c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e15c      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b83      	ldr	r3, [pc, #524]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	@ 0x40
 8002912:	4b7c      	ldr	r3, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b79      	ldr	r3, [pc, #484]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe faa7 	bl	8000e8c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe faa3 	bl	8000e8c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e118      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6c      	ldr	r3, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x4b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x31e>
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x358>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x340>
 800297e:	4b61      	ldr	r3, [pc, #388]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a60      	ldr	r2, [pc, #384]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a5d      	ldr	r2, [pc, #372]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x358>
 8002998:	4b5a      	ldr	r3, [pc, #360]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a59      	ldr	r2, [pc, #356]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b57      	ldr	r3, [pc, #348]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a56      	ldr	r2, [pc, #344]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fa68 	bl	8000e8c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe fa64 	bl	8000e8c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0d7      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x368>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fa52 	bl	8000e8c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fa4e 	bl	8000e8c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0c1      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b40      	ldr	r3, [pc, #256]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4a3a      	ldr	r2, [pc, #232]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80ad 	beq.w	8002b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d060      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d145      	bne.n	8002aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fa22 	bl	8000e8c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fa1e 	bl	8000e8c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e093      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	071b      	lsls	r3, r3, #28
 8002a96:	491b      	ldr	r1, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe f9f3 	bl	8000e8c <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aaa:	f7fe f9ef 	bl	8000e8c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e064      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x452>
 8002ac8:	e05c      	b.n	8002b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x4b4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe f9dc 	bl	8000e8c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe f9d8 	bl	8000e8c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e04d      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x480>
 8002af6:	e045      	b.n	8002b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e040      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_RCC_OscConfig+0x538>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d030      	beq.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d129      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d122      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d119      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d10f      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800

08002b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e041      	b.n	8002c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd ffe6 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 f8f4 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_TIM_ConfigClockSource+0x1c>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e0b4      	b.n	8002db8 <HAL_TIM_ConfigClockSource+0x186>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c86:	d03e      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0xd4>
 8002c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8c:	f200 8087 	bhi.w	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c94:	f000 8086 	beq.w	8002da4 <HAL_TIM_ConfigClockSource+0x172>
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9c:	d87f      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002c9e:	2b70      	cmp	r3, #112	@ 0x70
 8002ca0:	d01a      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xa6>
 8002ca2:	2b70      	cmp	r3, #112	@ 0x70
 8002ca4:	d87b      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002ca6:	2b60      	cmp	r3, #96	@ 0x60
 8002ca8:	d050      	beq.n	8002d4c <HAL_TIM_ConfigClockSource+0x11a>
 8002caa:	2b60      	cmp	r3, #96	@ 0x60
 8002cac:	d877      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002cae:	2b50      	cmp	r3, #80	@ 0x50
 8002cb0:	d03c      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0xfa>
 8002cb2:	2b50      	cmp	r3, #80	@ 0x50
 8002cb4:	d873      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002cb6:	2b40      	cmp	r3, #64	@ 0x40
 8002cb8:	d058      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0x13a>
 8002cba:	2b40      	cmp	r3, #64	@ 0x40
 8002cbc:	d86f      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002cbe:	2b30      	cmp	r3, #48	@ 0x30
 8002cc0:	d064      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0x15a>
 8002cc2:	2b30      	cmp	r3, #48	@ 0x30
 8002cc4:	d86b      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d060      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0x15a>
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d867      	bhi.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d05c      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0x15a>
 8002cd2:	2b10      	cmp	r3, #16
 8002cd4:	d05a      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0x15a>
 8002cd6:	e062      	b.n	8002d9e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f000 f984 	bl	8002ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	609a      	str	r2, [r3, #8]
      break;
 8002d04:	e04f      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f000 f96d 	bl	8002ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d28:	609a      	str	r2, [r3, #8]
      break;
 8002d2a:	e03c      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f000 f8e1 	bl	8002f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2150      	movs	r1, #80	@ 0x50
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 f93a 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d4a:	e02c      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f000 f900 	bl	8002f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2160      	movs	r1, #96	@ 0x60
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f92a 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d6a:	e01c      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f000 f8c1 	bl	8002f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2140      	movs	r1, #64	@ 0x40
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f91a 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d8a:	e00c      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 f911 	bl	8002fbe <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e003      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      break;
 8002da2:	e000      	b.n	8002da6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a40      	ldr	r2, [pc, #256]	@ (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dde:	d00f      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ed8 <TIM_Base_SetConfig+0x118>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3c      	ldr	r2, [pc, #240]	@ (8002edc <TIM_Base_SetConfig+0x11c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <TIM_Base_SetConfig+0x120>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2f      	ldr	r2, [pc, #188]	@ (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d02b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e20:	d027      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <TIM_Base_SetConfig+0x118>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d023      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <TIM_Base_SetConfig+0x11c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <TIM_Base_SetConfig+0x120>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d017      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a28      	ldr	r2, [pc, #160]	@ (8002ee8 <TIM_Base_SetConfig+0x128>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	@ (8002eec <TIM_Base_SetConfig+0x12c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00f      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <TIM_Base_SetConfig+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a25      	ldr	r2, [pc, #148]	@ (8002ef4 <TIM_Base_SetConfig+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a24      	ldr	r2, [pc, #144]	@ (8002ef8 <TIM_Base_SetConfig+0x138>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <TIM_Base_SetConfig+0x13c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40000c00 	.word	0x40000c00
 8002ee4:	40010400 	.word	0x40010400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800
 8002ef4:	40001800 	.word	0x40001800
 8002ef8:	40001c00 	.word	0x40001c00
 8002efc:	40002000 	.word	0x40002000

08002f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 030a 	bic.w	r3, r3, #10
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0210 	bic.w	r2, r3, #16
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	031b      	lsls	r3, r3, #12
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f043 0307 	orr.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800300e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	021a      	lsls	r2, r3, #8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	431a      	orrs	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e05a      	b.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003098:	d01d      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a15      	ldr	r2, [pc, #84]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40010400 	.word	0x40010400
 8003124:	40014000 	.word	0x40014000
 8003128:	40001800 	.word	0x40001800

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03f      	b.n	80031be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fd8e 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	@ 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f929 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	@ 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d17c      	bne.n	80032e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Transmit+0x2c>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e075      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x3e>
 8003200:	2302      	movs	r3, #2
 8003202:	e06e      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	@ 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321a:	f7fd fe37 	bl	8000e8c <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003234:	d108      	bne.n	8003248 <HAL_UART_Transmit+0x82>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003258:	e02a      	b.n	80032b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f840 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e036      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cf      	bne.n	800325a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	@ 0x40
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f810 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b090      	sub	sp, #64	@ 0x40
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e050      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d04c      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fd fdbf 	bl	8000e8c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003316:	429a      	cmp	r2, r3
 8003318:	d241      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800333a:	637a      	str	r2, [r7, #52]	@ 0x34
 800333c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	613b      	str	r3, [r7, #16]
   return(result);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800336e:	623a      	str	r2, [r7, #32]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61bb      	str	r3, [r7, #24]
   return(result);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d09f      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3740      	adds	r7, #64	@ 0x40
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	@ 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	@ (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe feb2 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7fe fe99 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	@ 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800350c:	f7fc fed0 	bl	80002b0 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	@ (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	@ 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	@ 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035a2:	f7fc fe85 	bl	80002b0 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	@ 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	@ (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800365e:	f7fc fe27 	bl	80002b0 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	@ (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	@ 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	@ 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	@ (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e106      	b.n	80038a0 <UART_SetConfig+0x4d8>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003720:	f7fc fdc6 	bl	80002b0 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	@ (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800379e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037be:	f7fc fd77 	bl	80002b0 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2264      	movs	r2, #100	@ 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	@ 0x32
 80037dc:	4a33      	ldr	r2, [pc, #204]	@ (80038ac <UART_SetConfig+0x4e4>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	441c      	add	r4, r3
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80037f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80037f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80037f8:	4642      	mov	r2, r8
 80037fa:	464b      	mov	r3, r9
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	415b      	adcs	r3, r3
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	4641      	mov	r1, r8
 800380a:	1851      	adds	r1, r2, r1
 800380c:	6039      	str	r1, [r7, #0]
 800380e:	4649      	mov	r1, r9
 8003810:	414b      	adcs	r3, r1
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003820:	4659      	mov	r1, fp
 8003822:	00cb      	lsls	r3, r1, #3
 8003824:	4651      	mov	r1, sl
 8003826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382a:	4651      	mov	r1, sl
 800382c:	00ca      	lsls	r2, r1, #3
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	4603      	mov	r3, r0
 8003834:	4642      	mov	r2, r8
 8003836:	189b      	adds	r3, r3, r2
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	464b      	mov	r3, r9
 800383c:	460a      	mov	r2, r1
 800383e:	eb42 0303 	adc.w	r3, r2, r3
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	663b      	str	r3, [r7, #96]	@ 0x60
 800384e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800385c:	4649      	mov	r1, r9
 800385e:	008b      	lsls	r3, r1, #2
 8003860:	4641      	mov	r1, r8
 8003862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003866:	4641      	mov	r1, r8
 8003868:	008a      	lsls	r2, r1, #2
 800386a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800386e:	f7fc fd1f 	bl	80002b0 <__aeabi_uldivmod>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4b0d      	ldr	r3, [pc, #52]	@ (80038ac <UART_SetConfig+0x4e4>)
 8003878:	fba3 1302 	umull	r1, r3, r3, r2
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	2164      	movs	r1, #100	@ 0x64
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	3332      	adds	r3, #50	@ 0x32
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <UART_SetConfig+0x4e4>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4422      	add	r2, r4
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <sniprintf>:
 80038b0:	b40c      	push	{r2, r3}
 80038b2:	b530      	push	{r4, r5, lr}
 80038b4:	4b17      	ldr	r3, [pc, #92]	@ (8003914 <sniprintf+0x64>)
 80038b6:	1e0c      	subs	r4, r1, #0
 80038b8:	681d      	ldr	r5, [r3, #0]
 80038ba:	b09d      	sub	sp, #116	@ 0x74
 80038bc:	da08      	bge.n	80038d0 <sniprintf+0x20>
 80038be:	238b      	movs	r3, #139	@ 0x8b
 80038c0:	602b      	str	r3, [r5, #0]
 80038c2:	f04f 30ff 	mov.w	r0, #4294967295
 80038c6:	b01d      	add	sp, #116	@ 0x74
 80038c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038cc:	b002      	add	sp, #8
 80038ce:	4770      	bx	lr
 80038d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038d8:	bf14      	ite	ne
 80038da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038de:	4623      	moveq	r3, r4
 80038e0:	9304      	str	r3, [sp, #16]
 80038e2:	9307      	str	r3, [sp, #28]
 80038e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038e8:	9002      	str	r0, [sp, #8]
 80038ea:	9006      	str	r0, [sp, #24]
 80038ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038f2:	ab21      	add	r3, sp, #132	@ 0x84
 80038f4:	a902      	add	r1, sp, #8
 80038f6:	4628      	mov	r0, r5
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	f000 f995 	bl	8003c28 <_svfiprintf_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	bfbc      	itt	lt
 8003902:	238b      	movlt	r3, #139	@ 0x8b
 8003904:	602b      	strlt	r3, [r5, #0]
 8003906:	2c00      	cmp	r4, #0
 8003908:	d0dd      	beq.n	80038c6 <sniprintf+0x16>
 800390a:	9b02      	ldr	r3, [sp, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
 8003910:	e7d9      	b.n	80038c6 <sniprintf+0x16>
 8003912:	bf00      	nop
 8003914:	2000000c 	.word	0x2000000c

08003918 <memset>:
 8003918:	4402      	add	r2, r0
 800391a:	4603      	mov	r3, r0
 800391c:	4293      	cmp	r3, r2
 800391e:	d100      	bne.n	8003922 <memset+0xa>
 8003920:	4770      	bx	lr
 8003922:	f803 1b01 	strb.w	r1, [r3], #1
 8003926:	e7f9      	b.n	800391c <memset+0x4>

08003928 <__errno>:
 8003928:	4b01      	ldr	r3, [pc, #4]	@ (8003930 <__errno+0x8>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <__libc_init_array>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4d0d      	ldr	r5, [pc, #52]	@ (800396c <__libc_init_array+0x38>)
 8003938:	4c0d      	ldr	r4, [pc, #52]	@ (8003970 <__libc_init_array+0x3c>)
 800393a:	1b64      	subs	r4, r4, r5
 800393c:	10a4      	asrs	r4, r4, #2
 800393e:	2600      	movs	r6, #0
 8003940:	42a6      	cmp	r6, r4
 8003942:	d109      	bne.n	8003958 <__libc_init_array+0x24>
 8003944:	4d0b      	ldr	r5, [pc, #44]	@ (8003974 <__libc_init_array+0x40>)
 8003946:	4c0c      	ldr	r4, [pc, #48]	@ (8003978 <__libc_init_array+0x44>)
 8003948:	f000 fc66 	bl	8004218 <_init>
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	2600      	movs	r6, #0
 8003952:	42a6      	cmp	r6, r4
 8003954:	d105      	bne.n	8003962 <__libc_init_array+0x2e>
 8003956:	bd70      	pop	{r4, r5, r6, pc}
 8003958:	f855 3b04 	ldr.w	r3, [r5], #4
 800395c:	4798      	blx	r3
 800395e:	3601      	adds	r6, #1
 8003960:	e7ee      	b.n	8003940 <__libc_init_array+0xc>
 8003962:	f855 3b04 	ldr.w	r3, [r5], #4
 8003966:	4798      	blx	r3
 8003968:	3601      	adds	r6, #1
 800396a:	e7f2      	b.n	8003952 <__libc_init_array+0x1e>
 800396c:	08004298 	.word	0x08004298
 8003970:	08004298 	.word	0x08004298
 8003974:	08004298 	.word	0x08004298
 8003978:	0800429c 	.word	0x0800429c

0800397c <__retarget_lock_acquire_recursive>:
 800397c:	4770      	bx	lr

0800397e <__retarget_lock_release_recursive>:
 800397e:	4770      	bx	lr

08003980 <_free_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4605      	mov	r5, r0
 8003984:	2900      	cmp	r1, #0
 8003986:	d041      	beq.n	8003a0c <_free_r+0x8c>
 8003988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398c:	1f0c      	subs	r4, r1, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	bfb8      	it	lt
 8003992:	18e4      	addlt	r4, r4, r3
 8003994:	f000 f8e0 	bl	8003b58 <__malloc_lock>
 8003998:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <_free_r+0x90>)
 800399a:	6813      	ldr	r3, [r2, #0]
 800399c:	b933      	cbnz	r3, 80039ac <_free_r+0x2c>
 800399e:	6063      	str	r3, [r4, #4]
 80039a0:	6014      	str	r4, [r2, #0]
 80039a2:	4628      	mov	r0, r5
 80039a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a8:	f000 b8dc 	b.w	8003b64 <__malloc_unlock>
 80039ac:	42a3      	cmp	r3, r4
 80039ae:	d908      	bls.n	80039c2 <_free_r+0x42>
 80039b0:	6820      	ldr	r0, [r4, #0]
 80039b2:	1821      	adds	r1, r4, r0
 80039b4:	428b      	cmp	r3, r1
 80039b6:	bf01      	itttt	eq
 80039b8:	6819      	ldreq	r1, [r3, #0]
 80039ba:	685b      	ldreq	r3, [r3, #4]
 80039bc:	1809      	addeq	r1, r1, r0
 80039be:	6021      	streq	r1, [r4, #0]
 80039c0:	e7ed      	b.n	800399e <_free_r+0x1e>
 80039c2:	461a      	mov	r2, r3
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	b10b      	cbz	r3, 80039cc <_free_r+0x4c>
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	d9fa      	bls.n	80039c2 <_free_r+0x42>
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	1850      	adds	r0, r2, r1
 80039d0:	42a0      	cmp	r0, r4
 80039d2:	d10b      	bne.n	80039ec <_free_r+0x6c>
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	4401      	add	r1, r0
 80039d8:	1850      	adds	r0, r2, r1
 80039da:	4283      	cmp	r3, r0
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	d1e0      	bne.n	80039a2 <_free_r+0x22>
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	6053      	str	r3, [r2, #4]
 80039e6:	4408      	add	r0, r1
 80039e8:	6010      	str	r0, [r2, #0]
 80039ea:	e7da      	b.n	80039a2 <_free_r+0x22>
 80039ec:	d902      	bls.n	80039f4 <_free_r+0x74>
 80039ee:	230c      	movs	r3, #12
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	e7d6      	b.n	80039a2 <_free_r+0x22>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428b      	cmp	r3, r1
 80039fa:	bf04      	itt	eq
 80039fc:	6819      	ldreq	r1, [r3, #0]
 80039fe:	685b      	ldreq	r3, [r3, #4]
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	bf04      	itt	eq
 8003a04:	1809      	addeq	r1, r1, r0
 8003a06:	6021      	streq	r1, [r4, #0]
 8003a08:	6054      	str	r4, [r2, #4]
 8003a0a:	e7ca      	b.n	80039a2 <_free_r+0x22>
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000073c 	.word	0x2000073c

08003a14 <sbrk_aligned>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4e0f      	ldr	r6, [pc, #60]	@ (8003a54 <sbrk_aligned+0x40>)
 8003a18:	460c      	mov	r4, r1
 8003a1a:	6831      	ldr	r1, [r6, #0]
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	b911      	cbnz	r1, 8003a26 <sbrk_aligned+0x12>
 8003a20:	f000 fba6 	bl	8004170 <_sbrk_r>
 8003a24:	6030      	str	r0, [r6, #0]
 8003a26:	4621      	mov	r1, r4
 8003a28:	4628      	mov	r0, r5
 8003a2a:	f000 fba1 	bl	8004170 <_sbrk_r>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	d103      	bne.n	8003a3a <sbrk_aligned+0x26>
 8003a32:	f04f 34ff 	mov.w	r4, #4294967295
 8003a36:	4620      	mov	r0, r4
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	1cc4      	adds	r4, r0, #3
 8003a3c:	f024 0403 	bic.w	r4, r4, #3
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d0f8      	beq.n	8003a36 <sbrk_aligned+0x22>
 8003a44:	1a21      	subs	r1, r4, r0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 fb92 	bl	8004170 <_sbrk_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d1f2      	bne.n	8003a36 <sbrk_aligned+0x22>
 8003a50:	e7ef      	b.n	8003a32 <sbrk_aligned+0x1e>
 8003a52:	bf00      	nop
 8003a54:	20000738 	.word	0x20000738

08003a58 <_malloc_r>:
 8003a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a5c:	1ccd      	adds	r5, r1, #3
 8003a5e:	f025 0503 	bic.w	r5, r5, #3
 8003a62:	3508      	adds	r5, #8
 8003a64:	2d0c      	cmp	r5, #12
 8003a66:	bf38      	it	cc
 8003a68:	250c      	movcc	r5, #12
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	4606      	mov	r6, r0
 8003a6e:	db01      	blt.n	8003a74 <_malloc_r+0x1c>
 8003a70:	42a9      	cmp	r1, r5
 8003a72:	d904      	bls.n	8003a7e <_malloc_r+0x26>
 8003a74:	230c      	movs	r3, #12
 8003a76:	6033      	str	r3, [r6, #0]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b54 <_malloc_r+0xfc>
 8003a82:	f000 f869 	bl	8003b58 <__malloc_lock>
 8003a86:	f8d8 3000 	ldr.w	r3, [r8]
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	bb44      	cbnz	r4, 8003ae0 <_malloc_r+0x88>
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	f7ff ffbf 	bl	8003a14 <sbrk_aligned>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	4604      	mov	r4, r0
 8003a9a:	d158      	bne.n	8003b4e <_malloc_r+0xf6>
 8003a9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003aa0:	4627      	mov	r7, r4
 8003aa2:	2f00      	cmp	r7, #0
 8003aa4:	d143      	bne.n	8003b2e <_malloc_r+0xd6>
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	d04b      	beq.n	8003b42 <_malloc_r+0xea>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	4639      	mov	r1, r7
 8003aae:	4630      	mov	r0, r6
 8003ab0:	eb04 0903 	add.w	r9, r4, r3
 8003ab4:	f000 fb5c 	bl	8004170 <_sbrk_r>
 8003ab8:	4581      	cmp	r9, r0
 8003aba:	d142      	bne.n	8003b42 <_malloc_r+0xea>
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	1a6d      	subs	r5, r5, r1
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7ff ffa6 	bl	8003a14 <sbrk_aligned>
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d03a      	beq.n	8003b42 <_malloc_r+0xea>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	442b      	add	r3, r5
 8003ad0:	6023      	str	r3, [r4, #0]
 8003ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	bb62      	cbnz	r2, 8003b34 <_malloc_r+0xdc>
 8003ada:	f8c8 7000 	str.w	r7, [r8]
 8003ade:	e00f      	b.n	8003b00 <_malloc_r+0xa8>
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	1b52      	subs	r2, r2, r5
 8003ae4:	d420      	bmi.n	8003b28 <_malloc_r+0xd0>
 8003ae6:	2a0b      	cmp	r2, #11
 8003ae8:	d917      	bls.n	8003b1a <_malloc_r+0xc2>
 8003aea:	1961      	adds	r1, r4, r5
 8003aec:	42a3      	cmp	r3, r4
 8003aee:	6025      	str	r5, [r4, #0]
 8003af0:	bf18      	it	ne
 8003af2:	6059      	strne	r1, [r3, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	bf08      	it	eq
 8003af8:	f8c8 1000 	streq.w	r1, [r8]
 8003afc:	5162      	str	r2, [r4, r5]
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	4630      	mov	r0, r6
 8003b02:	f000 f82f 	bl	8003b64 <__malloc_unlock>
 8003b06:	f104 000b 	add.w	r0, r4, #11
 8003b0a:	1d23      	adds	r3, r4, #4
 8003b0c:	f020 0007 	bic.w	r0, r0, #7
 8003b10:	1ac2      	subs	r2, r0, r3
 8003b12:	bf1c      	itt	ne
 8003b14:	1a1b      	subne	r3, r3, r0
 8003b16:	50a3      	strne	r3, [r4, r2]
 8003b18:	e7af      	b.n	8003a7a <_malloc_r+0x22>
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	bf0c      	ite	eq
 8003b20:	f8c8 2000 	streq.w	r2, [r8]
 8003b24:	605a      	strne	r2, [r3, #4]
 8003b26:	e7eb      	b.n	8003b00 <_malloc_r+0xa8>
 8003b28:	4623      	mov	r3, r4
 8003b2a:	6864      	ldr	r4, [r4, #4]
 8003b2c:	e7ae      	b.n	8003a8c <_malloc_r+0x34>
 8003b2e:	463c      	mov	r4, r7
 8003b30:	687f      	ldr	r7, [r7, #4]
 8003b32:	e7b6      	b.n	8003aa2 <_malloc_r+0x4a>
 8003b34:	461a      	mov	r2, r3
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	42a3      	cmp	r3, r4
 8003b3a:	d1fb      	bne.n	8003b34 <_malloc_r+0xdc>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6053      	str	r3, [r2, #4]
 8003b40:	e7de      	b.n	8003b00 <_malloc_r+0xa8>
 8003b42:	230c      	movs	r3, #12
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	4630      	mov	r0, r6
 8003b48:	f000 f80c 	bl	8003b64 <__malloc_unlock>
 8003b4c:	e794      	b.n	8003a78 <_malloc_r+0x20>
 8003b4e:	6005      	str	r5, [r0, #0]
 8003b50:	e7d6      	b.n	8003b00 <_malloc_r+0xa8>
 8003b52:	bf00      	nop
 8003b54:	2000073c 	.word	0x2000073c

08003b58 <__malloc_lock>:
 8003b58:	4801      	ldr	r0, [pc, #4]	@ (8003b60 <__malloc_lock+0x8>)
 8003b5a:	f7ff bf0f 	b.w	800397c <__retarget_lock_acquire_recursive>
 8003b5e:	bf00      	nop
 8003b60:	20000734 	.word	0x20000734

08003b64 <__malloc_unlock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	@ (8003b6c <__malloc_unlock+0x8>)
 8003b66:	f7ff bf0a 	b.w	800397e <__retarget_lock_release_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000734 	.word	0x20000734

08003b70 <__ssputs_r>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	688e      	ldr	r6, [r1, #8]
 8003b76:	461f      	mov	r7, r3
 8003b78:	42be      	cmp	r6, r7
 8003b7a:	680b      	ldr	r3, [r1, #0]
 8003b7c:	4682      	mov	sl, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4690      	mov	r8, r2
 8003b82:	d82d      	bhi.n	8003be0 <__ssputs_r+0x70>
 8003b84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b8c:	d026      	beq.n	8003bdc <__ssputs_r+0x6c>
 8003b8e:	6965      	ldr	r5, [r4, #20]
 8003b90:	6909      	ldr	r1, [r1, #16]
 8003b92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b96:	eba3 0901 	sub.w	r9, r3, r1
 8003b9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b9e:	1c7b      	adds	r3, r7, #1
 8003ba0:	444b      	add	r3, r9
 8003ba2:	106d      	asrs	r5, r5, #1
 8003ba4:	429d      	cmp	r5, r3
 8003ba6:	bf38      	it	cc
 8003ba8:	461d      	movcc	r5, r3
 8003baa:	0553      	lsls	r3, r2, #21
 8003bac:	d527      	bpl.n	8003bfe <__ssputs_r+0x8e>
 8003bae:	4629      	mov	r1, r5
 8003bb0:	f7ff ff52 	bl	8003a58 <_malloc_r>
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	b360      	cbz	r0, 8003c12 <__ssputs_r+0xa2>
 8003bb8:	6921      	ldr	r1, [r4, #16]
 8003bba:	464a      	mov	r2, r9
 8003bbc:	f000 fae8 	bl	8004190 <memcpy>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bca:	81a3      	strh	r3, [r4, #12]
 8003bcc:	6126      	str	r6, [r4, #16]
 8003bce:	6165      	str	r5, [r4, #20]
 8003bd0:	444e      	add	r6, r9
 8003bd2:	eba5 0509 	sub.w	r5, r5, r9
 8003bd6:	6026      	str	r6, [r4, #0]
 8003bd8:	60a5      	str	r5, [r4, #8]
 8003bda:	463e      	mov	r6, r7
 8003bdc:	42be      	cmp	r6, r7
 8003bde:	d900      	bls.n	8003be2 <__ssputs_r+0x72>
 8003be0:	463e      	mov	r6, r7
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	4632      	mov	r2, r6
 8003be6:	4641      	mov	r1, r8
 8003be8:	f000 faa8 	bl	800413c <memmove>
 8003bec:	68a3      	ldr	r3, [r4, #8]
 8003bee:	1b9b      	subs	r3, r3, r6
 8003bf0:	60a3      	str	r3, [r4, #8]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	4433      	add	r3, r6
 8003bf6:	6023      	str	r3, [r4, #0]
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bfe:	462a      	mov	r2, r5
 8003c00:	f000 fad4 	bl	80041ac <_realloc_r>
 8003c04:	4606      	mov	r6, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1e0      	bne.n	8003bcc <__ssputs_r+0x5c>
 8003c0a:	6921      	ldr	r1, [r4, #16]
 8003c0c:	4650      	mov	r0, sl
 8003c0e:	f7ff feb7 	bl	8003980 <_free_r>
 8003c12:	230c      	movs	r3, #12
 8003c14:	f8ca 3000 	str.w	r3, [sl]
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	e7e9      	b.n	8003bfa <__ssputs_r+0x8a>
	...

08003c28 <_svfiprintf_r>:
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	4698      	mov	r8, r3
 8003c2e:	898b      	ldrh	r3, [r1, #12]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	b09d      	sub	sp, #116	@ 0x74
 8003c34:	4607      	mov	r7, r0
 8003c36:	460d      	mov	r5, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	d510      	bpl.n	8003c5e <_svfiprintf_r+0x36>
 8003c3c:	690b      	ldr	r3, [r1, #16]
 8003c3e:	b973      	cbnz	r3, 8003c5e <_svfiprintf_r+0x36>
 8003c40:	2140      	movs	r1, #64	@ 0x40
 8003c42:	f7ff ff09 	bl	8003a58 <_malloc_r>
 8003c46:	6028      	str	r0, [r5, #0]
 8003c48:	6128      	str	r0, [r5, #16]
 8003c4a:	b930      	cbnz	r0, 8003c5a <_svfiprintf_r+0x32>
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	b01d      	add	sp, #116	@ 0x74
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	2340      	movs	r3, #64	@ 0x40
 8003c5c:	616b      	str	r3, [r5, #20]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c62:	2320      	movs	r3, #32
 8003c64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c6c:	2330      	movs	r3, #48	@ 0x30
 8003c6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e0c <_svfiprintf_r+0x1e4>
 8003c72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c76:	f04f 0901 	mov.w	r9, #1
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c82:	b10a      	cbz	r2, 8003c88 <_svfiprintf_r+0x60>
 8003c84:	2a25      	cmp	r2, #37	@ 0x25
 8003c86:	d1f9      	bne.n	8003c7c <_svfiprintf_r+0x54>
 8003c88:	ebba 0b04 	subs.w	fp, sl, r4
 8003c8c:	d00b      	beq.n	8003ca6 <_svfiprintf_r+0x7e>
 8003c8e:	465b      	mov	r3, fp
 8003c90:	4622      	mov	r2, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ff6b 	bl	8003b70 <__ssputs_r>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	f000 80a7 	beq.w	8003dee <_svfiprintf_r+0x1c6>
 8003ca0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ca2:	445a      	add	r2, fp
 8003ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 809f 	beq.w	8003dee <_svfiprintf_r+0x1c6>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cba:	f10a 0a01 	add.w	sl, sl, #1
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	9307      	str	r3, [sp, #28]
 8003cc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cc8:	4654      	mov	r4, sl
 8003cca:	2205      	movs	r2, #5
 8003ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd0:	484e      	ldr	r0, [pc, #312]	@ (8003e0c <_svfiprintf_r+0x1e4>)
 8003cd2:	f7fc fa9d 	bl	8000210 <memchr>
 8003cd6:	9a04      	ldr	r2, [sp, #16]
 8003cd8:	b9d8      	cbnz	r0, 8003d12 <_svfiprintf_r+0xea>
 8003cda:	06d0      	lsls	r0, r2, #27
 8003cdc:	bf44      	itt	mi
 8003cde:	2320      	movmi	r3, #32
 8003ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ce4:	0711      	lsls	r1, r2, #28
 8003ce6:	bf44      	itt	mi
 8003ce8:	232b      	movmi	r3, #43	@ 0x2b
 8003cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cee:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cf4:	d015      	beq.n	8003d22 <_svfiprintf_r+0xfa>
 8003cf6:	9a07      	ldr	r2, [sp, #28]
 8003cf8:	4654      	mov	r4, sl
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f04f 0c0a 	mov.w	ip, #10
 8003d00:	4621      	mov	r1, r4
 8003d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d06:	3b30      	subs	r3, #48	@ 0x30
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d94b      	bls.n	8003da4 <_svfiprintf_r+0x17c>
 8003d0c:	b1b0      	cbz	r0, 8003d3c <_svfiprintf_r+0x114>
 8003d0e:	9207      	str	r2, [sp, #28]
 8003d10:	e014      	b.n	8003d3c <_svfiprintf_r+0x114>
 8003d12:	eba0 0308 	sub.w	r3, r0, r8
 8003d16:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	9304      	str	r3, [sp, #16]
 8003d1e:	46a2      	mov	sl, r4
 8003d20:	e7d2      	b.n	8003cc8 <_svfiprintf_r+0xa0>
 8003d22:	9b03      	ldr	r3, [sp, #12]
 8003d24:	1d19      	adds	r1, r3, #4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	9103      	str	r1, [sp, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bfbb      	ittet	lt
 8003d2e:	425b      	neglt	r3, r3
 8003d30:	f042 0202 	orrlt.w	r2, r2, #2
 8003d34:	9307      	strge	r3, [sp, #28]
 8003d36:	9307      	strlt	r3, [sp, #28]
 8003d38:	bfb8      	it	lt
 8003d3a:	9204      	strlt	r2, [sp, #16]
 8003d3c:	7823      	ldrb	r3, [r4, #0]
 8003d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d40:	d10a      	bne.n	8003d58 <_svfiprintf_r+0x130>
 8003d42:	7863      	ldrb	r3, [r4, #1]
 8003d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d46:	d132      	bne.n	8003dae <_svfiprintf_r+0x186>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	9203      	str	r2, [sp, #12]
 8003d50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d54:	3402      	adds	r4, #2
 8003d56:	9305      	str	r3, [sp, #20]
 8003d58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e1c <_svfiprintf_r+0x1f4>
 8003d5c:	7821      	ldrb	r1, [r4, #0]
 8003d5e:	2203      	movs	r2, #3
 8003d60:	4650      	mov	r0, sl
 8003d62:	f7fc fa55 	bl	8000210 <memchr>
 8003d66:	b138      	cbz	r0, 8003d78 <_svfiprintf_r+0x150>
 8003d68:	9b04      	ldr	r3, [sp, #16]
 8003d6a:	eba0 000a 	sub.w	r0, r0, sl
 8003d6e:	2240      	movs	r2, #64	@ 0x40
 8003d70:	4082      	lsls	r2, r0
 8003d72:	4313      	orrs	r3, r2
 8003d74:	3401      	adds	r4, #1
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7c:	4824      	ldr	r0, [pc, #144]	@ (8003e10 <_svfiprintf_r+0x1e8>)
 8003d7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d82:	2206      	movs	r2, #6
 8003d84:	f7fc fa44 	bl	8000210 <memchr>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d036      	beq.n	8003dfa <_svfiprintf_r+0x1d2>
 8003d8c:	4b21      	ldr	r3, [pc, #132]	@ (8003e14 <_svfiprintf_r+0x1ec>)
 8003d8e:	bb1b      	cbnz	r3, 8003dd8 <_svfiprintf_r+0x1b0>
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	3307      	adds	r3, #7
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	3308      	adds	r3, #8
 8003d9a:	9303      	str	r3, [sp, #12]
 8003d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d9e:	4433      	add	r3, r6
 8003da0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003da2:	e76a      	b.n	8003c7a <_svfiprintf_r+0x52>
 8003da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003da8:	460c      	mov	r4, r1
 8003daa:	2001      	movs	r0, #1
 8003dac:	e7a8      	b.n	8003d00 <_svfiprintf_r+0xd8>
 8003dae:	2300      	movs	r3, #0
 8003db0:	3401      	adds	r4, #1
 8003db2:	9305      	str	r3, [sp, #20]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0c0a 	mov.w	ip, #10
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc0:	3a30      	subs	r2, #48	@ 0x30
 8003dc2:	2a09      	cmp	r2, #9
 8003dc4:	d903      	bls.n	8003dce <_svfiprintf_r+0x1a6>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0c6      	beq.n	8003d58 <_svfiprintf_r+0x130>
 8003dca:	9105      	str	r1, [sp, #20]
 8003dcc:	e7c4      	b.n	8003d58 <_svfiprintf_r+0x130>
 8003dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e7f0      	b.n	8003dba <_svfiprintf_r+0x192>
 8003dd8:	ab03      	add	r3, sp, #12
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	462a      	mov	r2, r5
 8003dde:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <_svfiprintf_r+0x1f0>)
 8003de0:	a904      	add	r1, sp, #16
 8003de2:	4638      	mov	r0, r7
 8003de4:	f3af 8000 	nop.w
 8003de8:	1c42      	adds	r2, r0, #1
 8003dea:	4606      	mov	r6, r0
 8003dec:	d1d6      	bne.n	8003d9c <_svfiprintf_r+0x174>
 8003dee:	89ab      	ldrh	r3, [r5, #12]
 8003df0:	065b      	lsls	r3, r3, #25
 8003df2:	f53f af2d 	bmi.w	8003c50 <_svfiprintf_r+0x28>
 8003df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003df8:	e72c      	b.n	8003c54 <_svfiprintf_r+0x2c>
 8003dfa:	ab03      	add	r3, sp, #12
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	462a      	mov	r2, r5
 8003e00:	4b05      	ldr	r3, [pc, #20]	@ (8003e18 <_svfiprintf_r+0x1f0>)
 8003e02:	a904      	add	r1, sp, #16
 8003e04:	4638      	mov	r0, r7
 8003e06:	f000 f879 	bl	8003efc <_printf_i>
 8003e0a:	e7ed      	b.n	8003de8 <_svfiprintf_r+0x1c0>
 8003e0c:	0800425c 	.word	0x0800425c
 8003e10:	08004266 	.word	0x08004266
 8003e14:	00000000 	.word	0x00000000
 8003e18:	08003b71 	.word	0x08003b71
 8003e1c:	08004262 	.word	0x08004262

08003e20 <_printf_common>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	4616      	mov	r6, r2
 8003e26:	4698      	mov	r8, r3
 8003e28:	688a      	ldr	r2, [r1, #8]
 8003e2a:	690b      	ldr	r3, [r1, #16]
 8003e2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bfb8      	it	lt
 8003e34:	4613      	movlt	r3, r2
 8003e36:	6033      	str	r3, [r6, #0]
 8003e38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	b10a      	cbz	r2, 8003e46 <_printf_common+0x26>
 8003e42:	3301      	adds	r3, #1
 8003e44:	6033      	str	r3, [r6, #0]
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	0699      	lsls	r1, r3, #26
 8003e4a:	bf42      	ittt	mi
 8003e4c:	6833      	ldrmi	r3, [r6, #0]
 8003e4e:	3302      	addmi	r3, #2
 8003e50:	6033      	strmi	r3, [r6, #0]
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	f015 0506 	ands.w	r5, r5, #6
 8003e58:	d106      	bne.n	8003e68 <_printf_common+0x48>
 8003e5a:	f104 0a19 	add.w	sl, r4, #25
 8003e5e:	68e3      	ldr	r3, [r4, #12]
 8003e60:	6832      	ldr	r2, [r6, #0]
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	42ab      	cmp	r3, r5
 8003e66:	dc26      	bgt.n	8003eb6 <_printf_common+0x96>
 8003e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	3b00      	subs	r3, #0
 8003e70:	bf18      	it	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	0692      	lsls	r2, r2, #26
 8003e76:	d42b      	bmi.n	8003ed0 <_printf_common+0xb0>
 8003e78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	4638      	mov	r0, r7
 8003e80:	47c8      	blx	r9
 8003e82:	3001      	adds	r0, #1
 8003e84:	d01e      	beq.n	8003ec4 <_printf_common+0xa4>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	f003 0306 	and.w	r3, r3, #6
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf02      	ittt	eq
 8003e92:	68e5      	ldreq	r5, [r4, #12]
 8003e94:	6833      	ldreq	r3, [r6, #0]
 8003e96:	1aed      	subeq	r5, r5, r3
 8003e98:	68a3      	ldr	r3, [r4, #8]
 8003e9a:	bf0c      	ite	eq
 8003e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea0:	2500      	movne	r5, #0
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	bfc4      	itt	gt
 8003ea6:	1a9b      	subgt	r3, r3, r2
 8003ea8:	18ed      	addgt	r5, r5, r3
 8003eaa:	2600      	movs	r6, #0
 8003eac:	341a      	adds	r4, #26
 8003eae:	42b5      	cmp	r5, r6
 8003eb0:	d11a      	bne.n	8003ee8 <_printf_common+0xc8>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e008      	b.n	8003ec8 <_printf_common+0xa8>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4652      	mov	r2, sl
 8003eba:	4641      	mov	r1, r8
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	47c8      	blx	r9
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d103      	bne.n	8003ecc <_printf_common+0xac>
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ecc:	3501      	adds	r5, #1
 8003ece:	e7c6      	b.n	8003e5e <_printf_common+0x3e>
 8003ed0:	18e1      	adds	r1, r4, r3
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	2030      	movs	r0, #48	@ 0x30
 8003ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eda:	4422      	add	r2, r4
 8003edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ee0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	e7c7      	b.n	8003e78 <_printf_common+0x58>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4622      	mov	r2, r4
 8003eec:	4641      	mov	r1, r8
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d0e6      	beq.n	8003ec4 <_printf_common+0xa4>
 8003ef6:	3601      	adds	r6, #1
 8003ef8:	e7d9      	b.n	8003eae <_printf_common+0x8e>
	...

08003efc <_printf_i>:
 8003efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	7e0f      	ldrb	r7, [r1, #24]
 8003f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f04:	2f78      	cmp	r7, #120	@ 0x78
 8003f06:	4691      	mov	r9, r2
 8003f08:	4680      	mov	r8, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	469a      	mov	sl, r3
 8003f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f12:	d807      	bhi.n	8003f24 <_printf_i+0x28>
 8003f14:	2f62      	cmp	r7, #98	@ 0x62
 8003f16:	d80a      	bhi.n	8003f2e <_printf_i+0x32>
 8003f18:	2f00      	cmp	r7, #0
 8003f1a:	f000 80d2 	beq.w	80040c2 <_printf_i+0x1c6>
 8003f1e:	2f58      	cmp	r7, #88	@ 0x58
 8003f20:	f000 80b9 	beq.w	8004096 <_printf_i+0x19a>
 8003f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f2c:	e03a      	b.n	8003fa4 <_printf_i+0xa8>
 8003f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f32:	2b15      	cmp	r3, #21
 8003f34:	d8f6      	bhi.n	8003f24 <_printf_i+0x28>
 8003f36:	a101      	add	r1, pc, #4	@ (adr r1, 8003f3c <_printf_i+0x40>)
 8003f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f3c:	08003f95 	.word	0x08003f95
 8003f40:	08003fa9 	.word	0x08003fa9
 8003f44:	08003f25 	.word	0x08003f25
 8003f48:	08003f25 	.word	0x08003f25
 8003f4c:	08003f25 	.word	0x08003f25
 8003f50:	08003f25 	.word	0x08003f25
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003f25 	.word	0x08003f25
 8003f5c:	08003f25 	.word	0x08003f25
 8003f60:	08003f25 	.word	0x08003f25
 8003f64:	08003f25 	.word	0x08003f25
 8003f68:	080040a9 	.word	0x080040a9
 8003f6c:	08003fd3 	.word	0x08003fd3
 8003f70:	08004063 	.word	0x08004063
 8003f74:	08003f25 	.word	0x08003f25
 8003f78:	08003f25 	.word	0x08003f25
 8003f7c:	080040cb 	.word	0x080040cb
 8003f80:	08003f25 	.word	0x08003f25
 8003f84:	08003fd3 	.word	0x08003fd3
 8003f88:	08003f25 	.word	0x08003f25
 8003f8c:	08003f25 	.word	0x08003f25
 8003f90:	0800406b 	.word	0x0800406b
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6032      	str	r2, [r6, #0]
 8003f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e09d      	b.n	80040e4 <_printf_i+0x1e8>
 8003fa8:	6833      	ldr	r3, [r6, #0]
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	1d19      	adds	r1, r3, #4
 8003fae:	6031      	str	r1, [r6, #0]
 8003fb0:	0606      	lsls	r6, r0, #24
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0xbc>
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	e003      	b.n	8003fc0 <_printf_i+0xc4>
 8003fb8:	0645      	lsls	r5, r0, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0xb8>
 8003fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	da03      	bge.n	8003fcc <_printf_i+0xd0>
 8003fc4:	232d      	movs	r3, #45	@ 0x2d
 8003fc6:	426d      	negs	r5, r5
 8003fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fcc:	4859      	ldr	r0, [pc, #356]	@ (8004134 <_printf_i+0x238>)
 8003fce:	230a      	movs	r3, #10
 8003fd0:	e011      	b.n	8003ff6 <_printf_i+0xfa>
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	6833      	ldr	r3, [r6, #0]
 8003fd6:	0608      	lsls	r0, r1, #24
 8003fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fdc:	d402      	bmi.n	8003fe4 <_printf_i+0xe8>
 8003fde:	0649      	lsls	r1, r1, #25
 8003fe0:	bf48      	it	mi
 8003fe2:	b2ad      	uxthmi	r5, r5
 8003fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fe6:	4853      	ldr	r0, [pc, #332]	@ (8004134 <_printf_i+0x238>)
 8003fe8:	6033      	str	r3, [r6, #0]
 8003fea:	bf14      	ite	ne
 8003fec:	230a      	movne	r3, #10
 8003fee:	2308      	moveq	r3, #8
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ff6:	6866      	ldr	r6, [r4, #4]
 8003ff8:	60a6      	str	r6, [r4, #8]
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	bfa2      	ittt	ge
 8003ffe:	6821      	ldrge	r1, [r4, #0]
 8004000:	f021 0104 	bicge.w	r1, r1, #4
 8004004:	6021      	strge	r1, [r4, #0]
 8004006:	b90d      	cbnz	r5, 800400c <_printf_i+0x110>
 8004008:	2e00      	cmp	r6, #0
 800400a:	d04b      	beq.n	80040a4 <_printf_i+0x1a8>
 800400c:	4616      	mov	r6, r2
 800400e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004012:	fb03 5711 	mls	r7, r3, r1, r5
 8004016:	5dc7      	ldrb	r7, [r0, r7]
 8004018:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800401c:	462f      	mov	r7, r5
 800401e:	42bb      	cmp	r3, r7
 8004020:	460d      	mov	r5, r1
 8004022:	d9f4      	bls.n	800400e <_printf_i+0x112>
 8004024:	2b08      	cmp	r3, #8
 8004026:	d10b      	bne.n	8004040 <_printf_i+0x144>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	07df      	lsls	r7, r3, #31
 800402c:	d508      	bpl.n	8004040 <_printf_i+0x144>
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	6861      	ldr	r1, [r4, #4]
 8004032:	4299      	cmp	r1, r3
 8004034:	bfde      	ittt	le
 8004036:	2330      	movle	r3, #48	@ 0x30
 8004038:	f806 3c01 	strble.w	r3, [r6, #-1]
 800403c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004040:	1b92      	subs	r2, r2, r6
 8004042:	6122      	str	r2, [r4, #16]
 8004044:	f8cd a000 	str.w	sl, [sp]
 8004048:	464b      	mov	r3, r9
 800404a:	aa03      	add	r2, sp, #12
 800404c:	4621      	mov	r1, r4
 800404e:	4640      	mov	r0, r8
 8004050:	f7ff fee6 	bl	8003e20 <_printf_common>
 8004054:	3001      	adds	r0, #1
 8004056:	d14a      	bne.n	80040ee <_printf_i+0x1f2>
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	b004      	add	sp, #16
 800405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f043 0320 	orr.w	r3, r3, #32
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	4833      	ldr	r0, [pc, #204]	@ (8004138 <_printf_i+0x23c>)
 800406c:	2778      	movs	r7, #120	@ 0x78
 800406e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6831      	ldr	r1, [r6, #0]
 8004076:	061f      	lsls	r7, r3, #24
 8004078:	f851 5b04 	ldr.w	r5, [r1], #4
 800407c:	d402      	bmi.n	8004084 <_printf_i+0x188>
 800407e:	065f      	lsls	r7, r3, #25
 8004080:	bf48      	it	mi
 8004082:	b2ad      	uxthmi	r5, r5
 8004084:	6031      	str	r1, [r6, #0]
 8004086:	07d9      	lsls	r1, r3, #31
 8004088:	bf44      	itt	mi
 800408a:	f043 0320 	orrmi.w	r3, r3, #32
 800408e:	6023      	strmi	r3, [r4, #0]
 8004090:	b11d      	cbz	r5, 800409a <_printf_i+0x19e>
 8004092:	2310      	movs	r3, #16
 8004094:	e7ac      	b.n	8003ff0 <_printf_i+0xf4>
 8004096:	4827      	ldr	r0, [pc, #156]	@ (8004134 <_printf_i+0x238>)
 8004098:	e7e9      	b.n	800406e <_printf_i+0x172>
 800409a:	6823      	ldr	r3, [r4, #0]
 800409c:	f023 0320 	bic.w	r3, r3, #32
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	e7f6      	b.n	8004092 <_printf_i+0x196>
 80040a4:	4616      	mov	r6, r2
 80040a6:	e7bd      	b.n	8004024 <_printf_i+0x128>
 80040a8:	6833      	ldr	r3, [r6, #0]
 80040aa:	6825      	ldr	r5, [r4, #0]
 80040ac:	6961      	ldr	r1, [r4, #20]
 80040ae:	1d18      	adds	r0, r3, #4
 80040b0:	6030      	str	r0, [r6, #0]
 80040b2:	062e      	lsls	r6, r5, #24
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	d501      	bpl.n	80040bc <_printf_i+0x1c0>
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	e002      	b.n	80040c2 <_printf_i+0x1c6>
 80040bc:	0668      	lsls	r0, r5, #25
 80040be:	d5fb      	bpl.n	80040b8 <_printf_i+0x1bc>
 80040c0:	8019      	strh	r1, [r3, #0]
 80040c2:	2300      	movs	r3, #0
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	4616      	mov	r6, r2
 80040c8:	e7bc      	b.n	8004044 <_printf_i+0x148>
 80040ca:	6833      	ldr	r3, [r6, #0]
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	6032      	str	r2, [r6, #0]
 80040d0:	681e      	ldr	r6, [r3, #0]
 80040d2:	6862      	ldr	r2, [r4, #4]
 80040d4:	2100      	movs	r1, #0
 80040d6:	4630      	mov	r0, r6
 80040d8:	f7fc f89a 	bl	8000210 <memchr>
 80040dc:	b108      	cbz	r0, 80040e2 <_printf_i+0x1e6>
 80040de:	1b80      	subs	r0, r0, r6
 80040e0:	6060      	str	r0, [r4, #4]
 80040e2:	6863      	ldr	r3, [r4, #4]
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	2300      	movs	r3, #0
 80040e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ec:	e7aa      	b.n	8004044 <_printf_i+0x148>
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	4632      	mov	r2, r6
 80040f2:	4649      	mov	r1, r9
 80040f4:	4640      	mov	r0, r8
 80040f6:	47d0      	blx	sl
 80040f8:	3001      	adds	r0, #1
 80040fa:	d0ad      	beq.n	8004058 <_printf_i+0x15c>
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	079b      	lsls	r3, r3, #30
 8004100:	d413      	bmi.n	800412a <_printf_i+0x22e>
 8004102:	68e0      	ldr	r0, [r4, #12]
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	4298      	cmp	r0, r3
 8004108:	bfb8      	it	lt
 800410a:	4618      	movlt	r0, r3
 800410c:	e7a6      	b.n	800405c <_printf_i+0x160>
 800410e:	2301      	movs	r3, #1
 8004110:	4632      	mov	r2, r6
 8004112:	4649      	mov	r1, r9
 8004114:	4640      	mov	r0, r8
 8004116:	47d0      	blx	sl
 8004118:	3001      	adds	r0, #1
 800411a:	d09d      	beq.n	8004058 <_printf_i+0x15c>
 800411c:	3501      	adds	r5, #1
 800411e:	68e3      	ldr	r3, [r4, #12]
 8004120:	9903      	ldr	r1, [sp, #12]
 8004122:	1a5b      	subs	r3, r3, r1
 8004124:	42ab      	cmp	r3, r5
 8004126:	dcf2      	bgt.n	800410e <_printf_i+0x212>
 8004128:	e7eb      	b.n	8004102 <_printf_i+0x206>
 800412a:	2500      	movs	r5, #0
 800412c:	f104 0619 	add.w	r6, r4, #25
 8004130:	e7f5      	b.n	800411e <_printf_i+0x222>
 8004132:	bf00      	nop
 8004134:	0800426d 	.word	0x0800426d
 8004138:	0800427e 	.word	0x0800427e

0800413c <memmove>:
 800413c:	4288      	cmp	r0, r1
 800413e:	b510      	push	{r4, lr}
 8004140:	eb01 0402 	add.w	r4, r1, r2
 8004144:	d902      	bls.n	800414c <memmove+0x10>
 8004146:	4284      	cmp	r4, r0
 8004148:	4623      	mov	r3, r4
 800414a:	d807      	bhi.n	800415c <memmove+0x20>
 800414c:	1e43      	subs	r3, r0, #1
 800414e:	42a1      	cmp	r1, r4
 8004150:	d008      	beq.n	8004164 <memmove+0x28>
 8004152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800415a:	e7f8      	b.n	800414e <memmove+0x12>
 800415c:	4402      	add	r2, r0
 800415e:	4601      	mov	r1, r0
 8004160:	428a      	cmp	r2, r1
 8004162:	d100      	bne.n	8004166 <memmove+0x2a>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800416a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800416e:	e7f7      	b.n	8004160 <memmove+0x24>

08004170 <_sbrk_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d06      	ldr	r5, [pc, #24]	@ (800418c <_sbrk_r+0x1c>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	602b      	str	r3, [r5, #0]
 800417c:	f7fc fc72 	bl	8000a64 <_sbrk>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_sbrk_r+0x1a>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_sbrk_r+0x1a>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000730 	.word	0x20000730

08004190 <memcpy>:
 8004190:	440a      	add	r2, r1
 8004192:	4291      	cmp	r1, r2
 8004194:	f100 33ff 	add.w	r3, r0, #4294967295
 8004198:	d100      	bne.n	800419c <memcpy+0xc>
 800419a:	4770      	bx	lr
 800419c:	b510      	push	{r4, lr}
 800419e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041a6:	4291      	cmp	r1, r2
 80041a8:	d1f9      	bne.n	800419e <memcpy+0xe>
 80041aa:	bd10      	pop	{r4, pc}

080041ac <_realloc_r>:
 80041ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b0:	4680      	mov	r8, r0
 80041b2:	4615      	mov	r5, r2
 80041b4:	460c      	mov	r4, r1
 80041b6:	b921      	cbnz	r1, 80041c2 <_realloc_r+0x16>
 80041b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041bc:	4611      	mov	r1, r2
 80041be:	f7ff bc4b 	b.w	8003a58 <_malloc_r>
 80041c2:	b92a      	cbnz	r2, 80041d0 <_realloc_r+0x24>
 80041c4:	f7ff fbdc 	bl	8003980 <_free_r>
 80041c8:	2400      	movs	r4, #0
 80041ca:	4620      	mov	r0, r4
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	f000 f81a 	bl	8004208 <_malloc_usable_size_r>
 80041d4:	4285      	cmp	r5, r0
 80041d6:	4606      	mov	r6, r0
 80041d8:	d802      	bhi.n	80041e0 <_realloc_r+0x34>
 80041da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041de:	d8f4      	bhi.n	80041ca <_realloc_r+0x1e>
 80041e0:	4629      	mov	r1, r5
 80041e2:	4640      	mov	r0, r8
 80041e4:	f7ff fc38 	bl	8003a58 <_malloc_r>
 80041e8:	4607      	mov	r7, r0
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d0ec      	beq.n	80041c8 <_realloc_r+0x1c>
 80041ee:	42b5      	cmp	r5, r6
 80041f0:	462a      	mov	r2, r5
 80041f2:	4621      	mov	r1, r4
 80041f4:	bf28      	it	cs
 80041f6:	4632      	movcs	r2, r6
 80041f8:	f7ff ffca 	bl	8004190 <memcpy>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4640      	mov	r0, r8
 8004200:	f7ff fbbe 	bl	8003980 <_free_r>
 8004204:	463c      	mov	r4, r7
 8004206:	e7e0      	b.n	80041ca <_realloc_r+0x1e>

08004208 <_malloc_usable_size_r>:
 8004208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800420c:	1f18      	subs	r0, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	bfbc      	itt	lt
 8004212:	580b      	ldrlt	r3, [r1, r0]
 8004214:	18c0      	addlt	r0, r0, r3
 8004216:	4770      	bx	lr

08004218 <_init>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr

08004224 <_fini>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr
