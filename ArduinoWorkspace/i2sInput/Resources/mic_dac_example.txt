#include <driver/i2s.h>

// Define the I2S pins for microphone and DAC
#define I2S_MIC_SERIAL_CLOCK GPIO_NUM_33
#define I2S_MIC_LEFT_RIGHT_CLOCK GPIO_NUM_25
#define I2S_MIC_SERIAL_DATA GPIO_NUM_32

#define I2S_DAC_SERIAL_DATA GPIO_NUM_22
#define I2S_DAC_SERIAL_CLOCK GPIO_NUM_26
#define I2S_DAC_LEFT_RIGHT_CLOCK GPIO_NUM_25 // Shared with microphone

// I2S configuration for the microphone input
i2s_config_t i2s_mic_config = {
  .mode = I2S_MODE_MASTER | I2S_MODE_RX,
  .sample_rate = 16000, // Adjust as necessary
  .bits_per_sample = I2S_BITS_PER_SAMPLE_32BIT, // Adjust according to microphone datasheet
  .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT, // or RIGHT if needed
  .communication_format = I2S_COMM_FORMAT_I2S,
  .intr_alloc_flags = 0, // Default interrupt priority
  .dma_buf_count = 8,
  .dma_buf_len = 64,
  .use_apll = false,
};

// I2S configuration for the DAC output
i2s_config_t i2s_dac_config = {
  .mode = I2S_MODE_MASTER | I2S_MODE_TX,
  .sample_rate = 16000, // Match microphone sample rate
  .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT, // Adjust according to DAC datasheet
  .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT, // DAC stereo format
  .communication_format = I2S_COMM_FORMAT_I2S_MSB,
  .intr_alloc_flags = 0,
  .dma_buf_count = 8,
  .dma_buf_len = 64,
  .use_apll = false,
};

// I2S pin configuration for microphone
i2s_pin_config_t pin_config_mic = {
  .bck_io_num = I2S_MIC_SERIAL_CLOCK,
  .ws_io_num = I2S_MIC_LEFT_RIGHT_CLOCK,
  .data_out_num = I2S_PIN_NO_CHANGE,
  .data_in_num = I2S_MIC_SERIAL_DATA
};

// I2S pin configuration for DAC
i2s_pin_config_t pin_config_dac = {
  .bck_io_num = I2S_DAC_SERIAL_CLOCK,
  .ws_io_num = I2S_DAC_LEFT_RIGHT_CLOCK,
  .data_out_num = I2S_DAC_SERIAL_DATA,
  .data_in_num = I2S_PIN_NO_CHANGE
};

void setup() {
  // Initialize I2S for microphone
  i2s_driver_install(I2S_NUM_0, &i2s_mic_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config_mic);

  // Initialize I2S for DAC
  i2s_driver_install(I2S_NUM_1, &i2s_dac_config, 0, NULL);
  i2s_set_pin(I2S_NUM_1, &pin_config_dac);
}

void loop() {
  size_t bytes_read, bytes_written;
  uint8_t i2s_read_buff[512];

  // Read data from the microphone
  i2s_read(I2S_NUM_0, &i2s_read_buff, sizeof(i2s_read_buff), &bytes_read, portMAX_DELAY);

  // Write data to the DAC
  i2s_write(I2S_NUM_1, &i2s_read_buff, bytes_read, &bytes_written, portMAX_DELAY);
}
